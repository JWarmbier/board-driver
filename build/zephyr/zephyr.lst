
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

08000000 <_vector_table>:
 8000000:	20001980 	.word	0x20001980
 8000004:	08003565 	.word	0x08003565
 8000008:	08007e29 	.word	0x08007e29
 800000c:	080034f5 	.word	0x080034f5
 8000010:	080034f5 	.word	0x080034f5
 8000014:	080034f5 	.word	0x080034f5
 8000018:	080034f5 	.word	0x080034f5
 800001c:	080034f5 	.word	0x080034f5
 8000020:	080034f5 	.word	0x080034f5
 8000024:	080034f5 	.word	0x080034f5
 8000028:	080034f5 	.word	0x080034f5
 800002c:	080033ed 	.word	0x080033ed
 8000030:	080034f5 	.word	0x080034f5
 8000034:	080034f5 	.word	0x080034f5
 8000038:	08003399 	.word	0x08003399
 800003c:	0800319d 	.word	0x0800319d

08000040 <_irq_vector_table>:
 8000040:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 8000050:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 8000060:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 8000070:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 8000080:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 8000090:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 80000a0:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 80000b0:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 80000c0:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 80000d0:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 80000e0:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 80000f0:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 8000100:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 8000110:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 8000120:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 8000130:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 8000140:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 8000150:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 8000160:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 8000170:	0800353d 0800353d 0800353d 0800353d     =5..=5..=5..=5..
 8000180:	0800353d 0800353d                       =5..=5..

Disassembly of section _TEXT_SECTION_NAME_2:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800019c:	f000 b80c 	b.w	80001b8 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f808 	bl	80001bc <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__aeabi_idiv0>:
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <__udivmoddi4>:
 80001bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80001c2:	4615      	mov	r5, r2
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	461e      	mov	r6, r3
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	f040 80cc 	bne.w	8000368 <__udivmoddi4+0x1ac>
 80001d0:	428a      	cmp	r2, r1
 80001d2:	fab2 fc82 	clz	ip, r2
 80001d6:	d94c      	bls.n	8000272 <__udivmoddi4+0xb6>
 80001d8:	f1bc 0f00 	cmp.w	ip, #0
 80001dc:	d00b      	beq.n	80001f6 <__udivmoddi4+0x3a>
 80001de:	f1cc 0820 	rsb	r8, ip, #32
 80001e2:	fa01 fe0c 	lsl.w	lr, r1, ip
 80001e6:	fa20 f808 	lsr.w	r8, r0, r8
 80001ea:	fa02 f50c 	lsl.w	r5, r2, ip
 80001ee:	ea48 0e0e 	orr.w	lr, r8, lr
 80001f2:	fa00 f40c 	lsl.w	r4, r0, ip
 80001f6:	ea4f 4915 	mov.w	r9, r5, lsr #16
 80001fa:	fa1f f885 	uxth.w	r8, r5
 80001fe:	fbbe faf9 	udiv	sl, lr, r9
 8000202:	0c21      	lsrs	r1, r4, #16
 8000204:	fb09 e31a 	mls	r3, r9, sl, lr
 8000208:	fb0a fb08 	mul.w	fp, sl, r8
 800020c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000210:	459b      	cmp	fp, r3
 8000212:	d92a      	bls.n	800026a <__udivmoddi4+0xae>
 8000214:	18eb      	adds	r3, r5, r3
 8000216:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 800021a:	d204      	bcs.n	8000226 <__udivmoddi4+0x6a>
 800021c:	459b      	cmp	fp, r3
 800021e:	d902      	bls.n	8000226 <__udivmoddi4+0x6a>
 8000220:	f1aa 0002 	sub.w	r0, sl, #2
 8000224:	442b      	add	r3, r5
 8000226:	eba3 030b 	sub.w	r3, r3, fp
 800022a:	b2a4      	uxth	r4, r4
 800022c:	fbb3 f2f9 	udiv	r2, r3, r9
 8000230:	fb09 3312 	mls	r3, r9, r2, r3
 8000234:	fb02 f808 	mul.w	r8, r2, r8
 8000238:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800023c:	45a0      	cmp	r8, r4
 800023e:	d916      	bls.n	800026e <__udivmoddi4+0xb2>
 8000240:	192c      	adds	r4, r5, r4
 8000242:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000246:	d203      	bcs.n	8000250 <__udivmoddi4+0x94>
 8000248:	45a0      	cmp	r8, r4
 800024a:	d901      	bls.n	8000250 <__udivmoddi4+0x94>
 800024c:	1e93      	subs	r3, r2, #2
 800024e:	442c      	add	r4, r5
 8000250:	eba4 0408 	sub.w	r4, r4, r8
 8000254:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000258:	b127      	cbz	r7, 8000264 <__udivmoddi4+0xa8>
 800025a:	fa24 f40c 	lsr.w	r4, r4, ip
 800025e:	2300      	movs	r3, #0
 8000260:	603c      	str	r4, [r7, #0]
 8000262:	607b      	str	r3, [r7, #4]
 8000264:	4631      	mov	r1, r6
 8000266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800026a:	4650      	mov	r0, sl
 800026c:	e7db      	b.n	8000226 <__udivmoddi4+0x6a>
 800026e:	4613      	mov	r3, r2
 8000270:	e7ee      	b.n	8000250 <__udivmoddi4+0x94>
 8000272:	b902      	cbnz	r2, 8000276 <__udivmoddi4+0xba>
 8000274:	deff      	udf	#255	; 0xff
 8000276:	f1bc 0f00 	cmp.w	ip, #0
 800027a:	d12e      	bne.n	80002da <__udivmoddi4+0x11e>
 800027c:	1a8b      	subs	r3, r1, r2
 800027e:	2601      	movs	r6, #1
 8000280:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000284:	b2aa      	uxth	r2, r5
 8000286:	fbb3 f8fe 	udiv	r8, r3, lr
 800028a:	0c21      	lsrs	r1, r4, #16
 800028c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000290:	fb08 f902 	mul.w	r9, r8, r2
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	4599      	cmp	r9, r3
 800029a:	d961      	bls.n	8000360 <__udivmoddi4+0x1a4>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80002a2:	d204      	bcs.n	80002ae <__udivmoddi4+0xf2>
 80002a4:	4599      	cmp	r9, r3
 80002a6:	d902      	bls.n	80002ae <__udivmoddi4+0xf2>
 80002a8:	f1a8 0002 	sub.w	r0, r8, #2
 80002ac:	442b      	add	r3, r5
 80002ae:	eba3 0309 	sub.w	r3, r3, r9
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f1fe 	udiv	r1, r3, lr
 80002b8:	fb0e 3311 	mls	r3, lr, r1, r3
 80002bc:	434a      	muls	r2, r1
 80002be:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c2:	42a2      	cmp	r2, r4
 80002c4:	d94e      	bls.n	8000364 <__udivmoddi4+0x1a8>
 80002c6:	192c      	adds	r4, r5, r4
 80002c8:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
 80002cc:	d203      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002ce:	42a2      	cmp	r2, r4
 80002d0:	d901      	bls.n	80002d6 <__udivmoddi4+0x11a>
 80002d2:	1e8b      	subs	r3, r1, #2
 80002d4:	442c      	add	r4, r5
 80002d6:	1aa4      	subs	r4, r4, r2
 80002d8:	e7bc      	b.n	8000254 <__udivmoddi4+0x98>
 80002da:	f1cc 0e20 	rsb	lr, ip, #32
 80002de:	fa02 f50c 	lsl.w	r5, r2, ip
 80002e2:	fa21 f90e 	lsr.w	r9, r1, lr
 80002e6:	fa01 f30c 	lsl.w	r3, r1, ip
 80002ea:	fa20 fe0e 	lsr.w	lr, r0, lr
 80002ee:	ea4e 0303 	orr.w	r3, lr, r3
 80002f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002f6:	fa00 f40c 	lsl.w	r4, r0, ip
 80002fa:	fbb9 f1f8 	udiv	r1, r9, r8
 80002fe:	fa1f fe85 	uxth.w	lr, r5
 8000302:	fb08 9211 	mls	r2, r8, r1, r9
 8000306:	0c18      	lsrs	r0, r3, #16
 8000308:	fb01 f60e 	mul.w	r6, r1, lr
 800030c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8000310:	4296      	cmp	r6, r2
 8000312:	d921      	bls.n	8000358 <__udivmoddi4+0x19c>
 8000314:	18aa      	adds	r2, r5, r2
 8000316:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800031a:	d203      	bcs.n	8000324 <__udivmoddi4+0x168>
 800031c:	4296      	cmp	r6, r2
 800031e:	d901      	bls.n	8000324 <__udivmoddi4+0x168>
 8000320:	1e88      	subs	r0, r1, #2
 8000322:	442a      	add	r2, r5
 8000324:	1b92      	subs	r2, r2, r6
 8000326:	b29b      	uxth	r3, r3
 8000328:	fbb2 f9f8 	udiv	r9, r2, r8
 800032c:	fb08 2219 	mls	r2, r8, r9, r2
 8000330:	fb09 fe0e 	mul.w	lr, r9, lr
 8000334:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000338:	459e      	cmp	lr, r3
 800033a:	d90f      	bls.n	800035c <__udivmoddi4+0x1a0>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8000342:	d204      	bcs.n	800034e <__udivmoddi4+0x192>
 8000344:	459e      	cmp	lr, r3
 8000346:	d902      	bls.n	800034e <__udivmoddi4+0x192>
 8000348:	f1a9 0602 	sub.w	r6, r9, #2
 800034c:	442b      	add	r3, r5
 800034e:	eba3 030e 	sub.w	r3, r3, lr
 8000352:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000356:	e793      	b.n	8000280 <__udivmoddi4+0xc4>
 8000358:	4608      	mov	r0, r1
 800035a:	e7e3      	b.n	8000324 <__udivmoddi4+0x168>
 800035c:	464e      	mov	r6, r9
 800035e:	e7f6      	b.n	800034e <__udivmoddi4+0x192>
 8000360:	4640      	mov	r0, r8
 8000362:	e7a4      	b.n	80002ae <__udivmoddi4+0xf2>
 8000364:	460b      	mov	r3, r1
 8000366:	e7b6      	b.n	80002d6 <__udivmoddi4+0x11a>
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0x1bc>
 800036c:	b10f      	cbz	r7, 8000372 <__udivmoddi4+0x1b6>
 800036e:	e9c7 0100 	strd	r0, r1, [r7]
 8000372:	2600      	movs	r6, #0
 8000374:	4630      	mov	r0, r6
 8000376:	e775      	b.n	8000264 <__udivmoddi4+0xa8>
 8000378:	fab3 fc83 	clz	ip, r3
 800037c:	f1bc 0f00 	cmp.w	ip, #0
 8000380:	d10f      	bne.n	80003a2 <__udivmoddi4+0x1e6>
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__udivmoddi4+0x1ce>
 8000386:	4282      	cmp	r2, r0
 8000388:	d809      	bhi.n	800039e <__udivmoddi4+0x1e2>
 800038a:	1a84      	subs	r4, r0, r2
 800038c:	eb61 0e03 	sbc.w	lr, r1, r3
 8000390:	2001      	movs	r0, #1
 8000392:	2f00      	cmp	r7, #0
 8000394:	d06a      	beq.n	800046c <__udivmoddi4+0x2b0>
 8000396:	e9c7 4e00 	strd	r4, lr, [r7]
 800039a:	2600      	movs	r6, #0
 800039c:	e762      	b.n	8000264 <__udivmoddi4+0xa8>
 800039e:	4660      	mov	r0, ip
 80003a0:	e7f7      	b.n	8000392 <__udivmoddi4+0x1d6>
 80003a2:	f1cc 0e20 	rsb	lr, ip, #32
 80003a6:	fa03 f30c 	lsl.w	r3, r3, ip
 80003aa:	fa22 f50e 	lsr.w	r5, r2, lr
 80003ae:	fa21 f40e 	lsr.w	r4, r1, lr
 80003b2:	431d      	orrs	r5, r3
 80003b4:	fa01 f30c 	lsl.w	r3, r1, ip
 80003b8:	fa20 f10e 	lsr.w	r1, r0, lr
 80003bc:	430b      	orrs	r3, r1
 80003be:	ea4f 4a15 	mov.w	sl, r5, lsr #16
 80003c2:	fa00 f60c 	lsl.w	r6, r0, ip
 80003c6:	fbb4 f9fa 	udiv	r9, r4, sl
 80003ca:	fa1f f885 	uxth.w	r8, r5
 80003ce:	fb0a 4019 	mls	r0, sl, r9, r4
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb09 f108 	mul.w	r1, r9, r8
 80003d8:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 80003dc:	42a1      	cmp	r1, r4
 80003de:	fa02 f20c 	lsl.w	r2, r2, ip
 80003e2:	d93f      	bls.n	8000464 <__udivmoddi4+0x2a8>
 80003e4:	192c      	adds	r4, r5, r4
 80003e6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003ea:	d204      	bcs.n	80003f6 <__udivmoddi4+0x23a>
 80003ec:	42a1      	cmp	r1, r4
 80003ee:	d902      	bls.n	80003f6 <__udivmoddi4+0x23a>
 80003f0:	f1a9 0002 	sub.w	r0, r9, #2
 80003f4:	442c      	add	r4, r5
 80003f6:	1a64      	subs	r4, r4, r1
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	fbb4 f9fa 	udiv	r9, r4, sl
 80003fe:	fb0a 4419 	mls	r4, sl, r9, r4
 8000402:	fb09 f808 	mul.w	r8, r9, r8
 8000406:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
 800040a:	4588      	cmp	r8, r1
 800040c:	d92c      	bls.n	8000468 <__udivmoddi4+0x2ac>
 800040e:	1869      	adds	r1, r5, r1
 8000410:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8000414:	d204      	bcs.n	8000420 <__udivmoddi4+0x264>
 8000416:	4588      	cmp	r8, r1
 8000418:	d902      	bls.n	8000420 <__udivmoddi4+0x264>
 800041a:	f1a9 0302 	sub.w	r3, r9, #2
 800041e:	4429      	add	r1, r5
 8000420:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000424:	eba1 0108 	sub.w	r1, r1, r8
 8000428:	fba0 8902 	umull	r8, r9, r0, r2
 800042c:	4549      	cmp	r1, r9
 800042e:	46c2      	mov	sl, r8
 8000430:	464c      	mov	r4, r9
 8000432:	d302      	bcc.n	800043a <__udivmoddi4+0x27e>
 8000434:	d106      	bne.n	8000444 <__udivmoddi4+0x288>
 8000436:	4546      	cmp	r6, r8
 8000438:	d204      	bcs.n	8000444 <__udivmoddi4+0x288>
 800043a:	ebb8 0a02 	subs.w	sl, r8, r2
 800043e:	eb69 0405 	sbc.w	r4, r9, r5
 8000442:	3801      	subs	r0, #1
 8000444:	b197      	cbz	r7, 800046c <__udivmoddi4+0x2b0>
 8000446:	ebb6 030a 	subs.w	r3, r6, sl
 800044a:	eb61 0604 	sbc.w	r6, r1, r4
 800044e:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000452:	fa23 f30c 	lsr.w	r3, r3, ip
 8000456:	ea4e 0303 	orr.w	r3, lr, r3
 800045a:	fa26 f60c 	lsr.w	r6, r6, ip
 800045e:	e9c7 3600 	strd	r3, r6, [r7]
 8000462:	e79a      	b.n	800039a <__udivmoddi4+0x1de>
 8000464:	4648      	mov	r0, r9
 8000466:	e7c6      	b.n	80003f6 <__udivmoddi4+0x23a>
 8000468:	464b      	mov	r3, r9
 800046a:	e7d9      	b.n	8000420 <__udivmoddi4+0x264>
 800046c:	463e      	mov	r6, r7
 800046e:	e6f9      	b.n	8000264 <__udivmoddi4+0xa8>

08000470 <poll_state_thread>:
		return "unknown";
	}
}

void poll_state_thread(void *unused1, void *unused2, void *unused3)
{
 8000470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct can_bus_err_cnt err_cnt = {0, 0};
 8000474:	2400      	movs	r4, #0
	struct can_bus_err_cnt err_cnt_prev = {0, 0};
	enum can_state state_prev = CAN_ERROR_ACTIVE;
	enum can_state state;

	while (1) {
		state = can_get_state(can_dev, &err_cnt);
 8000476:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80004d4 <poll_state_thread+0x64>
		    state_prev != state) {

			err_cnt_prev.tx_err_cnt = err_cnt.tx_err_cnt;
			err_cnt_prev.rx_err_cnt = err_cnt.rx_err_cnt;
			state_prev = state;
			printk("state: %s\n"
 800047a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80004d8 <poll_state_thread+0x68>
			err_cnt_prev.rx_err_cnt = err_cnt.rx_err_cnt;
 800047e:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80004dc <poll_state_thread+0x6c>
	struct can_bus_err_cnt err_cnt = {0, 0};
 8000482:	f8ad 4004 	strh.w	r4, [sp, #4]
	struct can_bus_err_cnt err_cnt_prev = {0, 0};
 8000486:	4627      	mov	r7, r4
	enum can_state state_prev = CAN_ERROR_ACTIVE;
 8000488:	46a3      	mov	fp, r4
		state = can_get_state(can_dev, &err_cnt);
 800048a:	f8d8 0000 	ldr.w	r0, [r8]
				    struct can_bus_err_cnt *err_cnt)
{
	const struct can_driver_api *api =
		(const struct can_driver_api *)dev->driver_api;

	return api->get_state(dev, err_cnt);
 800048e:	6843      	ldr	r3, [r0, #4]
 8000490:	a901      	add	r1, sp, #4
 8000492:	691b      	ldr	r3, [r3, #16]
 8000494:	4798      	blx	r3
		if (err_cnt.tx_err_cnt != err_cnt_prev.tx_err_cnt ||
 8000496:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800049a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800049e:	42be      	cmp	r6, r7
 80004a0:	4605      	mov	r5, r0
 80004a2:	d103      	bne.n	80004ac <poll_state_thread+0x3c>
 80004a4:	42a2      	cmp	r2, r4
 80004a6:	d101      	bne.n	80004ac <poll_state_thread+0x3c>
		    err_cnt.rx_err_cnt != err_cnt_prev.rx_err_cnt ||
 80004a8:	4583      	cmp	fp, r0
 80004aa:	d00d      	beq.n	80004c8 <poll_state_thread+0x58>
			err_cnt_prev.rx_err_cnt = err_cnt.rx_err_cnt;
 80004ac:	2d02      	cmp	r5, #2
 80004ae:	bf96      	itet	ls
 80004b0:	4b07      	ldrls	r3, [pc, #28]	; (80004d0 <poll_state_thread+0x60>)
 80004b2:	4651      	movhi	r1, sl
 80004b4:	f853 1025 	ldrls.w	r1, [r3, r5, lsl #2]
			printk("state: %s\n"
 80004b8:	4648      	mov	r0, r9
 80004ba:	4633      	mov	r3, r6
			err_cnt_prev.rx_err_cnt = err_cnt.rx_err_cnt;
 80004bc:	4614      	mov	r4, r2
			printk("state: %s\n"
 80004be:	f006 f94a 	bl	8006756 <printk>
		if (err_cnt.tx_err_cnt != err_cnt_prev.tx_err_cnt ||
 80004c2:	4637      	mov	r7, r6
 80004c4:	46ab      	mov	fp, r5
 80004c6:	e7e0      	b.n	800048a <poll_state_thread+0x1a>
			       "rx error count: %d\n"
			       "tx error count: %d\n",
			       state_to_str(state),
			       err_cnt.rx_err_cnt, err_cnt.tx_err_cnt);
		} else {
			k_sleep(K_MSEC(100));
 80004c8:	2064      	movs	r0, #100	; 0x64
 80004ca:	f005 fc99 	bl	8005e00 <k_sleep>
 80004ce:	e7f9      	b.n	80004c4 <poll_state_thread+0x54>
 80004d0:	080092e4 	.word	0x080092e4
 80004d4:	200000d8 	.word	0x200000d8
 80004d8:	0800990e 	.word	0x0800990e
 80004dc:	080098c4 	.word	0x080098c4

080004e0 <state_change_work_handler>:
}


void state_change_work_handler(struct k_work *work)
{
	printk("State Change ISR\nstate: %s\n"
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <state_change_work_handler+0x1c>)
 80004e2:	4807      	ldr	r0, [pc, #28]	; (8000500 <state_change_work_handler+0x20>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
	switch (state) {
 80004e6:	2b02      	cmp	r3, #2
 80004e8:	bf96      	itet	ls
 80004ea:	4a06      	ldrls	r2, [pc, #24]	; (8000504 <state_change_work_handler+0x24>)
	printk("State Change ISR\nstate: %s\n"
 80004ec:	4906      	ldrhi	r1, [pc, #24]	; (8000508 <state_change_work_handler+0x28>)
 80004ee:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	       "rx error count: %d\n"
	       "tx error count: %d\n",
		state_to_str(current_state),
		current_err_cnt.rx_err_cnt, current_err_cnt.tx_err_cnt);
 80004f2:	4a06      	ldr	r2, [pc, #24]	; (800050c <state_change_work_handler+0x2c>)
	printk("State Change ISR\nstate: %s\n"
 80004f4:	7813      	ldrb	r3, [r2, #0]
 80004f6:	7852      	ldrb	r2, [r2, #1]
 80004f8:	f006 b92d 	b.w	8006756 <printk>
 80004fc:	20000912 	.word	0x20000912
 8000500:	080098fd 	.word	0x080098fd
 8000504:	080092e4 	.word	0x080092e4
 8000508:	080098c4 	.word	0x080098c4
 800050c:	20000910 	.word	0x20000910

08000510 <rx_thread>:
{
 8000510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000514:	b08c      	sub	sp, #48	; 0x30
	const struct zcan_filter filter = {
 8000516:	2300      	movs	r3, #0
 8000518:	f240 5281 	movw	r2, #1409	; 0x581
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8000522:	f362 2312 	bfi	r3, r2, #8, #11
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	2301      	movs	r3, #1
 800052a:	f88d 3005 	strb.w	r3, [sp, #5]
 800052e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000532:	f8ad 3006 	strh.w	r3, [sp, #6]
	filter_id = can_attach_msgq(can_dev, &counter_msgq, &filter);
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <rx_thread+0x80>)
 8000538:	6818      	ldr	r0, [r3, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&msg_q, *(uintptr_t *)&filter, K_SYSCALL_CAN_ATTACH_MSGQ);
	}
#endif
	compiler_barrier();
	return z_impl_can_attach_msgq(dev, msg_q, filter);
 800053a:	4916      	ldr	r1, [pc, #88]	; (8000594 <rx_thread+0x84>)
 800053c:	466a      	mov	r2, sp
 800053e:	f001 ffdd 	bl	80024fc <z_impl_can_attach_msgq>
 8000542:	4604      	mov	r4, r0
	printk("Counter filter id: %d\n", filter_id);
 8000544:	4601      	mov	r1, r0
 8000546:	4814      	ldr	r0, [pc, #80]	; (8000598 <rx_thread+0x88>)
 8000548:	f006 f905 	bl	8006756 <printk>
	if(filter_id < 0){
 800054c:	2c00      	cmp	r4, #0
 800054e:	da03      	bge.n	8000558 <rx_thread+0x48>
		printk("Unable to attach isr [%d]", filter_id);
 8000550:	4621      	mov	r1, r4
 8000552:	4812      	ldr	r0, [pc, #72]	; (800059c <rx_thread+0x8c>)
 8000554:	f006 f8ff 	bl	8006756 <printk>
	rxWork = true;
 8000558:	4e11      	ldr	r6, [pc, #68]	; (80005a0 <rx_thread+0x90>)
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
 800055a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8000594 <rx_thread+0x84>
		k_fifo_put(&can_rx_fifo, &frame);
 800055e:	4f11      	ldr	r7, [pc, #68]	; (80005a4 <rx_thread+0x94>)
	rxWork = true;
 8000560:	2201      	movs	r2, #1
 8000562:	7032      	strb	r2, [r6, #0]
 8000564:	ad03      	add	r5, sp, #12
 8000566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800056a:	4629      	mov	r1, r5
 800056c:	4640      	mov	r0, r8
 800056e:	f004 fcc3 	bl	8004ef8 <z_impl_k_msgq_get>
		frame.frame = msg;
 8000572:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000576:	ac08      	add	r4, sp, #32
 8000578:	c407      	stmia	r4!, {r0, r1, r2}
		k_fifo_put(&can_rx_fifo, &frame);
 800057a:	a907      	add	r1, sp, #28
 800057c:	4638      	mov	r0, r7
		frame.frame = msg;
 800057e:	8023      	strh	r3, [r4, #0]
		k_fifo_put(&can_rx_fifo, &frame);
 8000580:	f008 f9ab 	bl	80088da <k_queue_append>
	while (rxWork) {
 8000584:	7833      	ldrb	r3, [r6, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d1ed      	bne.n	8000566 <rx_thread+0x56>
}
 800058a:	b00c      	add	sp, #48	; 0x30
 800058c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000590:	200000d8 	.word	0x200000d8
 8000594:	20002b14 	.word	0x20002b14
 8000598:	080098cc 	.word	0x080098cc
 800059c:	080098e3 	.word	0x080098e3
 80005a0:	20000913 	.word	0x20000913
 80005a4:	200000dc 	.word	0x200000dc

080005a8 <state_change_isr>:
	}
#endif /* CONFIG_CAN_AUTO_BUS_OFF_RECOVERY */
}

void state_change_isr(enum can_state state, struct can_bus_err_cnt err_cnt)
{
 80005a8:	b082      	sub	sp, #8
	current_state = state;
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <state_change_isr+0x40>)
{
 80005ac:	f8ad 1004 	strh.w	r1, [sp, #4]
	current_state = state;
 80005b0:	7018      	strb	r0, [r3, #0]
	current_err_cnt = err_cnt;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <state_change_isr+0x44>)
 80005b4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80005b8:	490d      	ldr	r1, [pc, #52]	; (80005f0 <state_change_isr+0x48>)
 80005ba:	801a      	strh	r2, [r3, #0]
 80005bc:	f3bf 8f5b 	dmb	ish
 80005c0:	e851 3f00 	ldrex	r3, [r1]
 80005c4:	f043 0201 	orr.w	r2, r3, #1
 80005c8:	e841 2000 	strex	r0, r2, [r1]
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d1f7      	bne.n	80005c0 <state_change_isr+0x18>
 80005d0:	f3bf 8f5b 	dmb	ish
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 80005d4:	07db      	lsls	r3, r3, #31
 80005d6:	d404      	bmi.n	80005e2 <state_change_isr+0x3a>
		k_queue_append(&work_q->queue, work);
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <state_change_isr+0x4c>)
 80005da:	3908      	subs	r1, #8
	k_work_submit(&state_change_work);
}
 80005dc:	b002      	add	sp, #8
 80005de:	f008 b97c 	b.w	80088da <k_queue_append>
 80005e2:	b002      	add	sp, #8
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000912 	.word	0x20000912
 80005ec:	20000910 	.word	0x20000910
 80005f0:	20000220 	.word	0x20000220
 80005f4:	20000890 	.word	0x20000890

080005f8 <change_led>:
{
 80005f8:	4603      	mov	r3, r0
	if (!led_dev_param) {
 80005fa:	4608      	mov	r0, r1
 80005fc:	b911      	cbnz	r1, 8000604 <change_led+0xc>
		printk("No LED GPIO device\n");
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <change_led+0x1c>)
 8000600:	f006 b8a9 	b.w	8006756 <printk>
	switch (msg->data[0]) {
 8000604:	799a      	ldrb	r2, [r3, #6]
 8000606:	b10a      	cbz	r2, 800060c <change_led+0x14>
 8000608:	2a01      	cmp	r2, #1
 800060a:	d102      	bne.n	8000612 <change_led+0x1a>
		gpio_pin_write(led_dev, 14, 0);
 800060c:	210e      	movs	r1, #14
 800060e:	f005 bbf9 	b.w	8005e04 <gpio_pin_write>
}
 8000612:	4770      	bx	lr
 8000614:	08009826 	.word	0x08009826

08000618 <can_motor_request>:
	array[2] = BYTE(u_val,2);
	array[3] = BYTE(u_val,3);
}


bool can_motor_request(struct device * dev, struct motor_dev * motor, u8_t frame_type, u16_t index, u8_t subindex, u8_t *data){
 8000618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800061c:	461f      	mov	r7, r3
 800061e:	b089      	sub	sp, #36	; 0x24
	if(!motor->initialized)
 8000620:	784b      	ldrb	r3, [r1, #1]
bool can_motor_request(struct device * dev, struct motor_dev * motor, u8_t frame_type, u16_t index, u8_t subindex, u8_t *data){
 8000622:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
 8000626:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	if(!motor->initialized)
 8000628:	9303      	str	r3, [sp, #12]
bool can_motor_request(struct device * dev, struct motor_dev * motor, u8_t frame_type, u16_t index, u8_t subindex, u8_t *data){
 800062a:	4682      	mov	sl, r0
 800062c:	4688      	mov	r8, r1
 800062e:	4615      	mov	r5, r2
	if(!motor->initialized)
 8000630:	2b00      	cmp	r3, #0
 8000632:	d055      	beq.n	80006e0 <can_motor_request+0xc8>
		return 0;

	struct fifo_can_frame *msg;

	struct zcan_frame frame = {
 8000634:	220e      	movs	r2, #14
 8000636:	2100      	movs	r1, #0
 8000638:	a804      	add	r0, sp, #16
 800063a:	f007 fd35 	bl	80080a8 <memset>
		.id_type = CAN_STANDARD_IDENTIFIER,
		.rtr = CAN_DATAFRAME,
		.std_id = SDO_ID_TX + motor->motor_id,
 800063e:	f898 3000 	ldrb.w	r3, [r8]
		.dlc = 8
	};
	frame.data[0] = frame_type;
 8000642:	f88d 5016 	strb.w	r5, [sp, #22]
		.std_id = SDO_ID_TX + motor->motor_id,
 8000646:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
	struct zcan_frame frame = {
 800064a:	2200      	movs	r2, #0
 800064c:	f363 2212 	bfi	r2, r3, #8, #11
 8000650:	2308      	movs	r3, #8
	frame.data[1] = BYTE(index,0);
	frame.data[2] = BYTE(index,1);
 8000652:	fa27 f903 	lsr.w	r9, r7, r3
	frame.data[3] = subindex;

	if(frame_type != CS_DOWNLOAD && frame_type != CS_UPLOAD)
 8000656:	2d40      	cmp	r5, #64	; 0x40
	struct zcan_frame frame = {
 8000658:	9204      	str	r2, [sp, #16]
 800065a:	f88d 3015 	strb.w	r3, [sp, #21]
	frame.data[1] = BYTE(index,0);
 800065e:	f88d 7017 	strb.w	r7, [sp, #23]
	frame.data[2] = BYTE(index,1);
 8000662:	f88d 9018 	strb.w	r9, [sp, #24]
	frame.data[3] = subindex;
 8000666:	f88d b019 	strb.w	fp, [sp, #25]
	if(frame_type != CS_DOWNLOAD && frame_type != CS_UPLOAD)
 800066a:	d00d      	beq.n	8000688 <can_motor_request+0x70>
 800066c:	2d23      	cmp	r5, #35	; 0x23
 800066e:	d13b      	bne.n	80006e8 <can_motor_request+0xd0>
	if(frame_type == CS_DOWNLOAD)
		zero_data(&frame);

	if(frame_type == CS_UPLOAD)
		for(int i = 0; i < 4; i++)
			frame.data[4+i] = data[i];
 8000670:	7823      	ldrb	r3, [r4, #0]
 8000672:	f88d 301a 	strb.w	r3, [sp, #26]
 8000676:	7863      	ldrb	r3, [r4, #1]
 8000678:	f88d 301b 	strb.w	r3, [sp, #27]
 800067c:	78a3      	ldrb	r3, [r4, #2]
 800067e:	f88d 301c 	strb.w	r3, [sp, #28]
 8000682:	78e3      	ldrb	r3, [r4, #3]
 8000684:	f88d 301d 	strb.w	r3, [sp, #29]
	return api->send(dev, msg, timeout, callback_isr, callback_arg);
 8000688:	2300      	movs	r3, #0
 800068a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	6852      	ldr	r2, [r2, #4]
 8000692:	a904      	add	r1, sp, #16
 8000694:	4616      	mov	r6, r2
 8000696:	4650      	mov	r0, sl
 8000698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800069c:	47b0      	blx	r6
	return z_impl_k_queue_get(queue, timeout);
 800069e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006a2:	4813      	ldr	r0, [pc, #76]	; (80006f0 <can_motor_request+0xd8>)
 80006a4:	f008 f91e 	bl	80088e4 <z_impl_k_queue_get>
	can_send(dev, &frame, K_FOREVER, NULL, NULL);
	msg = k_fifo_get(&can_rx_fifo, K_FOREVER);

	//error handling - when we don't get a response to our request //

	if(SDO_ID_RX + motor->motor_id != msg->frame.std_id)
 80006a8:	f898 2000 	ldrb.w	r2, [r8]
 80006ac:	6843      	ldr	r3, [r0, #4]
 80006ae:	f502 62b0 	add.w	r2, r2, #1408	; 0x580
 80006b2:	f3c3 230a 	ubfx	r3, r3, #8, #11
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d116      	bne.n	80006e8 <can_motor_request+0xd0>
		return 0;

	if(msg->frame.data[1] != BYTE(index,0) && msg->frame.data[2] != BYTE(index,1) && msg->frame.data[3] != subindex)
 80006ba:	7ac3      	ldrb	r3, [r0, #11]
 80006bc:	42bb      	cmp	r3, r7
 80006be:	d005      	beq.n	80006cc <can_motor_request+0xb4>
 80006c0:	7b03      	ldrb	r3, [r0, #12]
 80006c2:	454b      	cmp	r3, r9
 80006c4:	d002      	beq.n	80006cc <can_motor_request+0xb4>
 80006c6:	7b43      	ldrb	r3, [r0, #13]
 80006c8:	455b      	cmp	r3, fp
 80006ca:	d10d      	bne.n	80006e8 <can_motor_request+0xd0>
		return 0;

	if(frame_type == CS_DOWNLOAD)
 80006cc:	2d40      	cmp	r5, #64	; 0x40
 80006ce:	d107      	bne.n	80006e0 <can_motor_request+0xc8>
		for(int i = 0 ; i < 4; i++)
			data[i] = msg->frame.data[4+i];
 80006d0:	7b83      	ldrb	r3, [r0, #14]
 80006d2:	7023      	strb	r3, [r4, #0]
 80006d4:	7bc3      	ldrb	r3, [r0, #15]
 80006d6:	7063      	strb	r3, [r4, #1]
 80006d8:	7c03      	ldrb	r3, [r0, #16]
 80006da:	70a3      	strb	r3, [r4, #2]
 80006dc:	7c43      	ldrb	r3, [r0, #17]
 80006de:	70e3      	strb	r3, [r4, #3]

	return 1;
}
 80006e0:	9803      	ldr	r0, [sp, #12]
 80006e2:	b009      	add	sp, #36	; 0x24
 80006e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	9303      	str	r3, [sp, #12]
 80006ec:	e7f8      	b.n	80006e0 <can_motor_request+0xc8>
 80006ee:	bf00      	nop
 80006f0:	200000dc 	.word	0x200000dc

080006f4 <motor_init>:

void motor_init(struct motor_dev * motor, u8_t motor_id, struct device * dev){
 80006f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006f8:	460e      	mov	r6, r1
 80006fa:	b086      	sub	sp, #24
	struct fifo_can_frame *msg;

	motor->initialized = false;
 80006fc:	2100      	movs	r1, #0
 80006fe:	7041      	strb	r1, [r0, #1]
	motor->error_register = 0;
 8000700:	6141      	str	r1, [r0, #20]
	motor->motor_id = motor_id;
 8000702:	7006      	strb	r6, [r0, #0]
void motor_init(struct motor_dev * motor, u8_t motor_id, struct device * dev){
 8000704:	4604      	mov	r4, r0
 8000706:	4615      	mov	r5, r2

	struct zcan_frame motor_init_frame = {
 8000708:	a802      	add	r0, sp, #8
 800070a:	220e      	movs	r2, #14
 800070c:	f007 fccc 	bl	80080a8 <memset>
		.id_type = CAN_STANDARD_IDENTIFIER,
		.rtr = CAN_DATAFRAME,
		.std_id = SDO_ID_TX + motor_id,
 8000710:	f506 62c0 	add.w	r2, r6, #1536	; 0x600
	struct zcan_frame motor_init_frame = {
 8000714:	2300      	movs	r3, #0
 8000716:	f362 2312 	bfi	r3, r2, #8, #11
 800071a:	9302      	str	r3, [sp, #8]
 800071c:	2308      	movs	r3, #8
 800071e:	f88d 300d 	strb.w	r3, [sp, #13]
		.dlc = 8
	};
	motor_init_frame.data[0] = CS_DOWNLOAD;
 8000722:	2340      	movs	r3, #64	; 0x40
 8000724:	f88d 300e 	strb.w	r3, [sp, #14]
	motor_init_frame.data[1] = BYTE(SDO_DEVICE_TYPE_INDEX,0);
	motor_init_frame.data[2] = BYTE(SDO_DEVICE_TYPE_INDEX,1);
	motor_init_frame.data[3] = SDO_DEVICE_TYPE_SUBINDEX;

	while(!rxWork){ // waiting for can initialization
 8000728:	4f1a      	ldr	r7, [pc, #104]	; (8000794 <motor_init+0xa0>)
	motor_init_frame.data[2] = BYTE(SDO_DEVICE_TYPE_INDEX,1);
 800072a:	2310      	movs	r3, #16
 800072c:	f88d 3010 	strb.w	r3, [sp, #16]
	while(!rxWork){ // waiting for can initialization
 8000730:	783b      	ldrb	r3, [r7, #0]
 8000732:	b35b      	cbz	r3, 800078c <motor_init+0x98>
 8000734:	2700      	movs	r7, #0
 8000736:	686b      	ldr	r3, [r5, #4]
 8000738:	9700      	str	r7, [sp, #0]
 800073a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800073e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000742:	463b      	mov	r3, r7
 8000744:	a902      	add	r1, sp, #8
 8000746:	4628      	mov	r0, r5
 8000748:	47c0      	blx	r8
 800074a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800074e:	4812      	ldr	r0, [pc, #72]	; (8000798 <motor_init+0xa4>)
 8000750:	f008 f8c8 	bl	80088e4 <z_impl_k_queue_get>
		k_sleep(100);
	}
	can_send(dev, &motor_init_frame, K_FOREVER, NULL, NULL);
	msg = k_fifo_get(&can_rx_fifo, K_FOREVER);

	if (msg->frame.std_id == SDO_ID_RX + motor_id && msg->frame.data[6] == 0x02){
 8000754:	6843      	ldr	r3, [r0, #4]
 8000756:	f506 66b0 	add.w	r6, r6, #1408	; 0x580
 800075a:	f3c3 230a 	ubfx	r3, r3, #8, #11
 800075e:	42b3      	cmp	r3, r6
 8000760:	d105      	bne.n	800076e <motor_init+0x7a>
 8000762:	7c03      	ldrb	r3, [r0, #16]
 8000764:	2b02      	cmp	r3, #2
		motor->initialized = true;
 8000766:	bf02      	ittt	eq
 8000768:	2301      	moveq	r3, #1
 800076a:	7063      	strbeq	r3, [r4, #1]
		motor->init_error = false;
 800076c:	70a7      	strbeq	r7, [r4, #2]
	}

	get_motor_status(motor, dev);
 800076e:	4629      	mov	r1, r5
 8000770:	4620      	mov	r0, r4
 8000772:	f005 fb58 	bl	8005e26 <get_motor_status>
	get_motor_mode(motor, dev);
 8000776:	4629      	mov	r1, r5
 8000778:	4620      	mov	r0, r4
 800077a:	f005 fbac 	bl	8005ed6 <get_motor_mode>
	get_error_register(motor, dev);
 800077e:	4629      	mov	r1, r5
 8000780:	4620      	mov	r0, r4
 8000782:	f005 fb94 	bl	8005eae <get_error_register>

}
 8000786:	b006      	add	sp, #24
 8000788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_sleep(100);
 800078c:	2064      	movs	r0, #100	; 0x64
 800078e:	f005 fb37 	bl	8005e00 <k_sleep>
 8000792:	e7cd      	b.n	8000730 <motor_init+0x3c>
 8000794:	20000913 	.word	0x20000913
 8000798:	200000dc 	.word	0x200000dc

0800079c <main>:

void main(void)
{
 800079c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007a0:	b0a2      	sub	sp, #136	; 0x88
	z_impl_k_queue_init(queue);
 80007a2:	4866      	ldr	r0, [pc, #408]	; (800093c <main+0x1a0>)
 80007a4:	f008 f891 	bl	80088ca <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 80007a8:	4865      	ldr	r0, [pc, #404]	; (8000940 <main+0x1a4>)
 80007aa:	f004 fa45 	bl	8004c38 <z_impl_device_get_binding>
 80007ae:	4606      	mov	r6, r0
 80007b0:	4863      	ldr	r0, [pc, #396]	; (8000940 <main+0x1a4>)
 80007b2:	f004 fa41 	bl	8004c38 <z_impl_device_get_binding>
 80007b6:	4605      	mov	r5, r0
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
 80007b8:	6873      	ldr	r3, [r6, #4]
 80007ba:	220d      	movs	r2, #13
 80007bc:	681c      	ldr	r4, [r3, #0]
 80007be:	2100      	movs	r1, #0
 80007c0:	2301      	movs	r3, #1
 80007c2:	4630      	mov	r0, r6
 80007c4:	47a0      	blx	r4
 80007c6:	686b      	ldr	r3, [r5, #4]
	dev = device_get_binding(LED_PORT);
	dev1 = device_get_binding("GPIOE");
	/* Set LED pin as output */
	gpio_pin_configure(dev, LED, GPIO_DIR_OUT);
	gpio_pin_configure(dev1, 14, GPIO_DIR_OUT);
	const struct zcan_filter change_led_filter = {
 80007c8:	af07      	add	r7, sp, #28
 80007ca:	681c      	ldr	r4, [r3, #0]
 80007cc:	220e      	movs	r2, #14
 80007ce:	2301      	movs	r3, #1
 80007d0:	2100      	movs	r1, #0
 80007d2:	4628      	mov	r0, r5
 80007d4:	47a0      	blx	r4
 80007d6:	2300      	movs	r3, #0
 80007d8:	2210      	movs	r2, #16
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	813b      	strh	r3, [r7, #8]
 80007de:	f362 2312 	bfi	r3, r2, #8, #11
 80007e2:	9307      	str	r3, [sp, #28]
 80007e4:	2301      	movs	r3, #1
 80007e6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80007ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007ee:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80007f2:	4854      	ldr	r0, [pc, #336]	; (8000944 <main+0x1a8>)
		int ret;

		/* Usually the CAN device is either called CAN_0 or CAN_1, depending
		 * on the SOC. Let's check both and take the first valid one.
		 */
		can_dev = device_get_binding("CAN_0");
 80007f4:	4c54      	ldr	r4, [pc, #336]	; (8000948 <main+0x1ac>)
 80007f6:	f004 fa1f 	bl	8004c38 <z_impl_device_get_binding>
 80007fa:	6020      	str	r0, [r4, #0]
		if (!can_dev) {
 80007fc:	bb48      	cbnz	r0, 8000852 <main+0xb6>
 80007fe:	4853      	ldr	r0, [pc, #332]	; (800094c <main+0x1b0>)
 8000800:	f004 fa1a 	bl	8004c38 <z_impl_device_get_binding>
 8000804:	4680      	mov	r8, r0
			can_dev = device_get_binding("CAN_1");
 8000806:	6020      	str	r0, [r4, #0]
		}

		if (!can_dev) {
 8000808:	bb18      	cbnz	r0, 8000852 <main+0xb6>
			printk("CAN: Device driver not found.\n");
 800080a:	4851      	ldr	r0, [pc, #324]	; (8000950 <main+0x1b4>)
 800080c:	f005 ffa3 	bl	8006756 <printk>
			gpio_pin_write(dev1, 14, 0);
 8000810:	4642      	mov	r2, r8
		} else {
			gpio_pin_write(dev1, 14, 1);
 8000812:	210e      	movs	r1, #14
 8000814:	4628      	mov	r0, r5
 8000816:	f005 faf5 	bl	8005e04 <gpio_pin_write>

/*#ifdef CONFIG_LOOPBACK_MODE
	can_configure(can_dev, CAN_LOOPBACK_MODE, 125000);
#endif*/
#ifdef CONFIG_NORMAL_MODE
	can_configure(can_dev, CAN_NORMAL_MODE, 125000);
 800081a:	6820      	ldr	r0, [r4, #0]
	return api->configure(dev, mode, bitrate);
 800081c:	6843      	ldr	r3, [r0, #4]
 800081e:	4a4d      	ldr	r2, [pc, #308]	; (8000954 <main+0x1b8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2100      	movs	r1, #0
 8000824:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8000826:	4b4c      	ldr	r3, [pc, #304]	; (8000958 <main+0x1bc>)
 8000828:	4a4c      	ldr	r2, [pc, #304]	; (800095c <main+0x1c0>)
#endif

	k_work_init(&state_change_work, state_change_work_handler);

	ret = can_attach_workq(can_dev, &k_sys_work_q, &rx_work, change_led,
 800082a:	494d      	ldr	r1, [pc, #308]	; (8000960 <main+0x1c4>)
 800082c:	2500      	movs	r5, #0
 800082e:	e9c3 2501 	strd	r2, r5, [r3, #4]
 8000832:	601d      	str	r5, [r3, #0]
 8000834:	e9cd 5700 	strd	r5, r7, [sp]
 8000838:	4b4a      	ldr	r3, [pc, #296]	; (8000964 <main+0x1c8>)
 800083a:	4a4b      	ldr	r2, [pc, #300]	; (8000968 <main+0x1cc>)
 800083c:	6820      	ldr	r0, [r4, #0]
 800083e:	f001 fe69 	bl	8002514 <can_attach_workq>
			       led_gpio_dev, &change_led_filter);
	if (ret == CAN_NO_FREE_FILTER) {
 8000842:	3001      	adds	r0, #1
 8000844:	d107      	bne.n	8000856 <main+0xba>
		printk("Error, no filter available!\n");
 8000846:	4849      	ldr	r0, [pc, #292]	; (800096c <main+0x1d0>)
 8000848:	f005 ff85 	bl	8006756 <printk>
		k_sleep(3000);*/
		//if(  cnt % 2) motor_set_velocity(&motor1, can_dev, -100);
		//else motor_set_velocity(&motor1, can_dev, 100);

	}
}
 800084c:	b022      	add	sp, #136	; 0x88
 800084e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			gpio_pin_write(dev1, 14, 1);
 8000852:	2201      	movs	r2, #1
 8000854:	e7dd      	b.n	8000812 <main+0x76>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8000856:	2302      	movs	r3, #2
 8000858:	e9cd 5302 	strd	r5, r3, [sp, #8]
 800085c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8000860:	e9cd 5500 	strd	r5, r5, [sp]
 8000864:	4b42      	ldr	r3, [pc, #264]	; (8000970 <main+0x1d4>)
 8000866:	4943      	ldr	r1, [pc, #268]	; (8000974 <main+0x1d8>)
 8000868:	4843      	ldr	r0, [pc, #268]	; (8000978 <main+0x1dc>)
 800086a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086e:	f004 ffd9 	bl	8005824 <z_impl_k_thread_create>
	if (!rx_tid) {
 8000872:	b910      	cbnz	r0, 800087a <main+0xde>
		printk("ERROR spawning rx thread\n");
 8000874:	4841      	ldr	r0, [pc, #260]	; (800097c <main+0x1e0>)
 8000876:	f005 ff6e 	bl	8006756 <printk>
 800087a:	2300      	movs	r3, #0
 800087c:	2202      	movs	r2, #2
 800087e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8000882:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000886:	e9cd 3300 	strd	r3, r3, [sp]
 800088a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088e:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <main+0x1e4>)
 8000890:	493c      	ldr	r1, [pc, #240]	; (8000984 <main+0x1e8>)
 8000892:	483d      	ldr	r0, [pc, #244]	; (8000988 <main+0x1ec>)
 8000894:	f004 ffc6 	bl	8005824 <z_impl_k_thread_create>
	if (!get_state_tid) {
 8000898:	b910      	cbnz	r0, 80008a0 <main+0x104>
		printk("ERROR spawning poll_state_thread\n");
 800089a:	483c      	ldr	r0, [pc, #240]	; (800098c <main+0x1f0>)
 800089c:	f005 ff5b 	bl	8006756 <printk>
	can_register_state_change_isr(can_dev, state_change_isr);
 80008a0:	6820      	ldr	r0, [r4, #0]
				   can_state_change_isr_t isr)
{
	const struct can_driver_api *api =
		(const struct can_driver_api *)dev->driver_api;

	return api->register_state_change_isr(dev, isr);
 80008a2:	493b      	ldr	r1, [pc, #236]	; (8000990 <main+0x1f4>)
 80008a4:	6843      	ldr	r3, [r0, #4]
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	4798      	blx	r3
	motor_init(&motor1, 1, can_dev);
 80008aa:	6822      	ldr	r2, [r4, #0]
 80008ac:	2101      	movs	r1, #1
 80008ae:	a80a      	add	r0, sp, #40	; 0x28
 80008b0:	f7ff ff20 	bl	80006f4 <motor_init>
	motor_disable(&motor1, can_dev);
 80008b4:	6821      	ldr	r1, [r4, #0]
 80008b6:	a80a      	add	r0, sp, #40	; 0x28
 80008b8:	f005 fb3a 	bl	8005f30 <motor_disable>
	motor_svel_feedback_encoder(&motor1, can_dev);
 80008bc:	6821      	ldr	r1, [r4, #0]
 80008be:	a80a      	add	r0, sp, #40	; 0x28
 80008c0:	f005 fb4d 	bl	8005f5e <motor_svel_feedback_encoder>
	motor_set_encoder_resolution(&motor1, can_dev, 2000);
 80008c4:	6821      	ldr	r1, [r4, #0]
 80008c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008ca:	a80a      	add	r0, sp, #40	; 0x28
 80008cc:	f005 fb9e 	bl	800600c <motor_set_encoder_resolution>
	motor_mode(&motor1, can_dev, MOTOR_MODE_POS);
 80008d0:	6821      	ldr	r1, [r4, #0]
 80008d2:	2207      	movs	r2, #7
 80008d4:	a80a      	add	r0, sp, #40	; 0x28
 80008d6:	f005 fb52 	bl	8005f7e <motor_mode>
	motor_set_velocity(&motor1, can_dev, 500);
 80008da:	6821      	ldr	r1, [r4, #0]
 80008dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008e0:	a80a      	add	r0, sp, #40	; 0x28
 80008e2:	f005 fb7c 	bl	8005fde <motor_set_velocity>
	motor_set_factor_group(&motor1, can_dev, 3);
 80008e6:	2203      	movs	r2, #3
 80008e8:	6821      	ldr	r1, [r4, #0]
 80008ea:	a80a      	add	r0, sp, #40	; 0x28
 80008ec:	f005 fb62 	bl	8005fb4 <motor_set_factor_group>
	motor_enable(&motor1, can_dev);
 80008f0:	6821      	ldr	r1, [r4, #0]
 80008f2:	a80a      	add	r0, sp, #40	; 0x28
 80008f4:	f005 fb02 	bl	8005efc <motor_enable>
	motor_set_actual_position(&motor1, can_dev, 0);
 80008f8:	6821      	ldr	r1, [r4, #0]
 80008fa:	2200      	movs	r2, #0
 80008fc:	a80a      	add	r0, sp, #40	; 0x28
 80008fe:	f005 fb9c 	bl	800603a <motor_set_actual_position>
	motor_movr(&motor1, can_dev, 10);
 8000902:	6821      	ldr	r1, [r4, #0]
 8000904:	220a      	movs	r2, #10
 8000906:	a80a      	add	r0, sp, #40	; 0x28
 8000908:	f005 fbae 	bl	8006068 <motor_movr>
	k_sleep(3000);
 800090c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000910:	f005 fa76 	bl	8005e00 <k_sleep>
	motor_movr(&motor1, can_dev, -10);
 8000914:	6821      	ldr	r1, [r4, #0]
 8000916:	f06f 0209 	mvn.w	r2, #9
 800091a:	a80a      	add	r0, sp, #40	; 0x28
 800091c:	f005 fba4 	bl	8006068 <motor_movr>
	u32_t cnt = 0;
 8000920:	2400      	movs	r4, #0
		gpio_pin_write(dev, LED, cnt % 2);
 8000922:	f004 0201 	and.w	r2, r4, #1
 8000926:	210d      	movs	r1, #13
 8000928:	4630      	mov	r0, r6
 800092a:	f005 fa6b 	bl	8005e04 <gpio_pin_write>
		k_sleep(500);
 800092e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		cnt++;
 8000932:	3401      	adds	r4, #1
		k_sleep(500);
 8000934:	f005 fa64 	bl	8005e00 <k_sleep>
 8000938:	e7f3      	b.n	8000922 <main+0x186>
 800093a:	bf00      	nop
 800093c:	200000dc 	.word	0x200000dc
 8000940:	08009865 	.word	0x08009865
 8000944:	0800983a 	.word	0x0800983a
 8000948:	200000d8 	.word	0x200000d8
 800094c:	08009840 	.word	0x08009840
 8000950:	08009846 	.word	0x08009846
 8000954:	0001e848 	.word	0x0001e848
 8000958:	20000218 	.word	0x20000218
 800095c:	080004e1 	.word	0x080004e1
 8000960:	20000890 	.word	0x20000890
 8000964:	080005f9 	.word	0x080005f9
 8000968:	200001c4 	.word	0x200001c4
 800096c:	0800986b 	.word	0x0800986b
 8000970:	08000511 	.word	0x08000511
 8000974:	20000980 	.word	0x20000980
 8000978:	20000158 	.word	0x20000158
 800097c:	08009888 	.word	0x08009888
 8000980:	08000471 	.word	0x08000471
 8000984:	20000b80 	.word	0x20000b80
 8000988:	200000ec 	.word	0x200000ec
 800098c:	080098a2 	.word	0x080098a2
 8000990:	080005a9 	.word	0x080005a9

08000994 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8000994:	680b      	ldr	r3, [r1, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 800099a:	4b01      	ldr	r3, [pc, #4]	; (80009a0 <char_out+0xc>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4718      	bx	r3
 80009a0:	2000294c 	.word	0x2000294c

080009a4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 80009a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009a8:	b085      	sub	sp, #20
 80009aa:	469b      	mov	fp, r3
 80009ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80009ae:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8000a38 <_printk_dec_ulong+0x94>
 80009b2:	2c01      	cmp	r4, #1
 80009b4:	bfb8      	it	lt
 80009b6:	2401      	movlt	r4, #1
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	bf0c      	ite	eq
 80009bc:	2330      	moveq	r3, #48	; 0x30
 80009be:	2320      	movne	r3, #32
 80009c0:	4616      	mov	r6, r2
 80009c2:	4682      	mov	sl, r0
 80009c4:	4688      	mov	r8, r1
 80009c6:	9302      	str	r3, [sp, #8]
 80009c8:	2501      	movs	r5, #1
 80009ca:	270a      	movs	r7, #10
 80009cc:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
 80009ce:	fbb6 f3f9 	udiv	r3, r6, r9
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	b90a      	cbnz	r2, 80009da <_printk_dec_ulong+0x36>
 80009d6:	45b1      	cmp	r9, r6
 80009d8:	d81d      	bhi.n	8000a16 <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
 80009da:	9b01      	ldr	r3, [sp, #4]
 80009dc:	4641      	mov	r1, r8
 80009de:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80009e2:	47d0      	blx	sl
			digits++;
 80009e4:	3501      	adds	r5, #1
			found_largest_digit = 1;
 80009e6:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
 80009e8:	9b01      	ldr	r3, [sp, #4]
		remaining--;
 80009ea:	3f01      	subs	r7, #1
	while (pos >= 10) {
 80009ec:	2f01      	cmp	r7, #1
		remainder %= pos;
 80009ee:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
 80009f2:	f04f 030a 	mov.w	r3, #10
 80009f6:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
 80009fa:	d1e8      	bne.n	80009ce <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
 80009fc:	4641      	mov	r1, r8
 80009fe:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8000a02:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
 8000a04:	f1bb 0f03 	cmp.w	fp, #3
 8000a08:	d102      	bne.n	8000a10 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
 8000a0a:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
 8000a0c:	2c00      	cmp	r4, #0
 8000a0e:	dc0e      	bgt.n	8000a2e <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
 8000a10:	b005      	add	sp, #20
 8000a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 8000a16:	42bc      	cmp	r4, r7
 8000a18:	dbe6      	blt.n	80009e8 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
 8000a1a:	f1bb 0f02 	cmp.w	fp, #2
 8000a1e:	d8e3      	bhi.n	80009e8 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8000a20:	4641      	mov	r1, r8
 8000a22:	9802      	ldr	r0, [sp, #8]
 8000a24:	9203      	str	r2, [sp, #12]
			digits++;
 8000a26:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8000a28:	47d0      	blx	sl
			digits++;
 8000a2a:	9a03      	ldr	r2, [sp, #12]
 8000a2c:	e7dc      	b.n	80009e8 <_printk_dec_ulong+0x44>
			out(' ', ctx);
 8000a2e:	4641      	mov	r1, r8
 8000a30:	2020      	movs	r0, #32
 8000a32:	47d0      	blx	sl
 8000a34:	3c01      	subs	r4, #1
 8000a36:	e7e9      	b.n	8000a0c <_printk_dec_ulong+0x68>
 8000a38:	3b9aca00 	.word	0x3b9aca00

08000a3c <__printk_hook_install>:
	_char_out = fn;
 8000a3c:	4b01      	ldr	r3, [pc, #4]	; (8000a44 <__printk_hook_install+0x8>)
 8000a3e:	6018      	str	r0, [r3, #0]
}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	2000294c 	.word	0x2000294c

08000a48 <vprintk>:
{
 8000a48:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
 8000a4e:	4602      	mov	r2, r0
 8000a50:	460b      	mov	r3, r1
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <vprintk+0x18>)
 8000a54:	a901      	add	r1, sp, #4
 8000a56:	f005 fd0e 	bl	8006476 <z_vprintk>
}
 8000a5a:	b003      	add	sp, #12
 8000a5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a60:	08000995 	.word	0x08000995

08000a64 <st_stm32f4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000a64:	f04f 0210 	mov.w	r2, #16
 8000a68:	f3ef 8311 	mrs	r3, BASEPRI
 8000a6c:	f382 8811 	msr	BASEPRI, r2
 8000a70:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000a74:	f383 8811 	msr	BASEPRI, r3
 8000a78:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8000a7c:	4b02      	ldr	r3, [pc, #8]	; (8000a88 <st_stm32f4_init+0x24>)
 8000a7e:	4a03      	ldr	r2, [pc, #12]	; (8000a8c <st_stm32f4_init+0x28>)
 8000a80:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000a82:	2000      	movs	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	200029ec 	.word	0x200029ec
 8000a8c:	00f42400 	.word	0x00f42400

08000a90 <cmd_device_list>:
	return 0;
}

static int cmd_device_list(const struct shell *shell,
			      size_t argc, char **argv)
{
 8000a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct device *info;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <cmd_device_list+0x30>)
	for (info = __device_init_start; info != __device_init_end; info++) {
 8000a94:	4c0b      	ldr	r4, [pc, #44]	; (8000ac4 <cmd_device_list+0x34>)
 8000a96:	4d0c      	ldr	r5, [pc, #48]	; (8000ac8 <cmd_device_list+0x38>)
		if (info->driver_api != NULL) {
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 8000a98:	4f0c      	ldr	r7, [pc, #48]	; (8000acc <cmd_device_list+0x3c>)
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 8000a9a:	2100      	movs	r1, #0
{
 8000a9c:	4606      	mov	r6, r0
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 8000a9e:	f006 f880 	bl	8006ba2 <shell_fprintf>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8000aa2:	42ac      	cmp	r4, r5
 8000aa4:	d101      	bne.n	8000aaa <cmd_device_list+0x1a>
					info->config->name);
		}
	}

	return 0;
}
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (info->driver_api != NULL) {
 8000aaa:	6863      	ldr	r3, [r4, #4]
 8000aac:	b133      	cbz	r3, 8000abc <cmd_device_list+0x2c>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	463a      	mov	r2, r7
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4630      	mov	r0, r6
 8000ab8:	f006 f873 	bl	8006ba2 <shell_fprintf>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8000abc:	340c      	adds	r4, #12
 8000abe:	e7f0      	b.n	8000aa2 <cmd_device_list+0x12>
 8000ac0:	080099a4 	.word	0x080099a4
 8000ac4:	200029f8 	.word	0x200029f8
 8000ac8:	20002b00 	.word	0x20002b00
 8000acc:	080099ae 	.word	0x080099ae

08000ad0 <device_get_config_level>:
{
 8000ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <device_get_config_level+0x34>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 8000ad4:	4f0c      	ldr	r7, [pc, #48]	; (8000b08 <device_get_config_level+0x38>)
	for (info = config_levels[level]; info < config_levels[level+1];
 8000ad6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8000ada:	3101      	adds	r1, #1
{
 8000adc:	4606      	mov	r6, r0
	for (info = config_levels[level]; info < config_levels[level+1];
 8000ade:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	bool devices = false;
 8000ae2:	2000      	movs	r0, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 8000ae4:	42a5      	cmp	r5, r4
 8000ae6:	d800      	bhi.n	8000aea <device_get_config_level+0x1a>
}
 8000ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (info->driver_api != NULL) {
 8000aea:	6863      	ldr	r3, [r4, #4]
 8000aec:	b13b      	cbz	r3, 8000afe <device_get_config_level+0x2e>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	4630      	mov	r0, r6
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	463a      	mov	r2, r7
 8000af6:	2100      	movs	r1, #0
 8000af8:	f006 f853 	bl	8006ba2 <shell_fprintf>
			devices = true;
 8000afc:	2001      	movs	r0, #1
								info++) {
 8000afe:	340c      	adds	r4, #12
 8000b00:	e7f0      	b.n	8000ae4 <device_get_config_level+0x14>
 8000b02:	bf00      	nop
 8000b04:	08009304 	.word	0x08009304
 8000b08:	080099ae 	.word	0x080099ae

08000b0c <cmd_device_levels>:
{
 8000b0c:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
 8000b0e:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <cmd_device_levels+0x80>)
{
 8000b10:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
 8000b12:	2100      	movs	r1, #0
 8000b14:	f006 f845 	bl	8006ba2 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f7ff ffd8 	bl	8000ad0 <device_get_config_level>
	if (ret == false) {
 8000b20:	4601      	mov	r1, r0
 8000b22:	b918      	cbnz	r0, 8000b2c <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8000b24:	4a1a      	ldr	r2, [pc, #104]	; (8000b90 <cmd_device_levels+0x84>)
 8000b26:	4620      	mov	r0, r4
 8000b28:	f006 f83b 	bl	8006ba2 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <cmd_device_levels+0x88>)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4620      	mov	r0, r4
 8000b32:	f006 f836 	bl	8006ba2 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
 8000b36:	2103      	movs	r1, #3
 8000b38:	4620      	mov	r0, r4
 8000b3a:	f7ff ffc9 	bl	8000ad0 <device_get_config_level>
	if (ret == false) {
 8000b3e:	4601      	mov	r1, r0
 8000b40:	b918      	cbnz	r0, 8000b4a <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <cmd_device_levels+0x84>)
 8000b44:	4620      	mov	r0, r4
 8000b46:	f006 f82c 	bl	8006ba2 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
 8000b4a:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <cmd_device_levels+0x8c>)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f006 f827 	bl	8006ba2 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
 8000b54:	2100      	movs	r1, #0
 8000b56:	4620      	mov	r0, r4
 8000b58:	f7ff ffba 	bl	8000ad0 <device_get_config_level>
	if (ret == false) {
 8000b5c:	4601      	mov	r1, r0
 8000b5e:	b918      	cbnz	r0, 8000b68 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8000b60:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <cmd_device_levels+0x84>)
 8000b62:	4620      	mov	r0, r4
 8000b64:	f006 f81d 	bl	8006ba2 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
 8000b68:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <cmd_device_levels+0x90>)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	f006 f818 	bl	8006ba2 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
 8000b72:	2101      	movs	r1, #1
 8000b74:	4620      	mov	r0, r4
 8000b76:	f7ff ffab 	bl	8000ad0 <device_get_config_level>
	if (ret == false) {
 8000b7a:	4601      	mov	r1, r0
 8000b7c:	b918      	cbnz	r0, 8000b86 <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <cmd_device_levels+0x84>)
 8000b80:	4620      	mov	r0, r4
 8000b82:	f006 f80e 	bl	8006ba2 <shell_fprintf>
}
 8000b86:	2000      	movs	r0, #0
 8000b88:	bd10      	pop	{r4, pc}
 8000b8a:	bf00      	nop
 8000b8c:	08009962 	.word	0x08009962
 8000b90:	08009970 	.word	0x08009970
 8000b94:	08009978 	.word	0x08009978
 8000b98:	08009986 	.word	0x08009986
 8000b9c:	08009995 	.word	0x08009995

08000ba0 <history_handle>:

	shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
 8000ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (flag_history_exit_get(shell)) {
 8000ba2:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
}

static inline bool flag_history_exit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.history_exit == 1 ? true : false;
 8000ba4:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8000ba8:	0652      	lsls	r2, r2, #25
{
 8000baa:	4604      	mov	r4, r0
 8000bac:	460d      	mov	r5, r1
	if (flag_history_exit_get(shell)) {
 8000bae:	d508      	bpl.n	8000bc2 <history_handle+0x22>
}

static inline void flag_history_exit_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 8000bb0:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8000bb4:	68c0      	ldr	r0, [r0, #12]
 8000bb6:	f36f 1286 	bfc	r2, #6, #1
 8000bba:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
		flag_history_exit_set(shell, false);
		shell_history_mode_exit(shell->history);
 8000bbe:	f006 fce9 	bl	8007594 <shell_history_mode_exit>
	}

	/* Backup command if history is entered */
	if (!shell_history_active(shell->history)) {
 8000bc2:	68e3      	ldr	r3, [r4, #12]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	b963      	cbnz	r3, 8000be2 <history_handle+0x42>
		if (up) {
 8000bc8:	b39d      	cbz	r5, 8000c32 <history_handle+0x92>
			u16_t cmd_len = shell_strlen(shell->ctx->cmd_buff);
 8000bca:	68a0      	ldr	r0, [r4, #8]
 8000bcc:	3038      	adds	r0, #56	; 0x38
 8000bce:	f005 ffb4 	bl	8006b3a <shell_strlen>

			if (cmd_len) {
 8000bd2:	68a3      	ldr	r3, [r4, #8]
 8000bd4:	b378      	cbz	r0, 8000c36 <history_handle+0x96>
				strcpy(shell->ctx->temp_buff,
 8000bd6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000bda:	f503 709c 	add.w	r0, r3, #312	; 0x138
 8000bde:	f007 f9c5 	bl	8007f6c <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = shell_history_get(shell->history, up,
					 shell->ctx->cmd_buff, &len);
 8000be2:	68a2      	ldr	r2, [r4, #8]
	history_mode = shell_history_get(shell->history, up,
 8000be4:	68e0      	ldr	r0, [r4, #12]
 8000be6:	f10d 0306 	add.w	r3, sp, #6
 8000bea:	3238      	adds	r2, #56	; 0x38
 8000bec:	4629      	mov	r1, r5
 8000bee:	f006 fcd4 	bl	800759a <shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
 8000bf2:	b958      	cbnz	r0, 8000c0c <history_handle+0x6c>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
 8000bf4:	68a0      	ldr	r0, [r4, #8]
 8000bf6:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8000bfa:	3038      	adds	r0, #56	; 0x38
 8000bfc:	f007 f9b6 	bl	8007f6c <strcpy>
		len = shell_strlen(shell->ctx->cmd_buff);
 8000c00:	68a0      	ldr	r0, [r4, #8]
 8000c02:	3038      	adds	r0, #56	; 0x38
 8000c04:	f005 ff99 	bl	8006b3a <shell_strlen>
 8000c08:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	shell_op_cursor_home_move(shell);
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f006 fa93 	bl	8007138 <shell_op_cursor_home_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <history_handle+0x9c>)
 8000c14:	490a      	ldr	r1, [pc, #40]	; (8000c40 <history_handle+0xa0>)
 8000c16:	6960      	ldr	r0, [r4, #20]
 8000c18:	f005 ff95 	bl	8006b46 <shell_raw_fprintf>
	clear_eos(shell);
	shell_print_cmd(shell);
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f000 fe8d 	bl	800193c <shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
 8000c22:	68a3      	ldr	r3, [r4, #8]
 8000c24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000c28:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = len;
 8000c2a:	865a      	strh	r2, [r3, #50]	; 0x32
	shell_op_cond_next_line(shell);
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f000 fe47 	bl	80018c0 <shell_op_cond_next_line>
}
 8000c32:	b003      	add	sp, #12
 8000c34:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
 8000c36:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
 8000c3a:	e7d2      	b.n	8000be2 <history_handle+0x42>
 8000c3c:	08009a0a 	.word	0x08009a0a
 8000c40:	08009ab4 	.word	0x08009ab4

08000c44 <execute>:
/* Function is analyzing the command buffer to find matching commands. Next, it
 * invokes the  last recognized command which has a handler and passes the rest
 * of command buffer as arguments.
 */
static int execute(const struct shell *shell)
{
 8000c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c48:	b09d      	sub	sp, #116	; 0x74
 8000c4a:	4604      	mov	r4, r0
	struct shell_static_entry d_entry; /* Memory for dynamic commands. */
	char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *p_static_entry = NULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	9303      	str	r3, [sp, #12]
	bool wildcard_found = false;
	size_t cmd_idx = 0;
	size_t argc;
	char quote;

	shell_op_cursor_end_move(shell);
 8000c50:	f006 fa78 	bl	8007144 <shell_op_cursor_end_move>
	if (!shell_cursor_in_empty_line(shell)) {
 8000c54:	4620      	mov	r0, r4
 8000c56:	f006 f9fd 	bl	8007054 <shell_cursor_in_empty_line>
 8000c5a:	b918      	cbnz	r0, 8000c64 <execute+0x20>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8000c5c:	498c      	ldr	r1, [pc, #560]	; (8000e90 <execute+0x24c>)
 8000c5e:	6960      	ldr	r0, [r4, #20]
 8000c60:	f005 ff71 	bl	8006b46 <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
 8000c64:	68a0      	ldr	r0, [r4, #8]
 8000c66:	2214      	movs	r2, #20
 8000c68:	2100      	movs	r1, #0
 8000c6a:	3008      	adds	r0, #8
 8000c6c:	f007 fa1c 	bl	80080a8 <memset>

	shell_cmd_trim(shell);
 8000c70:	4620      	mov	r0, r4
 8000c72:	f006 f996 	bl	8006fa2 <shell_cmd_trim>

	history_put(shell, shell->ctx->cmd_buff,
 8000c76:	68a1      	ldr	r1, [r4, #8]
	shell_history_put(shell->history, line, length);
 8000c78:	68e0      	ldr	r0, [r4, #12]
 8000c7a:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
 8000c7c:	3138      	adds	r1, #56	; 0x38
 8000c7e:	f006 fcc3 	bl	8007608 <shell_history_put>
		    shell->ctx->cmd_buff_len);

	if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
		shell_wildcard_prepare(shell);
 8000c82:	4620      	mov	r0, r4
 8000c84:	f006 fd45 	bl	8007712 <shell_wildcard_prepare>
	}

	/* create argument list */
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
 8000c88:	68a2      	ldr	r2, [r4, #8]
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	3238      	adds	r2, #56	; 0x38
 8000c8e:	a90f      	add	r1, sp, #60	; 0x3c
 8000c90:	a804      	add	r0, sp, #16
 8000c92:	f006 f81b 	bl	8006ccc <shell_make_argv>
				CONFIG_SHELL_ARGC_MAX);

	if (!argc) {
 8000c96:	9a04      	ldr	r2, [sp, #16]
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
 8000c98:	4603      	mov	r3, r0
	if (!argc) {
 8000c9a:	b92a      	cbnz	r2, 8000ca8 <execute+0x64>

	if (quote != 0) {
		shell_internal_fprintf(shell, SHELL_ERROR,
				       "not terminated: %c\n",
				       quote);
		return -ENOEXEC;
 8000c9c:	f06f 0507 	mvn.w	r5, #7
	}

	/* Executing the deepest found handler. */
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	b01d      	add	sp, #116	; 0x74
 8000ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (quote != 0) {
 8000ca8:	b128      	cbz	r0, 8000cb6 <execute+0x72>
		shell_internal_fprintf(shell, SHELL_ERROR,
 8000caa:	4a7a      	ldr	r2, [pc, #488]	; (8000e94 <execute+0x250>)
 8000cac:	2102      	movs	r1, #2
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f006 fae1 	bl	8007276 <shell_internal_fprintf>
 8000cb4:	e7f2      	b.n	8000c9c <execute+0x58>
	help_entry.help = NULL;
 8000cb6:	4605      	mov	r5, r0
	size_t cmd_idx = 0;
 8000cb8:	4607      	mov	r7, r0
	bool wildcard_found = false;
 8000cba:	4681      	mov	r9, r0
	size_t cmd_with_handler_lvl = 0;
 8000cbc:	4682      	mov	sl, r0
	size_t cmd_lvl = SHELL_CMD_ROOT_LVL;
 8000cbe:	4606      	mov	r6, r0
	const struct shell_cmd_entry *p_cmd = NULL;
 8000cc0:	4683      	mov	fp, r0
 8000cc2:	e03e      	b.n	8000d42 <execute+0xfe>
		     !strcmp(argv[cmd_lvl], "--help"))) {
 8000cc4:	4974      	ldr	r1, [pc, #464]	; (8000e98 <execute+0x254>)
 8000cc6:	f858 0c34 	ldr.w	r0, [r8, #-52]
 8000cca:	f007 f981 	bl	8007fd0 <strcmp>
		    (!strcmp(argv[cmd_lvl], "-h") ||
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	d045      	beq.n	8000d5e <execute+0x11a>
			status = shell_wildcard_process(shell, p_cmd,
 8000cd2:	f858 2c34 	ldr.w	r2, [r8, #-52]
 8000cd6:	4659      	mov	r1, fp
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f001 f9d7 	bl	800208c <shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
 8000cde:	2802      	cmp	r0, #2
 8000ce0:	d128      	bne.n	8000d34 <execute+0xf0>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
 8000ce2:	f1b9 0f00 	cmp.w	r9, #0
 8000ce6:	d009      	beq.n	8000cfc <execute+0xb8>
		shell_wildcard_finalize(shell);
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f006 fd34 	bl	8007756 <shell_wildcard_finalize>
				      shell->ctx->cmd_buff,
 8000cee:	68a2      	ldr	r2, [r4, #8]
		(void)shell_make_argv(&argc, &argv[0],
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	3238      	adds	r2, #56	; 0x38
 8000cf4:	a90f      	add	r1, sp, #60	; 0x3c
 8000cf6:	a804      	add	r0, sp, #16
 8000cf8:	f005 ffe8 	bl	8006ccc <shell_make_argv>
	if (shell->ctx->active_cmd.handler == NULL) {
 8000cfc:	68a0      	ldr	r0, [r4, #8]
 8000cfe:	6943      	ldr	r3, [r0, #20]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f040 808f 	bne.w	8000e24 <execute+0x1e0>
			if (help_entry->help == NULL) {
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0c8      	beq.n	8000c9c <execute+0x58>
			if (help_entry->help != shell->ctx->active_cmd.help) {
 8000d0a:	68c3      	ldr	r3, [r0, #12]
 8000d0c:	429d      	cmp	r5, r3
 8000d0e:	d00c      	beq.n	8000d2a <execute+0xe6>
				shell->ctx->active_cmd = *help_entry;
 8000d10:	950b      	str	r5, [sp, #44]	; 0x2c
 8000d12:	f100 0508 	add.w	r5, r0, #8
 8000d16:	e003      	b.n	8000d20 <execute+0xdc>
				shell->ctx->active_cmd = help_entry;
 8000d18:	68a3      	ldr	r3, [r4, #8]
 8000d1a:	950b      	str	r5, [sp, #44]	; 0x2c
 8000d1c:	f103 0508 	add.w	r5, r3, #8
				shell->ctx->active_cmd = *help_entry;
 8000d20:	ae0a      	add	r6, sp, #40	; 0x28
 8000d22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d26:	6833      	ldr	r3, [r6, #0]
 8000d28:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f005 ff18 	bl	8006b60 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
 8000d30:	2501      	movs	r5, #1
 8000d32:	e7b5      	b.n	8000ca0 <execute+0x5c>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
 8000d34:	2803      	cmp	r0, #3
 8000d36:	d01a      	beq.n	8000d6e <execute+0x12a>
				++cmd_lvl;
 8000d38:	3601      	adds	r6, #1
				continue;
 8000d3a:	46b8      	mov	r8, r7
				wildcard_found = true;
 8000d3c:	f04f 0901 	mov.w	r9, #1
 8000d40:	4647      	mov	r7, r8
		if (cmd_lvl >= argc) {
 8000d42:	9b04      	ldr	r3, [sp, #16]
 8000d44:	42b3      	cmp	r3, r6
 8000d46:	d9cc      	bls.n	8000ce2 <execute+0x9e>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 8000d48:	b18e      	cbz	r6, 8000d6e <execute+0x12a>
		    (!strcmp(argv[cmd_lvl], "-h") ||
 8000d4a:	ab1c      	add	r3, sp, #112	; 0x70
 8000d4c:	eb03 0886 	add.w	r8, r3, r6, lsl #2
 8000d50:	4952      	ldr	r1, [pc, #328]	; (8000e9c <execute+0x258>)
 8000d52:	f858 0c34 	ldr.w	r0, [r8, #-52]
 8000d56:	f007 f93b 	bl	8007fd0 <strcmp>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	d1b2      	bne.n	8000cc4 <execute+0x80>
			if (help_entry.help) {
 8000d5e:	2d00      	cmp	r5, #0
 8000d60:	d1da      	bne.n	8000d18 <execute+0xd4>
			shell_internal_fprintf(shell, SHELL_ERROR,
 8000d62:	4a4f      	ldr	r2, [pc, #316]	; (8000ea0 <execute+0x25c>)
					shell_internal_fprintf(shell,
 8000d64:	2102      	movs	r1, #2
 8000d66:	4620      	mov	r0, r4
 8000d68:	f006 fa85 	bl	8007276 <shell_internal_fprintf>
					return -ENOEXEC;
 8000d6c:	e796      	b.n	8000c9c <execute+0x58>
		shell_cmd_get(shell, p_cmd, cmd_lvl, cmd_idx++, &p_static_entry,
 8000d6e:	ab05      	add	r3, sp, #20
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	ab03      	add	r3, sp, #12
 8000d74:	f107 0801 	add.w	r8, r7, #1
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	4632      	mov	r2, r6
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4659      	mov	r1, fp
 8000d80:	4620      	mov	r0, r4
 8000d82:	f000 fd4b 	bl	800181c <shell_cmd_get>
		if ((cmd_idx == 0) || (p_static_entry == NULL)) {
 8000d86:	f1b8 0f00 	cmp.w	r8, #0
 8000d8a:	d001      	beq.n	8000d90 <execute+0x14c>
 8000d8c:	9b03      	ldr	r3, [sp, #12]
 8000d8e:	b983      	cbnz	r3, 8000db2 <execute+0x16e>
			if (cmd_lvl == 0 &&
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d1a6      	bne.n	8000ce2 <execute+0x9e>

void shell_cmd_trim(const struct shell *shell);

static inline bool shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
 8000d94:	68a3      	ldr	r3, [r4, #8]
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	b113      	cbz	r3, 8000da0 <execute+0x15c>
				(!shell_in_select_mode(shell) ||
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1a0      	bne.n	8000ce2 <execute+0x9e>
				shell_internal_fprintf(shell, SHELL_ERROR,
 8000da0:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <execute+0x260>)
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	4a40      	ldr	r2, [pc, #256]	; (8000ea8 <execute+0x264>)
 8000da6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000da8:	2102      	movs	r1, #2
 8000daa:	4620      	mov	r0, r4
 8000dac:	f006 fa63 	bl	8007276 <shell_internal_fprintf>
				return -ENOEXEC;
 8000db0:	e774      	b.n	8000c9c <execute+0x58>
		if (strcmp(argv[cmd_lvl], p_static_entry->syntax) == 0) {
 8000db2:	6819      	ldr	r1, [r3, #0]
 8000db4:	ab1c      	add	r3, sp, #112	; 0x70
 8000db6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8000dba:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8000dbe:	f007 f907 	bl	8007fd0 <strcmp>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	d1bc      	bne.n	8000d40 <execute+0xfc>
			if (p_static_entry->handler != NULL) {
 8000dc6:	9f03      	ldr	r7, [sp, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	b1bb      	cbz	r3, 8000dfc <execute+0x1b8>
				if (IS_ENABLED(CONFIG_SHELL_WILDCARD) &&
 8000dcc:	f1b9 0f00 	cmp.w	r9, #0
 8000dd0:	d007      	beq.n	8000de2 <execute+0x19e>
					shell_op_cursor_end_move(shell);
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f006 f9b6 	bl	8007144 <shell_op_cursor_end_move>
					shell_op_cond_next_line(shell);
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f000 fd71 	bl	80018c0 <shell_op_cond_next_line>
					shell_internal_fprintf(shell,
 8000dde:	4a33      	ldr	r2, [pc, #204]	; (8000eac <execute+0x268>)
 8000de0:	e7c0      	b.n	8000d64 <execute+0x120>
				shell->ctx->active_cmd = *p_static_entry;
 8000de2:	68a3      	ldr	r3, [r4, #8]
 8000de4:	46be      	mov	lr, r7
 8000de6:	f103 0c08 	add.w	ip, r3, #8
 8000dea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000dee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000df2:	f8de 3000 	ldr.w	r3, [lr]
 8000df6:	f8cc 3000 	str.w	r3, [ip]
 8000dfa:	46b2      	mov	sl, r6
			if (p_static_entry->help != NULL) {
 8000dfc:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8000e00:	f1bc 0f00 	cmp.w	ip, #0
 8000e04:	d008      	beq.n	8000e18 <execute+0x1d4>
				help_entry = *p_static_entry;
 8000e06:	46be      	mov	lr, r7
 8000e08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000e0c:	ad0a      	add	r5, sp, #40	; 0x28
 8000e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e10:	f8de 3000 	ldr.w	r3, [lr]
 8000e14:	602b      	str	r3, [r5, #0]
 8000e16:	4665      	mov	r5, ip
			cmd_lvl++;
 8000e18:	3601      	adds	r6, #1
			p_cmd = p_static_entry->subcmd;
 8000e1a:	f8d7 b008 	ldr.w	fp, [r7, #8]
			cmd_idx = 0;
 8000e1e:	f04f 0800 	mov.w	r8, #0
 8000e22:	e78d      	b.n	8000d40 <execute+0xfc>
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
 8000e24:	9d04      	ldr	r5, [sp, #16]
	if (shell->ctx->active_cmd.args.mandatory) {
 8000e26:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
 8000e28:	eba5 050a 	sub.w	r5, r5, sl
	if (shell->ctx->active_cmd.args.mandatory) {
 8000e2c:	b18b      	cbz	r3, 8000e52 <execute+0x20e>
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
 8000e2e:	429d      	cmp	r5, r3
		u8_t opt = shell->ctx->active_cmd.args.optional;
 8000e30:	7e42      	ldrb	r2, [r0, #25]
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
 8000e32:	d302      	bcc.n	8000e3a <execute+0x1f6>
 8000e34:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
 8000e36:	429d      	cmp	r5, r3
 8000e38:	d90b      	bls.n	8000e52 <execute+0x20e>
		shell_internal_fprintf(shell, SHELL_ERROR,
 8000e3a:	6883      	ldr	r3, [r0, #8]
 8000e3c:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <execute+0x26c>)
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4620      	mov	r0, r4
 8000e42:	f006 fa18 	bl	8007276 <shell_internal_fprintf>
			shell_internal_help_print(shell);
 8000e46:	4620      	mov	r0, r4
 8000e48:	f005 fe8a 	bl	8006b60 <shell_internal_help_print>
		return -EINVAL;
 8000e4c:	f06f 0515 	mvn.w	r5, #21
 8000e50:	e726      	b.n	8000ca0 <execute+0x5c>
	z_impl_k_mutex_unlock(mutex);
 8000e52:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
 8000e56:	f004 f91f 	bl	8005098 <z_impl_k_mutex_unlock>
		flag_cmd_ctx_set(shell, 1);
 8000e5a:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
}

static inline void flag_cmd_ctx_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.cmd_ctx = val ? 1 : 0;
 8000e5c:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8000e60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e64:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
		ret_val = shell->ctx->active_cmd.handler(shell, argc, argv);
 8000e68:	aa0f      	add	r2, sp, #60	; 0x3c
 8000e6a:	4629      	mov	r1, r5
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8000e72:	4620      	mov	r0, r4
 8000e74:	4798      	blx	r3
 8000e76:	4605      	mov	r5, r0
		flag_cmd_ctx_set(shell, 0);
 8000e78:	68a0      	ldr	r0, [r4, #8]
 8000e7a:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8000e7e:	f36f 13c7 	bfc	r3, #7, #1
 8000e82:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8000e86:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
 8000e8a:	f005 fe86 	bl	8006b9a <k_mutex_lock.constprop.34>
 8000e8e:	e707      	b.n	8000ca0 <execute+0x5c>
 8000e90:	08009ab8 	.word	0x08009ab8
 8000e94:	08009a17 	.word	0x08009a17
 8000e98:	08009a2e 	.word	0x08009a2e
 8000e9c:	08009a2b 	.word	0x08009a2b
 8000ea0:	08009a35 	.word	0x08009a35
 8000ea4:	08009a53 	.word	0x08009a53
 8000ea8:	08009b3b 	.word	0x08009b3b
 8000eac:	08009a67 	.word	0x08009a67
 8000eb0:	08009a96 	.word	0x08009a96

08000eb4 <shell_init>:
	}
}

int shell_init(const struct shell *shell, const void *transport_config,
	       bool use_colors, bool log_backend, u32_t init_log_level)
{
 8000eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eb8:	4604      	mov	r4, r0
	int err = shell->iface->api->init(shell->iface, p_config,
 8000eba:	6840      	ldr	r0, [r0, #4]
 8000ebc:	4a37      	ldr	r2, [pc, #220]	; (8000f9c <shell_init+0xe8>)
{
 8000ebe:	461f      	mov	r7, r3
	int err = shell->iface->api->init(shell->iface, p_config,
 8000ec0:	6803      	ldr	r3, [r0, #0]
{
 8000ec2:	b086      	sub	sp, #24
	int err = shell->iface->api->init(shell->iface, p_config,
 8000ec4:	681d      	ldr	r5, [r3, #0]
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	47a8      	blx	r5
	if (err != 0) {
 8000eca:	4606      	mov	r6, r0
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d161      	bne.n	8000f94 <shell_init+0xe0>
	memset(shell->ctx, 0, sizeof(*shell->ctx));
 8000ed0:	4601      	mov	r1, r0
 8000ed2:	f44f 7241 	mov.w	r2, #772	; 0x304
 8000ed6:	68a0      	ldr	r0, [r4, #8]
 8000ed8:	f007 f8e6 	bl	80080a8 <memset>
	shell->ctx->prompt = shell->default_prompt;
 8000edc:	68a3      	ldr	r3, [r4, #8]
 8000ede:	6822      	ldr	r2, [r4, #0]
	shell_history_init(shell->history);
 8000ee0:	68e0      	ldr	r0, [r4, #12]
	shell->ctx->prompt = shell->default_prompt;
 8000ee2:	601a      	str	r2, [r3, #0]
	shell_history_init(shell->history);
 8000ee4:	f006 fbfb 	bl	80076de <shell_history_init>
	k_mutex_init(&shell->ctx->wr_mtx);
 8000ee8:	68a0      	ldr	r0, [r4, #8]
 8000eea:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
	z_impl_k_mutex_init(mutex);
 8000eee:	f007 fc89 	bl	8008804 <z_impl_k_mutex_init>
 8000ef2:	f44f 7827 	mov.w	r8, #668	; 0x29c
 8000ef6:	f44f 7517 	mov.w	r5, #604	; 0x25c
		k_poll_signal_init(&shell->ctx->signals[i]);
 8000efa:	68a0      	ldr	r0, [r4, #8]
 8000efc:	4428      	add	r0, r5
		arch_syscall_invoke1(*(uintptr_t *)&signal, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(signal);
 8000efe:	f007 ffc9 	bl	8008e94 <z_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
 8000f02:	68a0      	ldr	r0, [r4, #8]
 8000f04:	2200      	movs	r2, #0
 8000f06:	1943      	adds	r3, r0, r5
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4440      	add	r0, r8
 8000f0c:	3510      	adds	r5, #16
 8000f0e:	f004 fe4f 	bl	8005bb0 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 8000f12:	f5b5 7f27 	cmp.w	r5, #668	; 0x29c
 8000f16:	f108 0814 	add.w	r8, r8, #20
 8000f1a:	d1ee      	bne.n	8000efa <shell_init+0x46>
		shell->stats->log_lost_cnt = 0;
 8000f1c:	69a3      	ldr	r3, [r4, #24]
 8000f1e:	2500      	movs	r5, #0
 8000f20:	601d      	str	r5, [r3, #0]
	flag_tx_rdy_set(shell, true);
 8000f22:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
 8000f24:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	f042 0210 	orr.w	r2, r2, #16
 8000f2e:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->internal.flags.echo = val ? 1 : 0;
 8000f32:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8000f36:	f042 0204 	orr.w	r2, r2, #4
 8000f3a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
 8000f3e:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8000f42:	f042 0220 	orr.w	r2, r2, #32
 8000f46:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->state = SHELL_STATE_INITIALIZED;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	711a      	strb	r2, [r3, #4]
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <shell_init+0xec>)
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
 8000f52:	f005 fdf2 	bl	8006b3a <shell_strlen>
 8000f56:	68a3      	ldr	r3, [r4, #8]
 8000f58:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS));
 8000f5c:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
 8000f5e:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258

	if (err != 0) {
		return err;
	}

	k_tid_t tid = k_thread_create(shell->thread,
 8000f6a:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8000f6e:	230e      	movs	r3, #14
 8000f70:	9303      	str	r3, [sp, #12]
 8000f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000f74:	9400      	str	r4, [sp, #0]
 8000f76:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8000f7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <shell_init+0xf0>)
 8000f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f84:	f004 fc4e 	bl	8005824 <z_impl_k_thread_create>
			      shell->stack, CONFIG_SHELL_STACK_SIZE,
			      shell_thread, (void *)shell, (void *)log_backend,
			      UINT_TO_POINTER(init_log_level),
			      K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	shell->ctx->tid = tid;
 8000f88:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
 8000f8a:	6a21      	ldr	r1, [r4, #32]
	shell->ctx->tid = tid;
 8000f8c:	f8c3 0300 	str.w	r0, [r3, #768]	; 0x300
	return z_impl_k_thread_name_set(thread_id, value);
 8000f90:	f007 fe03 	bl	8008b9a <z_impl_k_thread_name_set>

	return 0;
}
 8000f94:	4630      	mov	r0, r6
 8000f96:	b006      	add	sp, #24
 8000f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f9c:	08006b87 	.word	0x08006b87
 8000fa0:	00500018 	.word	0x00500018
 8000fa4:	08001735 	.word	0x08001735

08000fa8 <shell_start>:
int shell_start(const struct shell *shell)
{
	__ASSERT_NO_MSG(shell);
	__ASSERT_NO_MSG(shell->ctx && shell->iface && shell->default_prompt);

	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
 8000fa8:	6883      	ldr	r3, [r0, #8]
 8000faa:	791b      	ldrb	r3, [r3, #4]
 8000fac:	2b01      	cmp	r3, #1
{
 8000fae:	b510      	push	{r4, lr}
 8000fb0:	4604      	mov	r4, r0
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
 8000fb2:	d10b      	bne.n	8000fcc <shell_start+0x24>
		return -ENOTSUP;
	}

	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		shell_vt100_color_set(shell, SHELL_NORMAL);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	f000 fcc9 	bl	800194c <shell_vt100_color_set>
	}

	shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
 8000fba:	4906      	ldr	r1, [pc, #24]	; (8000fd4 <shell_start+0x2c>)
 8000fbc:	6960      	ldr	r0, [r4, #20]
 8000fbe:	f005 fdc2 	bl	8006b46 <shell_raw_fprintf>

	state_set(shell, SHELL_STATE_ACTIVE);
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f005 fdd5 	bl	8006b72 <state_set.constprop.31>

	return 0;
 8000fc8:	2000      	movs	r0, #0
}
 8000fca:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8000fcc:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000fd0:	e7fb      	b.n	8000fca <shell_start+0x22>
 8000fd2:	bf00      	nop
 8000fd4:	08009ab7 	.word	0x08009ab7

08000fd8 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
 8000fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fdc:	6883      	ldr	r3, [r0, #8]
 8000fde:	f3bf 8f5b 	dmb	ish
 8000fe2:	b0ad      	sub	sp, #180	; 0xb4
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000fea:	e853 2f00 	ldrex	r2, [r3]
 8000fee:	f042 0208 	orr.w	r2, r2, #8
 8000ff2:	e843 2100 	strex	r1, r2, [r3]
 8000ff6:	2900      	cmp	r1, #0
 8000ff8:	d1f7      	bne.n	8000fea <shell_process+0x12>
 8000ffa:	f3bf 8f5b 	dmb	ish
	internal.flags.processing = 1U;

	(void)atomic_or((atomic_t *)&shell->ctx->internal.value,
			internal.value);

	switch (shell->ctx->state) {
 8000ffe:	68a3      	ldr	r3, [r4, #8]
 8001000:	791b      	ldrb	r3, [r3, #4]
 8001002:	2b02      	cmp	r3, #2
 8001004:	f040 8383 	bne.w	800170e <shell_process+0x736>
	size_t count = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	930b      	str	r3, [sp, #44]	; 0x2c
		(void)shell->iface->api->read(shell->iface, &data,
 800100c:	6860      	ldr	r0, [r4, #4]
 800100e:	6803      	ldr	r3, [r0, #0]
 8001010:	2201      	movs	r2, #1
 8001012:	691d      	ldr	r5, [r3, #16]
 8001014:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
 8001018:	ab0b      	add	r3, sp, #44	; 0x2c
 800101a:	47a8      	blx	r5
		if (count == 0) {
 800101c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 8375 	beq.w	800170e <shell_process+0x736>
		if (ascii_filter(data) != 0) {
 8001024:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
	return (u8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 8001028:	0608      	lsls	r0, r1, #24
 800102a:	d4ef      	bmi.n	800100c <shell_process+0x34>
		switch (shell->ctx->receive_state) {
 800102c:	68a0      	ldr	r0, [r4, #8]
 800102e:	7943      	ldrb	r3, [r0, #5]
 8001030:	2b02      	cmp	r3, #2
 8001032:	f200 836a 	bhi.w	800170a <shell_process+0x732>
 8001036:	e8df f013 	tbh	[pc, r3, lsl #1]
 800103a:	0003      	.short	0x0003
 800103c:	02ff02da 	.word	0x02ff02da
	if ((data != '\r') && (data != '\n')) {
 8001040:	290d      	cmp	r1, #13
 8001042:	d01b      	beq.n	800107c <shell_process+0xa4>
 8001044:	290a      	cmp	r1, #10
 8001046:	d019      	beq.n	800107c <shell_process+0xa4>
	return shell->ctx->internal.flags.last_nl;
}

static inline void flag_last_nl_set(const struct shell *shell, u8_t val)
{
	shell->ctx->internal.flags.last_nl = val;
 8001048:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 800104c:	f36f 230f 	bfc	r3, #8, #8
 8001050:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
			switch (data) {
 8001054:	2909      	cmp	r1, #9
 8001056:	d055      	beq.n	8001104 <shell_process+0x12c>
 8001058:	d83a      	bhi.n	80010d0 <shell_process+0xf8>
 800105a:	2900      	cmp	r1, #0
 800105c:	d0d6      	beq.n	800100c <shell_process+0x34>
 800105e:	2908      	cmp	r1, #8
 8001060:	f000 8229 	beq.w	80014b6 <shell_process+0x4de>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
 8001064:	f1a1 0320 	sub.w	r3, r1, #32
				if (isprint((int) data)) {
 8001068:	2b5e      	cmp	r3, #94	; 0x5e
 800106a:	f200 8233 	bhi.w	80014d4 <shell_process+0x4fc>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 800106e:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8001072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001076:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
 800107a:	e11f      	b.n	80012bc <shell_process+0x2e4>
	return shell->ctx->internal.flags.last_nl;
 800107c:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
	if ((flag_last_nl_get(shell) == 0U) ||
 8001080:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001084:	d005      	beq.n	8001092 <shell_process+0xba>
 8001086:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
 800108a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800108e:	4299      	cmp	r1, r3
 8001090:	d1e0      	bne.n	8001054 <shell_process+0x7c>
	shell->ctx->internal.flags.last_nl = val;
 8001092:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8001096:	f361 230f 	bfi	r3, r1, #8, #8
 800109a:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
				if (!shell->ctx->cmd_buff_len &&
 800109e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80010a0:	b993      	cbnz	r3, 80010c8 <shell_process+0xf0>
 80010a2:	69c2      	ldr	r2, [r0, #28]
 80010a4:	b982      	cbnz	r2, 80010c8 <shell_process+0xf0>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 80010a6:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 80010aa:	f362 1386 	bfi	r3, r2, #6, #1
 80010ae:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	shell_history_mode_exit(shell->history);
 80010b2:	68e0      	ldr	r0, [r4, #12]
 80010b4:	f006 fa6e 	bl	8007594 <shell_history_mode_exit>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 80010b8:	4985      	ldr	r1, [pc, #532]	; (80012d0 <shell_process+0x2f8>)
 80010ba:	6960      	ldr	r0, [r4, #20]
 80010bc:	f005 fd43 	bl	8006b46 <shell_raw_fprintf>
		state_set(shell, SHELL_STATE_ACTIVE);
 80010c0:	4620      	mov	r0, r4
 80010c2:	f005 fd56 	bl	8006b72 <state_set.constprop.31>
		break;
 80010c6:	e7a1      	b.n	800100c <shell_process+0x34>
					(void)execute(shell);
 80010c8:	4620      	mov	r0, r4
 80010ca:	f7ff fdbb 	bl	8000c44 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
 80010ce:	e7f7      	b.n	80010c0 <shell_process+0xe8>
 80010d0:	291b      	cmp	r1, #27
 80010d2:	d014      	beq.n	80010fe <shell_process+0x126>
 80010d4:	297f      	cmp	r1, #127	; 0x7f
 80010d6:	d1c5      	bne.n	8001064 <shell_process+0x8c>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80010d8:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
 80010dc:	075f      	lsls	r7, r3, #29
 80010de:	d595      	bpl.n	800100c <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 80010e0:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 80010e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e8:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	return shell->ctx->internal.flags.mode_delete == 1 ? true : false;
 80010ec:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
					if (flag_mode_delete_get(shell)) {
 80010f0:	069e      	lsls	r6, r3, #26
 80010f2:	f100 81eb 	bmi.w	80014cc <shell_process+0x4f4>
		shell_op_char_delete(shell);
 80010f6:	4620      	mov	r0, r4
 80010f8:	f006 f8fe 	bl	80072f8 <shell_op_char_delete>
		break;
 80010fc:	e786      	b.n	800100c <shell_process+0x34>
	shell->ctx->receive_state = state;
 80010fe:	2301      	movs	r3, #1
 8001100:	7143      	strb	r3, [r0, #5]
 8001102:	e783      	b.n	800100c <shell_process+0x34>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 8001104:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
 8001108:	f3c3 0980 	ubfx	r9, r3, #2, #1
				if (flag_echo_get(shell)) {
 800110c:	f1b9 0f00 	cmp.w	r9, #0
 8001110:	f43f af7c 	beq.w	800100c <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 8001114:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8001118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800111c:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	if (compl_space == 0U) {
 8001120:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001122:	2bff      	cmp	r3, #255	; 0xff
 8001124:	f43f af72 	beq.w	800100c <shell_process+0x34>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
 8001128:	8e82      	ldrh	r2, [r0, #52]	; 0x34
 800112a:	f100 0138 	add.w	r1, r0, #56	; 0x38
 800112e:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8001132:	f006 ff8f 	bl	8008054 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
 8001136:	68a2      	ldr	r2, [r4, #8]
 8001138:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 800113a:	4413      	add	r3, r2
 800113c:	2100      	movs	r1, #0
 800113e:	f883 1138 	strb.w	r1, [r3, #312]	; 0x138
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
 8001142:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8001146:	230c      	movs	r3, #12
 8001148:	a91f      	add	r1, sp, #124	; 0x7c
 800114a:	a80d      	add	r0, sp, #52	; 0x34
 800114c:	f005 fdbe 	bl	8006ccc <shell_make_argv>
	int space = isspace((int)shell->ctx->cmd_buff[
 8001150:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
 8001152:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
	int space = isspace((int)shell->ctx->cmd_buff[
 8001154:	4413      	add	r3, r2
 8001156:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
 800115a:	2b20      	cmp	r3, #32
 800115c:	d054      	beq.n	8001208 <shell_process+0x230>
 800115e:	3b09      	subs	r3, #9
 8001160:	2b04      	cmp	r3, #4
 8001162:	bf8c      	ite	hi
 8001164:	2300      	movhi	r3, #0
 8001166:	2301      	movls	r3, #1
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
 8001168:	990d      	ldr	r1, [sp, #52]	; 0x34
 800116a:	b119      	cbz	r1, 8001174 <shell_process+0x19c>
 800116c:	2b00      	cmp	r3, #0
 800116e:	d14e      	bne.n	800120e <shell_process+0x236>
 8001170:	2901      	cmp	r1, #1
 8001172:	d14b      	bne.n	800120c <shell_process+0x234>
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
 8001174:	2500      	movs	r5, #0
 8001176:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 8001178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800117a:	aa2c      	add	r2, sp, #176	; 0xb0
 800117c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
 8001180:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 8001182:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
 8001186:	4650      	mov	r0, sl
 8001188:	f005 fcd7 	bl	8006b3a <shell_strlen>
	size_t idx = 0;
 800118c:	46b0      	mov	r8, r6
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
 800118e:	9004      	str	r0, [sp, #16]
	*longest = 0U;
 8001190:	9605      	str	r6, [sp, #20]
	size_t first = 0;
 8001192:	9603      	str	r6, [sp, #12]
	bool found = false;
 8001194:	46b3      	mov	fp, r6
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 8001196:	af1a      	add	r7, sp, #104	; 0x68
 8001198:	2d00      	cmp	r5, #0
 800119a:	d045      	beq.n	8001228 <shell_process+0x250>
 800119c:	68a9      	ldr	r1, [r5, #8]
 800119e:	1c2b      	adds	r3, r5, #0
 80011a0:	bf18      	it	ne
 80011a2:	2301      	movne	r3, #1
 80011a4:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80011a8:	ab15      	add	r3, sp, #84	; 0x54
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	9a02      	ldr	r2, [sp, #8]
 80011ae:	4643      	mov	r3, r8
 80011b0:	4620      	mov	r0, r4
 80011b2:	f000 fb33 	bl	800181c <shell_cmd_get>
		if (!candidate) {
 80011b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d039      	beq.n	8001230 <shell_process+0x258>
	return entry->syntax &&
 80011bc:	6818      	ldr	r0, [r3, #0]
		(entry->handler == NULL) && (entry->subcmd == NULL);
 80011be:	2800      	cmp	r0, #0
 80011c0:	d034      	beq.n	800122c <shell_process+0x254>
	return entry->syntax &&
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	2a00      	cmp	r2, #0
 80011c6:	d131      	bne.n	800122c <shell_process+0x254>
		(entry->handler == NULL) && (entry->subcmd == NULL);
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	fab3 f383 	clz	r3, r3
 80011ce:	095b      	lsrs	r3, r3, #5
	return (strncmp(candidate, str, len) == 0) ? true : false;
 80011d0:	9a04      	ldr	r2, [sp, #16]
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	4651      	mov	r1, sl
 80011d6:	f006 ff07 	bl	8007fe8 <strncmp>
		if (!is_empty && is_candidate) {
 80011da:	9b02      	ldr	r3, [sp, #8]
 80011dc:	4303      	orrs	r3, r0
 80011de:	d110      	bne.n	8001202 <shell_process+0x22a>
			size_t slen = strlen(candidate->syntax);
 80011e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	f006 feed 	bl	8007fc2 <strlen>
			*longest = (slen > *longest) ? slen : *longest;
 80011e8:	9b05      	ldr	r3, [sp, #20]
 80011ea:	4283      	cmp	r3, r0
 80011ec:	bf38      	it	cc
 80011ee:	4603      	movcc	r3, r0
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	9305      	str	r3, [sp, #20]
			(*cnt)++;
 80011f4:	3601      	adds	r6, #1
			if (!found) {
 80011f6:	f1bb 0f00 	cmp.w	fp, #0
 80011fa:	d102      	bne.n	8001202 <shell_process+0x22a>
				*first_idx = idx;
 80011fc:	f8cd 800c 	str.w	r8, [sp, #12]
			found = true;
 8001200:	46cb      	mov	fp, r9
		idx++;
 8001202:	f108 0801 	add.w	r8, r8, #1
 8001206:	e7c7      	b.n	8001198 <shell_process+0x1c0>
 8001208:	2301      	movs	r3, #1
 800120a:	e7ad      	b.n	8001168 <shell_process+0x190>
	search_argc = space ? *argc : *argc - 1;
 800120c:	3901      	subs	r1, #1
	*cmd = shell_get_last_command(shell, search_argc, *argv,
 800120e:	2300      	movs	r3, #0
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	ab10      	add	r3, sp, #64	; 0x40
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	aa1f      	add	r2, sp, #124	; 0x7c
 8001218:	ab0c      	add	r3, sp, #48	; 0x30
 800121a:	4620      	mov	r0, r4
 800121c:	f005 fe42 	bl	8006ea4 <shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
 8001220:	4605      	mov	r5, r0
 8001222:	2800      	cmp	r0, #0
 8001224:	d1a8      	bne.n	8001178 <shell_process+0x1a0>
 8001226:	e6f1      	b.n	800100c <shell_process+0x34>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 8001228:	4629      	mov	r1, r5
 800122a:	e7b8      	b.n	800119e <shell_process+0x1c6>
		(entry->handler == NULL) && (entry->subcmd == NULL);
 800122c:	2300      	movs	r3, #0
 800122e:	e7cf      	b.n	80011d0 <shell_process+0x1f8>
	if (cnt == 1) {
 8001230:	2e01      	cmp	r6, #1
 8001232:	d14f      	bne.n	80012d4 <shell_process+0x2fc>
		autocomplete(shell, cmd, argv[arg_idx], first);
 8001234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001236:	aa2c      	add	r2, sp, #176	; 0xb0
 8001238:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
 800123c:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8001240:	f005 fc7b 	bl	8006b3a <shell_strlen>
 8001244:	4606      	mov	r6, r0
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 8001246:	b105      	cbz	r5, 800124a <shell_process+0x272>
 8001248:	68ad      	ldr	r5, [r5, #8]
 800124a:	68a3      	ldr	r3, [r4, #8]
 800124c:	3308      	adds	r3, #8
 800124e:	e9cd 7300 	strd	r7, r3, [sp]
 8001252:	4629      	mov	r1, r5
 8001254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001258:	4620      	mov	r0, r4
 800125a:	f000 fadf 	bl	800181c <shell_cmd_get>
	cmd_len = shell_strlen(match->syntax);
 800125e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	f005 fc6a 	bl	8006b3a <shell_strlen>
	if (cmd_len != arg_len) {
 8001266:	4286      	cmp	r6, r0
 8001268:	d007      	beq.n	800127a <shell_process+0x2a2>
					   match->syntax + arg_len,
 800126a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
		shell_op_completion_insert(shell,
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	1b82      	subs	r2, r0, r6
 8001270:	b292      	uxth	r2, r2
 8001272:	4431      	add	r1, r6
 8001274:	4620      	mov	r0, r4
 8001276:	f006 f83d 	bl	80072f4 <shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
 800127a:	68a3      	ldr	r3, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
 800127c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
	if (!isspace((int) shell->ctx->cmd_buff[
 800127e:	441a      	add	r2, r3
 8001280:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001284:	2a20      	cmp	r2, #32
 8001286:	d01d      	beq.n	80012c4 <shell_process+0x2ec>
 8001288:	3a09      	subs	r2, #9
 800128a:	2a04      	cmp	r2, #4
 800128c:	d91a      	bls.n	80012c4 <shell_process+0x2ec>
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
 800128e:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
		if (flag_insert_mode_get(shell)) {
 8001292:	07d2      	lsls	r2, r2, #31
 8001294:	d511      	bpl.n	80012ba <shell_process+0x2e2>
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
 8001296:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 800129a:	f36f 0200 	bfc	r2, #0, #1
 800129e:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			shell_op_char_insert(shell, ' ');
 80012a2:	2120      	movs	r1, #32
 80012a4:	4620      	mov	r0, r4
 80012a6:	f000 fc19 	bl	8001adc <shell_op_char_insert>
			flag_insert_mode_set(shell, true);
 80012aa:	68a2      	ldr	r2, [r4, #8]
 80012ac:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 80012b0:	f043 0301 	orr.w	r3, r3, #1
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 80012b4:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
 80012b8:	e6a8      	b.n	800100c <shell_process+0x34>
			shell_op_char_insert(shell, ' ');
 80012ba:	2120      	movs	r1, #32
					shell_op_char_insert(shell, data);
 80012bc:	4620      	mov	r0, r4
 80012be:	f000 fc0d 	bl	8001adc <shell_op_char_insert>
 80012c2:	e6a3      	b.n	800100c <shell_process+0x34>
		shell_op_cursor_move(shell, 1);
 80012c4:	2101      	movs	r1, #1
 80012c6:	4620      	mov	r0, r4
 80012c8:	f005 fed8 	bl	800707c <shell_op_cursor_move>
 80012cc:	e69e      	b.n	800100c <shell_process+0x34>
 80012ce:	bf00      	nop
 80012d0:	08009ab8 	.word	0x08009ab8
 80012d4:	9306      	str	r3, [sp, #24]
	} else if (cnt > 1) {
 80012d6:	f67f ae99 	bls.w	800100c <shell_process+0x34>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
 80012da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	longest_option += shell_strlen(tab);
 80012dc:	f8df 8354 	ldr.w	r8, [pc, #852]	; 8001634 <shell_process+0x65c>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
 80012e0:	ab2c      	add	r3, sp, #176	; 0xb0
 80012e2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80012e6:	f852 3c34 	ldr.w	r3, [r2, #-52]
 80012ea:	9304      	str	r3, [sp, #16]
	size_t str_len = shell_strlen(str);
 80012ec:	4618      	mov	r0, r3
 80012ee:	f005 fc24 	bl	8006b3a <shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 80012f2:	68a2      	ldr	r2, [r4, #8]
 80012f4:	9b06      	ldr	r3, [sp, #24]
 80012f6:	f8dd 900c 	ldr.w	r9, [sp, #12]
	size_t str_len = shell_strlen(str);
 80012fa:	9008      	str	r0, [sp, #32]
		shell->ctx->vt100_ctx.printed_cmd = 0;
 80012fc:	8613      	strh	r3, [r2, #48]	; 0x30
 80012fe:	9606      	str	r6, [sp, #24]
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 8001300:	2d00      	cmp	r5, #0
 8001302:	f000 8086 	beq.w	8001412 <shell_process+0x43a>
 8001306:	68a9      	ldr	r1, [r5, #8]
 8001308:	68a3      	ldr	r3, [r4, #8]
 800130a:	9a02      	ldr	r2, [sp, #8]
 800130c:	3308      	adds	r3, #8
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	ab1a      	add	r3, sp, #104	; 0x68
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	4620      	mov	r0, r4
 8001316:	464b      	mov	r3, r9
 8001318:	f000 fa80 	bl	800181c <shell_cmd_get>
		is_empty = is_empty_cmd(match);
 800131c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
	return entry->syntax &&
 800131e:	6818      	ldr	r0, [r3, #0]
		idx++;
 8001320:	f109 0901 	add.w	r9, r9, #1
		(entry->handler == NULL) && (entry->subcmd == NULL);
 8001324:	2800      	cmp	r0, #0
 8001326:	d176      	bne.n	8001416 <shell_process+0x43e>
		tab_item_print(shell, match->syntax, longest);
 8001328:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800132a:	f8d3 a000 	ldr.w	sl, [r3]
	if (option == NULL) {
 800132e:	f1ba 0f00 	cmp.w	sl, #0
 8001332:	f040 8082 	bne.w	800143a <shell_process+0x462>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 8001336:	68a3      	ldr	r3, [r4, #8]
 8001338:	f8a3 a030 	strh.w	sl, [r3, #48]	; 0x30
	while (cnt) {
 800133c:	9b06      	ldr	r3, [sp, #24]
 800133e:	3b01      	subs	r3, #1
 8001340:	9306      	str	r3, [sp, #24]
 8001342:	d1dd      	bne.n	8001300 <shell_process+0x328>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8001344:	49b5      	ldr	r1, [pc, #724]	; (800161c <shell_process+0x644>)
 8001346:	6960      	ldr	r0, [r4, #20]
 8001348:	f005 fbfd 	bl	8006b46 <shell_raw_fprintf>
	shell_print_prompt_and_cmd(shell);
 800134c:	4620      	mov	r0, r4
 800134e:	f000 fbf7 	bl	8001b40 <shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
 8001352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001354:	aa2c      	add	r2, sp, #176	; 0xb0
 8001356:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
 800135a:	f853 0c34 	ldr.w	r0, [r3, #-52]
 800135e:	f005 fbec 	bl	8006b3a <shell_strlen>
	size_t idx = first + 1;
 8001362:	9b03      	ldr	r3, [sp, #12]
	u16_t arg_len = shell_strlen(arg);
 8001364:	4680      	mov	r8, r0
	size_t idx = first + 1;
 8001366:	f103 0901 	add.w	r9, r3, #1
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 800136a:	2d00      	cmp	r5, #0
 800136c:	f000 809d 	beq.w	80014aa <shell_process+0x4d2>
 8001370:	68a9      	ldr	r1, [r5, #8]
 8001372:	ab15      	add	r3, sp, #84	; 0x54
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	ab0e      	add	r3, sp, #56	; 0x38
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	4620      	mov	r0, r4
 800137c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001380:	f000 fa4c 	bl	800181c <shell_cmd_get>
	strncpy(shell->ctx->temp_buff, match->syntax,
 8001384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001386:	68a0      	ldr	r0, [r4, #8]
 8001388:	6819      	ldr	r1, [r3, #0]
 800138a:	22ff      	movs	r2, #255	; 0xff
 800138c:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8001390:	f006 fdf6 	bl	8007f80 <strncpy>
	*str = match->syntax;
 8001394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001396:	f8d3 a000 	ldr.w	sl, [r3]
	u16_t common = UINT16_MAX;
 800139a:	f64f 77ff 	movw	r7, #65535	; 0xffff
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 800139e:	2d00      	cmp	r5, #0
 80013a0:	f000 8087 	beq.w	80014b2 <shell_process+0x4da>
 80013a4:	68a9      	ldr	r1, [r5, #8]
 80013a6:	9a02      	ldr	r2, [sp, #8]
 80013a8:	ab1a      	add	r3, sp, #104	; 0x68
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	ab0f      	add	r3, sp, #60	; 0x3c
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	4620      	mov	r0, r4
 80013b2:	464b      	mov	r3, r9
 80013b4:	f000 fa32 	bl	800181c <shell_cmd_get>
		if (match2 == NULL) {
 80013b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 80013ba:	f109 0b01 	add.w	fp, r9, #1
		if (match2 == NULL) {
 80013be:	b1e3      	cbz	r3, 80013fa <shell_process+0x422>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
 80013c0:	6818      	ldr	r0, [r3, #0]
static size_t str_common(const char *s1, const char *s2, size_t n)
 80013c2:	68a3      	ldr	r3, [r4, #8]
	size_t common = 0;
 80013c4:	2200      	movs	r2, #0
 80013c6:	f503 739c 	add.w	r3, r3, #312	; 0x138
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 80013ca:	f813 cb01 	ldrb.w	ip, [r3], #1
 80013ce:	5c81      	ldrb	r1, [r0, r2]
 80013d0:	4561      	cmp	r1, ip
 80013d2:	d105      	bne.n	80013e0 <shell_process+0x408>
 80013d4:	b121      	cbz	r1, 80013e0 <shell_process+0x408>
		common++;
 80013d6:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 80013d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013dc:	428a      	cmp	r2, r1
 80013de:	d1f4      	bne.n	80013ca <shell_process+0x3f2>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
 80013e0:	f1b8 0f00 	cmp.w	r8, #0
 80013e4:	d001      	beq.n	80013ea <shell_process+0x412>
 80013e6:	4542      	cmp	r2, r8
 80013e8:	db61      	blt.n	80014ae <shell_process+0x4d6>
			common = (curr_common < common) ? curr_common : common;
 80013ea:	4297      	cmp	r7, r2
			--cnt;
 80013ec:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
 80013f0:	bfa8      	it	ge
 80013f2:	4617      	movge	r7, r2
	while (cnt > 1) {
 80013f4:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
 80013f6:	b2bf      	uxth	r7, r7
	while (cnt > 1) {
 80013f8:	d159      	bne.n	80014ae <shell_process+0x4d6>
	if (common) {
 80013fa:	2f00      	cmp	r7, #0
 80013fc:	f43f ae06 	beq.w	800100c <shell_process+0x34>
		shell_op_completion_insert(shell, &completion[arg_len],
 8001400:	eba7 0208 	sub.w	r2, r7, r8
 8001404:	b292      	uxth	r2, r2
 8001406:	eb0a 0108 	add.w	r1, sl, r8
 800140a:	4620      	mov	r0, r4
 800140c:	f005 ff72 	bl	80072f4 <shell_op_completion_insert>
 8001410:	e5fc      	b.n	800100c <shell_process+0x34>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 8001412:	4629      	mov	r1, r5
 8001414:	e778      	b.n	8001308 <shell_process+0x330>
	return entry->syntax &&
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	b91a      	cbnz	r2, 8001422 <shell_process+0x44a>
		(entry->handler == NULL) && (entry->subcmd == NULL);
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f43f af6f 	beq.w	8001300 <shell_process+0x328>
		if (is_empty || (str && match->syntax &&
 8001422:	9b04      	ldr	r3, [sp, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	f43f af7f 	beq.w	8001328 <shell_process+0x350>
	return (strncmp(candidate, str, len) == 0) ? true : false;
 800142a:	9a08      	ldr	r2, [sp, #32]
 800142c:	9904      	ldr	r1, [sp, #16]
 800142e:	f006 fddb 	bl	8007fe8 <strncmp>
		if (is_empty || (str && match->syntax &&
 8001432:	2800      	cmp	r0, #0
 8001434:	f43f af78 	beq.w	8001328 <shell_process+0x350>
 8001438:	e762      	b.n	8001300 <shell_process+0x328>
	longest_option += shell_strlen(tab);
 800143a:	4640      	mov	r0, r8
 800143c:	f005 fb7d 	bl	8006b3a <shell_strlen>
 8001440:	9b05      	ldr	r3, [sp, #20]
 8001442:	4418      	add	r0, r3
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 8001444:	68a3      	ldr	r3, [r4, #8]
	longest_option += shell_strlen(tab);
 8001446:	fa1f fb80 	uxth.w	fp, r0
			- shell_strlen(tab)) / longest_option;
 800144a:	4640      	mov	r0, r8
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 800144c:	8d5f      	ldrh	r7, [r3, #42]	; 0x2a
			- shell_strlen(tab)) / longest_option;
 800144e:	f005 fb74 	bl	8006b3a <shell_strlen>
 8001452:	9009      	str	r0, [sp, #36]	; 0x24
	diff = longest_option - shell_strlen(option);
 8001454:	4650      	mov	r0, sl
 8001456:	f005 fb70 	bl	8006b3a <shell_strlen>
 800145a:	ebab 0000 	sub.w	r0, fp, r0
 800145e:	b283      	uxth	r3, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8001460:	68a1      	ldr	r1, [r4, #8]
	diff = longest_option - shell_strlen(option);
 8001462:	9307      	str	r3, [sp, #28]
			- shell_strlen(tab)) / longest_option;
 8001464:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8001466:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
			- shell_strlen(tab)) / longest_option;
 8001468:	1aff      	subs	r7, r7, r3
 800146a:	fb97 fbfb 	sdiv	fp, r7, fp
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 800146e:	fa1f fb8b 	uxth.w	fp, fp
 8001472:	1c50      	adds	r0, r2, #1
 8001474:	fbb2 f3fb 	udiv	r3, r2, fp
 8001478:	fb0b 2213 	mls	r2, fp, r3, r2
 800147c:	b292      	uxth	r2, r2
 800147e:	8608      	strh	r0, [r1, #48]	; 0x30
 8001480:	b962      	cbnz	r2, 800149c <shell_process+0x4c4>
		shell_internal_fprintf(shell, SHELL_OPTION, "\n%s%s", tab,
 8001482:	f8cd a000 	str.w	sl, [sp]
 8001486:	4643      	mov	r3, r8
 8001488:	4a65      	ldr	r2, [pc, #404]	; (8001620 <shell_process+0x648>)
 800148a:	2107      	movs	r1, #7
 800148c:	4620      	mov	r0, r4
 800148e:	f005 fef2 	bl	8007276 <shell_internal_fprintf>
	shell_op_cursor_horiz_move(shell, diff);
 8001492:	9907      	ldr	r1, [sp, #28]
 8001494:	4620      	mov	r0, r4
 8001496:	f000 fa03 	bl	80018a0 <shell_op_cursor_horiz_move>
 800149a:	e74f      	b.n	800133c <shell_process+0x364>
		shell_internal_fprintf(shell, SHELL_OPTION, "%s", option);
 800149c:	4653      	mov	r3, sl
 800149e:	4a61      	ldr	r2, [pc, #388]	; (8001624 <shell_process+0x64c>)
 80014a0:	2107      	movs	r1, #7
 80014a2:	4620      	mov	r0, r4
 80014a4:	f005 fee7 	bl	8007276 <shell_internal_fprintf>
 80014a8:	e7f3      	b.n	8001492 <shell_process+0x4ba>
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 80014aa:	4629      	mov	r1, r5
 80014ac:	e761      	b.n	8001372 <shell_process+0x39a>
 80014ae:	46d9      	mov	r9, fp
 80014b0:	e775      	b.n	800139e <shell_process+0x3c6>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 80014b2:	4629      	mov	r1, r5
 80014b4:	e777      	b.n	80013a6 <shell_process+0x3ce>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80014b6:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
 80014ba:	075b      	lsls	r3, r3, #29
 80014bc:	f57f ada6 	bpl.w	800100c <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 80014c0:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 80014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c8:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
						shell_op_char_backspace(shell);
 80014cc:	4620      	mov	r0, r4
 80014ce:	f005 ff2e 	bl	800732e <shell_op_char_backspace>
 80014d2:	e59b      	b.n	800100c <shell_process+0x34>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80014d4:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				} else if (flag_echo_get(shell)) {
 80014d8:	075d      	lsls	r5, r3, #29
 80014da:	f57f ad97 	bpl.w	800100c <shell_process+0x34>
	switch (data) {
 80014de:	3901      	subs	r1, #1
 80014e0:	2916      	cmp	r1, #22
 80014e2:	f63f ad93 	bhi.w	800100c <shell_process+0x34>
 80014e6:	a301      	add	r3, pc, #4	; (adr r3, 80014ec <shell_process+0x514>)
 80014e8:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80014ec:	080016d5 	.word	0x080016d5
 80014f0:	08001549 	.word	0x08001549
 80014f4:	08001551 	.word	0x08001551
 80014f8:	080010f7 	.word	0x080010f7
 80014fc:	080016c9 	.word	0x080016c9
 8001500:	08001577 	.word	0x08001577
 8001504:	0800100d 	.word	0x0800100d
 8001508:	0800100d 	.word	0x0800100d
 800150c:	0800100d 	.word	0x0800100d
 8001510:	0800100d 	.word	0x0800100d
 8001514:	0800157f 	.word	0x0800157f
 8001518:	08001587 	.word	0x08001587
 800151c:	0800100d 	.word	0x0800100d
 8001520:	080015a3 	.word	0x080015a3
 8001524:	0800100d 	.word	0x0800100d
 8001528:	080015ad 	.word	0x080015ad
 800152c:	0800100d 	.word	0x0800100d
 8001530:	0800100d 	.word	0x0800100d
 8001534:	0800100d 	.word	0x0800100d
 8001538:	0800100d 	.word	0x0800100d
 800153c:	080015b1 	.word	0x080015b1
 8001540:	0800100d 	.word	0x0800100d
 8001544:	080015dd 	.word	0x080015dd
		shell_op_left_arrow(shell);
 8001548:	4620      	mov	r0, r4
 800154a:	f005 fe02 	bl	8007152 <shell_op_left_arrow>
		break;
 800154e:	e55d      	b.n	800100c <shell_process+0x34>
		shell_op_cursor_end_move(shell);
 8001550:	4620      	mov	r0, r4
 8001552:	f005 fdf7 	bl	8007144 <shell_op_cursor_end_move>
		if (!shell_cursor_in_empty_line(shell)) {
 8001556:	4620      	mov	r0, r4
 8001558:	f005 fd7c 	bl	8007054 <shell_cursor_in_empty_line>
 800155c:	b918      	cbnz	r0, 8001566 <shell_process+0x58e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 800155e:	492f      	ldr	r1, [pc, #188]	; (800161c <shell_process+0x644>)
 8001560:	6960      	ldr	r0, [r4, #20]
 8001562:	f005 faf0 	bl	8006b46 <shell_raw_fprintf>
		flag_history_exit_set(shell, true);
 8001566:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 8001568:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 800156c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001570:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
 8001574:	e5a4      	b.n	80010c0 <shell_process+0xe8>
		shell_op_right_arrow(shell);
 8001576:	4620      	mov	r0, r4
 8001578:	f005 fdf3 	bl	8007162 <shell_op_right_arrow>
		break;
 800157c:	e546      	b.n	800100c <shell_process+0x34>
		shell_op_delete_from_cursor(shell);
 800157e:	4620      	mov	r0, r4
 8001580:	f005 fdf8 	bl	8007174 <shell_op_delete_from_cursor>
		break;
 8001584:	e542      	b.n	800100c <shell_process+0x34>
		SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 8001586:	6960      	ldr	r0, [r4, #20]
 8001588:	4a27      	ldr	r2, [pc, #156]	; (8001628 <shell_process+0x650>)
 800158a:	4926      	ldr	r1, [pc, #152]	; (8001624 <shell_process+0x64c>)
 800158c:	f005 fadb 	bl	8006b46 <shell_raw_fprintf>
		SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
 8001590:	6960      	ldr	r0, [r4, #20]
 8001592:	4a26      	ldr	r2, [pc, #152]	; (800162c <shell_process+0x654>)
 8001594:	4923      	ldr	r1, [pc, #140]	; (8001624 <shell_process+0x64c>)
 8001596:	f005 fad6 	bl	8006b46 <shell_raw_fprintf>
		shell_print_prompt_and_cmd(shell);
 800159a:	4620      	mov	r0, r4
 800159c:	f000 fad0 	bl	8001b40 <shell_print_prompt_and_cmd>
		break;
 80015a0:	e534      	b.n	800100c <shell_process+0x34>
		history_handle(shell, false);
 80015a2:	2100      	movs	r1, #0
		history_handle(shell, true);
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff fafb 	bl	8000ba0 <history_handle>
		break;
 80015aa:	e52f      	b.n	800100c <shell_process+0x34>
		history_handle(shell, true);
 80015ac:	2101      	movs	r1, #1
 80015ae:	e7f9      	b.n	80015a4 <shell_process+0x5cc>
		shell_op_cursor_home_move(shell);
 80015b0:	4620      	mov	r0, r4
 80015b2:	f005 fdc1 	bl	8007138 <shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
 80015b6:	68a3      	ldr	r3, [r4, #8]
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 80015b8:	491a      	ldr	r1, [pc, #104]	; (8001624 <shell_process+0x64c>)
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
 80015c0:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
 80015c2:	865a      	strh	r2, [r3, #50]	; 0x32
		flag_history_exit_set(shell, true);
 80015c4:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 80015c6:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 80015ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ce:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 80015d2:	6960      	ldr	r0, [r4, #20]
 80015d4:	4a16      	ldr	r2, [pc, #88]	; (8001630 <shell_process+0x658>)
 80015d6:	f005 fab6 	bl	8006b46 <shell_raw_fprintf>
 80015da:	e517      	b.n	800100c <shell_process+0x34>
		shell_op_word_remove(shell);
 80015dc:	4620      	mov	r0, r4
 80015de:	f000 f9ff 	bl	80019e0 <shell_op_word_remove>
		flag_history_exit_set(shell, true);
 80015e2:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 80015e4:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 80015e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ec:	e662      	b.n	80012b4 <shell_process+0x2dc>
			if (data == '[') {
 80015ee:	295b      	cmp	r1, #91	; 0x5b
 80015f0:	d101      	bne.n	80015f6 <shell_process+0x61e>
	shell->ctx->receive_state = state;
 80015f2:	2302      	movs	r3, #2
 80015f4:	e584      	b.n	8001100 <shell_process+0x128>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80015f6:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
			} else if (flag_echo_get(shell)) {
 80015fa:	0758      	lsls	r0, r3, #29
 80015fc:	d506      	bpl.n	800160c <shell_process+0x634>
	if (data == SHELL_VT100_ASCII_ALT_B) {
 80015fe:	2962      	cmp	r1, #98	; 0x62
 8001600:	d108      	bne.n	8001614 <shell_process+0x63c>
		shell_op_cursor_word_move(shell, -1);
 8001602:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		shell_op_cursor_word_move(shell, 1);
 8001606:	4620      	mov	r0, r4
 8001608:	f005 fd5c 	bl	80070c4 <shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
 800160c:	68a3      	ldr	r3, [r4, #8]
 800160e:	2200      	movs	r2, #0
 8001610:	715a      	strb	r2, [r3, #5]
 8001612:	e4fb      	b.n	800100c <shell_process+0x34>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
 8001614:	2966      	cmp	r1, #102	; 0x66
 8001616:	d1f9      	bne.n	800160c <shell_process+0x634>
		shell_op_cursor_word_move(shell, 1);
 8001618:	2101      	movs	r1, #1
 800161a:	e7f4      	b.n	8001606 <shell_process+0x62e>
 800161c:	08009ab8 	.word	0x08009ab8
 8001620:	08009ab1 	.word	0x08009ab1
 8001624:	08009ab4 	.word	0x08009ab4
 8001628:	08009a0e 	.word	0x08009a0e
 800162c:	08009a12 	.word	0x08009a12
 8001630:	08009a0a 	.word	0x08009a0a
 8001634:	0800a3f1 	.word	0x0800a3f1
	shell->ctx->receive_state = state;
 8001638:	2300      	movs	r3, #0
 800163a:	7143      	strb	r3, [r0, #5]
 800163c:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
			if (!flag_echo_get(shell)) {
 8001640:	075a      	lsls	r2, r3, #29
 8001642:	f57f ace3 	bpl.w	800100c <shell_process+0x34>
			switch (data) {
 8001646:	3931      	subs	r1, #49	; 0x31
 8001648:	291b      	cmp	r1, #27
 800164a:	f63f acdf 	bhi.w	800100c <shell_process+0x34>
 800164e:	a301      	add	r3, pc, #4	; (adr r3, 8001654 <shell_process+0x67c>)
 8001650:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001654:	080016d1 	.word	0x080016d1
 8001658:	080016dd 	.word	0x080016dd
 800165c:	080016fb 	.word	0x080016fb
 8001660:	080016c5 	.word	0x080016c5
 8001664:	0800100d 	.word	0x0800100d
 8001668:	0800100d 	.word	0x0800100d
 800166c:	0800100d 	.word	0x0800100d
 8001670:	0800100d 	.word	0x0800100d
 8001674:	0800100d 	.word	0x0800100d
 8001678:	0800100d 	.word	0x0800100d
 800167c:	0800100d 	.word	0x0800100d
 8001680:	0800100d 	.word	0x0800100d
 8001684:	0800100d 	.word	0x0800100d
 8001688:	0800100d 	.word	0x0800100d
 800168c:	0800100d 	.word	0x0800100d
 8001690:	0800100d 	.word	0x0800100d
 8001694:	080015ad 	.word	0x080015ad
 8001698:	080015a3 	.word	0x080015a3
 800169c:	08001577 	.word	0x08001577
 80016a0:	08001549 	.word	0x08001549
 80016a4:	0800100d 	.word	0x0800100d
 80016a8:	080016c9 	.word	0x080016c9
 80016ac:	0800100d 	.word	0x0800100d
 80016b0:	080016d5 	.word	0x080016d5
 80016b4:	0800100d 	.word	0x0800100d
 80016b8:	0800100d 	.word	0x0800100d
 80016bc:	0800100d 	.word	0x0800100d
 80016c0:	080016e1 	.word	0x080016e1
	shell->ctx->receive_state = state;
 80016c4:	2303      	movs	r3, #3
 80016c6:	7143      	strb	r3, [r0, #5]
		shell_op_cursor_end_move(shell);
 80016c8:	4620      	mov	r0, r4
 80016ca:	f005 fd3b 	bl	8007144 <shell_op_cursor_end_move>
		break;
 80016ce:	e49d      	b.n	800100c <shell_process+0x34>
	shell->ctx->receive_state = state;
 80016d0:	2303      	movs	r3, #3
 80016d2:	7143      	strb	r3, [r0, #5]
		shell_op_cursor_home_move(shell);
 80016d4:	4620      	mov	r0, r4
 80016d6:	f005 fd2f 	bl	8007138 <shell_op_cursor_home_move>
		break;
 80016da:	e497      	b.n	800100c <shell_process+0x34>
	shell->ctx->receive_state = state;
 80016dc:	2303      	movs	r3, #3
 80016de:	7143      	strb	r3, [r0, #5]
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
 80016e0:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
 80016e4:	f8b0 2258 	ldrh.w	r2, [r0, #600]	; 0x258
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
 80016e8:	f003 0301 	and.w	r3, r3, #1
				flag_insert_mode_set(shell, !status);
 80016ec:	f083 0301 	eor.w	r3, r3, #1
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
 80016f0:	f363 0200 	bfi	r2, r3, #0, #1
 80016f4:	f8a0 2258 	strh.w	r2, [r0, #600]	; 0x258
 80016f8:	e488      	b.n	800100c <shell_process+0x34>
	shell->ctx->receive_state = state;
 80016fa:	2303      	movs	r3, #3
 80016fc:	7143      	strb	r3, [r0, #5]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80016fe:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
 8001702:	075b      	lsls	r3, r3, #29
 8001704:	f57f ac82 	bpl.w	800100c <shell_process+0x34>
 8001708:	e4f5      	b.n	80010f6 <shell_process+0x11e>
	shell->ctx->receive_state = state;
 800170a:	2300      	movs	r3, #0
 800170c:	e4f8      	b.n	8001100 <shell_process+0x128>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800170e:	68a3      	ldr	r3, [r4, #8]
 8001710:	f3bf 8f5b 	dmb	ish
 8001714:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001718:	e853 2f00 	ldrex	r2, [r3]
 800171c:	f022 0208 	bic.w	r2, r2, #8
 8001720:	e843 2100 	strex	r1, r2, [r3]
 8001724:	2900      	cmp	r1, #0
 8001726:	d1f7      	bne.n	8001718 <shell_process+0x740>
 8001728:	f3bf 8f5b 	dmb	ish

	internal.value = 0xFFFFFFFF;
	internal.flags.processing = 0U;
	(void)atomic_and((atomic_t *)&shell->ctx->internal.value,
			 internal.value);
}
 800172c:	b02d      	add	sp, #180	; 0xb4
 800172e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001732:	bf00      	nop

08001734 <shell_thread>:
{
 8001734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001736:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
 8001738:	6840      	ldr	r0, [r0, #4]
 800173a:	6803      	ldr	r3, [r0, #0]
 800173c:	2100      	movs	r1, #0
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4798      	blx	r3
	if (err != 0) {
 8001742:	b9c0      	cbnz	r0, 8001776 <shell_thread+0x42>
	err = shell_start(shell);
 8001744:	4620      	mov	r0, r4
 8001746:	f7ff fc2f 	bl	8000fa8 <shell_start>
	if (err != 0) {
 800174a:	b9a0      	cbnz	r0, 8001776 <shell_thread+0x42>
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
 800174c:	68a0      	ldr	r0, [r4, #8]
 800174e:	f500 7027 	add.w	r0, r0, #668	; 0x29c
	return z_impl_k_poll(events, num_events, timeout);
 8001752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001756:	2103      	movs	r1, #3
 8001758:	f004 fa3e 	bl	8005bd8 <z_impl_k_poll>
 800175c:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 800175e:	68a0      	ldr	r0, [r4, #8]
 8001760:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
 8001764:	f005 fa19 	bl	8006b9a <k_mutex_lock.constprop.34>
		if (err != 0) {
 8001768:	b13d      	cbz	r5, 800177a <shell_thread+0x46>
			shell_internal_fprintf(shell, SHELL_ERROR,
 800176a:	462b      	mov	r3, r5
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <shell_thread+0xbc>)
 800176e:	2102      	movs	r1, #2
 8001770:	4620      	mov	r0, r4
 8001772:	f005 fd80 	bl	8007276 <shell_internal_fprintf>
}
 8001776:	b003      	add	sp, #12
 8001778:	bd30      	pop	{r4, r5, pc}
		if (shell->iface->api->update) {
 800177a:	6860      	ldr	r0, [r4, #4]
 800177c:	6803      	ldr	r3, [r0, #0]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	b103      	cbz	r3, 8001784 <shell_thread+0x50>
			shell->iface->api->update(shell->iface);
 8001782:	4798      	blx	r3
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 8001784:	68a5      	ldr	r5, [r4, #8]
		arch_syscall_invoke3(*(uintptr_t *)&signal, *(uintptr_t *)&signaled, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_CHECK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_check(signal, signaled, result);
 8001786:	aa01      	add	r2, sp, #4
 8001788:	4669      	mov	r1, sp
 800178a:	f505 701f 	add.w	r0, r5, #636	; 0x27c
 800178e:	f007 fb86 	bl	8008e9e <z_impl_k_poll_signal_check>
	if (set) {
 8001792:	9b00      	ldr	r3, [sp, #0]
 8001794:	b1b3      	cbz	r3, 80017c4 <shell_thread+0x90>
 */
__syscall void k_poll_signal_reset(struct k_poll_signal *signal);

static inline void z_impl_k_poll_signal_reset(struct k_poll_signal *signal)
{
	signal->signaled = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	f8c5 3284 	str.w	r3, [r5, #644]	; 0x284
	if (flag_processing_get(shell)) {
 800179c:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.processing == 1 ? true : false;
 800179e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 80017a2:	071b      	lsls	r3, r3, #28
 80017a4:	d40a      	bmi.n	80017bc <shell_thread+0x88>
	err = shell->iface->api->uninit(shell->iface);
 80017a6:	6860      	ldr	r0, [r4, #4]
 80017a8:	6803      	ldr	r3, [r0, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	4798      	blx	r3
	if (err != 0) {
 80017ae:	4605      	mov	r5, r0
 80017b0:	b920      	cbnz	r0, 80017bc <shell_thread+0x88>
	shell_history_purge(shell->history);
 80017b2:	68e0      	ldr	r0, [r4, #12]
 80017b4:	f005 ff1c 	bl	80075f0 <shell_history_purge>
	shell->ctx->state = SHELL_STATE_UNINITIALIZED;
 80017b8:	68a3      	ldr	r3, [r4, #8]
 80017ba:	711d      	strb	r5, [r3, #4]
	return z_impl_k_current_get();
 80017bc:	f003 ff72 	bl	80056a4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 80017c0:	f001 ffba 	bl	8003738 <z_impl_k_thread_abort>
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 80017c4:	68a5      	ldr	r5, [r4, #8]
	z_impl_k_poll_signal_check(signal, signaled, result);
 80017c6:	aa01      	add	r2, sp, #4
 80017c8:	4669      	mov	r1, sp
 80017ca:	f505 7017 	add.w	r0, r5, #604	; 0x25c
 80017ce:	f007 fb66 	bl	8008e9e <z_impl_k_poll_signal_check>
	if (set) {
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	b12b      	cbz	r3, 80017e2 <shell_thread+0xae>
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c5 3264 	str.w	r3, [r5, #612]	; 0x264
		handler(shell);
 80017dc:	4620      	mov	r0, r4
 80017de:	f7ff fbfb 	bl	8000fd8 <shell_process>
		k_mutex_unlock(&shell->ctx->wr_mtx);
 80017e2:	68a0      	ldr	r0, [r4, #8]
 80017e4:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
	z_impl_k_mutex_unlock(mutex);
 80017e8:	f003 fc56 	bl	8005098 <z_impl_k_mutex_unlock>
 80017ec:	e7ae      	b.n	800174c <shell_thread+0x18>
 80017ee:	bf00      	nop
 80017f0:	08009aba 	.word	0x08009aba

080017f4 <shell_fprintf_fmt>:
	return 0;
}

void shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
		       const char *fmt, va_list args)
{
 80017f4:	b510      	push	{r4, lr}
 80017f6:	4604      	mov	r4, r0
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX)
	(void)z_prf(out_func, (void *)sh_fprintf, (char *)fmt, args);
 80017f8:	4613      	mov	r3, r2
 80017fa:	460a      	mov	r2, r1
 80017fc:	4601      	mov	r1, r0
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <shell_fprintf_fmt+0x24>)
 8001800:	f002 f880 	bl	8003904 <z_prf>
#else
	z_vprintk(out_func, (void *)sh_fprintf, fmt, args);
#endif

	if (sh_fprintf->ctrl_blk->autoflush) {
 8001804:	6923      	ldr	r3, [r4, #16]
 8001806:	791b      	ldrb	r3, [r3, #4]
 8001808:	b123      	cbz	r3, 8001814 <shell_fprintf_fmt+0x20>
		shell_fprintf_buffer_flush(sh_fprintf);
 800180a:	4620      	mov	r0, r4
	}
}
 800180c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_fprintf_buffer_flush(sh_fprintf);
 8001810:	f005 b9f4 	b.w	8006bfc <shell_fprintf_buffer_flush>
}
 8001814:	bd10      	pop	{r4, pc}
 8001816:	bf00      	nop
 8001818:	08006c15 	.word	0x08006c15

0800181c <shell_cmd_get>:

void shell_cmd_get(const struct shell *shell,
		   const struct shell_cmd_entry *command, size_t lvl,
		   size_t idx, const struct shell_static_entry **entry,
		   struct shell_static_entry *d_entry)
{
 800181c:	b570      	push	{r4, r5, r6, lr}
 800181e:	e9dd 4604 	ldrd	r4, r6, [sp, #16]
	__ASSERT_NO_MSG(entry != NULL);
	__ASSERT_NO_MSG(d_entry != NULL);

	*entry = NULL;
 8001822:	2000      	movs	r0, #0
 8001824:	6020      	str	r0, [r4, #0]

	if (lvl == SHELL_CMD_ROOT_LVL) {
 8001826:	b952      	cbnz	r2, 800183e <shell_cmd_get+0x22>
	return ((u8_t *)__shell_root_cmds_end -
 8001828:	480f      	ldr	r0, [pc, #60]	; (8001868 <shell_cmd_get+0x4c>)
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <shell_cmd_get+0x50>)
 800182c:	1a12      	subs	r2, r2, r0
			const struct shell_static_entry *ptr =
						       shell->ctx->selected_cmd;
			if (ptr->subcmd->u.entry[idx].syntax != NULL) {
				*entry = &ptr->subcmd->u.entry[idx];
			}
		} else if (idx < shell_root_cmd_count()) {
 800182e:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8001832:	d203      	bcs.n	800183c <shell_cmd_get+0x20>
			const struct shell_cmd_entry *cmd;

			cmd = shell_root_cmd_get(idx);
			*entry = cmd->u.entry;
 8001834:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	6023      	str	r3, [r4, #0]
	} else {
		if (command->u.entry[idx].syntax != NULL) {
			*entry = &command->u.entry[idx];
		}
	}
}
 800183c:	bd70      	pop	{r4, r5, r6, pc}
	if (command == NULL) {
 800183e:	2900      	cmp	r1, #0
 8001840:	d0fc      	beq.n	800183c <shell_cmd_get+0x20>
	if (command->is_dynamic) {
 8001842:	780a      	ldrb	r2, [r1, #0]
 8001844:	684d      	ldr	r5, [r1, #4]
 8001846:	b13a      	cbz	r2, 8001858 <shell_cmd_get+0x3c>
		command->u.dynamic_get(idx, d_entry);
 8001848:	4618      	mov	r0, r3
 800184a:	4631      	mov	r1, r6
 800184c:	47a8      	blx	r5
		if (d_entry->syntax != NULL) {
 800184e:	6833      	ldr	r3, [r6, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f3      	beq.n	800183c <shell_cmd_get+0x20>
			*entry = d_entry;
 8001854:	6026      	str	r6, [r4, #0]
 8001856:	e7f1      	b.n	800183c <shell_cmd_get+0x20>
		if (command->u.entry[idx].syntax != NULL) {
 8001858:	2214      	movs	r2, #20
 800185a:	4353      	muls	r3, r2
 800185c:	18ea      	adds	r2, r5, r3
 800185e:	58eb      	ldr	r3, [r5, r3]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0eb      	beq.n	800183c <shell_cmd_get+0x20>
			*entry = &command->u.entry[idx];
 8001864:	6022      	str	r2, [r4, #0]
 8001866:	e7e9      	b.n	800183c <shell_cmd_get+0x20>
 8001868:	080092a4 	.word	0x080092a4
 800186c:	080092dc 	.word	0x080092dc

08001870 <clear_eos.isra.6>:
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 8001870:	4a01      	ldr	r2, [pc, #4]	; (8001878 <clear_eos.isra.6+0x8>)
 8001872:	4902      	ldr	r1, [pc, #8]	; (800187c <clear_eos.isra.6+0xc>)
 8001874:	f005 bbcd 	b.w	8007012 <shell_raw_fprintf>
 8001878:	08009ad1 	.word	0x08009ad1
 800187c:	08009ab4 	.word	0x08009ab4

08001880 <shell_op_cursor_vert_move>:
#include <ctype.h>
#include "shell_ops.h"

void shell_op_cursor_vert_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
 8001880:	b159      	cbz	r1, 800189a <shell_op_cursor_vert_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
 8001882:	2900      	cmp	r1, #0
 8001884:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8001888:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 800188c:	bfcc      	ite	gt
 800188e:	2341      	movgt	r3, #65	; 0x41
 8001890:	2342      	movle	r3, #66	; 0x42
 8001892:	4902      	ldr	r1, [pc, #8]	; (800189c <shell_op_cursor_vert_move+0x1c>)
 8001894:	6940      	ldr	r0, [r0, #20]
 8001896:	f005 bbbc 	b.w	8007012 <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'A' : 'B');
	}
}
 800189a:	4770      	bx	lr
 800189c:	08009adf 	.word	0x08009adf

080018a0 <shell_op_cursor_horiz_move>:

void shell_op_cursor_horiz_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
 80018a0:	b159      	cbz	r1, 80018ba <shell_op_cursor_horiz_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
 80018a2:	2900      	cmp	r1, #0
 80018a4:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 80018a8:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 80018ac:	bfcc      	ite	gt
 80018ae:	2343      	movgt	r3, #67	; 0x43
 80018b0:	2344      	movle	r3, #68	; 0x44
 80018b2:	4902      	ldr	r1, [pc, #8]	; (80018bc <shell_op_cursor_horiz_move+0x1c>)
 80018b4:	6940      	ldr	r0, [r0, #20]
 80018b6:	f005 bbac 	b.w	8007012 <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'C' : 'D');
	}
}
 80018ba:	4770      	bx	lr
 80018bc:	08009adf 	.word	0x08009adf

080018c0 <shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void shell_op_cond_next_line(const struct shell *shell)
{
 80018c0:	b510      	push	{r4, lr}
 80018c2:	4604      	mov	r4, r0
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
 80018c4:	f005 fbc6 	bl	8007054 <shell_cursor_in_empty_line>
 80018c8:	b128      	cbz	r0, 80018d6 <shell_op_cond_next_line+0x16>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 80018ca:	6960      	ldr	r0, [r4, #20]
 80018cc:	4905      	ldr	r1, [pc, #20]	; (80018e4 <shell_op_cond_next_line+0x24>)
		cursor_next_line_move(shell);
	}
}
 80018ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018d2:	f005 bb9e 	b.w	8007012 <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
 80018d6:	f104 0008 	add.w	r0, r4, #8
 80018da:	f005 fba7 	bl	800702c <full_line_cmd.isra.8>
 80018de:	2800      	cmp	r0, #0
 80018e0:	d1f3      	bne.n	80018ca <shell_op_cond_next_line+0xa>
}
 80018e2:	bd10      	pop	{r4, pc}
 80018e4:	08009ab8 	.word	0x08009ab8

080018e8 <shell_op_cursor_position_synchronize>:

void shell_op_cursor_position_synchronize(const struct shell *shell)
{
 80018e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 80018ec:	4606      	mov	r6, r0
{
 80018ee:	4605      	mov	r5, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 80018f0:	f856 4f08 	ldr.w	r4, [r6, #8]!
	bool last_line;

	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 80018f4:	f104 0020 	add.w	r0, r4, #32
 80018f8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80018fa:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80018fc:	f005 f9d0 	bl	8006ca0 <shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
 8001900:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
 8001902:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
 8001906:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
 8001908:	f005 fb90 	bl	800702c <full_line_cmd.isra.8>
 800190c:	b118      	cbz	r0, 8001916 <shell_op_cursor_position_synchronize+0x2e>
 800190e:	490a      	ldr	r1, [pc, #40]	; (8001938 <shell_op_cursor_position_synchronize+0x50>)
 8001910:	6968      	ldr	r0, [r5, #20]
 8001912:	f005 fb7e 	bl	8007012 <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	if (last_line) {
 8001916:	45b8      	cmp	r8, r7
 8001918:	d107      	bne.n	800192a <shell_op_cursor_position_synchronize+0x42>
		shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		shell_op_cursor_horiz_move(shell, cons->cur_x -
 800191a:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
 800191c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		shell_op_cursor_horiz_move(shell, cons->cur_x -
 800191e:	4628      	mov	r0, r5
 8001920:	1ac9      	subs	r1, r1, r3
	}
}
 8001922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		shell_op_cursor_horiz_move(shell, cons->cur_x -
 8001926:	f7ff bfbb 	b.w	80018a0 <shell_op_cursor_horiz_move>
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
 800192a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800192c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800192e:	4628      	mov	r0, r5
 8001930:	1ac9      	subs	r1, r1, r3
 8001932:	f7ff ffa5 	bl	8001880 <shell_op_cursor_vert_move>
 8001936:	e7f0      	b.n	800191a <shell_op_cursor_position_synchronize+0x32>
 8001938:	08009ab8 	.word	0x08009ab8

0800193c <shell_print_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void shell_print_cmd(const struct shell *shell)
{
	shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
 800193c:	6882      	ldr	r2, [r0, #8]
 800193e:	4902      	ldr	r1, [pc, #8]	; (8001948 <shell_print_cmd+0xc>)
 8001940:	6940      	ldr	r0, [r0, #20]
 8001942:	3238      	adds	r2, #56	; 0x38
 8001944:	f005 bb65 	b.w	8007012 <shell_raw_fprintf>
 8001948:	08009ab4 	.word	0x08009ab4

0800194c <shell_vt100_color_set>:

void shell_vt100_color_set(const struct shell *shell,
			   enum shell_vt100_color color)
{

	if (shell->ctx->vt100_ctx.col.col == color) {
 800194c:	6883      	ldr	r3, [r0, #8]
{
 800194e:	b507      	push	{r0, r1, r2, lr}
	if (shell->ctx->vt100_ctx.col.col == color) {
 8001950:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001954:	428a      	cmp	r2, r1
 8001956:	d012      	beq.n	800197e <shell_vt100_color_set+0x32>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
 8001958:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
 800195c:	6940      	ldr	r0, [r0, #20]
 800195e:	b189      	cbz	r1, 8001984 <shell_vt100_color_set+0x38>

		u8_t cmd[] = SHELL_VT100_COLOR(color - 1);
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <shell_vt100_color_set+0x3c>)
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2333      	movs	r3, #51	; 0x33
 8001966:	f88d 3004 	strb.w	r3, [sp, #4]
 800196a:	312f      	adds	r1, #47	; 0x2f
 800196c:	236d      	movs	r3, #109	; 0x6d
 800196e:	f88d 1005 	strb.w	r1, [sp, #5]
 8001972:	f8ad 3006 	strh.w	r3, [sp, #6]

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8001976:	466a      	mov	r2, sp
	} else {
		static const u8_t cmd[] = SHELL_VT100_MODESOFF;

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8001978:	4904      	ldr	r1, [pc, #16]	; (800198c <shell_vt100_color_set+0x40>)
 800197a:	f005 fb4a 	bl	8007012 <shell_raw_fprintf>
	}
}
 800197e:	b003      	add	sp, #12
 8001980:	f85d fb04 	ldr.w	pc, [sp], #4
		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8001984:	4a02      	ldr	r2, [pc, #8]	; (8001990 <shell_vt100_color_set+0x44>)
 8001986:	e7f7      	b.n	8001978 <shell_vt100_color_set+0x2c>
 8001988:	3b315b1b 	.word	0x3b315b1b
 800198c:	08009ab4 	.word	0x08009ab4
 8001990:	08009adb 	.word	0x08009adb

08001994 <shell_vt100_colors_restore>:

void shell_vt100_colors_restore(const struct shell *shell,
				       const struct shell_vt100_colors *color)
{
 8001994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001996:	460d      	mov	r5, r1
	shell_vt100_color_set(shell, color->col);
 8001998:	7809      	ldrb	r1, [r1, #0]
{
 800199a:	4604      	mov	r4, r0
	shell_vt100_color_set(shell, color->col);
 800199c:	f7ff ffd6 	bl	800194c <shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
 80019a0:	786b      	ldrb	r3, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
 80019a2:	b1cb      	cbz	r3, 80019d8 <shell_vt100_colors_restore+0x44>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
 80019a4:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
 80019a6:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 80019aa:	4299      	cmp	r1, r3
 80019ac:	d014      	beq.n	80019d8 <shell_vt100_colors_restore+0x44>
	u8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
 80019ae:	f645 311b 	movw	r1, #23323	; 0x5b1b
 80019b2:	f8ad 1000 	strh.w	r1, [sp]
 80019b6:	2134      	movs	r1, #52	; 0x34
 80019b8:	f88d 1002 	strb.w	r1, [sp, #2]
 80019bc:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 80019c0:	f88d 1003 	strb.w	r1, [sp, #3]
 80019c4:	216d      	movs	r1, #109	; 0x6d
 80019c6:	f8ad 1004 	strh.w	r1, [sp, #4]
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
 80019ca:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 80019ce:	4903      	ldr	r1, [pc, #12]	; (80019dc <shell_vt100_colors_restore+0x48>)
 80019d0:	6960      	ldr	r0, [r4, #20]
 80019d2:	466a      	mov	r2, sp
 80019d4:	f005 fb1d 	bl	8007012 <shell_raw_fprintf>
}
 80019d8:	b003      	add	sp, #12
 80019da:	bd30      	pop	{r4, r5, pc}
 80019dc:	08009ab4 	.word	0x08009ab4

080019e0 <shell_op_word_remove>:
{
 80019e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 80019e2:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
 80019e4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
 80019e6:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
 80019e8:	2a00      	cmp	r2, #0
 80019ea:	d046      	beq.n	8001a7a <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 80019ec:	8e98      	ldrh	r0, [r3, #52]	; 0x34
	if ((shell->ctx->cmd_buff_len == 0) ||
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d043      	beq.n	8001a7a <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 80019f2:	3037      	adds	r0, #55	; 0x37
 80019f4:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
 80019f6:	f103 0638 	add.w	r6, r3, #56	; 0x38
 80019fa:	4603      	mov	r3, r0
 80019fc:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
 80019fe:	42b3      	cmp	r3, r6
 8001a00:	b2a4      	uxth	r4, r4
 8001a02:	4619      	mov	r1, r3
 8001a04:	d30d      	bcc.n	8001a22 <shell_op_word_remove+0x42>
 8001a06:	f811 7901 	ldrb.w	r7, [r1], #-1
 8001a0a:	2f20      	cmp	r7, #32
 8001a0c:	d033      	beq.n	8001a76 <shell_op_word_remove+0x96>
 8001a0e:	4619      	mov	r1, r3
 8001a10:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
 8001a12:	7808      	ldrb	r0, [r1, #0]
 8001a14:	2820      	cmp	r0, #32
 8001a16:	d004      	beq.n	8001a22 <shell_op_word_remove+0x42>
		++chars_to_delete;
 8001a18:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
 8001a1a:	429e      	cmp	r6, r3
		++chars_to_delete;
 8001a1c:	b2a4      	uxth	r4, r4
		--str;
 8001a1e:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
 8001a20:	d9f5      	bls.n	8001a0e <shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
 8001a22:	1c63      	adds	r3, r4, #1
 8001a24:	1c4e      	adds	r6, r1, #1
 8001a26:	1b12      	subs	r2, r2, r4
 8001a28:	4419      	add	r1, r3
 8001a2a:	4630      	mov	r0, r6
 8001a2c:	f006 fafb 	bl	8008026 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
 8001a30:	68a9      	ldr	r1, [r5, #8]
 8001a32:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
 8001a34:	1b12      	subs	r2, r2, r4
 8001a36:	b292      	uxth	r2, r2
 8001a38:	864a      	strh	r2, [r1, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 8001a3a:	440a      	add	r2, r1
 8001a3c:	2700      	movs	r7, #0
	shell_op_cursor_move(shell, -chars_to_delete);
 8001a3e:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 8001a40:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
	shell_op_cursor_move(shell, -chars_to_delete);
 8001a44:	4628      	mov	r0, r5
 8001a46:	b209      	sxth	r1, r1
 8001a48:	f005 fb18 	bl	800707c <shell_op_cursor_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
 8001a4c:	6968      	ldr	r0, [r5, #20]
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <shell_op_word_remove+0x9c>)
 8001a50:	490b      	ldr	r1, [pc, #44]	; (8001a80 <shell_op_word_remove+0xa0>)
 8001a52:	f005 fade 	bl	8007012 <shell_raw_fprintf>
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
 8001a56:	4639      	mov	r1, r7
 8001a58:	4633      	mov	r3, r6
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <shell_op_word_remove+0xa0>)
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	f005 fc0a 	bl	8007276 <shell_internal_fprintf>
	clear_eos(shell);
 8001a62:	6968      	ldr	r0, [r5, #20]
 8001a64:	f7ff ff04 	bl	8001870 <clear_eos.isra.6>
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
 8001a68:	6968      	ldr	r0, [r5, #20]
 8001a6a:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <shell_op_word_remove+0xa4>)
 8001a6c:	4904      	ldr	r1, [pc, #16]	; (8001a80 <shell_op_word_remove+0xa0>)
}
 8001a6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001a72:	f005 bace 	b.w	8007012 <shell_raw_fprintf>
 8001a76:	460b      	mov	r3, r1
 8001a78:	e7c0      	b.n	80019fc <shell_op_word_remove+0x1c>
 8001a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a7c:	08009ad5 	.word	0x08009ad5
 8001a80:	08009ab4 	.word	0x08009ab4
 8001a84:	08009ad8 	.word	0x08009ad8

08001a88 <reprint_from_cursor>:
{
 8001a88:	b570      	push	{r4, r5, r6, lr}
 8001a8a:	4604      	mov	r4, r0
 8001a8c:	460d      	mov	r5, r1
	if (data_removed) {
 8001a8e:	4616      	mov	r6, r2
 8001a90:	b112      	cbz	r2, 8001a98 <reprint_from_cursor+0x10>
		clear_eos(shell);
 8001a92:	6940      	ldr	r0, [r0, #20]
 8001a94:	f7ff feec 	bl	8001870 <clear_eos.isra.6>
		      &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8001a98:	68a2      	ldr	r2, [r4, #8]
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s",
 8001a9a:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 8001a9c:	3338      	adds	r3, #56	; 0x38
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <reprint_from_cursor+0x4c>)
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	f005 fbe6 	bl	8007276 <shell_internal_fprintf>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f850 3f08 	ldr.w	r3, [r0, #8]!
 8001ab0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8001ab2:	869a      	strh	r2, [r3, #52]	; 0x34
	if (full_line_cmd(shell)) {
 8001ab4:	f005 faba 	bl	800702c <full_line_cmd.isra.8>
 8001ab8:	b128      	cbz	r0, 8001ac6 <reprint_from_cursor+0x3e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
 8001aba:	b106      	cbz	r6, 8001abe <reprint_from_cursor+0x36>
 8001abc:	b11d      	cbz	r5, 8001ac6 <reprint_from_cursor+0x3e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8001abe:	4906      	ldr	r1, [pc, #24]	; (8001ad8 <reprint_from_cursor+0x50>)
 8001ac0:	6960      	ldr	r0, [r4, #20]
 8001ac2:	f005 faa6 	bl	8007012 <shell_raw_fprintf>
	shell_op_cursor_move(shell, -diff);
 8001ac6:	4269      	negs	r1, r5
 8001ac8:	4620      	mov	r0, r4
 8001aca:	b209      	sxth	r1, r1
}
 8001acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_op_cursor_move(shell, -diff);
 8001ad0:	f005 bad4 	b.w	800707c <shell_op_cursor_move>
 8001ad4:	08009ab4 	.word	0x08009ab4
 8001ad8:	08009ab8 	.word	0x08009ab8

08001adc <shell_op_char_insert>:
{
 8001adc:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
 8001ade:	6883      	ldr	r3, [r0, #8]
{
 8001ae0:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
 8001ae4:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8001ae8:	07d2      	lsls	r2, r2, #31
{
 8001aea:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
 8001aec:	d51d      	bpl.n	8001b2a <shell_op_char_insert+0x4e>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
 8001aee:	8e99      	ldrh	r1, [r3, #52]	; 0x34
	if (shell->ctx->internal.flags.insert_mode &&
 8001af0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8001af2:	428a      	cmp	r2, r1
 8001af4:	d019      	beq.n	8001b2a <shell_op_char_insert+0x4e>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
 8001af6:	1c48      	adds	r0, r1, #1
 8001af8:	8698      	strh	r0, [r3, #52]	; 0x34
 8001afa:	440b      	add	r3, r1
		char_replace(shell, data);
 8001afc:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
 8001b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
 8001b04:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 8001b06:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001b0a:	075b      	lsls	r3, r3, #29
 8001b0c:	d50b      	bpl.n	8001b26 <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
 8001b0e:	6960      	ldr	r0, [r4, #20]
 8001b10:	4909      	ldr	r1, [pc, #36]	; (8001b38 <shell_op_char_insert+0x5c>)
 8001b12:	f005 fa7e 	bl	8007012 <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell)) {
 8001b16:	4620      	mov	r0, r4
 8001b18:	f005 fa9c 	bl	8007054 <shell_cursor_in_empty_line>
 8001b1c:	b118      	cbz	r0, 8001b26 <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8001b1e:	4907      	ldr	r1, [pc, #28]	; (8001b3c <shell_op_char_insert+0x60>)
 8001b20:	6960      	ldr	r0, [r4, #20]
 8001b22:	f005 fa76 	bl	8007012 <shell_raw_fprintf>
}
 8001b26:	b002      	add	sp, #8
 8001b28:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f10d 0107 	add.w	r1, sp, #7
 8001b30:	4620      	mov	r0, r4
 8001b32:	f005 fbad 	bl	8007290 <data_insert>
}
 8001b36:	e7f6      	b.n	8001b26 <shell_op_char_insert+0x4a>
 8001b38:	08009ae3 	.word	0x08009ae3
 8001b3c:	08009ab8 	.word	0x08009ab8

08001b40 <shell_print_prompt_and_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
 8001b40:	6883      	ldr	r3, [r0, #8]
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <shell_print_prompt_and_cmd+0x2c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
{
 8001b46:	b510      	push	{r4, lr}
 8001b48:	4604      	mov	r4, r0
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
 8001b4a:	2103      	movs	r1, #3
 8001b4c:	f005 fb93 	bl	8007276 <shell_internal_fprintf>
	if (flag_echo_get(shell)) {
 8001b50:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 8001b52:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001b56:	075b      	lsls	r3, r3, #29
 8001b58:	d507      	bpl.n	8001b6a <shell_print_prompt_and_cmd+0x2a>
		shell_print_cmd(shell);
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f7ff feee 	bl	800193c <shell_print_cmd>
		shell_op_cursor_position_synchronize(shell);
 8001b60:	4620      	mov	r0, r4
}
 8001b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_op_cursor_position_synchronize(shell);
 8001b66:	f7ff bebf 	b.w	80018e8 <shell_op_cursor_position_synchronize>
}
 8001b6a:	bd10      	pop	{r4, pc}
 8001b6c:	08009ab4 	.word	0x08009ab4

08001b70 <init>:
static int init(const struct shell_transport *transport,
		const void *config,
		shell_transport_handler_t evt_handler,
		void *context)
{
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 8001b70:	6840      	ldr	r0, [r0, #4]
{
 8001b72:	b510      	push	{r4, lr}
 8001b74:	460c      	mov	r4, r1

	sh_uart->ctrl_blk->dev = (struct device *)config;
 8001b76:	6801      	ldr	r1, [r0, #0]
	sh_uart->ctrl_blk->handler = evt_handler;
	sh_uart->ctrl_blk->context = context;
 8001b78:	608b      	str	r3, [r1, #8]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
 8001b7a:	6863      	ldr	r3, [r4, #4]
	sh_uart->ctrl_blk->handler = evt_handler;
 8001b7c:	e9c1 4200 	strd	r4, r2, [r1]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 8001b80:	b12b      	cbz	r3, 8001b8e <init+0x1e>
 8001b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b84:	b11b      	cbz	r3, 8001b8e <init+0x1e>
		api->irq_callback_set(dev, cb, user_data);
 8001b86:	4602      	mov	r2, r0
 8001b88:	4904      	ldr	r1, [pc, #16]	; (8001b9c <init+0x2c>)
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4798      	blx	r3
	if (api->irq_rx_enable) {
 8001b8e:	6863      	ldr	r3, [r4, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	b10b      	cbz	r3, 8001b98 <init+0x28>
		api->irq_rx_enable(dev);
 8001b94:	4620      	mov	r0, r4
 8001b96:	4798      	blx	r3
		k_timer_user_data_set(sh_uart->timer, (void *)sh_uart);
		k_timer_start(sh_uart->timer, RX_POLL_PERIOD, RX_POLL_PERIOD);
	}

	return 0;
}
 8001b98:	2000      	movs	r0, #0
 8001b9a:	bd10      	pop	{r4, pc}
 8001b9c:	080073f1 	.word	0x080073f1

08001ba0 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(struct device *arg)
{
 8001ba0:	b513      	push	{r0, r1, r4, lr}
 8001ba2:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <enable_shell_uart+0x20>)
 8001ba4:	f003 f848 	bl	8004c38 <z_impl_device_get_binding>
	bool log_backend = CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > 0;
	u32_t level =
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;

	shell_init(&shell_uart, dev, true, log_backend, level);
 8001ba8:	2400      	movs	r4, #0
 8001baa:	2301      	movs	r3, #1
 8001bac:	4601      	mov	r1, r0
 8001bae:	9400      	str	r4, [sp, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <enable_shell_uart+0x24>)
 8001bb4:	f7ff f97e 	bl	8000eb4 <shell_init>

	return 0;
}
 8001bb8:	4620      	mov	r0, r4
 8001bba:	b002      	add	sp, #8
 8001bbc:	bd10      	pop	{r4, pc}
 8001bbe:	bf00      	nop
 8001bc0:	08009ae6 	.word	0x08009ae6
 8001bc4:	0800936c 	.word	0x0800936c

08001bc8 <formatted_text_print.constprop.2>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
 8001bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bcc:	4605      	mov	r5, r0
 8001bce:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
 8001bd0:	460f      	mov	r7, r1
 8001bd2:	2900      	cmp	r1, #0
 8001bd4:	d06e      	beq.n	8001cb4 <formatted_text_print.constprop.2+0xec>
 8001bd6:	2400      	movs	r4, #0
		shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
 8001bd8:	5d3b      	ldrb	r3, [r7, r4]
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	d025      	beq.n	8001c2a <formatted_text_print.constprop.2+0x62>
 8001bde:	3b09      	subs	r3, #9
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d922      	bls.n	8001c2a <formatted_text_print.constprop.2+0x62>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8001be4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001cb8 <formatted_text_print.constprop.2+0xf0>
	return str == NULL ? 0U : (u16_t)strlen(str);
 8001be8:	4638      	mov	r0, r7
 8001bea:	f006 f9ea 	bl	8007fc2 <strlen>
		size_t idx = 0;

		length = shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 8001bee:	68ab      	ldr	r3, [r5, #8]
 8001bf0:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = shell_strlen(str) - offset;
 8001bf2:	b280      	uxth	r0, r0
 8001bf4:	1b00      	subs	r0, r0, r4
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 8001bf6:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
 8001bfa:	4298      	cmp	r0, r3
 8001bfc:	eb07 0a04 	add.w	sl, r7, r4
 8001c00:	d915      	bls.n	8001c2e <formatted_text_print.constprop.2+0x66>
 8001c02:	4650      	mov	r0, sl
		size_t idx = 0;
 8001c04:	2600      	movs	r6, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
 8001c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c0a:	2a20      	cmp	r2, #32
 8001c0c:	d006      	beq.n	8001c1c <formatted_text_print.constprop.2+0x54>
 8001c0e:	f1a2 0c09 	sub.w	ip, r2, #9
 8001c12:	f1bc 0f04 	cmp.w	ip, #4
 8001c16:	d802      	bhi.n	8001c1e <formatted_text_print.constprop.2+0x56>
				length = idx;
				if (*(str + offset + idx) == '\n') {
 8001c18:	2a0a      	cmp	r2, #10
 8001c1a:	d031      	beq.n	8001c80 <formatted_text_print.constprop.2+0xb8>
 8001c1c:	4633      	mov	r3, r6
					break;
				}
			}

			if ((idx + terminal_offset) >=
 8001c1e:	eb08 0206 	add.w	r2, r8, r6
 8001c22:	4291      	cmp	r1, r2
 8001c24:	d92b      	bls.n	8001c7e <formatted_text_print.constprop.2+0xb6>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
 8001c26:	3601      	adds	r6, #1
 8001c28:	e7ed      	b.n	8001c06 <formatted_text_print.constprop.2+0x3e>
		++offset;
 8001c2a:	3401      	adds	r4, #1
 8001c2c:	e7d4      	b.n	8001bd8 <formatted_text_print.constprop.2+0x10>
 8001c2e:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
 8001c30:	2600      	movs	r6, #0
 8001c32:	42b0      	cmp	r0, r6
 8001c34:	d017      	beq.n	8001c66 <formatted_text_print.constprop.2+0x9e>
				if (*(str + offset + idx) == '\n') {
 8001c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c3a:	2a0a      	cmp	r2, #10
 8001c3c:	eb04 0906 	add.w	r9, r4, r6
 8001c40:	d11b      	bne.n	8001c7a <formatted_text_print.constprop.2+0xb2>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
 8001c42:	6968      	ldr	r0, [r5, #20]
 8001c44:	f004 ffda 	bl	8006bfc <shell_fprintf_buffer_flush>
					shell_write(shell, str + offset, idx);
 8001c48:	4632      	mov	r2, r6
 8001c4a:	4651      	mov	r1, sl
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	f005 fab5 	bl	80071bc <shell_write>
 8001c52:	4919      	ldr	r1, [pc, #100]	; (8001cb8 <formatted_text_print.constprop.2+0xf0>)
 8001c54:	6968      	ldr	r0, [r5, #20]
 8001c56:	f005 fc37 	bl	80074c8 <shell_raw_fprintf>
					shell_op_cursor_horiz_move(shell,
 8001c5a:	4641      	mov	r1, r8
 8001c5c:	4628      	mov	r0, r5
					offset += idx + 1;
 8001c5e:	f109 0401 	add.w	r4, r9, #1
					shell_op_cursor_horiz_move(shell,
 8001c62:	f7ff fe1d 	bl	80018a0 <shell_op_cursor_horiz_move>
			shell_raw_fprintf(shell->fprintf_ctx, str + offset);
 8001c66:	1939      	adds	r1, r7, r4
 8001c68:	6968      	ldr	r0, [r5, #20]
 8001c6a:	f005 fc2d 	bl	80074c8 <shell_raw_fprintf>
 8001c6e:	6968      	ldr	r0, [r5, #20]
 8001c70:	4911      	ldr	r1, [pc, #68]	; (8001cb8 <formatted_text_print.constprop.2+0xf0>)
		cursor_next_line_move(shell);
		shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	cursor_next_line_move(shell);
}
 8001c72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c76:	f005 bc27 	b.w	80074c8 <shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
 8001c7a:	3601      	adds	r6, #1
 8001c7c:	e7d9      	b.n	8001c32 <formatted_text_print.constprop.2+0x6a>
			if ((idx + terminal_offset) >=
 8001c7e:	461e      	mov	r6, r3
 8001c80:	6968      	ldr	r0, [r5, #20]
 8001c82:	f004 ffbb 	bl	8006bfc <shell_fprintf_buffer_flush>
		shell_write(shell, str + offset, length);
 8001c86:	4632      	mov	r2, r6
 8001c88:	4651      	mov	r1, sl
 8001c8a:	4628      	mov	r0, r5
 8001c8c:	f005 fa96 	bl	80071bc <shell_write>
		offset += length;
 8001c90:	4434      	add	r4, r6
		while (isspace((int) (*(str + offset)))) {
 8001c92:	5d3b      	ldrb	r3, [r7, r4]
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d00b      	beq.n	8001cb0 <formatted_text_print.constprop.2+0xe8>
 8001c98:	3b09      	subs	r3, #9
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d908      	bls.n	8001cb0 <formatted_text_print.constprop.2+0xe8>
 8001c9e:	4649      	mov	r1, r9
 8001ca0:	6968      	ldr	r0, [r5, #20]
 8001ca2:	f005 fc11 	bl	80074c8 <shell_raw_fprintf>
		shell_op_cursor_horiz_move(shell, terminal_offset);
 8001ca6:	4641      	mov	r1, r8
 8001ca8:	4628      	mov	r0, r5
 8001caa:	f7ff fdf9 	bl	80018a0 <shell_op_cursor_horiz_move>
 8001cae:	e79b      	b.n	8001be8 <formatted_text_print.constprop.2+0x20>
			++offset;
 8001cb0:	3401      	adds	r4, #1
 8001cb2:	e7ee      	b.n	8001c92 <formatted_text_print.constprop.2+0xca>
}
 8001cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cb8:	08009ab8 	.word	0x08009ab8

08001cbc <shell_help_subcmd_print>:

/* Function is printing command help, its subcommands name and subcommands
 * help string.
 */
void shell_help_subcmd_print(const struct shell *shell)
{
 8001cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry static_entry;
	u16_t longest_syntax = 0U;
	size_t cmd_idx = 0;

	/* Checking if there are any subcommands available. */
	if (!shell->ctx->active_cmd.subcmd) {
 8001cc0:	6882      	ldr	r2, [r0, #8]
{
 8001cc2:	b08d      	sub	sp, #52	; 0x34
	if (!shell->ctx->active_cmd.subcmd) {
 8001cc4:	6912      	ldr	r2, [r2, #16]
	const struct shell_static_entry *entry = NULL;
 8001cc6:	2300      	movs	r3, #0
{
 8001cc8:	4604      	mov	r4, r0
	const struct shell_static_entry *entry = NULL;
 8001cca:	9306      	str	r3, [sp, #24]
	if (!shell->ctx->active_cmd.subcmd) {
 8001ccc:	2a00      	cmp	r2, #0
 8001cce:	d051      	beq.n	8001d74 <shell_help_subcmd_print+0xb8>
	size_t cmd_idx = 0;
 8001cd0:	4698      	mov	r8, r3
	u16_t longest_syntax = 0U;
 8001cd2:	461d      	mov	r5, r3
		return;
	}

	/* Searching for the longest subcommand to print. */
	do {
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
 8001cd4:	ae07      	add	r6, sp, #28
 8001cd6:	af06      	add	r7, sp, #24
 8001cd8:	e9cd 7600 	strd	r7, r6, [sp]
 8001cdc:	68a1      	ldr	r1, [r4, #8]
 8001cde:	4643      	mov	r3, r8
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	6909      	ldr	r1, [r1, #16]
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff fd99 	bl	800181c <shell_cmd_get>
			      !SHELL_CMD_ROOT_LVL,
			      cmd_idx++, &entry, &static_entry);

		if (!entry) {
 8001cea:	9b06      	ldr	r3, [sp, #24]
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
 8001cec:	f108 0901 	add.w	r9, r8, #1
		if (!entry) {
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d03c      	beq.n	8001d6e <shell_help_subcmd_print+0xb2>
			break;
		}

		u16_t len = shell_strlen(entry->syntax);
 8001cf4:	6818      	ldr	r0, [r3, #0]
	return str == NULL ? 0U : (u16_t)strlen(str);
 8001cf6:	b110      	cbz	r0, 8001cfe <shell_help_subcmd_print+0x42>
 8001cf8:	f006 f963 	bl	8007fc2 <strlen>
 8001cfc:	b280      	uxth	r0, r0

		longest_syntax = longest_syntax > len ? longest_syntax : len;
 8001cfe:	4285      	cmp	r5, r0
 8001d00:	bf38      	it	cc
 8001d02:	4605      	movcc	r5, r0
	} while (cmd_idx != 0); /* too many commands */
 8001d04:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001d08:	d12f      	bne.n	8001d6a <shell_help_subcmd_print+0xae>

	if (cmd_idx == 1) {
		return;
	}

	shell_internal_fprintf(shell, SHELL_NORMAL, "Subcommands:\n");
 8001d0a:	4a20      	ldr	r2, [pc, #128]	; (8001d8c <shell_help_subcmd_print+0xd0>)
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8001d0c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8001d90 <shell_help_subcmd_print+0xd4>
	shell_internal_fprintf(shell, SHELL_NORMAL, "Subcommands:\n");
 8001d10:	2100      	movs	r1, #0
 8001d12:	4620      	mov	r0, r4
 8001d14:	f005 faaf 	bl	8007276 <shell_internal_fprintf>

	/* Printing subcommands and help string (if exists). */
	cmd_idx = 0;
 8001d18:	2300      	movs	r3, #0

	while (true) {
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
 8001d1a:	e9cd 7600 	strd	r7, r6, [sp]
 8001d1e:	68a1      	ldr	r1, [r4, #8]
 8001d20:	2201      	movs	r2, #1
 8001d22:	6909      	ldr	r1, [r1, #16]
 8001d24:	4620      	mov	r0, r4
 8001d26:	f103 0b01 	add.w	fp, r3, #1
 8001d2a:	f7ff fd77 	bl	800181c <shell_cmd_get>
			      !SHELL_CMD_ROOT_LVL,
			      cmd_idx++, &entry, &static_entry);

		if (entry == NULL) {
 8001d2e:	9b06      	ldr	r3, [sp, #24]
 8001d30:	b303      	cbz	r3, 8001d74 <shell_help_subcmd_print+0xb8>
			break;
		}

		help_item_print(shell, entry->syntax, longest_syntax,
 8001d32:	681a      	ldr	r2, [r3, #0]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8001d34:	4816      	ldr	r0, [pc, #88]	; (8001d90 <shell_help_subcmd_print+0xd4>)
		help_item_print(shell, entry->syntax, longest_syntax,
 8001d36:	9205      	str	r2, [sp, #20]
 8001d38:	f8d3 8004 	ldr.w	r8, [r3, #4]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8001d3c:	f006 f941 	bl	8007fc2 <strlen>
	if (item_name == NULL) {
 8001d40:	9a05      	ldr	r2, [sp, #20]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8001d42:	4682      	mov	sl, r0
	if (item_name == NULL) {
 8001d44:	b17a      	cbz	r2, 8001d66 <shell_help_subcmd_print+0xaa>
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:",
 8001d46:	e9cd 2901 	strd	r2, r9, [sp, #4]
 8001d4a:	9500      	str	r5, [sp, #0]
 8001d4c:	464b      	mov	r3, r9
 8001d4e:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <shell_help_subcmd_print+0xd8>)
 8001d50:	2100      	movs	r1, #0
 8001d52:	4620      	mov	r0, r4
 8001d54:	f005 fa8f 	bl	8007276 <shell_internal_fprintf>
	if (item_help == NULL) {
 8001d58:	f1b8 0f00 	cmp.w	r8, #0
 8001d5c:	d10d      	bne.n	8001d7a <shell_help_subcmd_print+0xbe>
 8001d5e:	490e      	ldr	r1, [pc, #56]	; (8001d98 <shell_help_subcmd_print+0xdc>)
 8001d60:	6960      	ldr	r0, [r4, #20]
 8001d62:	f005 fbb1 	bl	80074c8 <shell_raw_fprintf>
 8001d66:	465b      	mov	r3, fp
 8001d68:	e7d7      	b.n	8001d1a <shell_help_subcmd_print+0x5e>
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
 8001d6a:	46c8      	mov	r8, r9
 8001d6c:	e7b4      	b.n	8001cd8 <shell_help_subcmd_print+0x1c>
	if (cmd_idx == 1) {
 8001d6e:	f1b9 0f01 	cmp.w	r9, #1
 8001d72:	d1ca      	bne.n	8001d0a <shell_help_subcmd_print+0x4e>
				entry->help);
	}
}
 8001d74:	b00d      	add	sp, #52	; 0x34
 8001d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8001d7a:	1c6a      	adds	r2, r5, #1
 8001d7c:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	formatted_text_print(shell, item_help, offset, false);
 8001d80:	b292      	uxth	r2, r2
 8001d82:	4641      	mov	r1, r8
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7ff ff1f 	bl	8001bc8 <formatted_text_print.constprop.2>
 8001d8a:	e7ec      	b.n	8001d66 <shell_help_subcmd_print+0xaa>
 8001d8c:	08009b05 	.word	0x08009b05
 8001d90:	08009b1d 	.word	0x08009b1d
 8001d94:	08009b13 	.word	0x08009b13
 8001d98:	08009ab8 	.word	0x08009ab8

08001d9c <shell_help_cmd_print>:

void shell_help_cmd_print(const struct shell *shell)
{
	static const char cmd_sep[] = " - ";	/* commands separator */

	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
 8001d9c:	6883      	ldr	r3, [r0, #8]
{
 8001d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001da0:	4605      	mov	r5, r0
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
 8001da2:	6898      	ldr	r0, [r3, #8]
 8001da4:	b1c8      	cbz	r0, 8001dda <shell_help_cmd_print+0x3e>
 8001da6:	f006 f90c 	bl	8007fc2 <strlen>
 8001daa:	b284      	uxth	r4, r0
 8001dac:	4e0c      	ldr	r6, [pc, #48]	; (8001de0 <shell_help_cmd_print+0x44>)
 8001dae:	4630      	mov	r0, r6
 8001db0:	f006 f907 	bl	8007fc2 <strlen>
							  shell_strlen(cmd_sep);

	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
 8001db4:	68ab      	ldr	r3, [r5, #8]
 8001db6:	9600      	str	r6, [sp, #0]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
 8001db8:	4404      	add	r4, r0
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <shell_help_cmd_print+0x48>)
 8001dbe:	4628      	mov	r0, r5
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	f005 fa58 	bl	8007276 <shell_internal_fprintf>
			       shell->ctx->active_cmd.syntax, cmd_sep);

	formatted_text_print(shell, shell->ctx->active_cmd.help,
 8001dc6:	68ab      	ldr	r3, [r5, #8]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
 8001dc8:	b2a4      	uxth	r4, r4
	formatted_text_print(shell, shell->ctx->active_cmd.help,
 8001dca:	68d9      	ldr	r1, [r3, #12]
 8001dcc:	4622      	mov	r2, r4
 8001dce:	4628      	mov	r0, r5
			     field_width, false);
}
 8001dd0:	b002      	add	sp, #8
 8001dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	formatted_text_print(shell, shell->ctx->active_cmd.help,
 8001dd6:	f7ff bef7 	b.w	8001bc8 <formatted_text_print.constprop.2>
 8001dda:	4604      	mov	r4, r0
 8001ddc:	e7e6      	b.n	8001dac <shell_help_cmd_print+0x10>
 8001dde:	bf00      	nop
 8001de0:	08009b01 	.word	0x08009b01
 8001de4:	08009ab2 	.word	0x08009ab2

08001de8 <cmd_clear>:
	cursor_restore(shell);
	return ret_val;
}

static int cmd_clear(const struct shell *shell, size_t argc, char **argv)
{
 8001de8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 8001dea:	4d07      	ldr	r5, [pc, #28]	; (8001e08 <cmd_clear+0x20>)
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <cmd_clear+0x24>)
{
 8001dee:	4604      	mov	r4, r0
	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 8001df0:	4629      	mov	r1, r5
 8001df2:	6940      	ldr	r0, [r0, #20]
 8001df4:	f005 fbaf 	bl	8007556 <shell_raw_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
 8001df8:	6960      	ldr	r0, [r4, #20]
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <cmd_clear+0x28>)
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	f005 fbaa 	bl	8007556 <shell_raw_fprintf>

	return 0;
}
 8001e02:	2000      	movs	r0, #0
 8001e04:	bd38      	pop	{r3, r4, r5, pc}
 8001e06:	bf00      	nop
 8001e08:	08009ab4 	.word	0x08009ab4
 8001e0c:	08009b26 	.word	0x08009b26
 8001e10:	08009b2a 	.word	0x08009b2a

08001e14 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
 8001e14:	b510      	push	{r4, lr}
 8001e16:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <cmd_resize_default+0x18>)
 8001e1a:	4905      	ldr	r1, [pc, #20]	; (8001e30 <cmd_resize_default+0x1c>)
 8001e1c:	6940      	ldr	r0, [r0, #20]
 8001e1e:	f005 fb9a 	bl	8007556 <shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid =  SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
 8001e22:	68a3      	ldr	r3, [r4, #8]
 8001e24:	4a03      	ldr	r2, [pc, #12]	; (8001e34 <cmd_resize_default+0x20>)
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
 8001e28:	2000      	movs	r0, #0
 8001e2a:	bd10      	pop	{r4, pc}
 8001e2c:	08009b2f 	.word	0x08009b2f
 8001e30:	08009ab4 	.word	0x08009ab4
 8001e34:	00500018 	.word	0x00500018

08001e38 <cmd_shell_stats_show>:
{
 8001e38:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %u", shell->stats->log_lost_cnt);
 8001e3a:	6983      	ldr	r3, [r0, #24]
 8001e3c:	4a03      	ldr	r2, [pc, #12]	; (8001e4c <cmd_shell_stats_show+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2100      	movs	r1, #0
 8001e42:	f004 feae 	bl	8006ba2 <shell_fprintf>
}
 8001e46:	2000      	movs	r0, #0
 8001e48:	bd08      	pop	{r3, pc}
 8001e4a:	bf00      	nop
 8001e4c:	08009d67 	.word	0x08009d67

08001e50 <cmd_help>:
{
 8001e50:	b510      	push	{r4, lr}
	shell_print(shell,
 8001e52:	4a06      	ldr	r2, [pc, #24]	; (8001e6c <cmd_help+0x1c>)
{
 8001e54:	4604      	mov	r4, r0
	shell_print(shell,
 8001e56:	2100      	movs	r1, #0
 8001e58:	f004 fea3 	bl	8006ba2 <shell_fprintf>
	shell_print(shell,
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <cmd_help+0x20>)
 8001e60:	2100      	movs	r1, #0
 8001e62:	f004 fe9e 	bl	8006ba2 <shell_fprintf>
}
 8001e66:	2000      	movs	r0, #0
 8001e68:	bd10      	pop	{r4, pc}
 8001e6a:	bf00      	nop
 8001e6c:	08009b6c 	.word	0x08009b6c
 8001e70:	08009c5b 	.word	0x08009c5b

08001e74 <cmd_history>:
{
 8001e74:	b5f0      	push	{r4, r5, r6, r7, lr}
			shell_print(shell, "[%3d] %s",
 8001e76:	4f10      	ldr	r7, [pc, #64]	; (8001eb8 <cmd_history+0x44>)
{
 8001e78:	b085      	sub	sp, #20
 8001e7a:	4604      	mov	r4, r0
	size_t i = 0;
 8001e7c:	2500      	movs	r5, #0
				  shell->ctx->temp_buff, &len);
 8001e7e:	68a2      	ldr	r2, [r4, #8]
		shell_history_get(shell->history, true,
 8001e80:	68e0      	ldr	r0, [r4, #12]
 8001e82:	f10d 030e 	add.w	r3, sp, #14
 8001e86:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	f005 fb85 	bl	800759a <shell_history_get>
		if (len) {
 8001e90:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8001e94:	68a3      	ldr	r3, [r4, #8]
 8001e96:	b158      	cbz	r0, 8001eb0 <cmd_history+0x3c>
			shell_print(shell, "[%3d] %s",
 8001e98:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	1c6e      	adds	r6, r5, #1
 8001ea0:	462b      	mov	r3, r5
 8001ea2:	463a      	mov	r2, r7
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f004 fe7b 	bl	8006ba2 <shell_fprintf>
 8001eac:	4635      	mov	r5, r6
		shell_history_get(shell->history, true,
 8001eae:	e7e6      	b.n	8001e7e <cmd_history+0xa>
	shell->ctx->temp_buff[0] = '\0';
 8001eb0:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
}
 8001eb4:	b005      	add	sp, #20
 8001eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eb8:	08009d23 	.word	0x08009d23

08001ebc <cmd_echo>:
	if (argc == 2) {
 8001ebc:	2902      	cmp	r1, #2
{
 8001ebe:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
 8001ec0:	d10c      	bne.n	8001edc <cmd_echo+0x20>
		shell_error(shell, "%s:%s%s", argv[0],
 8001ec2:	6853      	ldr	r3, [r2, #4]
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <cmd_echo+0x40>)
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	6813      	ldr	r3, [r2, #0]
 8001ecc:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <cmd_echo+0x44>)
 8001ece:	f004 fe68 	bl	8006ba2 <shell_fprintf>
 8001ed2:	f06f 0015 	mvn.w	r0, #21
}
 8001ed6:	b003      	add	sp, #12
 8001ed8:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
 8001edc:	6883      	ldr	r3, [r0, #8]
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <cmd_echo+0x48>)
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 8001ee0:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001ee4:	f013 0f04 	tst.w	r3, #4
 8001ee8:	f04f 0100 	mov.w	r1, #0
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <cmd_echo+0x4c>)
 8001eee:	bf18      	it	ne
 8001ef0:	4613      	movne	r3, r2
 8001ef2:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <cmd_echo+0x50>)
 8001ef4:	f004 fe55 	bl	8006ba2 <shell_fprintf>
	return 0;
 8001ef8:	2000      	movs	r0, #0
 8001efa:	e7ec      	b.n	8001ed6 <cmd_echo+0x1a>
 8001efc:	08009b41 	.word	0x08009b41
 8001f00:	08009b38 	.word	0x08009b38
 8001f04:	08009b35 	.word	0x08009b35
 8001f08:	0800995e 	.word	0x0800995e
 8001f0c:	08009b56 	.word	0x08009b56

08001f10 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
 8001f12:	2901      	cmp	r1, #1
{
 8001f14:	b085      	sub	sp, #20
 8001f16:	4605      	mov	r5, r0
	if (argc != 1) {
 8001f18:	d00d      	beq.n	8001f36 <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
 8001f1a:	6853      	ldr	r3, [r2, #4]
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	4b53      	ldr	r3, [pc, #332]	; (800206c <cmd_resize+0x15c>)
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	6813      	ldr	r3, [r2, #0]
 8001f24:	4a52      	ldr	r2, [pc, #328]	; (8002070 <cmd_resize+0x160>)
 8001f26:	2102      	movs	r1, #2
 8001f28:	f004 fe3b 	bl	8006ba2 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
 8001f2c:	f06f 0415 	mvn.w	r4, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
 8001f30:	4620      	mov	r0, r4
 8001f32:	b005      	add	sp, #20
 8001f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
 8001f36:	4a4f      	ldr	r2, [pc, #316]	; (8002074 <cmd_resize+0x164>)
 8001f38:	494f      	ldr	r1, [pc, #316]	; (8002078 <cmd_resize+0x168>)
 8001f3a:	6940      	ldr	r0, [r0, #20]
 8001f3c:	f005 fb0b 	bl	8007556 <shell_raw_fprintf>
	shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
 8001f40:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
 8001f44:	4628      	mov	r0, r5
 8001f46:	f7ff fc9b 	bl	8001880 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
 8001f4a:	21fa      	movs	r1, #250	; 0xfa
 8001f4c:	4628      	mov	r0, r5
 8001f4e:	f7ff fca7 	bl	80018a0 <shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
 8001f52:	68a8      	ldr	r0, [r5, #8]
	char c = 0;
 8001f54:	2400      	movs	r4, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
 8001f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	f500 709c 	add.w	r0, r0, #312	; 0x138
	char c = 0;
 8001f60:	f88d 400b 	strb.w	r4, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
 8001f64:	f006 f8a0 	bl	80080a8 <memset>
	shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
 8001f68:	4944      	ldr	r1, [pc, #272]	; (800207c <cmd_resize+0x16c>)
 8001f6a:	6968      	ldr	r0, [r5, #20]
 8001f6c:	f005 faf3 	bl	8007556 <shell_raw_fprintf>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
 8001f70:	6968      	ldr	r0, [r5, #20]
 8001f72:	f004 fe43 	bl	8006bfc <shell_fprintf_buffer_flush>
 8001f76:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
 8001f7a:	6868      	ldr	r0, [r5, #4]
 8001f7c:	6803      	ldr	r3, [r0, #0]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	691f      	ldr	r7, [r3, #16]
 8001f82:	f10d 010b 	add.w	r1, sp, #11
 8001f86:	ab03      	add	r3, sp, #12
 8001f88:	47b8      	blx	r7
			if (cnt == 0) {
 8001f8a:	9b03      	ldr	r3, [sp, #12]
 8001f8c:	b953      	cbnz	r3, 8001fa4 <cmd_resize+0x94>
	z_impl_k_busy_wait(usec_to_wait);
 8001f8e:	3e01      	subs	r6, #1
 8001f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f94:	b2b6      	uxth	r6, r6
 8001f96:	f003 fbf3 	bl	8005780 <z_impl_k_busy_wait>
	for (u16_t i = 0; i < 1000; i++) {
 8001f9a:	2e00      	cmp	r6, #0
 8001f9c:	d1ed      	bne.n	8001f7a <cmd_resize+0x6a>
		ret_val = -ENOTSUP;
 8001f9e:	f06f 0422 	mvn.w	r4, #34	; 0x22
 8001fa2:	e031      	b.n	8002008 <cmd_resize+0xf8>
			if ((c != SHELL_VT100_ASCII_ESC) &&
 8001fa4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001fa8:	68aa      	ldr	r2, [r5, #8]
 8001faa:	2b1b      	cmp	r3, #27
 8001fac:	d053      	beq.n	8002056 <cmd_resize+0x146>
 8001fae:	f892 1138 	ldrb.w	r1, [r2, #312]	; 0x138
 8001fb2:	291b      	cmp	r1, #27
 8001fb4:	d1e1      	bne.n	8001f7a <cmd_resize+0x6a>
			if (c == 'R') { /* End of response from the terminal. */
 8001fb6:	2b52      	cmp	r3, #82	; 0x52
 8001fb8:	d14d      	bne.n	8002056 <cmd_resize+0x146>
				shell->ctx->temp_buff[buff_idx] = '\0';
 8001fba:	4414      	add	r4, r2
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
				if (shell->ctx->temp_buff[1] != '[') {
 8001fc2:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
 8001fc6:	295b      	cmp	r1, #91	; 0x5b
 8001fc8:	d14d      	bne.n	8002066 <cmd_resize+0x156>
 8001fca:	f502 709d 	add.w	r0, r2, #314	; 0x13a
	*y = 0U;
 8001fce:	461f      	mov	r7, r3
				buff_idx = 2U;
 8001fd0:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
 8001fd2:	f810 1b01 	ldrb.w	r1, [r0], #1
 8001fd6:	3601      	adds	r6, #1
 8001fd8:	293b      	cmp	r1, #59	; 0x3b
 8001fda:	b2b6      	uxth	r6, r6
 8001fdc:	d126      	bne.n	800202c <cmd_resize+0x11c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 8001fde:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8001fe2:	d0dc      	beq.n	8001f9e <cmd_resize+0x8e>
 8001fe4:	f506 709c 	add.w	r0, r6, #312	; 0x138
 8001fe8:	4410      	add	r0, r2
	*x = 0U;
 8001fea:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
 8001fec:	f810 4b01 	ldrb.w	r4, [r0], #1
 8001ff0:	bb34      	cbnz	r4, 8002040 <cmd_resize+0x130>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 8001ff2:	2bfa      	cmp	r3, #250	; 0xfa
 8001ff4:	bf28      	it	cs
 8001ff6:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 8001ff8:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 8001ffa:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	bf28      	it	cs
 8002000:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
 8002002:	f882 4138 	strb.w	r4, [r2, #312]	; 0x138
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 8002006:	8513      	strh	r3, [r2, #40]	; 0x28
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
 8002008:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <cmd_resize+0x170>)
 800200a:	491b      	ldr	r1, [pc, #108]	; (8002078 <cmd_resize+0x168>)
 800200c:	6968      	ldr	r0, [r5, #20]
 800200e:	f005 faa2 	bl	8007556 <shell_raw_fprintf>
	if (err != 0) {
 8002012:	2c00      	cmp	r4, #0
 8002014:	d08c      	beq.n	8001f30 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
 8002016:	68ab      	ldr	r3, [r5, #8]
 8002018:	4a1a      	ldr	r2, [pc, #104]	; (8002084 <cmd_resize+0x174>)
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
 800201c:	2104      	movs	r1, #4
 800201e:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <cmd_resize+0x178>)
 8002020:	4628      	mov	r0, r5
 8002022:	f004 fdbe 	bl	8006ba2 <shell_fprintf>
 8002026:	f06f 0407 	mvn.w	r4, #7
 800202a:	e781      	b.n	8001f30 <cmd_resize+0x20>
					*y = *y * 10U +
 800202c:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8002030:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8002034:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
 8002036:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
 800203a:	b29f      	uxth	r7, r3
					if (buff_idx >=
 800203c:	d1c9      	bne.n	8001fd2 <cmd_resize+0xc2>
 800203e:	e7ae      	b.n	8001f9e <cmd_resize+0x8e>
					*x = *x * 10U +
 8002040:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
 8002044:	3601      	adds	r6, #1
					*x = *x * 10U +
 8002046:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
 800204a:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
 800204c:	3c30      	subs	r4, #48	; 0x30
					if (buff_idx >=
 800204e:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
 8002050:	b2a3      	uxth	r3, r4
					if (buff_idx >=
 8002052:	d9cb      	bls.n	8001fec <cmd_resize+0xdc>
 8002054:	e7a3      	b.n	8001f9e <cmd_resize+0x8e>
			shell->ctx->temp_buff[buff_idx] = c;
 8002056:	1911      	adds	r1, r2, r4
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 8002058:	3401      	adds	r4, #1
 800205a:	b2a4      	uxth	r4, r4
 800205c:	2c09      	cmp	r4, #9
			shell->ctx->temp_buff[buff_idx] = c;
 800205e:	f881 3138 	strb.w	r3, [r1, #312]	; 0x138
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 8002062:	d98a      	bls.n	8001f7a <cmd_resize+0x6a>
				shell->ctx->temp_buff[0] = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	f882 3138 	strb.w	r3, [r2, #312]	; 0x138
				return -ENOMEM;
 800206a:	e798      	b.n	8001f9e <cmd_resize+0x8e>
 800206c:	08009b41 	.word	0x08009b41
 8002070:	08009b38 	.word	0x08009b38
 8002074:	08009b20 	.word	0x08009b20
 8002078:	08009ab4 	.word	0x08009ab4
 800207c:	08009b67 	.word	0x08009b67
 8002080:	08009b23 	.word	0x08009b23
 8002084:	00500018 	.word	0x00500018
 8002088:	08009d2d 	.word	0x08009d2d

0800208c <shell_wildcard_process>:


enum shell_wildcard_status shell_wildcard_process(const struct shell *shell,
					      const struct shell_cmd_entry *cmd,
					      const char *pattern)
{
 800208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002090:	4682      	mov	sl, r0
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	4616      	mov	r6, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
 8002096:	468b      	mov	fp, r1
 8002098:	b921      	cbnz	r1, 80020a4 <shell_wildcard_process+0x18>
		return ret_val;
 800209a:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
 800209c:	4620      	mov	r0, r4
 800209e:	b009      	add	sp, #36	; 0x24
 80020a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!shell_wildcard_character_exist(pattern)) {
 80020a4:	4610      	mov	r0, r2
 80020a6:	f005 fb20 	bl	80076ea <shell_wildcard_character_exist>
 80020aa:	2800      	cmp	r0, #0
 80020ac:	d0f5      	beq.n	800209a <shell_wildcard_process+0xe>
 80020ae:	2500      	movs	r5, #0
	size_t cnt = 0;
 80020b0:	9501      	str	r5, [sp, #4]
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 80020b2:	2402      	movs	r4, #2
	if (cmd->is_dynamic) {
 80020b4:	f89b 2000 	ldrb.w	r2, [fp]
 80020b8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80020bc:	4268      	negs	r0, r5
 80020be:	b18a      	cbz	r2, 80020e4 <shell_wildcard_process+0x58>
		cmd->u.dynamic_get(idx, d_entry);
 80020c0:	a903      	add	r1, sp, #12
 80020c2:	4798      	blx	r3
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
 80020c4:	9b03      	ldr	r3, [sp, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d15b      	bne.n	8002182 <shell_wildcard_process+0xf6>
	if (cnt > 0) {
 80020ca:	9b01      	ldr	r3, [sp, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0e5      	beq.n	800209c <shell_wildcard_process+0x10>
		shell_pattern_remove(shell->ctx->temp_buff,
 80020d0:	f8da 0008 	ldr.w	r0, [sl, #8]
 80020d4:	4632      	mov	r2, r6
 80020d6:	f100 0136 	add.w	r1, r0, #54	; 0x36
 80020da:	f500 709c 	add.w	r0, r0, #312	; 0x138
 80020de:	f004 feba 	bl	8006e56 <shell_pattern_remove>
	return ret_val;
 80020e2:	e7db      	b.n	800209c <shell_wildcard_process+0x10>
		*entry = (cmd->u.entry[idx].syntax != NULL) ?
 80020e4:	f06f 0213 	mvn.w	r2, #19
 80020e8:	436a      	muls	r2, r5
 80020ea:	eb03 0802 	add.w	r8, r3, r2
				&cmd->u.entry[idx] : NULL;
 80020ee:	589b      	ldr	r3, [r3, r2]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0ea      	beq.n	80020ca <shell_wildcard_process+0x3e>
		if (fnmatch(pattern, p_static_entry->syntax, 0) == 0) {
 80020f4:	2200      	movs	r2, #0
 80020f6:	f8d8 1000 	ldr.w	r1, [r8]
 80020fa:	4630      	mov	r0, r6
 80020fc:	f004 fd1a 	bl	8006b34 <fnmatch>
 8002100:	bb80      	cbnz	r0, 8002164 <shell_wildcard_process+0xd8>
			ret_val = command_add(shell->ctx->temp_buff,
 8002102:	f8d8 9000 	ldr.w	r9, [r8]
 8002106:	f8da 7008 	ldr.w	r7, [sl, #8]
	return str == NULL ? 0U : (u16_t)strlen(str);
 800210a:	f1b9 0f00 	cmp.w	r9, #0
 800210e:	d02c      	beq.n	800216a <shell_wildcard_process+0xde>
 8002110:	4648      	mov	r0, r9
 8002112:	f005 ff56 	bl	8007fc2 <strlen>
 8002116:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
 8002118:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800211a:	3301      	adds	r3, #1
 800211c:	4423      	add	r3, r4
 800211e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002122:	dc24      	bgt.n	800216e <shell_wildcard_process+0xe2>
	completion_addr = strstr(buff, pattern);
 8002124:	4631      	mov	r1, r6
 8002126:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800212a:	f005 ff02 	bl	8007f32 <strstr>
	if (!completion_addr) {
 800212e:	4680      	mov	r8, r0
 8002130:	b328      	cbz	r0, 800217e <shell_wildcard_process+0xf2>
 8002132:	f005 ff46 	bl	8007fc2 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
 8002136:	b282      	uxth	r2, r0
 8002138:	1c60      	adds	r0, r4, #1
 800213a:	3201      	adds	r2, #1
 800213c:	4641      	mov	r1, r8
 800213e:	4440      	add	r0, r8
 8002140:	f005 ff71 	bl	8008026 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
 8002144:	4622      	mov	r2, r4
 8002146:	4649      	mov	r1, r9
 8002148:	4640      	mov	r0, r8
 800214a:	f005 ff83 	bl	8008054 <memcpy>
	completion_addr[cmd_len] = ' ';
 800214e:	2320      	movs	r3, #32
 8002150:	f808 3004 	strb.w	r3, [r8, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
 8002154:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002156:	441c      	add	r4, r3
			cnt++;
 8002158:	9b01      	ldr	r3, [sp, #4]
	*buff_len += cmd_len + 1; /* + 1 for space */
 800215a:	3401      	adds	r4, #1
			cnt++;
 800215c:	3301      	adds	r3, #1
	*buff_len += cmd_len + 1; /* + 1 for space */
 800215e:	86fc      	strh	r4, [r7, #54]	; 0x36
			cnt++;
 8002160:	9301      	str	r3, [sp, #4]
			ret_val = command_add(shell->ctx->temp_buff,
 8002162:	2400      	movs	r4, #0
	} while (cmd_idx);
 8002164:	3d01      	subs	r5, #1
 8002166:	d1a5      	bne.n	80020b4 <shell_wildcard_process+0x28>
 8002168:	e7af      	b.n	80020ca <shell_wildcard_process+0x3e>
 800216a:	464c      	mov	r4, r9
 800216c:	e7d4      	b.n	8002118 <shell_wildcard_process+0x8c>
				shell_internal_fprintf(shell,
 800216e:	4633      	mov	r3, r6
 8002170:	4a05      	ldr	r2, [pc, #20]	; (8002188 <shell_wildcard_process+0xfc>)
 8002172:	2104      	movs	r1, #4
 8002174:	4650      	mov	r0, sl
 8002176:	f005 f87e 	bl	8007276 <shell_internal_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
 800217a:	2401      	movs	r4, #1
 800217c:	e7a5      	b.n	80020ca <shell_wildcard_process+0x3e>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 800217e:	2402      	movs	r4, #2
 8002180:	e7a3      	b.n	80020ca <shell_wildcard_process+0x3e>
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
 8002182:	f10d 080c 	add.w	r8, sp, #12
 8002186:	e7b5      	b.n	80020f4 <shell_wildcard_process+0x68>
 8002188:	0800a14a 	.word	0x0800a14a

0800218c <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 800218c:	280a      	cmp	r0, #10
{
 800218e:	b538      	push	{r3, r4, r5, lr}
 8002190:	4604      	mov	r4, r0
 8002192:	4d07      	ldr	r5, [pc, #28]	; (80021b0 <console_out+0x24>)
	if ('\n' == c) {
 8002194:	d104      	bne.n	80021a0 <console_out+0x14>
 8002196:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
 8002198:	6843      	ldr	r3, [r0, #4]
 800219a:	210d      	movs	r1, #13
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 80021a0:	6828      	ldr	r0, [r5, #0]
 80021a2:	6843      	ldr	r3, [r0, #4]
 80021a4:	b2e1      	uxtb	r1, r4
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4798      	blx	r3

	return c;
}
 80021aa:	4620      	mov	r0, r4
 80021ac:	bd38      	pop	{r3, r4, r5, pc}
 80021ae:	bf00      	nop
 80021b0:	200005ac 	.word	0x200005ac

080021b4 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
 80021b4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 80021b6:	4c04      	ldr	r4, [pc, #16]	; (80021c8 <uart_console_hook_install+0x14>)
 80021b8:	4620      	mov	r0, r4
 80021ba:	f002 f85b 	bl	8004274 <__stdout_hook_install>
	__printk_hook_install(console_out);
 80021be:	4620      	mov	r0, r4
}
 80021c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
 80021c4:	f7fe bc3a 	b.w	8000a3c <__printk_hook_install>
 80021c8:	0800218d 	.word	0x0800218d

080021cc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 80021cc:	b508      	push	{r3, lr}
 80021ce:	4804      	ldr	r0, [pc, #16]	; (80021e0 <uart_console_init+0x14>)
 80021d0:	f002 fd32 	bl	8004c38 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <uart_console_init+0x18>)
 80021d6:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
 80021d8:	f7ff ffec 	bl	80021b4 <uart_console_hook_install>

	return 0;
}
 80021dc:	2000      	movs	r0, #0
 80021de:	bd08      	pop	{r3, pc}
 80021e0:	08009ae6 	.word	0x08009ae6
 80021e4:	200005ac 	.word	0x200005ac

080021e8 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, void *arg)
{
 80021e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct device *dev = arg;
	struct stm32_exti_data *data = dev->driver_data;
 80021ec:	6895      	ldr	r5, [r2, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80021ee:	4e0d      	ldr	r6, [pc, #52]	; (8002224 <__stm32_exti_isr+0x3c>)
{
 80021f0:	4604      	mov	r4, r0
 80021f2:	460f      	mov	r7, r1
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80021f4:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 80021f8:	f105 0904 	add.w	r9, r5, #4
	for (line = min; line < max; line++) {
 80021fc:	42bc      	cmp	r4, r7
 80021fe:	db01      	blt.n	8002204 <__stm32_exti_isr+0x1c>
		}
	}
}
 8002200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002204:	6972      	ldr	r2, [r6, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8002206:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 800220a:	ea33 0202 	bics.w	r2, r3, r2
 800220e:	d107      	bne.n	8002220 <__stm32_exti_isr+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8002210:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 8002212:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8002216:	b11b      	cbz	r3, 8002220 <__stm32_exti_isr+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8002218:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 800221c:	4620      	mov	r0, r4
 800221e:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8002220:	3401      	adds	r4, #1
 8002222:	e7eb      	b.n	80021fc <__stm32_exti_isr+0x14>
 8002224:	40013c00 	.word	0x40013c00

08002228 <stm32_exti_enable>:
	if (line < 32) {
 8002228:	281f      	cmp	r0, #31
{
 800222a:	b508      	push	{r3, lr}
	if (line < 32) {
 800222c:	dd02      	ble.n	8002234 <stm32_exti_enable+0xc>
		return -ENOTSUP;
 800222e:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8002232:	bd08      	pop	{r3, pc}
  SET_BIT(EXTI->IMR, ExtiLine);
 8002234:	4a06      	ldr	r2, [pc, #24]	; (8002250 <stm32_exti_enable+0x28>)
		LL_EXTI_EnableIT_0_31(1 << line);
 8002236:	2301      	movs	r3, #1
 8002238:	6811      	ldr	r1, [r2, #0]
 800223a:	4083      	lsls	r3, r0
 800223c:	430b      	orrs	r3, r1
	if (line < ARRAY_SIZE(exti_irq_table)) {
 800223e:	2816      	cmp	r0, #22
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	dcf4      	bgt.n	800222e <stm32_exti_enable+0x6>
	irq_enable(irqnum);
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <stm32_exti_enable+0x2c>)
 8002246:	5618      	ldrsb	r0, [r3, r0]
 8002248:	f001 f8e0 	bl	800340c <arch_irq_enable>
	return 0;
 800224c:	2000      	movs	r0, #0
 800224e:	e7f0      	b.n	8002232 <stm32_exti_enable+0xa>
 8002250:	40013c00 	.word	0x40013c00
 8002254:	0800a19c 	.word	0x0800a19c

08002258 <stm32_exti_disable>:
	if (line < 32) {
 8002258:	281f      	cmp	r0, #31
 800225a:	dc06      	bgt.n	800226a <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800225c:	4903      	ldr	r1, [pc, #12]	; (800226c <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 800225e:	2201      	movs	r2, #1
 8002260:	680b      	ldr	r3, [r1, #0]
 8002262:	4082      	lsls	r2, r0
 8002264:	ea23 0302 	bic.w	r3, r3, r2
 8002268:	600b      	str	r3, [r1, #0]
}
 800226a:	4770      	bx	lr
 800226c:	40013c00 	.word	0x40013c00

08002270 <stm32_exti_trigger>:
	if (trigger & STM32_EXTI_TRIG_RISING) {
 8002270:	07ca      	lsls	r2, r1, #31
{
 8002272:	b510      	push	{r4, lr}
	if (trigger & STM32_EXTI_TRIG_RISING) {
 8002274:	d507      	bpl.n	8002286 <stm32_exti_trigger+0x16>
		if (line < 32) {
 8002276:	281f      	cmp	r0, #31
 8002278:	dc05      	bgt.n	8002286 <stm32_exti_trigger+0x16>
  SET_BIT(EXTI->RTSR, ExtiLine);
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800227c:	2201      	movs	r2, #1
 800227e:	689c      	ldr	r4, [r3, #8]
 8002280:	4082      	lsls	r2, r0
 8002282:	4322      	orrs	r2, r4
 8002284:	609a      	str	r2, [r3, #8]
	if (trigger & STM32_EXTI_TRIG_FALLING) {
 8002286:	078b      	lsls	r3, r1, #30
 8002288:	d507      	bpl.n	800229a <stm32_exti_trigger+0x2a>
		if (line < 32) {
 800228a:	281f      	cmp	r0, #31
 800228c:	dc05      	bgt.n	800229a <stm32_exti_trigger+0x2a>
  SET_BIT(EXTI->FTSR, ExtiLine);
 800228e:	4a03      	ldr	r2, [pc, #12]	; (800229c <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8002290:	2301      	movs	r3, #1
 8002292:	68d1      	ldr	r1, [r2, #12]
 8002294:	4083      	lsls	r3, r0
 8002296:	430b      	orrs	r3, r1
 8002298:	60d3      	str	r3, [r2, #12]
}
 800229a:	bd10      	pop	{r4, pc}
 800229c:	40013c00 	.word	0x40013c00

080022a0 <stm32_exti_set_callback>:
				void *arg)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	if (data->cb[line].cb) {
 80022a0:	4907      	ldr	r1, [pc, #28]	; (80022c0 <stm32_exti_set_callback+0x20>)
{
 80022a2:	b530      	push	{r4, r5, lr}
 80022a4:	688c      	ldr	r4, [r1, #8]
	if (data->cb[line].cb) {
 80022a6:	f854 1030 	ldr.w	r1, [r4, r0, lsl #3]
 80022aa:	eb04 05c0 	add.w	r5, r4, r0, lsl #3
 80022ae:	b921      	cbnz	r1, 80022ba <stm32_exti_set_callback+0x1a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80022b0:	f844 2030 	str.w	r2, [r4, r0, lsl #3]
	data->cb[line].data = arg;
 80022b4:	606b      	str	r3, [r5, #4]

	return 0;
 80022b6:	4608      	mov	r0, r1
}
 80022b8:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 80022ba:	f06f 000f 	mvn.w	r0, #15
 80022be:	e7fb      	b.n	80022b8 <stm32_exti_set_callback+0x18>
 80022c0:	20002a34 	.word	0x20002a34

080022c4 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	data->cb[line].cb = NULL;
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <stm32_exti_unset_callback+0x14>)
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 80022cc:	2300      	movs	r3, #0
 80022ce:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	data->cb[line].data = NULL;
 80022d2:	604b      	str	r3, [r1, #4]
}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20002a34 	.word	0x20002a34

080022dc <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80022dc:	680b      	ldr	r3, [r1, #0]
{
 80022de:	b084      	sub	sp, #16
	switch (pclken->bus) {
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d82d      	bhi.n	8002340 <stm32_clock_control_on+0x64>
 80022e4:	e8df f003 	tbb	[pc, r3]
 80022e8:	22180e02 	.word	0x22180e02
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80022ec:	4a16      	ldr	r2, [pc, #88]	; (8002348 <stm32_clock_control_on+0x6c>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 80022ee:	684b      	ldr	r3, [r1, #4]
 80022f0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80022f2:	4319      	orrs	r1, r3
 80022f4:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80022f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022f8:	4013      	ands	r3, r2
 80022fa:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80022fc:	9b00      	ldr	r3, [sp, #0]
#endif /* CONFIG_SOC_SERIES_STM32L0X || CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 80022fe:	2000      	movs	r0, #0
}
 8002300:	b004      	add	sp, #16
 8002302:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002304:	4a10      	ldr	r2, [pc, #64]	; (8002348 <stm32_clock_control_on+0x6c>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8002306:	684b      	ldr	r3, [r1, #4]
 8002308:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800230a:	4319      	orrs	r1, r3
 800230c:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800230e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002310:	4013      	ands	r3, r2
 8002312:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002314:	9b01      	ldr	r3, [sp, #4]
 8002316:	e7f2      	b.n	80022fe <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002318:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <stm32_clock_control_on+0x6c>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 800231a:	684b      	ldr	r3, [r1, #4]
 800231c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800231e:	4319      	orrs	r1, r3
 8002320:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002322:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002324:	4013      	ands	r3, r2
 8002326:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8002328:	9b02      	ldr	r3, [sp, #8]
 800232a:	e7e8      	b.n	80022fe <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <stm32_clock_control_on+0x6c>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 800232e:	684b      	ldr	r3, [r1, #4]
 8002330:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002332:	4319      	orrs	r1, r3
 8002334:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002336:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002338:	4013      	ands	r3, r2
 800233a:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800233c:	9b03      	ldr	r3, [sp, #12]
 800233e:	e7de      	b.n	80022fe <stm32_clock_control_on+0x22>
		return -ENOTSUP;
 8002340:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8002344:	e7dc      	b.n	8002300 <stm32_clock_control_on+0x24>
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800

0800234c <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 800234c:	680b      	ldr	r3, [r1, #0]
 800234e:	2b03      	cmp	r3, #3
 8002350:	d820      	bhi.n	8002394 <stm32_clock_control_off+0x48>
 8002352:	e8df f003 	tbb	[pc, r3]
 8002356:	0a02      	.short	0x0a02
 8002358:	1811      	.short	0x1811
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 800235a:	4a10      	ldr	r2, [pc, #64]	; (800239c <stm32_clock_control_off+0x50>)
 800235c:	6849      	ldr	r1, [r1, #4]
 800235e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002360:	ea23 0301 	bic.w	r3, r3, r1
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8002366:	2000      	movs	r0, #0
 8002368:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800236a:	4a0c      	ldr	r2, [pc, #48]	; (800239c <stm32_clock_control_off+0x50>)
 800236c:	6849      	ldr	r1, [r1, #4]
 800236e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002370:	ea23 0301 	bic.w	r3, r3, r1
 8002374:	6353      	str	r3, [r2, #52]	; 0x34
 8002376:	e7f6      	b.n	8002366 <stm32_clock_control_off+0x1a>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8002378:	4a08      	ldr	r2, [pc, #32]	; (800239c <stm32_clock_control_off+0x50>)
 800237a:	6849      	ldr	r1, [r1, #4]
 800237c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800237e:	ea23 0301 	bic.w	r3, r3, r1
 8002382:	6413      	str	r3, [r2, #64]	; 0x40
 8002384:	e7ef      	b.n	8002366 <stm32_clock_control_off+0x1a>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <stm32_clock_control_off+0x50>)
 8002388:	6849      	ldr	r1, [r1, #4]
 800238a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800238c:	ea23 0301 	bic.w	r3, r3, r1
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	e7e8      	b.n	8002366 <stm32_clock_control_off+0x1a>
		return -ENOTSUP;
 8002394:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800

080023a0 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	u32_t ahb_clock = SystemCoreClock;
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <stm32_clock_control_get_subsys_rate+0x24>)
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80023a2:	6809      	ldr	r1, [r1, #0]
	u32_t ahb_clock = SystemCoreClock;
 80023a4:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 80023a6:	2903      	cmp	r1, #3
 80023a8:	d809      	bhi.n	80023be <stm32_clock_control_get_subsys_rate+0x1e>
 80023aa:	e8df f001 	tbb	[pc, r1]
 80023ae:	0303      	.short	0x0303
 80023b0:	0602      	.short	0x0602
	return clock / prescaler;
 80023b2:	089b      	lsrs	r3, r3, #2
		/*
		 * STM32G0x only has one APB, but two reset/clock enable
		 * registers for peripherals, so return the APB1 clock rate here
		 */
#endif /* CONFIG_SOC_SERIES_STM32G0X */
		*rate = apb1_clock;
 80023b4:	6013      	str	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 80023b6:	2000      	movs	r0, #0
		break;
 80023b8:	4770      	bx	lr
	return clock / prescaler;
 80023ba:	085b      	lsrs	r3, r3, #1
 80023bc:	e7fa      	b.n	80023b4 <stm32_clock_control_get_subsys_rate+0x14>
		return -ENOTSUP;
 80023be:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 80023c2:	4770      	bx	lr
 80023c4:	200029ec 	.word	0x200029ec

080023c8 <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(struct device *dev)
{
 80023c8:	b530      	push	{r4, r5, lr}
	clk_init->APB1CLKDivider = apb1_prescaler(
 80023ca:	2100      	movs	r1, #0
{
 80023cc:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(
 80023ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023d2:	e9cd 1300 	strd	r1, r3, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(
 80023d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023da:	9302      	str	r3, [sp, #8]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 80023dc:	f000 f838 	bl	8002450 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 80023e0:	a803      	add	r0, sp, #12
 80023e2:	f005 fa36 	bl	8007852 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <stm32_clock_control_init+0x80>)
 80023e8:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 80023ea:	0790      	lsls	r0, r2, #30
 80023ec:	d406      	bmi.n	80023fc <stm32_clock_control_init+0x34>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	f042 0201 	orr.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80023f6:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 80023f8:	0792      	lsls	r2, r2, #30
 80023fa:	d5fc      	bpl.n	80023f6 <stm32_clock_control_init+0x2e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80023fc:	4c12      	ldr	r4, [pc, #72]	; (8002448 <stm32_clock_control_init+0x80>)
 80023fe:	68a3      	ldr	r3, [r4, #8]
 8002400:	f023 0303 	bic.w	r3, r3, #3
 8002404:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002406:	68a3      	ldr	r3, [r4, #8]
 8002408:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800240c:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800240e:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8002410:	f015 050c 	ands.w	r5, r5, #12
 8002414:	d1fb      	bne.n	800240e <stm32_clock_control_init+0x46>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002416:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_CLOCK_STM32_HSE_BYPASS
	hse_bypass = LL_UTILS_HSEBYPASS_ON;
#endif /* CONFIG_CLOCK_STM32_HSE_BYPASS */

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <stm32_clock_control_init+0x84>)
 800241a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800241e:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8002420:	6863      	ldr	r3, [r4, #4]
 8002422:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002426:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800242a:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 800242c:	aa03      	add	r2, sp, #12
 800242e:	466b      	mov	r3, sp
 8002430:	4629      	mov	r1, r5
 8002432:	f002 fb9d 	bl	8004b70 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 800243e:	f005 fa11 	bl	8007864 <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8002442:	4628      	mov	r0, r5
 8002444:	b007      	add	sp, #28
 8002446:	bd30      	pop	{r4, r5, pc}
 8002448:	40023800 	.word	0x40023800
 800244c:	00f42400 	.word	0x00f42400

08002450 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <config_enable_default_clocks+0x1c>)
 8002452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002454:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 800245c:	b082      	sub	sp, #8
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002464:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8002466:	b002      	add	sp, #8
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800

08002470 <z_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int z_pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 8002470:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002472:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 8002474:	0906      	lsrs	r6, r0, #4
{
 8002476:	460d      	mov	r5, r1
	if (!clk) {
 8002478:	4610      	mov	r0, r2
 800247a:	b912      	cbnz	r2, 8002482 <z_pinmux_stm32_set+0x12>
 800247c:	4811      	ldr	r0, [pc, #68]	; (80024c4 <z_pinmux_stm32_set+0x54>)
 800247e:	f002 fbdb 	bl	8004c38 <z_impl_device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8002482:	2300      	movs	r3, #0
 8002484:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <z_pinmux_stm32_set+0x58>)
 8002488:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800248c:	9301      	str	r3, [sp, #4]
	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 800248e:	3301      	adds	r3, #1
 8002490:	d102      	bne.n	8002498 <z_pinmux_stm32_set+0x28>
		return -EIO;
 8002492:	f06f 0004 	mvn.w	r0, #4
 8002496:	e012      	b.n	80024be <z_pinmux_stm32_set+0x4e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
 8002498:	6843      	ldr	r3, [r0, #4]
 800249a:	4669      	mov	r1, sp
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d1f6      	bne.n	8002492 <z_pinmux_stm32_set+0x22>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 80024a4:	1120      	asrs	r0, r4, #4
 80024a6:	0280      	lsls	r0, r0, #10
	return gpio_stm32_configure((u32_t *)port_base,
 80024a8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80024ac:	f005 030f 	and.w	r3, r5, #15
 80024b0:	462a      	mov	r2, r5
 80024b2:	f004 010f 	and.w	r1, r4, #15
 80024b6:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 80024ba:	f005 ff2c 	bl	8008316 <gpio_stm32_configure>
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 80024be:	b002      	add	sp, #8
 80024c0:	bd70      	pop	{r4, r5, r6, pc}
 80024c2:	bf00      	nop
 80024c4:	0800a1be 	.word	0x0800a1be
 80024c8:	080095d4 	.word	0x080095d4

080024cc <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 80024cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ce:	4604      	mov	r4, r0
 80024d0:	460e      	mov	r6, r1
 80024d2:	4809      	ldr	r0, [pc, #36]	; (80024f8 <stm32_setup_pins+0x2c>)
 80024d4:	f002 fbb0 	bl	8004c38 <z_impl_device_get_binding>
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 80024d8:	2500      	movs	r5, #0
 80024da:	4607      	mov	r7, r0
 80024dc:	42b5      	cmp	r5, r6
 80024de:	f104 0408 	add.w	r4, r4, #8
 80024e2:	d100      	bne.n	80024e6 <stm32_setup_pins+0x1a>
		z_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 80024e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_pinmux_stm32_set(pinconf[i].pin_num,
 80024e6:	463a      	mov	r2, r7
 80024e8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80024ec:	f814 0c08 	ldrb.w	r0, [r4, #-8]
 80024f0:	f7ff ffbe 	bl	8002470 <z_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 80024f4:	3501      	adds	r5, #1
 80024f6:	e7f1      	b.n	80024dc <stm32_setup_pins+0x10>
 80024f8:	0800a1be 	.word	0x0800a1be

080024fc <z_impl_can_attach_msgq>:
int z_impl_can_attach_msgq(struct device *dev, struct k_msgq *msg_q,
			   const struct zcan_filter *filter)
{
	const struct can_driver_api *api = dev->driver_api;

	return api->attach_isr(dev, can_msgq_put, msg_q, filter);
 80024fc:	6843      	ldr	r3, [r0, #4]
{
 80024fe:	b410      	push	{r4}
	return api->attach_isr(dev, can_msgq_put, msg_q, filter);
 8002500:	689c      	ldr	r4, [r3, #8]
 8002502:	4613      	mov	r3, r2
 8002504:	46a4      	mov	ip, r4
 8002506:	460a      	mov	r2, r1
}
 8002508:	bc10      	pop	{r4}
	return api->attach_isr(dev, can_msgq_put, msg_q, filter);
 800250a:	4901      	ldr	r1, [pc, #4]	; (8002510 <z_impl_can_attach_msgq+0x14>)
 800250c:	4760      	bx	ip
 800250e:	bf00      	nop
 8002510:	080078ad 	.word	0x080078ad

08002514 <can_attach_workq>:

int can_attach_workq(struct device *dev, struct k_work_q *work_q,
			    struct zcan_work *work,
			    can_rx_callback_t callback, void *callback_arg,
			    const struct zcan_filter *filter)
{
 8002514:	b4f0      	push	{r4, r5, r6, r7}
	const struct can_driver_api *api = dev->driver_api;
 8002516:	6846      	ldr	r6, [r0, #4]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8002518:	4f09      	ldr	r7, [pc, #36]	; (8002540 <can_attach_workq+0x2c>)
	work->work_queue = work_q;
	work->cb = callback;
	work->cb_arg = callback_arg;
	can_work_buffer_init(&work->buf);

	return api->attach_isr(dev, can_work_isr_put, work, filter);
 800251a:	68b4      	ldr	r4, [r6, #8]
	work->cb = callback;
 800251c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800251e:	2500      	movs	r5, #0
	work->cb_arg = callback_arg;
 8002520:	9b04      	ldr	r3, [sp, #16]
 8002522:	6015      	str	r5, [r2, #0]
 8002524:	e9c2 7501 	strd	r7, r5, [r2, #4]
	work->work_queue = work_q;
 8002528:	60d1      	str	r1, [r2, #12]
	work->cb_arg = callback_arg;
 800252a:	6513      	str	r3, [r2, #80]	; 0x50
	buffer->head = 0;
 800252c:	f8a2 5048 	strh.w	r5, [r2, #72]	; 0x48
	buffer->tail = 0;
 8002530:	f8a2 504a 	strh.w	r5, [r2, #74]	; 0x4a
	return api->attach_isr(dev, can_work_isr_put, work, filter);
 8002534:	9b05      	ldr	r3, [sp, #20]
 8002536:	4903      	ldr	r1, [pc, #12]	; (8002544 <can_attach_workq+0x30>)
 8002538:	46a4      	mov	ip, r4
}
 800253a:	bcf0      	pop	{r4, r5, r6, r7}
	return api->attach_isr(dev, can_work_isr_put, work, filter);
 800253c:	4760      	bx	ip
 800253e:	bf00      	nop
 8002540:	08007867 	.word	0x08007867
 8002544:	080078b9 	.word	0x080078b9

08002548 <can_enter_init_mode>:

static int can_enter_init_mode(CAN_TypeDef *can)
{
	u32_t start_time;

	can->MCR |= CAN_MCR_INRQ;
 8002548:	6803      	ldr	r3, [r0, #0]
 800254a:	f043 0301 	orr.w	r3, r3, #1
{
 800254e:	b570      	push	{r4, r5, r6, lr}
	can->MCR |= CAN_MCR_INRQ;
 8002550:	6003      	str	r3, [r0, #0]
{
 8002552:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
 8002554:	f000 fee2 	bl	800331c <z_timer_cycle_get_32>
	start_time = k_cycle_get_32();

	while ((can->MSR & CAN_MSR_INAK) == 0U) {
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 8002558:	4e09      	ldr	r6, [pc, #36]	; (8002580 <can_enter_init_mode+0x38>)
 800255a:	4605      	mov	r5, r0
	while ((can->MSR & CAN_MSR_INAK) == 0U) {
 800255c:	6863      	ldr	r3, [r4, #4]
 800255e:	07db      	lsls	r3, r3, #31
 8002560:	d501      	bpl.n	8002566 <can_enter_init_mode+0x1e>
			can->MCR &= ~CAN_MCR_INRQ;
			return CAN_TIMEOUT;
		}
	}

	return 0;
 8002562:	2000      	movs	r0, #0
 8002564:	e00a      	b.n	800257c <can_enter_init_mode+0x34>
 8002566:	f000 fed9 	bl	800331c <z_timer_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 800256a:	1b40      	subs	r0, r0, r5
 800256c:	42b0      	cmp	r0, r6
 800256e:	d9f5      	bls.n	800255c <can_enter_init_mode+0x14>
			can->MCR &= ~CAN_MCR_INRQ;
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	6023      	str	r3, [r4, #0]
			return CAN_TIMEOUT;
 8002578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800257c:	bd70      	pop	{r4, r5, r6, pc}
 800257e:	bf00      	nop
 8002580:	0019a280 	.word	0x0019a280

08002584 <can_stm32_runtime_configure>:

int can_stm32_runtime_configure(struct device *dev, enum can_mode mode,
				u32_t bitrate)
{
	CAN_HandleTypeDef hcan;
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 8002584:	6803      	ldr	r3, [r0, #0]
{
 8002586:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 800258a:	f8d3 a008 	ldr.w	sl, [r3, #8]
	CAN_TypeDef *can = cfg->can;
	struct can_stm32_data *data = DEV_DATA(dev);
 800258e:	6886      	ldr	r6, [r0, #8]
	CAN_TypeDef *can = cfg->can;
 8002590:	4654      	mov	r4, sl
{
 8002592:	4688      	mov	r8, r1
 8002594:	4617      	mov	r7, r2
	CAN_TypeDef *can = cfg->can;
 8002596:	f854 5b0c 	ldr.w	r5, [r4], #12
 800259a:	4836      	ldr	r0, [pc, #216]	; (8002674 <can_stm32_runtime_configure+0xf0>)
 800259c:	f002 fb4c 	bl	8004c38 <z_impl_device_get_binding>
		(const struct clock_control_driver_api *)dev->driver_api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 80025a0:	6843      	ldr	r3, [r0, #4]
 80025a2:	aa01      	add	r2, sp, #4
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	4621      	mov	r1, r4
 80025a8:	4798      	blx	r3
	clock = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	__ASSERT_NO_MSG(clock);
	hcan.Instance = can;
	ret = clock_control_get_rate(clock, (clock_control_subsys_t *) &cfg->pclken,
				     &clock_rate);
	if (ret != 0) {
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d15c      	bne.n	8002668 <can_stm32_runtime_configure+0xe4>
		LOG_ERR("Failed call clock_control_get_rate: return [%d]", ret);
		return -EIO;
	}

	if (!bitrate) {
 80025ae:	b90f      	cbnz	r7, 80025b4 <can_stm32_runtime_configure+0x30>
		bitrate = cfg->bus_speed;
 80025b0:	f8da 7004 	ldr.w	r7, [sl, #4]
	}

	prescaler = clock_rate / (BIT_SEG_LENGTH(cfg) * bitrate);
 80025b4:	f89a b009 	ldrb.w	fp, [sl, #9]
 80025b8:	f89a 400a 	ldrb.w	r4, [sl, #10]
 80025bc:	9b01      	ldr	r3, [sp, #4]
 80025be:	eb0b 0904 	add.w	r9, fp, r4
 80025c2:	fb09 7707 	mla	r7, r9, r7, r7
 80025c6:	fbb3 f7f7 	udiv	r7, r3, r7
	if (prescaler == 0U || prescaler > 1024) {
 80025ca:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
 80025ce:	f5b9 6f80 	cmp.w	r9, #1024	; 0x400
 80025d2:	d24c      	bcs.n	800266e <can_stm32_runtime_configure+0xea>
	__ASSERT(cfg->prop_ts1 <= 0x0F, "PROP_BS1 maximum is 15");
	__ASSERT(cfg->ts2 <= 0x07,      "BS2 maximum is 7");

	ts1 = ((cfg->prop_ts1 & 0x0F) - 1) << CAN_BTR_TS1_Pos;
	ts2 = ((cfg->ts2      & 0x07) - 1) << CAN_BTR_TS2_Pos;
	sjw = ((cfg->sjw      & 0x07) - 1) << CAN_BTR_SJW_Pos;
 80025d4:	f89a a008 	ldrb.w	sl, [sl, #8]

	reg_mode =  (mode == CAN_NORMAL_MODE)   ? 0U   :
 80025d8:	f1b8 0f00 	cmp.w	r8, #0
 80025dc:	d009      	beq.n	80025f2 <can_stm32_runtime_configure+0x6e>
 80025de:	f1b8 0f02 	cmp.w	r8, #2
 80025e2:	d036      	beq.n	8002652 <can_stm32_runtime_configure+0xce>
 80025e4:	f1b8 0f01 	cmp.w	r8, #1
 80025e8:	bf0c      	ite	eq
 80025ea:	f04f 4800 	moveq.w	r8, #2147483648	; 0x80000000
 80025ee:	f04f 4840 	movne.w	r8, #3221225472	; 0xc0000000
		    (mode == CAN_LOOPBACK_MODE) ? CAN_BTR_LBKM :
		    (mode == CAN_SILENT_MODE)   ? CAN_BTR_SILM :
						CAN_BTR_LBKM | CAN_BTR_SILM;

	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80025f2:	4630      	mov	r0, r6
 80025f4:	f005 faa7 	bl	8007b46 <k_mutex_lock.constprop.6>
	ret = can_enter_init_mode(can);
 80025f8:	4628      	mov	r0, r5
 80025fa:	f7ff ffa5 	bl	8002548 <can_enter_init_mode>
	if (ret) {
 80025fe:	4607      	mov	r7, r0
 8002600:	bb00      	cbnz	r0, 8002644 <can_stm32_runtime_configure+0xc0>
	ts2 = ((cfg->ts2      & 0x07) - 1) << CAN_BTR_TS2_Pos;
 8002602:	f004 0307 	and.w	r3, r4, #7
	ts1 = ((cfg->prop_ts1 & 0x0F) - 1) << CAN_BTR_TS1_Pos;
 8002606:	f00b 0b0f 	and.w	fp, fp, #15
	ts2 = ((cfg->ts2      & 0x07) - 1) << CAN_BTR_TS2_Pos;
 800260a:	3b01      	subs	r3, #1
	ts1 = ((cfg->prop_ts1 & 0x0F) - 1) << CAN_BTR_TS1_Pos;
 800260c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	ts2 = ((cfg->ts2      & 0x07) - 1) << CAN_BTR_TS2_Pos;
 8002610:	051b      	lsls	r3, r3, #20
	sjw = ((cfg->sjw      & 0x07) - 1) << CAN_BTR_SJW_Pos;
 8002612:	f00a 0a07 	and.w	sl, sl, #7
 8002616:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
		LOG_ERR("Failed to enter init mode");
		goto done;
	}

	can->BTR = reg_mode | sjw | ts1 | ts2 | (prescaler - 1U);
 800261a:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
 800261e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002622:	ea43 0309 	orr.w	r3, r3, r9
 8002626:	ea43 0308 	orr.w	r3, r3, r8
 800262a:	61eb      	str	r3, [r5, #28]
	can->MCR &= ~CAN_MCR_INRQ;
 800262c:	682b      	ldr	r3, [r5, #0]
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 800262e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8002678 <can_stm32_runtime_configure+0xf4>
	can->MCR &= ~CAN_MCR_INRQ;
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	602b      	str	r3, [r5, #0]
 8002638:	f000 fe70 	bl	800331c <z_timer_cycle_get_32>
 800263c:	4604      	mov	r4, r0
	while ((can->MSR & CAN_MSR_INAK) != 0U) {
 800263e:	686b      	ldr	r3, [r5, #4]
 8002640:	07db      	lsls	r3, r3, #31
 8002642:	d409      	bmi.n	8002658 <can_stm32_runtime_configure+0xd4>
	z_impl_k_mutex_unlock(mutex);
 8002644:	4630      	mov	r0, r6
 8002646:	f002 fd27 	bl	8005098 <z_impl_k_mutex_unlock>
	LOG_DBG("Runtime configure of %s done", dev->config->name);
	ret = 0;
done:
	k_mutex_unlock(&data->inst_mutex);
	return ret;
}
 800264a:	4638      	mov	r0, r7
 800264c:	b003      	add	sp, #12
 800264e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	reg_mode =  (mode == CAN_NORMAL_MODE)   ? 0U   :
 8002652:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8002656:	e7cc      	b.n	80025f2 <can_stm32_runtime_configure+0x6e>
 8002658:	f000 fe60 	bl	800331c <z_timer_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 800265c:	1b00      	subs	r0, r0, r4
 800265e:	4540      	cmp	r0, r8
 8002660:	d9ed      	bls.n	800263e <can_stm32_runtime_configure+0xba>
 8002662:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002666:	e7ed      	b.n	8002644 <can_stm32_runtime_configure+0xc0>
		return -EIO;
 8002668:	f06f 0704 	mvn.w	r7, #4
 800266c:	e7ed      	b.n	800264a <can_stm32_runtime_configure+0xc6>
		return -EINVAL;
 800266e:	f06f 0715 	mvn.w	r7, #21
 8002672:	e7ea      	b.n	800264a <can_stm32_runtime_configure+0xc6>
 8002674:	0800a1be 	.word	0x0800a1be
 8002678:	0019a280 	.word	0x0019a280

0800267c <can_stm32_init>:

static int can_stm32_init(struct device *dev)
{
 800267c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 8002680:	6803      	ldr	r3, [r0, #0]
	struct can_stm32_data *data = DEV_DATA(dev);
 8002682:	6885      	ldr	r5, [r0, #8]
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 8002684:	f8d3 8008 	ldr.w	r8, [r3, #8]
	CAN_TypeDef *can = cfg->can;
 8002688:	46c1      	mov	r9, r8
{
 800268a:	4607      	mov	r7, r0
	CAN_TypeDef *can = cfg->can;
 800268c:	f859 4b0c 	ldr.w	r4, [r9], #12
	z_impl_k_mutex_init(mutex);
 8002690:	4628      	mov	r0, r5
 8002692:	f006 f8b7 	bl	8008804 <z_impl_k_mutex_init>
	z_impl_k_sem_init(sem, initial_count, limit);
 8002696:	2201      	movs	r2, #1
 8002698:	2100      	movs	r1, #0
 800269a:	f105 0014 	add.w	r0, r5, #20
 800269e:	f006 fa6a 	bl	8008b76 <z_impl_k_sem_init>
 80026a2:	2201      	movs	r2, #1
 80026a4:	2100      	movs	r1, #0
 80026a6:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80026aa:	f006 fa64 	bl	8008b76 <z_impl_k_sem_init>
 80026ae:	2201      	movs	r2, #1
 80026b0:	2100      	movs	r1, #0
 80026b2:	f105 0058 	add.w	r0, r5, #88	; 0x58
 80026b6:	f006 fa5e 	bl	8008b76 <z_impl_k_sem_init>
 80026ba:	2201      	movs	r2, #1
 80026bc:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 80026c0:	2100      	movs	r1, #0
 80026c2:	f006 fa58 	bl	8008b76 <z_impl_k_sem_init>
	k_mutex_init(&data->inst_mutex);
	k_sem_init(&data->tx_int_sem, 0, 1);
	k_sem_init(&data->mb0.tx_int_sem, 0, 1);
	k_sem_init(&data->mb1.tx_int_sem, 0, 1);
	k_sem_init(&data->mb2.tx_int_sem, 0, 1);
	data->mb0.tx_callback = NULL;
 80026c6:	2600      	movs	r6, #0
	data->mb1.tx_callback = NULL;
	data->mb2.tx_callback = NULL;
	data->state_change_isr = NULL;

	data->filter_usage = (1ULL << CAN_MAX_NUMBER_OF_FILTERS) - 1ULL;
 80026c8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026d0:	e9c5 2326 	strd	r2, r3, [r5, #152]	; 0x98
	(void)memset(data->rx_cb, 0, sizeof(data->rx_cb));
 80026d4:	4631      	mov	r1, r6
	data->mb0.tx_callback = NULL;
 80026d6:	62ee      	str	r6, [r5, #44]	; 0x2c
	data->mb1.tx_callback = NULL;
 80026d8:	652e      	str	r6, [r5, #80]	; 0x50
	data->mb2.tx_callback = NULL;
 80026da:	676e      	str	r6, [r5, #116]	; 0x74
	data->state_change_isr = NULL;
 80026dc:	f8c5 60c8 	str.w	r6, [r5, #200]	; 0xc8
	(void)memset(data->rx_cb, 0, sizeof(data->rx_cb));
 80026e0:	2214      	movs	r2, #20
 80026e2:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80026e6:	f005 fcdf 	bl	80080a8 <memset>
	(void)memset(data->cb_arg, 0, sizeof(data->cb_arg));
 80026ea:	2214      	movs	r2, #20
 80026ec:	4631      	mov	r1, r6
 80026ee:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
 80026f2:	f005 fcd9 	bl	80080a8 <memset>
 80026f6:	4823      	ldr	r0, [pc, #140]	; (8002784 <can_stm32_init+0x108>)
 80026f8:	f002 fa9e 	bl	8004c38 <z_impl_device_get_binding>
	return api->on(dev, sys);
 80026fc:	6843      	ldr	r3, [r0, #4]
 80026fe:	4649      	mov	r1, r9
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4798      	blx	r3

	clock = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	__ASSERT_NO_MSG(clock);

	ret = clock_control_on(clock, (clock_control_subsys_t *) &cfg->pclken);
	if (ret != 0) {
 8002704:	2800      	cmp	r0, #0
 8002706:	d139      	bne.n	800277c <can_stm32_init+0x100>
	can->MCR &= ~CAN_MCR_SLEEP;
 8002708:	6823      	ldr	r3, [r4, #0]
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 800270a:	4e1f      	ldr	r6, [pc, #124]	; (8002788 <can_stm32_init+0x10c>)
	can->MCR &= ~CAN_MCR_SLEEP;
 800270c:	f023 0302 	bic.w	r3, r3, #2
 8002710:	6023      	str	r3, [r4, #0]
 8002712:	f000 fe03 	bl	800331c <z_timer_cycle_get_32>
 8002716:	4605      	mov	r5, r0
	while ((can->MSR & CAN_MSR_SLAK) != 0) {
 8002718:	6863      	ldr	r3, [r4, #4]
 800271a:	079b      	lsls	r3, r3, #30
 800271c:	d426      	bmi.n	800276c <can_stm32_init+0xf0>
	if (ret) {
		LOG_ERR("Failed to exit sleep mode");
		return ret;
	}

	ret = can_enter_init_mode(can);
 800271e:	4620      	mov	r0, r4
 8002720:	f7ff ff12 	bl	8002548 <can_enter_init_mode>
	if (ret) {
 8002724:	4605      	mov	r5, r0
 8002726:	b9f0      	cbnz	r0, 8002766 <can_stm32_init+0xea>
		LOG_ERR("Failed to enter init mode");
		return ret;
	}

	/* Set TX priority to chronological order */
	can->MCR |= CAN_MCR_TXFP;
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	6023      	str	r3, [r4, #0]
	can->MCR &= ~CAN_MCR_TTCM & ~CAN_MCR_TTCM & ~CAN_MCR_ABOM &
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002736:	6023      	str	r3, [r4, #0]
		    ~CAN_MCR_AWUM & ~CAN_MCR_NART & ~CAN_MCR_RFLM;
#ifdef CONFIG_CAN_RX_TIMESTAMP
	can->MCR |= CAN_MCR_TTCM;
#endif
#ifdef CONFIG_CAN_AUTO_BUS_OFF_RECOVERY
	can->MCR |= CAN_MCR_ABOM;
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
#endif

	ret = can_stm32_runtime_configure(dev, CAN_NORMAL_MODE, 0);
 800273e:	462a      	mov	r2, r5
 8002740:	4629      	mov	r1, r5
	can->MCR |= CAN_MCR_ABOM;
 8002742:	6023      	str	r3, [r4, #0]
	ret = can_stm32_runtime_configure(dev, CAN_NORMAL_MODE, 0);
 8002744:	4638      	mov	r0, r7
 8002746:	f7ff ff1d 	bl	8002584 <can_stm32_runtime_configure>
	if (ret) {
 800274a:	4605      	mov	r5, r0
 800274c:	b958      	cbnz	r0, 8002766 <can_stm32_init+0xea>
		return ret;
	}

	/* Leave sleep mode after reset*/
	can->MCR &= ~CAN_MCR_SLEEP;
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	f023 0302 	bic.w	r3, r3, #2
 8002754:	6023      	str	r3, [r4, #0]

	cfg->config_irq(can);
 8002756:	4620      	mov	r0, r4
 8002758:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800275c:	4798      	blx	r3
	can->IER |= CAN_IER_TMEIE;
 800275e:	6963      	ldr	r3, [r4, #20]
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6163      	str	r3, [r4, #20]
	LOG_INF("Init of %s done", dev->config->name);
	return 0;
}
 8002766:	4628      	mov	r0, r5
 8002768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800276c:	f000 fdd6 	bl	800331c <z_timer_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 8002770:	1b40      	subs	r0, r0, r5
 8002772:	42b0      	cmp	r0, r6
 8002774:	d9d0      	bls.n	8002718 <can_stm32_init+0x9c>
 8002776:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800277a:	e7f4      	b.n	8002766 <can_stm32_init+0xea>
		return -EIO;
 800277c:	f06f 0504 	mvn.w	r5, #4
 8002780:	e7f1      	b.n	8002766 <can_stm32_init+0xea>
 8002782:	bf00      	nop
 8002784:	0800a1be 	.word	0x0800a1be
 8002788:	0019a280 	.word	0x0019a280

0800278c <can_calc_filter_index>:
	return type;
}

static int can_calc_filter_index(int filter_nr, u32_t mode_reg, u32_t scale_reg)
{
	int filter_bank = filter_nr / 4;
 800278c:	2800      	cmp	r0, #0
{
 800278e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int filter_bank = filter_nr / 4;
 8002792:	4604      	mov	r4, r0
	int cnt = 0;
	u32_t mode_masked, scale_masked;
	enum can_filter_type filter_type;
	/*count filters in the banks before */
	for (int i = 0; i < filter_bank; i++) {
 8002794:	f04f 0500 	mov.w	r5, #0
	int filter_bank = filter_nr / 4;
 8002798:	bfb8      	it	lt
 800279a:	1cc4      	addlt	r4, r0, #3
		filter_type = can_stm32_get_filter_type(i, mode_reg, scale_reg);
		cnt += filter_in_bank[filter_type];
 800279c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80027e4 <can_calc_filter_index+0x58>
{
 80027a0:	4603      	mov	r3, r0
 80027a2:	460f      	mov	r7, r1
 80027a4:	4690      	mov	r8, r2
	int filter_bank = filter_nr / 4;
 80027a6:	10a4      	asrs	r4, r4, #2
	int cnt = 0;
 80027a8:	462e      	mov	r6, r5
	for (int i = 0; i < filter_bank; i++) {
 80027aa:	42a5      	cmp	r5, r4
 80027ac:	db0c      	blt.n	80027c8 <can_calc_filter_index+0x3c>
	}

	/* plus the filters in the same bank */
	mode_masked  = mode_reg & (1U << filter_bank);
 80027ae:	2201      	movs	r2, #1
 80027b0:	fa02 f404 	lsl.w	r4, r2, r4
	scale_masked = scale_reg & (1U << filter_bank);
	cnt += (!scale_masked && mode_masked) ? filter_nr & 0x03 :
 80027b4:	ea14 0f08 	tst.w	r4, r8
 80027b8:	d110      	bne.n	80027dc <can_calc_filter_index+0x50>
 80027ba:	423c      	tst	r4, r7
 80027bc:	d00e      	beq.n	80027dc <can_calc_filter_index+0x50>
 80027be:	f003 0303 	and.w	r3, r3, #3
					       (filter_nr & 0x03) >> 1;
	return cnt;
}
 80027c2:	18f0      	adds	r0, r6, r3
 80027c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		filter_type = can_stm32_get_filter_type(i, mode_reg, scale_reg);
 80027c8:	4642      	mov	r2, r8
 80027ca:	4628      	mov	r0, r5
 80027cc:	4639      	mov	r1, r7
 80027ce:	f005 fb1a 	bl	8007e06 <can_stm32_get_filter_type>
		cnt += filter_in_bank[filter_type];
 80027d2:	f819 2000 	ldrb.w	r2, [r9, r0]
	for (int i = 0; i < filter_bank; i++) {
 80027d6:	3501      	adds	r5, #1
		cnt += filter_in_bank[filter_type];
 80027d8:	4416      	add	r6, r2
 80027da:	e7e6      	b.n	80027aa <can_calc_filter_index+0x1e>
	cnt += (!scale_masked && mode_masked) ? filter_nr & 0x03 :
 80027dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80027e0:	e7ef      	b.n	80027c2 <can_calc_filter_index+0x36>
 80027e2:	bf00      	nop
 80027e4:	0800a1c7 	.word	0x0800a1c7

080027e8 <can_stm32_detach>:
	k_mutex_unlock(&data->inst_mutex);
	return filter_nr;
}

void can_stm32_detach(struct device *dev, int filter_nr)
{
 80027e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 80027ec:	6803      	ldr	r3, [r0, #0]
	struct can_stm32_data *data = DEV_DATA(dev);
 80027ee:	6887      	ldr	r7, [r0, #8]
	CAN_TypeDef *can = cfg->can;
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	681c      	ldr	r4, [r3, #0]
{
 80027f4:	b085      	sub	sp, #20
	enum can_filter_type type;
	u32_t reset_mask;

	__ASSERT_NO_MSG(filter_nr >= 0 && filter_nr < CAN_MAX_NUMBER_OF_FILTERS);

	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80027f6:	4638      	mov	r0, r7
{
 80027f8:	4688      	mov	r8, r1
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80027fa:	f005 f9a4 	bl	8007b46 <k_mutex_lock.constprop.6>

	bank_nr = filter_nr / 4;
	bank_bit = (1U << bank_nr);
	mode_reg  = can->FM1R;
 80027fe:	f8d4 b204 	ldr.w	fp, [r4, #516]	; 0x204
	scale_reg = can->FS1R;
 8002802:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c

	filter_index = can_calc_filter_index(filter_nr, mode_reg, scale_reg);
 8002806:	9303      	str	r3, [sp, #12]
	bank_nr = filter_nr / 4;
 8002808:	f1b8 0f00 	cmp.w	r8, #0
	filter_index = can_calc_filter_index(filter_nr, mode_reg, scale_reg);
 800280c:	461a      	mov	r2, r3
 800280e:	4659      	mov	r1, fp
 8002810:	4640      	mov	r0, r8
	bank_nr = filter_nr / 4;
 8002812:	4645      	mov	r5, r8
 8002814:	bfb8      	it	lt
 8002816:	f108 0503 	addlt.w	r5, r8, #3
	filter_index = can_calc_filter_index(filter_nr, mode_reg, scale_reg);
 800281a:	f7ff ffb7 	bl	800278c <can_calc_filter_index>
	type = can_stm32_get_filter_type(bank_nr, mode_reg, scale_reg);
 800281e:	9b03      	ldr	r3, [sp, #12]
	bank_nr = filter_nr / 4;
 8002820:	10ad      	asrs	r5, r5, #2
	type = can_stm32_get_filter_type(bank_nr, mode_reg, scale_reg);
 8002822:	461a      	mov	r2, r3
 8002824:	4659      	mov	r1, fp
	filter_index = can_calc_filter_index(filter_nr, mode_reg, scale_reg);
 8002826:	4681      	mov	r9, r0
	type = can_stm32_get_filter_type(bank_nr, mode_reg, scale_reg);
 8002828:	4628      	mov	r0, r5
 800282a:	f005 faec 	bl	8007e06 <can_stm32_get_filter_type>

	LOG_DBG("Detatch filter number %d (index %d), type %d", filter_nr,
		    filter_index,
		    type);

	reset_mask = ((1 << (reg_demand[type])) - 1) << filter_nr;
 800282e:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <can_stm32_detach+0xf4>)
 8002830:	5c1b      	ldrb	r3, [r3, r0]
	bank_bit = (1U << bank_nr);
 8002832:	2601      	movs	r6, #1
 8002834:	fa06 fa05 	lsl.w	sl, r6, r5
	reset_mask = ((1 << (reg_demand[type])) - 1) << filter_nr;
 8002838:	409e      	lsls	r6, r3
 800283a:	3e01      	subs	r6, #1
	data->filter_usage |= reset_mask;
 800283c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	reset_mask = ((1 << (reg_demand[type])) - 1) << filter_nr;
 8002840:	fa06 f608 	lsl.w	r6, r6, r8
	data->filter_usage |= reset_mask;
 8002844:	431e      	orrs	r6, r3
	can->FMR |= CAN_FMR_FINIT;
 8002846:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	data->filter_usage |= reset_mask;
 800284a:	f8c7 6098 	str.w	r6, [r7, #152]	; 0x98
	can->FMR |= CAN_FMR_FINIT;
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	can->FA1R &= ~bank_bit;
 8002856:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800285a:	ea23 030a 	bic.w	r3, r3, sl
 800285e:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
	data->filter_usage |= reset_mask;
 8002862:	f04f 0b00 	mov.w	fp, #0

	can_stm32_set_filter_bank(filter_nr, &can->sFilterRegister[bank_nr],
 8002866:	f105 0148 	add.w	r1, r5, #72	; 0x48
 800286a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	type = can_stm32_get_filter_type(bank_nr, mode_reg, scale_reg);
 800286e:	4602      	mov	r2, r0
	can_stm32_set_filter_bank(filter_nr, &can->sFilterRegister[bank_nr],
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002876:	465b      	mov	r3, fp
 8002878:	4640      	mov	r0, r8
 800287a:	f005 f8ce 	bl	8007a1a <can_stm32_set_filter_bank>
				  type, 0, 0xFFFFFFFF);

	if (!CAN_BANK_IS_EMPTY(data->filter_usage, bank_nr)) {
 800287e:	e9d7 3026 	ldrd	r3, r0, [r7, #152]	; 0x98
 8002882:	00ad      	lsls	r5, r5, #2
 8002884:	f1c5 0120 	rsb	r1, r5, #32
 8002888:	f1a5 0220 	sub.w	r2, r5, #32
 800288c:	fa00 f101 	lsl.w	r1, r0, r1
 8002890:	fa23 f505 	lsr.w	r5, r3, r5
 8002894:	fa20 f202 	lsr.w	r2, r0, r2
 8002898:	430d      	orrs	r5, r1
 800289a:	465b      	mov	r3, fp
 800289c:	4315      	orrs	r5, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f005 020f 	and.w	r2, r5, #15
 80028a4:	bf0f      	iteee	eq
 80028a6:	2a0f      	cmpeq	r2, #15
		can->FA1R |= bank_bit;
 80028a8:	f8d4 321c 	ldrne.w	r3, [r4, #540]	; 0x21c
 80028ac:	ea4a 0303 	orrne.w	r3, sl, r3
 80028b0:	f8c4 321c 	strne.w	r3, [r4, #540]	; 0x21c
	} else {
		LOG_DBG("Bank number %d is empty -> deakivate", bank_nr);
	}

	can->FMR &= ~(CAN_FMR_FINIT);
 80028b4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80028b8:	eb07 0989 	add.w	r9, r7, r9, lsl #2
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	data->rx_cb[filter_index] = NULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c9 30a0 	str.w	r3, [r9, #160]	; 0xa0
	data->cb_arg[filter_index] = NULL;
 80028ca:	f8c9 30b4 	str.w	r3, [r9, #180]	; 0xb4
	z_impl_k_mutex_unlock(mutex);
 80028ce:	4638      	mov	r0, r7

	k_mutex_unlock(&data->inst_mutex);
}
 80028d0:	b005      	add	sp, #20
 80028d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028d6:	f002 bbdf 	b.w	8005098 <z_impl_k_mutex_unlock>
 80028da:	bf00      	nop
 80028dc:	0800a1cb 	.word	0x0800a1cb

080028e0 <can_stm32_attach_isr>:
{
 80028e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e4:	461f      	mov	r7, r3
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80028e6:	6883      	ldr	r3, [r0, #8]
{
 80028e8:	b091      	sub	sp, #68	; 0x44
 80028ea:	4604      	mov	r4, r0
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80028ec:	4618      	mov	r0, r3
{
 80028ee:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80028f2:	9307      	str	r3, [sp, #28]
 80028f4:	f005 f927 	bl	8007b46 <k_mutex_lock.constprop.6>
	struct can_stm32_data *data = DEV_DATA(dev);
 80028f8:	68a3      	ldr	r3, [r4, #8]
 80028fa:	9303      	str	r3, [sp, #12]
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	7878      	ldrb	r0, [r7, #1]
	CAN_TypeDef *can = cfg->can;
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	78bc      	ldrb	r4, [r7, #2]
 8002904:	681d      	ldr	r5, [r3, #0]
	if (filter->id_type == CAN_STANDARD_IDENTIFIER) {
 8002906:	783b      	ldrb	r3, [r7, #0]
 8002908:	79ba      	ldrb	r2, [r7, #6]
 800290a:	79f9      	ldrb	r1, [r7, #7]
 800290c:	f013 0601 	ands.w	r6, r3, #1
 8002910:	d11c      	bne.n	800294c <can_stm32_attach_isr+0x6c>
	return  (filter->std_id << CAN_FIRX_STD_ID_POS) |
 8002912:	f004 0407 	and.w	r4, r4, #7
		(filter->rtr    << CAN_FIRX_STD_RTR_POS);
 8002916:	f3c3 0340 	ubfx	r3, r3, #1, #1
	return  (filter->std_id << CAN_FIRX_STD_ID_POS) |
 800291a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
		(filter->rtr    << CAN_FIRX_STD_RTR_POS);
 800291e:	011b      	lsls	r3, r3, #4
	return  (filter->std_id << CAN_FIRX_STD_ID_POS) |
 8002920:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
		if (filter->std_id_mask != CAN_STD_ID_MASK) {
 8002924:	f001 0107 	and.w	r1, r1, #7
	return  (filter->std_id << CAN_FIRX_STD_ID_POS) |
 8002928:	930c      	str	r3, [sp, #48]	; 0x30
		if (filter->std_id_mask != CAN_STD_ID_MASK) {
 800292a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800292e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002932:	429a      	cmp	r2, r3
 8002934:	f000 808f 	beq.w	8002a56 <can_stm32_attach_isr+0x176>
		(filter->rtr_mask    << CAN_FIRX_STD_RTR_POS) |
 8002938:	7979      	ldrb	r1, [r7, #5]
	return  (filter->std_id_mask << CAN_FIRX_STD_ID_POS) |
 800293a:	0152      	lsls	r2, r2, #5
		(filter->rtr_mask    << CAN_FIRX_STD_RTR_POS) |
 800293c:	f001 0101 	and.w	r1, r1, #1
	return  (filter->std_id_mask << CAN_FIRX_STD_ID_POS) |
 8002940:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		(filter->rtr_mask    << CAN_FIRX_STD_RTR_POS) |
 8002944:	f042 0308 	orr.w	r3, r2, #8
	u32_t mask = 0U;
 8002948:	9305      	str	r3, [sp, #20]
 800294a:	e028      	b.n	800299e <can_stm32_attach_isr+0xbe>
	return  (filter->ext_id << CAN_FIRX_EXT_EXT_ID_POS) |
 800294c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8002950:	78fc      	ldrb	r4, [r7, #3]
 8002952:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8002956:	793c      	ldrb	r4, [r7, #4]
 8002958:	f004 041f 	and.w	r4, r4, #31
 800295c:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
		(filter->rtr    << CAN_FIRX_EXT_RTR_POS) |
 8002960:	f003 0302 	and.w	r3, r3, #2
	return  (filter->ext_id << CAN_FIRX_EXT_EXT_ID_POS) |
 8002964:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
		(filter->rtr    << CAN_FIRX_EXT_RTR_POS) |
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	930c      	str	r3, [sp, #48]	; 0x30
		if (filter->ext_id_mask != CAN_EXT_ID_MASK) {
 800296e:	7a3b      	ldrb	r3, [r7, #8]
 8002970:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002974:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002978:	7a7b      	ldrb	r3, [r7, #9]
 800297a:	f003 031f 	and.w	r3, r3, #31
 800297e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8002982:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002986:	429a      	cmp	r2, r3
 8002988:	d068      	beq.n	8002a5c <can_stm32_attach_isr+0x17c>
		(filter->rtr_mask    << CAN_FIRX_EXT_RTR_POS) |
 800298a:	797b      	ldrb	r3, [r7, #5]
	return  (filter->ext_id_mask << CAN_FIRX_EXT_EXT_ID_POS) |
 800298c:	00d2      	lsls	r2, r2, #3
		(filter->rtr_mask    << CAN_FIRX_EXT_RTR_POS) |
 800298e:	f003 0301 	and.w	r3, r3, #1
	return  (filter->ext_id_mask << CAN_FIRX_EXT_EXT_ID_POS) |
 8002992:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
		(filter->rtr_mask    << CAN_FIRX_EXT_RTR_POS) |
 8002996:	f042 0304 	orr.w	r3, r2, #4
 800299a:	9305      	str	r3, [sp, #20]
			filter_type = CAN_FILTER_EXTENDED_MASKED;
 800299c:	2602      	movs	r6, #2
	register_demand = reg_demand[filter_type];
 800299e:	4b86      	ldr	r3, [pc, #536]	; (8002bb8 <can_stm32_attach_isr+0x2d8>)
 80029a0:	f813 9006 	ldrb.w	r9, [r3, r6]
		u64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 80029a4:	9b03      	ldr	r3, [sp, #12]
 80029a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029aa:	9306      	str	r3, [sp, #24]
 80029ac:	9b03      	ldr	r3, [sp, #12]
		u64_t usage_demand_mask = (1ULL << register_demand) - 1;
 80029ae:	2201      	movs	r2, #1
 80029b0:	f1a9 0020 	sub.w	r0, r9, #32
 80029b4:	f1c9 0120 	rsb	r1, r9, #32
		u64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 80029b8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
		u64_t usage_demand_mask = (1ULL << register_demand) - 1;
 80029bc:	fa22 f101 	lsr.w	r1, r2, r1
 80029c0:	fa02 f300 	lsl.w	r3, r2, r0
 80029c4:	fa02 f709 	lsl.w	r7, r2, r9
 80029c8:	430b      	orrs	r3, r1
 80029ca:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
 80029ce:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80029d2:	2400      	movs	r4, #0
 80029d4:	930d      	str	r3, [sp, #52]	; 0x34
		u64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 80029d6:	9b06      	ldr	r3, [sp, #24]
 80029d8:	f1c4 0120 	rsb	r1, r4, #32
 80029dc:	fa23 fa04 	lsr.w	sl, r3, r4
 80029e0:	fa08 f101 	lsl.w	r1, r8, r1
 80029e4:	f1a4 0220 	sub.w	r2, r4, #32
		bank_nr = filter_nr / 4;
 80029e8:	10a3      	asrs	r3, r4, #2
		u64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 80029ea:	ea4a 0a01 	orr.w	sl, sl, r1
 80029ee:	fa28 f202 	lsr.w	r2, r8, r2
		bank_mode = can_stm32_get_filter_type(bank_nr, can->FM1R,
 80029f2:	f8d5 1204 	ldr.w	r1, [r5, #516]	; 0x204
		bank_nr = filter_nr / 4;
 80029f6:	9304      	str	r3, [sp, #16]
		bank_mode = can_stm32_get_filter_type(bank_nr, can->FM1R,
 80029f8:	4618      	mov	r0, r3
		u64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 80029fa:	ea4a 0a02 	orr.w	sl, sl, r2
		bank_mode = can_stm32_get_filter_type(bank_nr, can->FM1R,
 80029fe:	f8d5 220c 	ldr.w	r2, [r5, #524]	; 0x20c
 8002a02:	f005 fa00 	bl	8007e06 <can_stm32_get_filter_type>
		bank_is_empty = CAN_BANK_IS_EMPTY(device_data->filter_usage,
 8002a06:	10a3      	asrs	r3, r4, #2
 8002a08:	0099      	lsls	r1, r3, #2
 8002a0a:	9b06      	ldr	r3, [sp, #24]
 8002a0c:	f1c1 0e20 	rsb	lr, r1, #32
 8002a10:	fa23 f201 	lsr.w	r2, r3, r1
 8002a14:	f1a1 0c20 	sub.w	ip, r1, #32
 8002a18:	fa08 fe0e 	lsl.w	lr, r8, lr
 8002a1c:	ea42 020e 	orr.w	r2, r2, lr
 8002a20:	fa28 fc0c 	lsr.w	ip, r8, ip
 8002a24:	ea42 020c 	orr.w	r2, r2, ip
 8002a28:	f002 030f 	and.w	r3, r2, #15
 8002a2c:	9308      	str	r3, [sp, #32]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	9309      	str	r3, [sp, #36]	; 0x24
		if (!bank_is_empty && bank_mode != filter_type) {
 8002a32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bf08      	it	eq
 8002a3a:	2a0f      	cmpeq	r2, #15
		u64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 8002a3c:	fa28 fb04 	lsr.w	fp, r8, r4
		if (!bank_is_empty && bank_mode != filter_type) {
 8002a40:	d00e      	beq.n	8002a60 <can_stm32_attach_isr+0x180>
 8002a42:	4286      	cmp	r6, r0
 8002a44:	d00c      	beq.n	8002a60 <can_stm32_attach_isr+0x180>
			filter_nr = (bank_nr + 1) * 4;
 8002a46:	1d0c      	adds	r4, r1, #4
		if (!usage_shifted) {
 8002a48:	ea5a 030b 	orrs.w	r3, sl, fp
 8002a4c:	f000 80b1 	beq.w	8002bb2 <can_stm32_attach_isr+0x2d2>
	} while (filter_nr < CAN_MAX_NUMBER_OF_FILTERS);
 8002a50:	2c37      	cmp	r4, #55	; 0x37
 8002a52:	ddc0      	ble.n	80029d6 <can_stm32_attach_isr+0xf6>
 8002a54:	e024      	b.n	8002aa0 <can_stm32_attach_isr+0x1c0>
		filter_type = CAN_FILTER_STANDARD;
 8002a56:	2601      	movs	r6, #1
	u32_t mask = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e775      	b.n	8002948 <can_stm32_attach_isr+0x68>
		filter_type = CAN_FILTER_EXTENDED;
 8002a5c:	2603      	movs	r6, #3
 8002a5e:	e7fb      	b.n	8002a58 <can_stm32_attach_isr+0x178>
		} else if (usage_shifted & usage_demand_mask) {
 8002a60:	ea0a 0307 	and.w	r3, sl, r7
 8002a64:	930a      	str	r3, [sp, #40]	; 0x28
 8002a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a68:	ea0b 0303 	and.w	r3, fp, r3
 8002a6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a6e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002a72:	4313      	orrs	r3, r2
 8002a74:	d076      	beq.n	8002b64 <can_stm32_attach_isr+0x284>
				~(usage_demand_mask << filter_nr);
 8002a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a78:	f1a4 0120 	sub.w	r1, r4, #32
 8002a7c:	fa07 f101 	lsl.w	r1, r7, r1
 8002a80:	f1c4 0220 	rsb	r2, r4, #32
 8002a84:	40a3      	lsls	r3, r4
 8002a86:	fa27 f202 	lsr.w	r2, r7, r2
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	4313      	orrs	r3, r2
			device_data->filter_usage &=
 8002a8e:	9a06      	ldr	r2, [sp, #24]
				~(usage_demand_mask << filter_nr);
 8002a90:	40a7      	lsls	r7, r4
			device_data->filter_usage &=
 8002a92:	ea22 0707 	bic.w	r7, r2, r7
 8002a96:	9a03      	ldr	r2, [sp, #12]
 8002a98:	ea28 0303 	bic.w	r3, r8, r3
 8002a9c:	e9c2 7326 	strd	r7, r3, [r2, #152]	; 0x98
		bank_bit = (1U << bank_nr);
 8002aa0:	9a04      	ldr	r2, [sp, #16]
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	4093      	lsls	r3, r2
 8002aa6:	9306      	str	r3, [sp, #24]
	can->FMR |= CAN_FMR_FINIT;
 8002aa8:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	can->FA1R &= ~bank_bit;
 8002aac:	9a06      	ldr	r2, [sp, #24]
	can->FMR |= CAN_FMR_FINIT;
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
	can->FA1R &= ~bank_bit;
 8002ab6:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002aba:	43d2      	mvns	r2, r2
 8002abc:	4013      	ands	r3, r2
 8002abe:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
	if (filter_type != bank_mode) {
 8002ac2:	4286      	cmp	r6, r0
		u32_t mode_reg  = can->FM1R;
 8002ac4:	f8d5 1204 	ldr.w	r1, [r5, #516]	; 0x204
	if (filter_type != bank_mode) {
 8002ac8:	d06a      	beq.n	8002ba0 <can_stm32_attach_isr+0x2c0>
	u32_t mode_reg_bit  = (filter_type & 0x01) << bank_nr;
 8002aca:	9b04      	ldr	r3, [sp, #16]
		u32_t scale_reg = can->FS1R;
 8002acc:	f8d5 c20c 	ldr.w	ip, [r5, #524]	; 0x20c
	u32_t mode_reg_bit  = (filter_type & 0x01) << bank_nr;
 8002ad0:	f006 0701 	and.w	r7, r6, #1
	u32_t scale_reg_bit = (filter_type >>   1) << bank_nr;
 8002ad4:	ea4f 0856 	mov.w	r8, r6, lsr #1
	u32_t mode_reg_bit  = (filter_type & 0x01) << bank_nr;
 8002ad8:	409f      	lsls	r7, r3
	u32_t scale_reg_bit = (filter_type >>   1) << bank_nr;
 8002ada:	fa08 f803 	lsl.w	r8, r8, r3
	*scale_reg &= ~(1 << bank_nr);
 8002ade:	ea0c 0302 	and.w	r3, ip, r2
	*mode_reg &= ~(1 << bank_nr);
 8002ae2:	4011      	ands	r1, r2
	*scale_reg |= scale_reg_bit;
 8002ae4:	ea48 0803 	orr.w	r8, r8, r3
		shift_width = filter_in_bank[filter_type] - filter_in_bank[bank_mode];
 8002ae8:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <can_stm32_attach_isr+0x2dc>)
	*mode_reg |= mode_reg_bit;
 8002aea:	430f      	orrs	r7, r1
		shift_width = filter_in_bank[filter_type] - filter_in_bank[bank_mode];
 8002aec:	f813 9000 	ldrb.w	r9, [r3, r0]
 8002af0:	f813 b006 	ldrb.w	fp, [r3, r6]
		filter_index_new = can_calc_filter_index(filter_nr, mode_reg,
 8002af4:	4642      	mov	r2, r8
 8002af6:	4639      	mov	r1, r7
 8002af8:	4620      	mov	r0, r4
 8002afa:	f7ff fe47 	bl	800278c <can_calc_filter_index>
		shift_width = filter_in_bank[filter_type] - filter_in_bank[bank_mode];
 8002afe:	ebab 0b09 	sub.w	fp, fp, r9
		filter_index_new = can_calc_filter_index(filter_nr, mode_reg,
 8002b02:	4682      	mov	sl, r0
		if (shift_width && start_index <= CAN_MAX_NUMBER_OF_FILTERS) {
 8002b04:	f1bb 0f00 	cmp.w	fp, #0
 8002b08:	d12e      	bne.n	8002b68 <can_stm32_attach_isr+0x288>
		can->FM1R = mode_reg;
 8002b0a:	f8c5 7204 	str.w	r7, [r5, #516]	; 0x204
		can->FS1R = scale_reg;
 8002b0e:	f8c5 820c 	str.w	r8, [r5, #524]	; 0x20c
	can_stm32_set_filter_bank(filter_nr, &can->sFilterRegister[bank_nr],
 8002b12:	9904      	ldr	r1, [sp, #16]
 8002b14:	9b05      	ldr	r3, [sp, #20]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	3148      	adds	r1, #72	; 0x48
 8002b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b1c:	4632      	mov	r2, r6
 8002b1e:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002b22:	4620      	mov	r0, r4
 8002b24:	f004 ff79 	bl	8007a1a <can_stm32_set_filter_bank>
	can->FA1R |= bank_bit;
 8002b28:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002b2c:	9a06      	ldr	r2, [sp, #24]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
	can->FMR &= ~(CAN_FMR_FINIT);
 8002b34:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
	if (filter_nr != CAN_NO_FREE_FILTER) {
 8002b40:	1c63      	adds	r3, r4, #1
 8002b42:	d008      	beq.n	8002b56 <can_stm32_attach_isr+0x276>
		data->rx_cb[filter_index] = cb;
 8002b44:	9b03      	ldr	r3, [sp, #12]
 8002b46:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 8002b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b4c:	f8ca 30a0 	str.w	r3, [sl, #160]	; 0xa0
		data->cb_arg[filter_index] = cb_arg;
 8002b50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b52:	f8ca 30b4 	str.w	r3, [sl, #180]	; 0xb4
 8002b56:	9807      	ldr	r0, [sp, #28]
 8002b58:	f002 fa9e 	bl	8005098 <z_impl_k_mutex_unlock>
}
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	b011      	add	sp, #68	; 0x44
 8002b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			filter_nr += register_demand;
 8002b64:	444c      	add	r4, r9
 8002b66:	e76f      	b.n	8002a48 <can_stm32_attach_isr+0x168>
		start_index = filter_index_new + filter_in_bank[bank_mode];
 8002b68:	4481      	add	r9, r0
		if (shift_width && start_index <= CAN_MAX_NUMBER_OF_FILTERS) {
 8002b6a:	f1b9 0f38 	cmp.w	r9, #56	; 0x38
 8002b6e:	dccc      	bgt.n	8002b0a <can_stm32_attach_isr+0x22a>
			res = can_stm32_shift_arr((void **)device_data->rx_cb,
 8002b70:	9b03      	ldr	r3, [sp, #12]
 8002b72:	465a      	mov	r2, fp
 8002b74:	4649      	mov	r1, r9
 8002b76:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8002b7a:	f004 ffa8 	bl	8007ace <can_stm32_shift_arr>
			res |= can_stm32_shift_arr(device_data->cb_arg,
 8002b7e:	9b03      	ldr	r3, [sp, #12]
			res = can_stm32_shift_arr((void **)device_data->rx_cb,
 8002b80:	9008      	str	r0, [sp, #32]
			res |= can_stm32_shift_arr(device_data->cb_arg,
 8002b82:	465a      	mov	r2, fp
 8002b84:	4649      	mov	r1, r9
 8002b86:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8002b8a:	f004 ffa0 	bl	8007ace <can_stm32_shift_arr>
			if (filter_index_new >= CONFIG_CAN_MAX_FILTER || res) {
 8002b8e:	f1ba 0f04 	cmp.w	sl, #4
 8002b92:	dc02      	bgt.n	8002b9a <can_stm32_attach_isr+0x2ba>
 8002b94:	9b08      	ldr	r3, [sp, #32]
 8002b96:	4303      	orrs	r3, r0
 8002b98:	d0b7      	beq.n	8002b0a <can_stm32_attach_isr+0x22a>
			filter_nr = CAN_NO_FREE_FILTER;
 8002b9a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002b9e:	e7c3      	b.n	8002b28 <can_stm32_attach_isr+0x248>
		filter_index_new = can_calc_filter_index(filter_nr, can->FM1R,
 8002ba0:	f8d5 220c 	ldr.w	r2, [r5, #524]	; 0x20c
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f7ff fdf1 	bl	800278c <can_calc_filter_index>
		if (filter_index_new >= CAN_MAX_NUMBER_OF_FILTERS) {
 8002baa:	2837      	cmp	r0, #55	; 0x37
		filter_index_new = can_calc_filter_index(filter_nr, can->FM1R,
 8002bac:	4682      	mov	sl, r0
		if (filter_index_new >= CAN_MAX_NUMBER_OF_FILTERS) {
 8002bae:	ddb0      	ble.n	8002b12 <can_stm32_attach_isr+0x232>
 8002bb0:	e7f3      	b.n	8002b9a <can_stm32_attach_isr+0x2ba>
			return CAN_NO_FREE_FILTER;
 8002bb2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002bb6:	e7ce      	b.n	8002b56 <can_stm32_attach_isr+0x276>
 8002bb8:	0800a1cb 	.word	0x0800a1cb
 8002bbc:	0800a1c7 	.word	0x0800a1c7

08002bc0 <print_frame>:

	return i;
}

static void print_frame(struct zcan_frame *frame, void *arg)
{
 8002bc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002bc4:	4604      	mov	r4, r0
	const struct shell *shell = (const struct shell *)arg;

	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
		      frame->id_type == CAN_STANDARD_IDENTIFIER ?
 8002bc6:	7800      	ldrb	r0, [r0, #0]
 8002bc8:	7863      	ldrb	r3, [r4, #1]
 8002bca:	78a2      	ldrb	r2, [r4, #2]
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 8002bcc:	f010 0f01 	tst.w	r0, #1
{
 8002bd0:	460e      	mov	r6, r1
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 8002bd2:	d12c      	bne.n	8002c2e <print_frame+0x6e>
				frame->std_id : frame->ext_id,
 8002bd4:	f002 0207 	and.w	r2, r2, #7
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 8002bd8:	491e      	ldr	r1, [pc, #120]	; (8002c54 <print_frame+0x94>)
 8002bda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002bde:	f010 0f02 	tst.w	r0, #2
 8002be2:	481d      	ldr	r0, [pc, #116]	; (8002c58 <print_frame+0x98>)
 8002be4:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <print_frame+0x9c>)
 8002be6:	9100      	str	r1, [sp, #0]
 8002be8:	bf08      	it	eq
 8002bea:	4602      	moveq	r2, r0
 8002bec:	7960      	ldrb	r0, [r4, #5]
	for (int i = 0; i < CAN_MAX_DLEN; i++) {
		if (i < frame->dlc) {
			shell_fprintf(shell, SHELL_NORMAL, " 0x%02x",
				      frame->data[i]);
		} else {
			shell_fprintf(shell, SHELL_NORMAL, "     ");
 8002bee:	4f1c      	ldr	r7, [pc, #112]	; (8002c60 <print_frame+0xa0>)
			shell_fprintf(shell, SHELL_NORMAL, " 0x%02x",
 8002bf0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8002c70 <print_frame+0xb0>
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 8002bf4:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <print_frame+0xa4>)
 8002bfc:	4630      	mov	r0, r6
 8002bfe:	f003 ffd0 	bl	8006ba2 <shell_fprintf>
	for (int i = 0; i < CAN_MAX_DLEN; i++) {
 8002c02:	2500      	movs	r5, #0
		if (i < frame->dlc) {
 8002c04:	7963      	ldrb	r3, [r4, #5]
 8002c06:	42ab      	cmp	r3, r5
 8002c08:	dd1d      	ble.n	8002c46 <print_frame+0x86>
				      frame->data[i]);
 8002c0a:	1da3      	adds	r3, r4, #6
			shell_fprintf(shell, SHELL_NORMAL, " 0x%02x",
 8002c0c:	4642      	mov	r2, r8
 8002c0e:	5d5b      	ldrb	r3, [r3, r5]
 8002c10:	2100      	movs	r1, #0
 8002c12:	4630      	mov	r0, r6
 8002c14:	f003 ffc5 	bl	8006ba2 <shell_fprintf>
	for (int i = 0; i < CAN_MAX_DLEN; i++) {
 8002c18:	3501      	adds	r5, #1
 8002c1a:	2d08      	cmp	r5, #8
 8002c1c:	d1f2      	bne.n	8002c04 <print_frame+0x44>
		}
	}

	shell_fprintf(shell, SHELL_NORMAL, "|\n");
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <print_frame+0xa8>)
 8002c20:	2100      	movs	r1, #0
 8002c22:	4630      	mov	r0, r6
}
 8002c24:	b004      	add	sp, #16
 8002c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	shell_fprintf(shell, SHELL_NORMAL, "|\n");
 8002c2a:	f003 bfba 	b.w	8006ba2 <shell_fprintf>
				frame->std_id : frame->ext_id,
 8002c2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c32:	78e2      	ldrb	r2, [r4, #3]
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 8002c34:	490d      	ldr	r1, [pc, #52]	; (8002c6c <print_frame+0xac>)
				frame->std_id : frame->ext_id,
 8002c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c3a:	7922      	ldrb	r2, [r4, #4]
 8002c3c:	f002 021f 	and.w	r2, r2, #31
 8002c40:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c44:	e7cb      	b.n	8002bde <print_frame+0x1e>
			shell_fprintf(shell, SHELL_NORMAL, "     ");
 8002c46:	463a      	mov	r2, r7
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	f003 ffa9 	bl	8006ba2 <shell_fprintf>
 8002c50:	e7e2      	b.n	8002c18 <print_frame+0x58>
 8002c52:	bf00      	nop
 8002c54:	0800a3cc 	.word	0x0800a3cc
 8002c58:	0800a3f0 	.word	0x0800a3f0
 8002c5c:	0800a3d0 	.word	0x0800a3d0
 8002c60:	0800a3ee 	.word	0x0800a3ee
 8002c64:	0800a3d4 	.word	0x0800a3d4
 8002c68:	0800a3f4 	.word	0x0800a3f4
 8002c6c:	0800a3c8 	.word	0x0800a3c8
 8002c70:	0800a3e6 	.word	0x0800a3e6

08002c74 <read_options>:
{
 8002c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char *arg = argv[pos];
 8002c78:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
{
 8002c7c:	9f08      	ldr	r7, [sp, #32]
 8002c7e:	4699      	mov	r9, r3
	if (arg[0] != '-') {
 8002c80:	782b      	ldrb	r3, [r5, #0]
 8002c82:	2b2d      	cmp	r3, #45	; 0x2d
{
 8002c84:	4606      	mov	r6, r0
 8002c86:	460c      	mov	r4, r1
	if (arg[0] != '-') {
 8002c88:	d120      	bne.n	8002ccc <read_options+0x58>
				shell_error(shell, "unknown option %c", *arg);
 8002c8a:	f8df a048 	ldr.w	sl, [pc, #72]	; 8002cd4 <read_options+0x60>
				*ext = true;
 8002c8e:	f04f 0801 	mov.w	r8, #1
	for (arg = &arg[1]; *arg; arg++) {
 8002c92:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002c96:	b90b      	cbnz	r3, 8002c9c <read_options+0x28>
	return ++pos;
 8002c98:	3401      	adds	r4, #1
 8002c9a:	e017      	b.n	8002ccc <read_options+0x58>
		switch (*arg) {
 8002c9c:	2b65      	cmp	r3, #101	; 0x65
 8002c9e:	d004      	beq.n	8002caa <read_options+0x36>
 8002ca0:	2b72      	cmp	r3, #114	; 0x72
 8002ca2:	d10c      	bne.n	8002cbe <read_options+0x4a>
				*rtr = true;
 8002ca4:	f889 8000 	strb.w	r8, [r9]
 8002ca8:	e7f3      	b.n	8002c92 <read_options+0x1e>
			if (ext == NULL) {
 8002caa:	b92f      	cbnz	r7, 8002cb8 <read_options+0x44>
				shell_error(shell, "unknown option %c", *arg);
 8002cac:	4652      	mov	r2, sl
 8002cae:	2102      	movs	r1, #2
 8002cb0:	4630      	mov	r0, r6
 8002cb2:	f003 ff76 	bl	8006ba2 <shell_fprintf>
 8002cb6:	e7ec      	b.n	8002c92 <read_options+0x1e>
				*ext = true;
 8002cb8:	f887 8000 	strb.w	r8, [r7]
 8002cbc:	e7e9      	b.n	8002c92 <read_options+0x1e>
			shell_error(shell, "unknown option %c", *arg);
 8002cbe:	4a05      	ldr	r2, [pc, #20]	; (8002cd4 <read_options+0x60>)
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	f003 ff6d 	bl	8006ba2 <shell_fprintf>
			return -EINVAL;
 8002cc8:	f06f 0415 	mvn.w	r4, #21
}
 8002ccc:	4620      	mov	r0, r4
 8002cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cd2:	bf00      	nop
 8002cd4:	0800a437 	.word	0x0800a437

08002cd8 <read_id>:
{
 8002cd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002cda:	460c      	mov	r4, r1
 8002cdc:	4605      	mov	r5, r0
 8002cde:	4610      	mov	r0, r2
	val = strtol(argv[pos], &end_ptr, 0);
 8002ce0:	a903      	add	r1, sp, #12
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 8002ce8:	461e      	mov	r6, r3
	val = strtol(argv[pos], &end_ptr, 0);
 8002cea:	f005 f8ac 	bl	8007e46 <strtol>
	if (*end_ptr != '\0') {
 8002cee:	9b03      	ldr	r3, [sp, #12]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b143      	cbz	r3, 8002d06 <read_id+0x2e>
		shell_error(shell, "id is not a number");
 8002cf4:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <read_id+0x70>)
 8002cf6:	2102      	movs	r1, #2
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	f003 ff52 	bl	8006ba2 <shell_fprintf>
		return -EINVAL;
 8002cfe:	f06f 0015 	mvn.w	r0, #21
}
 8002d02:	b004      	add	sp, #16
 8002d04:	bd70      	pop	{r4, r5, r6, pc}
	if (val < 0 || val > CAN_EXT_ID_MASK ||
 8002d06:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8002d0a:	d207      	bcs.n	8002d1c <read_id+0x44>
 8002d0c:	b9be      	cbnz	r6, 8002d3e <read_id+0x66>
	   (!ext && val > CAN_MAX_STD_ID)) {
 8002d0e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8002d12:	db14      	blt.n	8002d3e <read_id+0x66>
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <read_id+0x74>)
		shell_error(shell, "Id invalid. %sid must not be negative or "
 8002d16:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002d1a:	e009      	b.n	8002d30 <read_id+0x58>
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <read_id+0x78>)
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <read_id+0x74>)
 8002d20:	2e00      	cmp	r6, #0
 8002d22:	bf18      	it	ne
 8002d24:	4613      	movne	r3, r2
 8002d26:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002d2a:	bf18      	it	ne
 8002d2c:	f06f 4260 	mvnne.w	r2, #3758096384	; 0xe0000000
 8002d30:	9200      	str	r2, [sp, #0]
 8002d32:	2102      	movs	r1, #2
 8002d34:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <read_id+0x7c>)
 8002d36:	4628      	mov	r0, r5
 8002d38:	f003 ff33 	bl	8006ba2 <shell_fprintf>
 8002d3c:	e7df      	b.n	8002cfe <read_id+0x26>
	*id = (u32_t)val;
 8002d3e:	9b08      	ldr	r3, [sp, #32]
 8002d40:	6018      	str	r0, [r3, #0]
	return ++pos;
 8002d42:	1c60      	adds	r0, r4, #1
 8002d44:	e7dd      	b.n	8002d02 <read_id+0x2a>
 8002d46:	bf00      	nop
 8002d48:	0800a2ea 	.word	0x0800a2ea
 8002d4c:	08009ab9 	.word	0x08009ab9
 8002d50:	0800a3f7 	.word	0x0800a3f7
 8002d54:	0800a3fc 	.word	0x0800a3fc

08002d58 <cmd_attach>:

	return 0;
}

static int cmd_attach(const struct shell *shell, size_t argc, char **argv)
{
 8002d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d5c:	b08a      	sub	sp, #40	; 0x28
	struct device *can_dev;
	int pos = 1;
	bool rtr = false, ext = false, rtr_mask = false;
 8002d5e:	f04f 0900 	mov.w	r9, #0
{
 8002d62:	4604      	mov	r4, r0
 8002d64:	4688      	mov	r8, r1
 8002d66:	4616      	mov	r6, r2
	bool rtr = false, ext = false, rtr_mask = false;
 8002d68:	f88d 9011 	strb.w	r9, [sp, #17]
 8002d6c:	f88d 9012 	strb.w	r9, [sp, #18]
 8002d70:	f88d 9013 	strb.w	r9, [sp, #19]
	struct zcan_filter filter;
	int ret;
	u32_t id, mask;

	can_dev = device_get_binding(argv[pos]);
 8002d74:	6850      	ldr	r0, [r2, #4]
 8002d76:	f001 ff5f 	bl	8004c38 <z_impl_device_get_binding>
	if (!can_dev) {
 8002d7a:	4607      	mov	r7, r0
 8002d7c:	b950      	cbnz	r0, 8002d94 <cmd_attach+0x3c>
		shell_error(shell, "Can't get binding to device \"%s\"",
 8002d7e:	6873      	ldr	r3, [r6, #4]
 8002d80:	4a74      	ldr	r2, [pc, #464]	; (8002f54 <cmd_attach+0x1fc>)
 8002d82:	2102      	movs	r1, #2
 8002d84:	4620      	mov	r0, r4
 8002d86:	f003 ff0c 	bl	8006ba2 <shell_fprintf>
	filter.ext_id = id;

	if (pos != argc) {
		pos = read_mask(shell, pos, argv, ext, &mask);
		if (pos < 0) {
			return -EINVAL;
 8002d8a:	f06f 0015 	mvn.w	r0, #21
	}

	shell_print(shell, "Filter ID: %d", ret);

	return 0;
}
 8002d8e:	b00a      	add	sp, #40	; 0x28
 8002d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	pos = read_options(shell, pos, argv, &rtr, &ext);
 8002d94:	f10d 0312 	add.w	r3, sp, #18
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	f10d 0311 	add.w	r3, sp, #17
 8002da0:	4632      	mov	r2, r6
 8002da2:	4620      	mov	r0, r4
 8002da4:	f7ff ff66 	bl	8002c74 <read_options>
	if (pos < 0) {
 8002da8:	1e01      	subs	r1, r0, #0
 8002daa:	dbee      	blt.n	8002d8a <cmd_attach+0x32>
	filter.id_type = ext ? CAN_EXTENDED_IDENTIFIER : CAN_STANDARD_IDENTIFIER;
 8002dac:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8002db0:	f89d 3012 	ldrb.w	r3, [sp, #18]
	filter.rtr = rtr ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 8002db4:	f89d 0011 	ldrb.w	r0, [sp, #17]
	filter.id_type = ext ? CAN_EXTENDED_IDENTIFIER : CAN_STANDARD_IDENTIFIER;
 8002db8:	f363 0200 	bfi	r2, r3, #0, #1
	filter.rtr = rtr ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 8002dbc:	f360 0241 	bfi	r2, r0, #1, #1
 8002dc0:	f88d 201c 	strb.w	r2, [sp, #28]
	pos = read_id(shell, pos, argv, ext, &id);
 8002dc4:	aa05      	add	r2, sp, #20
 8002dc6:	9200      	str	r2, [sp, #0]
 8002dc8:	4620      	mov	r0, r4
 8002dca:	4632      	mov	r2, r6
 8002dcc:	f7ff ff84 	bl	8002cd8 <read_id>
	if (pos < 0) {
 8002dd0:	1e05      	subs	r5, r0, #0
 8002dd2:	dbda      	blt.n	8002d8a <cmd_attach+0x32>
	filter.ext_id = id;
 8002dd4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002dd8:	9a05      	ldr	r2, [sp, #20]
 8002dda:	f89d a012 	ldrb.w	sl, [sp, #18]
 8002dde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002de2:	9307      	str	r3, [sp, #28]
 8002de4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002de8:	f003 021f 	and.w	r2, r3, #31
 8002dec:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002df0:	f023 031f 	bic.w	r3, r3, #31
 8002df4:	4313      	orrs	r3, r2
	if (pos != argc) {
 8002df6:	4545      	cmp	r5, r8
	filter.ext_id = id;
 8002df8:	f88d 3020 	strb.w	r3, [sp, #32]
	if (pos != argc) {
 8002dfc:	d076      	beq.n	8002eec <cmd_attach+0x194>
	val = strtol(argv[pos], &end_ptr, 0);
 8002dfe:	464a      	mov	r2, r9
 8002e00:	a906      	add	r1, sp, #24
 8002e02:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8002e06:	f005 f81e 	bl	8007e46 <strtol>
	if (*end_ptr != '\0') {
 8002e0a:	9b06      	ldr	r3, [sp, #24]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	b12b      	cbz	r3, 8002e1c <cmd_attach+0xc4>
		shell_error(shell, "Mask is not a number");
 8002e10:	4a51      	ldr	r2, [pc, #324]	; (8002f58 <cmd_attach+0x200>)
 8002e12:	2102      	movs	r1, #2
 8002e14:	4620      	mov	r0, r4
 8002e16:	f003 fec4 	bl	8006ba2 <shell_fprintf>
		if (pos < 0) {
 8002e1a:	e7b6      	b.n	8002d8a <cmd_attach+0x32>
	if (val < 0 || val > CAN_EXT_ID_MASK ||
 8002e1c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8002e20:	d209      	bcs.n	8002e36 <cmd_attach+0xde>
 8002e22:	f1ba 0f00 	cmp.w	sl, #0
 8002e26:	d118      	bne.n	8002e5a <cmd_attach+0x102>
	   (!ext && val > CAN_MAX_STD_ID)) {
 8002e28:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8002e2c:	db15      	blt.n	8002e5a <cmd_attach+0x102>
 8002e2e:	4b4b      	ldr	r3, [pc, #300]	; (8002f5c <cmd_attach+0x204>)
		shell_error(shell, "Mask invalid. %smask must not be negative "
 8002e30:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002e34:	e00a      	b.n	8002e4c <cmd_attach+0xf4>
 8002e36:	4a4a      	ldr	r2, [pc, #296]	; (8002f60 <cmd_attach+0x208>)
 8002e38:	4b48      	ldr	r3, [pc, #288]	; (8002f5c <cmd_attach+0x204>)
 8002e3a:	f1ba 0f00 	cmp.w	sl, #0
 8002e3e:	bf18      	it	ne
 8002e40:	4613      	movne	r3, r2
 8002e42:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002e46:	bf18      	it	ne
 8002e48:	f06f 4260 	mvnne.w	r2, #3758096384	; 0xe0000000
 8002e4c:	9200      	str	r2, [sp, #0]
 8002e4e:	2102      	movs	r1, #2
 8002e50:	4a44      	ldr	r2, [pc, #272]	; (8002f64 <cmd_attach+0x20c>)
 8002e52:	4620      	mov	r0, r4
 8002e54:	f003 fea5 	bl	8006ba2 <shell_fprintf>
 8002e58:	e797      	b.n	8002d8a <cmd_attach+0x32>
		if (pos < 0) {
 8002e5a:	1c69      	adds	r1, r5, #1
 8002e5c:	d495      	bmi.n	8002d8a <cmd_attach+0x32>
		filter.ext_id_mask = mask;
 8002e5e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8002e62:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8002e66:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002e6a:	f3c0 400c 	ubfx	r0, r0, #16, #13
 8002e6e:	4318      	orrs	r0, r3
	if (pos != argc) {
 8002e70:	4541      	cmp	r1, r8
		filter.ext_id_mask = mask;
 8002e72:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
	if (pos != argc) {
 8002e76:	d14d      	bne.n	8002f14 <cmd_attach+0x1bc>
	filter.rtr_mask = rtr_mask;
 8002e78:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8002e7c:	f89d 0013 	ldrb.w	r0, [sp, #19]
	shell_print(shell, "Attach filter with ID 0x%x (%s id) and mask 0x%x "
 8002e80:	f89d 2012 	ldrb.w	r2, [sp, #18]
	filter.rtr_mask = rtr_mask;
 8002e84:	f360 0300 	bfi	r3, r0, #0, #1
 8002e88:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	shell_print(shell, "Attach filter with ID 0x%x (%s id) and mask 0x%x "
 8002e8c:	9b07      	ldr	r3, [sp, #28]
 8002e8e:	2a00      	cmp	r2, #0
 8002e90:	d04b      	beq.n	8002f2a <cmd_attach+0x1d2>
 8002e92:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8002e96:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8002e9a:	f002 021f 	and.w	r2, r2, #31
 8002e9e:	0612      	lsls	r2, r2, #24
 8002ea0:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
 8002ea4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8002ea8:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8002eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002eb0:	492d      	ldr	r1, [pc, #180]	; (8002f68 <cmd_attach+0x210>)
 8002eb2:	9100      	str	r1, [sp, #0]
 8002eb4:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4a2c      	ldr	r2, [pc, #176]	; (8002f6c <cmd_attach+0x214>)
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	f003 fe70 	bl	8006ba2 <shell_fprintf>
	ret = can_attach_workq(can_dev, &k_sys_work_q, &work, print_frame,
 8002ec2:	ab07      	add	r3, sp, #28
 8002ec4:	e9cd 4300 	strd	r4, r3, [sp]
 8002ec8:	4a29      	ldr	r2, [pc, #164]	; (8002f70 <cmd_attach+0x218>)
 8002eca:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <cmd_attach+0x21c>)
 8002ecc:	492a      	ldr	r1, [pc, #168]	; (8002f78 <cmd_attach+0x220>)
 8002ece:	4638      	mov	r0, r7
 8002ed0:	f7ff fb20 	bl	8002514 <can_attach_workq>
	if (ret < 0) {
 8002ed4:	1e03      	subs	r3, r0, #0
 8002ed6:	da36      	bge.n	8002f46 <cmd_attach+0x1ee>
		if (ret == CAN_NO_FREE_FILTER) {
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	d12e      	bne.n	8002f3a <cmd_attach+0x1e2>
			shell_error(shell, "Can't attach, no free filter left");
 8002edc:	4a27      	ldr	r2, [pc, #156]	; (8002f7c <cmd_attach+0x224>)
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f003 fe5e 	bl	8006ba2 <shell_fprintf>
		return -EIO;
 8002ee6:	f06f 0004 	mvn.w	r0, #4
 8002eea:	e750      	b.n	8002d8e <cmd_attach+0x36>
		filter.ext_id_mask = ext ? CAN_EXT_ID_MASK : CAN_STD_ID_MASK;
 8002eec:	f1ba 0f00 	cmp.w	sl, #0
 8002ef0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002ef4:	bf08      	it	eq
 8002ef6:	461a      	moveq	r2, r3
 8002ef8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8002efc:	bf18      	it	ne
 8002efe:	f06f 4260 	mvnne.w	r2, #3758096384	; 0xe0000000
 8002f02:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002f06:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8002f0a:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8002f0e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	if (pos != argc) {
 8002f12:	e7b1      	b.n	8002e78 <cmd_attach+0x120>
		pos = read_options(shell, pos, argv, &rtr_mask, NULL);
 8002f14:	2300      	movs	r3, #0
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	4632      	mov	r2, r6
 8002f1a:	f10d 0313 	add.w	r3, sp, #19
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f7ff fea8 	bl	8002c74 <read_options>
		if (pos < 0) {
 8002f24:	2800      	cmp	r0, #0
 8002f26:	daa7      	bge.n	8002e78 <cmd_attach+0x120>
 8002f28:	e72f      	b.n	8002d8a <cmd_attach+0x32>
	shell_print(shell, "Attach filter with ID 0x%x (%s id) and mask 0x%x "
 8002f2a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8002f2e:	4914      	ldr	r1, [pc, #80]	; (8002f80 <cmd_attach+0x228>)
 8002f30:	f3c3 230a 	ubfx	r3, r3, #8, #11
 8002f34:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002f38:	e7bb      	b.n	8002eb2 <cmd_attach+0x15a>
			shell_error(shell, "Failed to attach filter [%d]", ret);
 8002f3a:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <cmd_attach+0x22c>)
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f003 fe2f 	bl	8006ba2 <shell_fprintf>
 8002f44:	e7cf      	b.n	8002ee6 <cmd_attach+0x18e>
	shell_print(shell, "Filter ID: %d", ret);
 8002f46:	4620      	mov	r0, r4
 8002f48:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <cmd_attach+0x230>)
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	f003 fe29 	bl	8006ba2 <shell_fprintf>
	return 0;
 8002f50:	2000      	movs	r0, #0
 8002f52:	e71c      	b.n	8002d8e <cmd_attach+0x36>
 8002f54:	0800a1e1 	.word	0x0800a1e1
 8002f58:	0800a203 	.word	0x0800a203
 8002f5c:	08009ab9 	.word	0x08009ab9
 8002f60:	0800a3f7 	.word	0x0800a3f7
 8002f64:	0800a219 	.word	0x0800a219
 8002f68:	0800a1cf 	.word	0x0800a1cf
 8002f6c:	0800a258 	.word	0x0800a258
 8002f70:	20000668 	.word	0x20000668
 8002f74:	08002bc1 	.word	0x08002bc1
 8002f78:	20000890 	.word	0x20000890
 8002f7c:	0800a293 	.word	0x0800a293
 8002f80:	0800a1d8 	.word	0x0800a1d8
 8002f84:	0800a2b6 	.word	0x0800a2b6
 8002f88:	0800a2d4 	.word	0x0800a2d4

08002f8c <cmd_detach>:

static int cmd_detach(const struct shell *shell, size_t argc, char **argv)
{
 8002f8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f8e:	4605      	mov	r5, r0
 8002f90:	4616      	mov	r6, r2
	struct device *can_dev;
	char *end_ptr;
	long id;

	can_dev = device_get_binding(argv[1]);
 8002f92:	6850      	ldr	r0, [r2, #4]
 8002f94:	f001 fe50 	bl	8004c38 <z_impl_device_get_binding>
	if (!can_dev) {
 8002f98:	4604      	mov	r4, r0
 8002f9a:	b948      	cbnz	r0, 8002fb0 <cmd_detach+0x24>
		shell_error(shell, "Can't get binding to device \"%s\"",
 8002f9c:	6873      	ldr	r3, [r6, #4]
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <cmd_detach+0x60>)
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4628      	mov	r0, r5
 8002fa4:	f003 fdfd 	bl	8006ba2 <shell_fprintf>


	id = strtol(argv[2], &end_ptr, 0);
	if (*end_ptr != '\0') {
		shell_error(shell, "filter_id is not a number");
		return -EINVAL;
 8002fa8:	f06f 0015 	mvn.w	r0, #21
	}

	can_detach(can_dev, (int)id);

	return 0;
}
 8002fac:	b002      	add	sp, #8
 8002fae:	bd70      	pop	{r4, r5, r6, pc}
	id = strtol(argv[2], &end_ptr, 0);
 8002fb0:	68b0      	ldr	r0, [r6, #8]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	a901      	add	r1, sp, #4
 8002fb6:	f004 ff46 	bl	8007e46 <strtol>
	if (*end_ptr != '\0') {
 8002fba:	9b01      	ldr	r3, [sp, #4]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
	id = strtol(argv[2], &end_ptr, 0);
 8002fbe:	4606      	mov	r6, r0
	if (*end_ptr != '\0') {
 8002fc0:	b12b      	cbz	r3, 8002fce <cmd_detach+0x42>
		shell_error(shell, "filter_id is not a number");
 8002fc2:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <cmd_detach+0x64>)
 8002fc4:	2102      	movs	r1, #2
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	f003 fdeb 	bl	8006ba2 <shell_fprintf>
 8002fcc:	e7ec      	b.n	8002fa8 <cmd_detach+0x1c>
	if (id < 0) {
 8002fce:	2800      	cmp	r0, #0
 8002fd0:	da04      	bge.n	8002fdc <cmd_detach+0x50>
		shell_error(shell, "filter_id must not be negative");
 8002fd2:	4a08      	ldr	r2, [pc, #32]	; (8002ff4 <cmd_detach+0x68>)
 8002fd4:	2102      	movs	r1, #2
 8002fd6:	4628      	mov	r0, r5
 8002fd8:	f003 fde3 	bl	8006ba2 <shell_fprintf>
	return api->detach(dev, filter_id);
 8002fdc:	6863      	ldr	r3, [r4, #4]
 8002fde:	4620      	mov	r0, r4
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	4631      	mov	r1, r6
 8002fe4:	4798      	blx	r3
	return 0;
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	e7e0      	b.n	8002fac <cmd_detach+0x20>
 8002fea:	bf00      	nop
 8002fec:	0800a1e1 	.word	0x0800a1e1
 8002ff0:	0800a2e3 	.word	0x0800a2e3
 8002ff4:	0800a2fe 	.word	0x0800a2fe

08002ff8 <cmd_send>:
{
 8002ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ffc:	b08a      	sub	sp, #40	; 0x28
	bool rtr = false, ext = false;
 8002ffe:	2300      	movs	r3, #0
{
 8003000:	4604      	mov	r4, r0
 8003002:	4689      	mov	r9, r1
 8003004:	4690      	mov	r8, r2
	bool rtr = false, ext = false;
 8003006:	f88d 300e 	strb.w	r3, [sp, #14]
 800300a:	f88d 300f 	strb.w	r3, [sp, #15]
	can_dev = device_get_binding(argv[pos]);
 800300e:	6850      	ldr	r0, [r2, #4]
 8003010:	f001 fe12 	bl	8004c38 <z_impl_device_get_binding>
	if (!can_dev) {
 8003014:	4607      	mov	r7, r0
 8003016:	b938      	cbnz	r0, 8003028 <cmd_send+0x30>
		shell_error(shell, "Can't get binding to device \"%s\"",
 8003018:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800301c:	4a48      	ldr	r2, [pc, #288]	; (8003140 <cmd_send+0x148>)
		shell_error(shell, "Too many databytes. Max is %d",
 800301e:	2102      	movs	r1, #2
 8003020:	4620      	mov	r0, r4
 8003022:	f003 fdbe 	bl	8006ba2 <shell_fprintf>
	if (pos < 0) {
 8003026:	e00b      	b.n	8003040 <cmd_send+0x48>
	pos = read_options(shell, pos, argv, &rtr, &ext);
 8003028:	f10d 030f 	add.w	r3, sp, #15
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2102      	movs	r1, #2
 8003030:	f10d 030e 	add.w	r3, sp, #14
 8003034:	4642      	mov	r2, r8
 8003036:	4620      	mov	r0, r4
 8003038:	f7ff fe1c 	bl	8002c74 <read_options>
	if (pos < 0) {
 800303c:	1e01      	subs	r1, r0, #0
 800303e:	da04      	bge.n	800304a <cmd_send+0x52>
		return -EINVAL;
 8003040:	f06f 0015 	mvn.w	r0, #21
}
 8003044:	b00a      	add	sp, #40	; 0x28
 8003046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	frame.id_type = ext ? CAN_EXTENDED_IDENTIFIER : CAN_STANDARD_IDENTIFIER;
 800304a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800304e:	f89d 300f 	ldrb.w	r3, [sp, #15]
	frame.rtr = rtr ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 8003052:	f89d 000e 	ldrb.w	r0, [sp, #14]
	frame.id_type = ext ? CAN_EXTENDED_IDENTIFIER : CAN_STANDARD_IDENTIFIER;
 8003056:	f363 0200 	bfi	r2, r3, #0, #1
	frame.rtr = rtr ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 800305a:	f360 0241 	bfi	r2, r0, #1, #1
 800305e:	f88d 2018 	strb.w	r2, [sp, #24]
	pos = read_id(shell, pos, argv, ext, &id);
 8003062:	aa04      	add	r2, sp, #16
 8003064:	9200      	str	r2, [sp, #0]
 8003066:	4620      	mov	r0, r4
 8003068:	4642      	mov	r2, r8
 800306a:	f7ff fe35 	bl	8002cd8 <read_id>
	if (pos < 0) {
 800306e:	1e05      	subs	r5, r0, #0
 8003070:	dbe6      	blt.n	8003040 <cmd_send+0x48>
	frame.ext_id = id;
 8003072:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003076:	9a04      	ldr	r2, [sp, #16]
 8003078:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800307c:	9306      	str	r3, [sp, #24]
 800307e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003082:	f003 021f 	and.w	r2, r3, #31
 8003086:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800308a:	f023 031f 	bic.w	r3, r3, #31
 800308e:	4313      	orrs	r3, r2
 8003090:	f88d 301c 	strb.w	r3, [sp, #28]
	if (argc - pos > CAN_MAX_DLC) {
 8003094:	eba9 0305 	sub.w	r3, r9, r5
 8003098:	2b08      	cmp	r3, #8
 800309a:	d948      	bls.n	800312e <cmd_send+0x136>
		shell_error(shell, "Too many databytes. Max is %d",
 800309c:	2308      	movs	r3, #8
 800309e:	4a29      	ldr	r2, [pc, #164]	; (8003144 <cmd_send+0x14c>)
 80030a0:	e7bd      	b.n	800301e <cmd_send+0x26>
		val = strtol(argv[i], &end_ptr, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	a905      	add	r1, sp, #20
 80030a6:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
 80030aa:	f004 fecc 	bl	8007e46 <strtol>
		if (*end_ptr != '\0') {
 80030ae:	9b05      	ldr	r3, [sp, #20]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b12b      	cbz	r3, 80030c0 <cmd_send+0xc8>
			shell_error(shell, "Data bytes must be numbers");
 80030b4:	4a24      	ldr	r2, [pc, #144]	; (8003148 <cmd_send+0x150>)
			shell_error(shell, "A data bytes must not be > 0xFF");
 80030b6:	2102      	movs	r1, #2
 80030b8:	4620      	mov	r0, r4
 80030ba:	f003 fd72 	bl	8006ba2 <shell_fprintf>
			return -EINVAL;
 80030be:	e7bf      	b.n	8003040 <cmd_send+0x48>
		if (val & ~0xFFL) {
 80030c0:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 80030c4:	d001      	beq.n	80030ca <cmd_send+0xd2>
			shell_error(shell, "A data bytes must not be > 0xFF");
 80030c6:	4a21      	ldr	r2, [pc, #132]	; (800314c <cmd_send+0x154>)
 80030c8:	e7f5      	b.n	80030b6 <cmd_send+0xbe>
		*data_ptr = val;
 80030ca:	f80a 0b01 	strb.w	r0, [sl], #1
	for (i = pos; i < argc; i++) {
 80030ce:	3601      	adds	r6, #1
 80030d0:	45b1      	cmp	r9, r6
 80030d2:	d8e6      	bhi.n	80030a2 <cmd_send+0xaa>
	*dlc = i - pos;
 80030d4:	1b75      	subs	r5, r6, r5
 80030d6:	b2ed      	uxtb	r5, r5
	if (pos < 0) {
 80030d8:	2e00      	cmp	r6, #0
	*dlc = i - pos;
 80030da:	f88d 501d 	strb.w	r5, [sp, #29]
	if (pos < 0) {
 80030de:	dbaf      	blt.n	8003040 <cmd_send+0x48>
	shell_print(shell, "Send frame with ID 0x%x (%s id) and %d data bytes",
 80030e0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80030e4:	9b06      	ldr	r3, [sp, #24]
 80030e6:	b332      	cbz	r2, 8003136 <cmd_send+0x13e>
 80030e8:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80030ec:	f002 021f 	and.w	r2, r2, #31
 80030f0:	0612      	lsls	r2, r2, #24
 80030f2:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
 80030f6:	4a16      	ldr	r2, [pc, #88]	; (8003150 <cmd_send+0x158>)
 80030f8:	e9cd 2500 	strd	r2, r5, [sp]
 80030fc:	2100      	movs	r1, #0
 80030fe:	4a15      	ldr	r2, [pc, #84]	; (8003154 <cmd_send+0x15c>)
 8003100:	4620      	mov	r0, r4
 8003102:	f003 fd4e 	bl	8006ba2 <shell_fprintf>
	return api->send(dev, msg, timeout, callback_isr, callback_arg);
 8003106:	2300      	movs	r3, #0
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	6855      	ldr	r5, [r2, #4]
 800310e:	a906      	add	r1, sp, #24
 8003110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003114:	4638      	mov	r0, r7
 8003116:	47a8      	blx	r5
	if (ret) {
 8003118:	2800      	cmp	r0, #0
 800311a:	d093      	beq.n	8003044 <cmd_send+0x4c>
		shell_error(shell, "Failed to send frame [%d]", ret);
 800311c:	4603      	mov	r3, r0
 800311e:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <cmd_send+0x160>)
 8003120:	4620      	mov	r0, r4
 8003122:	2102      	movs	r1, #2
 8003124:	f003 fd3d 	bl	8006ba2 <shell_fprintf>
		return -EIO;
 8003128:	f06f 0004 	mvn.w	r0, #4
 800312c:	e78a      	b.n	8003044 <cmd_send+0x4c>
	if (argc - pos > CAN_MAX_DLC) {
 800312e:	462e      	mov	r6, r5
	u8_t *data_ptr = data;
 8003130:	f10d 0a1e 	add.w	sl, sp, #30
 8003134:	e7cc      	b.n	80030d0 <cmd_send+0xd8>
	shell_print(shell, "Send frame with ID 0x%x (%s id) and %d data bytes",
 8003136:	f3c3 230a 	ubfx	r3, r3, #8, #11
 800313a:	4a08      	ldr	r2, [pc, #32]	; (800315c <cmd_send+0x164>)
 800313c:	e7dc      	b.n	80030f8 <cmd_send+0x100>
 800313e:	bf00      	nop
 8003140:	0800a1e1 	.word	0x0800a1e1
 8003144:	0800a31e 	.word	0x0800a31e
 8003148:	0800a33d 	.word	0x0800a33d
 800314c:	0800a359 	.word	0x0800a359
 8003150:	0800a1cf 	.word	0x0800a1cf
 8003154:	0800a37a 	.word	0x0800a37a
 8003158:	0800a3ad 	.word	0x0800a3ad
 800315c:	0800a1d8 	.word	0x0800a1d8

08003160 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static u32_t elapsed(void)
{
	u32_t val1 = SysTick->VAL;	/* A */
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <elapsed+0x30>)
 8003162:	689a      	ldr	r2, [r3, #8]
	u32_t ctrl = SysTick->CTRL;	/* B */
 8003164:	6819      	ldr	r1, [r3, #0]
	u32_t val2 = SysTick->VAL;	/* C */
 8003166:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <elapsed+0x34>)
 800316a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
{
 800316e:	b510      	push	{r4, lr}
 8003170:	4909      	ldr	r1, [pc, #36]	; (8003198 <elapsed+0x38>)
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8003172:	d101      	bne.n	8003178 <elapsed+0x18>
	    || (val1 < val2)) {
 8003174:	4282      	cmp	r2, r0
 8003176:	d205      	bcs.n	8003184 <elapsed+0x24>
		overflow_cyc += last_load;
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	680c      	ldr	r4, [r1, #0]
 800317c:	4422      	add	r2, r4
 800317e:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8003180:	4a03      	ldr	r2, [pc, #12]	; (8003190 <elapsed+0x30>)
 8003182:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	680a      	ldr	r2, [r1, #0]
 8003188:	4413      	add	r3, r2
}
 800318a:	1a18      	subs	r0, r3, r0
 800318c:	bd10      	pop	{r4, pc}
 800318e:	bf00      	nop
 8003190:	e000e010 	.word	0xe000e010
 8003194:	200006c8 	.word	0x200006c8
 8003198:	200006c4 	.word	0x200006c4

0800319c <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 800319c:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	u32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 800319e:	f7ff ffdf 	bl	8003160 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <z_clock_isr+0x38>)
 80031a4:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <z_clock_isr+0x3c>)
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	6811      	ldr	r1, [r2, #0]
 80031aa:	4408      	add	r0, r1
 80031ac:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <z_clock_isr+0x40>)
 80031b4:	6811      	ldr	r1, [r2, #0]
 80031b6:	f244 13a0 	movw	r3, #16800	; 0x41a0
 80031ba:	1a40      	subs	r0, r0, r1
 80031bc:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 80031c0:	fb03 1300 	mla	r3, r3, r0, r1
 80031c4:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
 80031c6:	f002 fc7f 	bl	8005ac8 <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_exc_exit();
}
 80031ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
 80031ce:	f000 b8bb 	b.w	8003348 <z_arm_exc_exit>
 80031d2:	bf00      	nop
 80031d4:	200006c8 	.word	0x200006c8
 80031d8:	200006c0 	.word	0x200006c0
 80031dc:	200006bc 	.word	0x200006bc

080031e0 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e0:	4b09      	ldr	r3, [pc, #36]	; (8003208 <z_clock_driver_init+0x28>)
 80031e2:	2210      	movs	r2, #16
 80031e4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

int z_clock_driver_init(struct device *device)
{
	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <z_clock_driver_init+0x2c>)
 80031ea:	f244 129f 	movw	r2, #16799	; 0x419f
 80031ee:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 80031f0:	4b07      	ldr	r3, [pc, #28]	; (8003210 <z_clock_driver_init+0x30>)
 80031f2:	2000      	movs	r0, #0
 80031f4:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <z_clock_driver_init+0x34>)
 80031f8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 80031fa:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	f042 0207 	orr.w	r2, r2, #7
 8003202:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000ed00 	.word	0xe000ed00
 800320c:	200006c4 	.word	0x200006c4
 8003210:	200006c8 	.word	0x200006c8
 8003214:	e000e010 	.word	0xe000e010

08003218 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	4604      	mov	r4, r0
 800321c:	4d2a      	ldr	r5, [pc, #168]	; (80032c8 <z_clock_set_timeout+0xb0>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle && ticks == K_FOREVER) {
 800321e:	b151      	cbz	r1, 8003236 <z_clock_set_timeout+0x1e>
 8003220:	1c43      	adds	r3, r0, #1
 8003222:	d10e      	bne.n	8003242 <z_clock_set_timeout+0x2a>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8003224:	4a29      	ldr	r2, [pc, #164]	; (80032cc <z_clock_set_timeout+0xb4>)
 8003226:	6813      	ldr	r3, [r2, #0]
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 800322e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003232:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 8003234:	bd70      	pop	{r4, r5, r6, pc}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
 8003236:	f240 33e5 	movw	r3, #997	; 0x3e5
 800323a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800323e:	bf08      	it	eq
 8003240:	461c      	moveq	r4, r3
	__asm__ volatile(
 8003242:	f04f 0310 	mov.w	r3, #16
 8003246:	f3ef 8611 	mrs	r6, BASEPRI
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
	u32_t pending = elapsed();
 8003252:	f7ff ff85 	bl	8003160 <elapsed>
	cycle_count += pending;
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <z_clock_set_timeout+0xb8>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	4410      	add	r0, r2
 800325c:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 800325e:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <z_clock_set_timeout+0xbc>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
	u32_t unannounced = cycle_count - announced_cycles;
 8003264:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <z_clock_set_timeout+0xc0>)
 8003266:	681b      	ldr	r3, [r3, #0]
	if ((s32_t)unannounced < 0) {
 8003268:	1ac2      	subs	r2, r0, r3
 800326a:	d50d      	bpl.n	8003288 <z_clock_set_timeout+0x70>
		last_load = MIN_DELAY;
 800326c:	f240 431a 	movw	r3, #1050	; 0x41a
			last_load = MAX_CYCLES;
 8003270:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
 8003272:	682b      	ldr	r3, [r5, #0]
 8003274:	4a15      	ldr	r2, [pc, #84]	; (80032cc <z_clock_set_timeout+0xb4>)
 8003276:	3b01      	subs	r3, #1
 8003278:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 800327a:	2300      	movs	r3, #0
 800327c:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
 800327e:	f386 8811 	msr	BASEPRI, r6
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	e7d5      	b.n	8003234 <z_clock_set_timeout+0x1c>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
 8003288:	3c01      	subs	r4, #1
		delay = ticks * CYC_PER_TICK;
 800328a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800328e:	f240 31e5 	movw	r1, #997	; 0x3e5
 8003292:	428c      	cmp	r4, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8003294:	f502 4283 	add.w	r2, r2, #16768	; 0x4180
		delay = ticks * CYC_PER_TICK;
 8003298:	bfa8      	it	ge
 800329a:	460c      	movge	r4, r1
		delay -= unannounced;
 800329c:	1a18      	subs	r0, r3, r0
		delay = ticks * CYC_PER_TICK;
 800329e:	f244 11a0 	movw	r1, #16800	; 0x41a0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80032a2:	321f      	adds	r2, #31
 80032a4:	fb01 2404 	mla	r4, r1, r4, r2
		delay = MAX(delay, MIN_DELAY);
 80032a8:	f240 431a 	movw	r3, #1050	; 0x41a
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80032ac:	fbb4 f4f1 	udiv	r4, r4, r1
		delay -= unannounced;
 80032b0:	fb01 0404 	mla	r4, r1, r4, r0
		delay = MAX(delay, MIN_DELAY);
 80032b4:	429c      	cmp	r4, r3
 80032b6:	d904      	bls.n	80032c2 <z_clock_set_timeout+0xaa>
		if (delay > MAX_CYCLES) {
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <z_clock_set_timeout+0xc4>)
 80032ba:	429c      	cmp	r4, r3
 80032bc:	d8d8      	bhi.n	8003270 <z_clock_set_timeout+0x58>
			last_load = delay;
 80032be:	602c      	str	r4, [r5, #0]
 80032c0:	e7d7      	b.n	8003272 <z_clock_set_timeout+0x5a>
		delay = MAX(delay, MIN_DELAY);
 80032c2:	461c      	mov	r4, r3
 80032c4:	e7fb      	b.n	80032be <z_clock_set_timeout+0xa6>
 80032c6:	bf00      	nop
 80032c8:	200006c4 	.word	0x200006c4
 80032cc:	e000e010 	.word	0xe000e010
 80032d0:	200006c0 	.word	0x200006c0
 80032d4:	200006c8 	.word	0x200006c8
 80032d8:	200006bc 	.word	0x200006bc
 80032dc:	00ff9420 	.word	0x00ff9420

080032e0 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
 80032e0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80032e2:	f04f 0310 	mov.w	r3, #16
 80032e6:	f3ef 8411 	mrs	r4, BASEPRI
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc = elapsed() + cycle_count - announced_cycles;
 80032f2:	f7ff ff35 	bl	8003160 <elapsed>
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <z_clock_elapsed+0x34>)
 80032f8:	4a07      	ldr	r2, [pc, #28]	; (8003318 <z_clock_elapsed+0x38>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	4418      	add	r0, r3
	__asm__ volatile(
 8003302:	f384 8811 	msr	BASEPRI, r4
 8003306:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 800330a:	f244 13a0 	movw	r3, #16800	; 0x41a0
 800330e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003312:	bd10      	pop	{r4, pc}
 8003314:	200006c0 	.word	0x200006c0
 8003318:	200006bc 	.word	0x200006bc

0800331c <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
 800331c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800331e:	f04f 0310 	mov.w	r3, #16
 8003322:	f3ef 8411 	mrs	r4, BASEPRI
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = elapsed() + cycle_count;
 800332e:	f7ff ff17 	bl	8003160 <elapsed>
 8003332:	4b04      	ldr	r3, [pc, #16]	; (8003344 <z_timer_cycle_get_32+0x28>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4418      	add	r0, r3
	__asm__ volatile(
 8003338:	f384 8811 	msr	BASEPRI, r4
 800333c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 8003340:	bd10      	pop	{r4, pc}
 8003342:	bf00      	nop
 8003344:	200006c0 	.word	0x200006c0

08003348 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
 8003348:	4804      	ldr	r0, [pc, #16]	; (800335c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
 800334a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
 800334c:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
 800334e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
 8003350:	d003      	beq.n	800335a <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
 8003352:	4903      	ldr	r1, [pc, #12]	; (8003360 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
 8003354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
 8003358:	600a      	str	r2, [r1, #0]

0800335a <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
 800335a:	4770      	bx	lr
    ldr r0, =_kernel
 800335c:	20000858 	.word	0x20000858
    ldr r1, =_SCS_ICSR
 8003360:	e000ed04 	.word	0xe000ed04

08003364 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
 8003364:	4a09      	ldr	r2, [pc, #36]	; (800338c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8003366:	490a      	ldr	r1, [pc, #40]	; (8003390 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8003368:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 800336a:	6809      	ldr	r1, [r1, #0]
 800336c:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800336e:	4909      	ldr	r1, [pc, #36]	; (8003394 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8003370:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003372:	684b      	ldr	r3, [r1, #4]
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003378:	604b      	str	r3, [r1, #4]
 800337a:	2300      	movs	r3, #0
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8003384:	6893      	ldr	r3, [r2, #8]
}
 8003386:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000858 	.word	0x20000858
 8003390:	0800981c 	.word	0x0800981c
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003398:	4912      	ldr	r1, [pc, #72]	; (80033e4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 800339a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 800339c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
 80033a0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 80033a2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 80033a6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80033aa:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80033ac:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 80033b0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 80033b4:	4f0c      	ldr	r7, [pc, #48]	; (80033e8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 80033b6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 80033ba:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 80033bc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 80033be:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80033c0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
 80033c2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80033c4:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80033c6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80033ca:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80033cc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80033ce:	f004 fd32 	bl	8007e36 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80033d2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80033d6:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
 80033da:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80033de:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 80033e2:	4770      	bx	lr
    ldr r1, =_kernel
 80033e4:	20000858 	.word	0x20000858
    ldr v4, =_SCS_ICSR
 80033e8:	e000ed04 	.word	0xe000ed04

080033ec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 80033ec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80033f0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80033f2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80033f6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80033fa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80033fc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8003400:	2902      	cmp	r1, #2
    beq _oops
 8003402:	d0ff      	beq.n	8003404 <_oops>

08003404 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8003404:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8003406:	f004 fd0b 	bl	8007e20 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 800340a:	bd01      	pop	{r0, pc}

0800340c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 800340c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800340e:	2b00      	cmp	r3, #0
 8003410:	db08      	blt.n	8003424 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003412:	2201      	movs	r2, #1
 8003414:	f000 001f 	and.w	r0, r0, #31
 8003418:	fa02 f000 	lsl.w	r0, r2, r0
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	4a02      	ldr	r2, [pc, #8]	; (8003428 <arch_irq_enable+0x1c>)
 8003420:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000e100 	.word	0xe000e100

0800342c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 800342c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800342e:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003430:	bfa8      	it	ge
 8003432:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 8003436:	f101 0101 	add.w	r1, r1, #1
 800343a:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800343e:	bfae      	itee	ge
 8003440:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003444:	f000 000f 	andlt.w	r0, r0, #15
 8003448:	4b03      	ldrlt	r3, [pc, #12]	; (8003458 <z_arm_irq_priority_set+0x2c>)
 800344a:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344c:	bfac      	ite	ge
 800344e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003452:	5419      	strblt	r1, [r3, r0]
}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	e000ed14 	.word	0xe000ed14

0800345c <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
 800345c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800345e:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
 8003460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003462:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
 8003464:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
 8003466:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
 8003468:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
 800346a:	f005 fb99 	bl	8008ba0 <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 800346e:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
 8003472:	4a0a      	ldr	r2, [pc, #40]	; (800349c <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 8003474:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
 800347e:	9a06      	ldr	r2, [sp, #24]
 8003480:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
 8003482:	9a07      	ldr	r2, [sp, #28]
 8003484:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
 8003486:	9a08      	ldr	r2, [sp, #32]
 8003488:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
 800348a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
 800348e:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
 8003490:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
 8003492:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8003498:	b002      	add	sp, #8
 800349a:	bd70      	pop	{r4, r5, r6, pc}
 800349c:	08006405 	.word	0x08006405

080034a0 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	4605      	mov	r5, r0
 80034a4:	460c      	mov	r4, r1
 80034a6:	4617      	mov	r7, r2
 80034a8:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 80034aa:	f000 f96b 	bl	8003784 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
 80034ae:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
 80034b0:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80034b2:	4628      	mov	r0, r5
	_current = main_thread;
 80034b4:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
 80034b6:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80034ba:	f004 fcbc 	bl	8007e36 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 80034be:	4630      	mov	r0, r6
 80034c0:	f384 8809 	msr	PSP, r4
 80034c4:	2100      	movs	r1, #0
 80034c6:	b663      	cpsie	if
 80034c8:	f381 8811 	msr	BASEPRI, r1
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	2200      	movs	r2, #0
 80034d2:	2300      	movs	r3, #0
 80034d4:	f002 ff96 	bl	8006404 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 80034d8:	20000858 	.word	0x20000858

080034dc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
 80034dc:	4901      	ldr	r1, [pc, #4]	; (80034e4 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
 80034de:	2210      	movs	r2, #16
	str r2, [r1]
 80034e0:	600a      	str	r2, [r1, #0]
#endif
	bx lr
 80034e2:	4770      	bx	lr
	ldr r1, =_SCB_SCR
 80034e4:	e000ed10 	.word	0xe000ed10

080034e8 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
 80034e8:	4040      	eors	r0, r0
	msr BASEPRI, r0
 80034ea:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
 80034ee:	bf30      	wfi

	bx lr
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop

080034f4 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
 80034f4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80034f8:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
 80034fc:	4672      	mov	r2, lr

	push {r0, lr}
 80034fe:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
 8003500:	f000 f892 	bl	8003628 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
 8003504:	bd01      	pop	{r0, pc}
 8003506:	bf00      	nop

08003508 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8003508:	bf30      	wfi
    b z_SysNmiOnReset
 800350a:	f7ff bffd 	b.w	8003508 <z_SysNmiOnReset>
 800350e:	bf00      	nop

08003510 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8003510:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003512:	4b08      	ldr	r3, [pc, #32]	; (8003534 <z_arm_prep_c+0x24>)
 8003514:	4a08      	ldr	r2, [pc, #32]	; (8003538 <z_arm_prep_c+0x28>)
 8003516:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800351a:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800351c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003520:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
 8003524:	f001 fbb4 	bl	8004c90 <z_bss_zero>
	z_data_copy();
 8003528:	f001 fbca 	bl	8004cc0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
 800352c:	f000 f8f8 	bl	8003720 <z_arm_int_lib_init>
	z_cstart();
 8003530:	f001 fc0a 	bl	8004d48 <z_cstart>
 8003534:	08000000 	.word	0x08000000
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 800353c:	b501      	push	{r0, lr}

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 800353e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8003542:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8003546:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
 800354a:	4904      	ldr	r1, [pc, #16]	; (800355c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 800354c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800354e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
 8003550:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8003552:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8003556:	4902      	ldr	r1, [pc, #8]	; (8003560 <_isr_wrapper+0x24>)
	bx r1
 8003558:	4708      	bx	r1
 800355a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 800355c:	08008f0c 	.word	0x08008f0c
	ldr r1, =z_arm_int_exit
 8003560:	08003349 	.word	0x08003349

08003564 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003564:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8003566:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
 800356a:	4808      	ldr	r0, [pc, #32]	; (800358c <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 800356c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 8003570:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8003572:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8003576:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800357a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 800357c:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800357e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8003582:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8003586:	f7ff ffc3 	bl	8003510 <z_arm_prep_c>
 800358a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
 800358c:	20001ac0 	.word	0x20001ac0

08003590 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <mem_manage_fault.isra.2+0x34>)
 8003592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8003594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8003596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003598:	0792      	lsls	r2, r2, #30
 800359a:	d508      	bpl.n	80035ae <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
 800359c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800359e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035a0:	0612      	lsls	r2, r2, #24
 80035a2:	d504      	bpl.n	80035ae <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
 80035a4:	b118      	cbz	r0, 80035ae <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80035a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ac:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <mem_manage_fault.isra.2+0x34>)
 80035b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80035b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 80035b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80035b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
 80035b8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80035ba:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80035be:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 80035c0:	7008      	strb	r0, [r1, #0]

	return reason;
}
 80035c2:	4770      	bx	lr
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80035c8:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <bus_fault.isra.3+0x38>)
 80035ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80035cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80035ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035d0:	0592      	lsls	r2, r2, #22
 80035d2:	d508      	bpl.n	80035e6 <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 80035d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80035d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035d8:	0412      	lsls	r2, r2, #16
 80035da:	d504      	bpl.n	80035e6 <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
 80035dc:	b118      	cbz	r0, 80035e6 <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80035de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <bus_fault.isra.3+0x38>)
 80035e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80035ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ec:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80035ee:	bf58      	it	pl
 80035f0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80035f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
 80035f4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80035f6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 80035fc:	7008      	strb	r0, [r1, #0]

	return reason;
}
 80035fe:	4770      	bx	lr
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003604:	4b07      	ldr	r3, [pc, #28]	; (8003624 <usage_fault.isra.4+0x20>)
 8003606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800360a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800360c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800360e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8003610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8003612:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003614:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8003618:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800361c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 800361e:	2000      	movs	r0, #0
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
 8003628:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800362a:	4b36      	ldr	r3, [pc, #216]	; (8003704 <z_arm_fault+0xdc>)
 800362c:	685b      	ldr	r3, [r3, #4]
{
 800362e:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8003630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003634:	2500      	movs	r5, #0
 8003636:	f385 8811 	msr	BASEPRI, r5
 800363a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 800363e:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
 8003642:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
 8003646:	d112      	bne.n	800366e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8003648:	f002 040c 	and.w	r4, r2, #12
 800364c:	2c08      	cmp	r4, #8
 800364e:	d00e      	beq.n	800366e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8003650:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8003652:	bf4e      	itee	mi
 8003654:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
 8003656:	4606      	movpl	r6, r0
			*nested_exc = true;
 8003658:	2501      	movpl	r5, #1
	*recoverable = false;
 800365a:	2200      	movs	r2, #0
	switch (fault) {
 800365c:	3b03      	subs	r3, #3
	*recoverable = false;
 800365e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8003662:	2b03      	cmp	r3, #3
 8003664:	d847      	bhi.n	80036f6 <z_arm_fault+0xce>
 8003666:	e8df f003 	tbb	[pc, r3]
 800366a:	3e04      	.short	0x3e04
 800366c:	3b42      	.short	0x3b42
		return NULL;
 800366e:	462e      	mov	r6, r5
 8003670:	e7f3      	b.n	800365a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8003672:	4b24      	ldr	r3, [pc, #144]	; (8003704 <z_arm_fault+0xdc>)
 8003674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003676:	0792      	lsls	r2, r2, #30
 8003678:	d43d      	bmi.n	80036f6 <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800367a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800367c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8003680:	d008      	beq.n	8003694 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
 8003682:	3328      	adds	r3, #40	; 0x28
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	b1eb      	cbz	r3, 80036c4 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
 8003688:	f10d 0107 	add.w	r1, sp, #7
 800368c:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 800368e:	f7ff ff7f 	bl	8003590 <mem_manage_fault.isra.2>
		reason = usage_fault(esf);
 8003692:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8003694:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003698:	b993      	cbnz	r3, 80036c0 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800369a:	2220      	movs	r2, #32
 800369c:	4631      	mov	r1, r6
 800369e:	a802      	add	r0, sp, #8
 80036a0:	f004 fcd8 	bl	8008054 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80036a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036a6:	b345      	cbz	r5, 80036fa <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80036a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036ac:	b922      	cbnz	r2, 80036b8 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80036ae:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80036b2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80036b6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 80036b8:	a902      	add	r1, sp, #8
 80036ba:	4620      	mov	r0, r4
 80036bc:	f004 fbae 	bl	8007e1c <z_arm_fatal_error>
}
 80036c0:	b00a      	add	sp, #40	; 0x28
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
 80036c4:	4b10      	ldr	r3, [pc, #64]	; (8003708 <z_arm_fault+0xe0>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	b12b      	cbz	r3, 80036d6 <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
 80036ca:	f10d 0107 	add.w	r1, sp, #7
 80036ce:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 80036d0:	f7ff ff7a 	bl	80035c8 <bus_fault.isra.3>
 80036d4:	e7dd      	b.n	8003692 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
 80036d6:	4b0d      	ldr	r3, [pc, #52]	; (800370c <z_arm_fault+0xe4>)
 80036d8:	881c      	ldrh	r4, [r3, #0]
 80036da:	b2a4      	uxth	r4, r4
 80036dc:	2c00      	cmp	r4, #0
 80036de:	d0d9      	beq.n	8003694 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
 80036e0:	f7ff ff90 	bl	8003604 <usage_fault.isra.4>
 80036e4:	e7d5      	b.n	8003692 <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
 80036e6:	f10d 0107 	add.w	r1, sp, #7
 80036ea:	2000      	movs	r0, #0
 80036ec:	e7cf      	b.n	800368e <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
 80036ee:	f10d 0107 	add.w	r1, sp, #7
 80036f2:	2000      	movs	r0, #0
 80036f4:	e7ec      	b.n	80036d0 <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
 80036f6:	2400      	movs	r4, #0
 80036f8:	e7cc      	b.n	8003694 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80036fa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	e7d8      	b.n	80036b6 <z_arm_fault+0x8e>
 8003704:	e000ed00 	.word	0xe000ed00
 8003708:	e000ed29 	.word	0xe000ed29
 800370c:	e000ed2a 	.word	0xe000ed2a

08003710 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8003710:	4a02      	ldr	r2, [pc, #8]	; (800371c <z_arm_fault_init+0xc>)
 8003712:	6953      	ldr	r3, [r2, #20]
 8003714:	f043 0310 	orr.w	r3, r3, #16
 8003718:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 800371a:	4770      	bx	lr
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003720:	4804      	ldr	r0, [pc, #16]	; (8003734 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	2110      	movs	r1, #16
 8003726:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8003728:	3301      	adds	r3, #1
 800372a:	2b52      	cmp	r3, #82	; 0x52
 800372c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8003730:	d1f9      	bne.n	8003726 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8003732:	4770      	bx	lr
 8003734:	e000e100 	.word	0xe000e100

08003738 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4605      	mov	r5, r0
	__asm__ volatile(
 800373c:	f04f 0310 	mov.w	r3, #16
 8003740:	f3ef 8411 	mrs	r4, BASEPRI
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
 800374c:	f005 fa37 	bl	8008bbe <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <z_impl_k_thread_abort+0x44>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	42ab      	cmp	r3, r5
 8003756:	d10b      	bne.n	8003770 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <z_impl_k_thread_abort+0x48>)
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003760:	b912      	cbnz	r2, 8003768 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
 8003762:	4620      	mov	r0, r4
 8003764:	f7ff fdfe 	bl	8003364 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800376e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
 8003770:	4620      	mov	r0, r4
}
 8003772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
 8003776:	f005 b950 	b.w	8008a1a <z_reschedule_irqlock>
 800377a:	bf00      	nop
 800377c:	20000858 	.word	0x20000858
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8003784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <z_arm_configure_static_mpu_regions+0x24>)
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <z_arm_configure_static_mpu_regions+0x28>)
 800378c:	9302      	str	r3, [sp, #8]
 800378e:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <z_arm_configure_static_mpu_regions+0x2c>)
 8003790:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
 8003792:	ab01      	add	r3, sp, #4
 8003794:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8003796:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <z_arm_configure_static_mpu_regions+0x30>)
 8003798:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <z_arm_configure_static_mpu_regions+0x34>)
 800379a:	2101      	movs	r1, #1
 800379c:	4668      	mov	r0, sp
 800379e:	f000 f891 	bl	80038c4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 80037a2:	b005      	add	sp, #20
 80037a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80037a8:	20000000 	.word	0x20000000
 80037ac:	00000000 	.word	0x00000000
 80037b0:	060b0000 	.word	0x060b0000
 80037b4:	20000000 	.word	0x20000000
 80037b8:	20020000 	.word	0x20020000

080037bc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
 80037bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
		const struct arm_mpu_region *region_conf) {
	/* Select the region you want to access */
	MPU->RNR = index;
 80037be:	4f20      	ldr	r7, [pc, #128]	; (8003840 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 80037c0:	2600      	movs	r6, #0
 80037c2:	428e      	cmp	r6, r1
 80037c4:	db01      	blt.n	80037ca <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80037c6:	4610      	mov	r0, r2
 80037c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
 80037ca:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
 80037ce:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80037d2:	b394      	cbz	r4, 800383a <mpu_configure_regions+0x7e>
		if (do_sanity_check &&
 80037d4:	b15b      	cbz	r3, 80037ee <mpu_configure_regions+0x32>
	/* Partition size must be power-of-two,
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid = ((part->size & (part->size - 1)) == 0U)
 80037d6:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
			&& (part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
			&& ((part->start & (part->size - 1)) == 0U);
 80037da:	ea14 0f0e 	tst.w	r4, lr
 80037de:	d11a      	bne.n	8003816 <mpu_configure_regions+0x5a>
			&& (part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
 80037e0:	2c1f      	cmp	r4, #31
 80037e2:	d918      	bls.n	8003816 <mpu_configure_regions+0x5a>
			&& ((part->start & (part->size - 1)) == 0U);
 80037e4:	f8dc 5000 	ldr.w	r5, [ip]
 80037e8:	ea1e 0f05 	tst.w	lr, r5
 80037ec:	d113      	bne.n	8003816 <mpu_configure_regions+0x5a>
 * power-of-two value, and the returned SIZE field value corresponds
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size) {
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80037ee:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 80037f0:	f8dc 5000 	ldr.w	r5, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
 80037f4:	f8dc c008 	ldr.w	ip, [ip, #8]
		reg_index = mpu_configure_region(reg_index, regions[i]);
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	d90f      	bls.n	800381c <mpu_configure_regions+0x60>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
 80037fc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003800:	d80e      	bhi.n	8003820 <mpu_configure_regions+0x64>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos)
 8003802:	3c01      	subs	r4, #1
 8003804:	fab4 f484 	clz	r4, r4
 8003808:	f1c4 041f 	rsb	r4, r4, #31
 800380c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
 800380e:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8003810:	ea4c 0404 	orr.w	r4, ip, r4
 8003814:	d906      	bls.n	8003824 <mpu_configure_regions+0x68>
			return -EINVAL;
 8003816:	f06f 0215 	mvn.w	r2, #21
 800381a:	e7d4      	b.n	80037c6 <mpu_configure_regions+0xa>
		return REGION_32B;
 800381c:	2408      	movs	r4, #8
 800381e:	e7f6      	b.n	800380e <mpu_configure_regions+0x52>
		return REGION_4G;
 8003820:	243e      	movs	r4, #62	; 0x3e
 8003822:	e7f4      	b.n	800380e <mpu_configure_regions+0x52>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk) | MPU_RBAR_VALID_Msk
 8003824:	f025 051f 	bic.w	r5, r5, #31
			| index;
 8003828:	4315      	orrs	r5, r2
 800382a:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800382e:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 8003832:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk) | MPU_RBAR_VALID_Msk
 8003834:	60fd      	str	r5, [r7, #12]
		reg_index++;
 8003836:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8003838:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
 800383a:	3601      	adds	r6, #1
 800383c:	e7c1      	b.n	80037c2 <mpu_configure_regions+0x6>
 800383e:	bf00      	nop
 8003840:	e000ed90 	.word	0xe000ed90

08003844 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <arm_core_mpu_enable+0x10>)
 8003846:	2205      	movs	r2, #5
 8003848:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800384a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800384e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8003852:	4770      	bx	lr
 8003854:	e000ed90 	.word	0xe000ed90

08003858 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003858:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 800385c:	4b01      	ldr	r3, [pc, #4]	; (8003864 <arm_core_mpu_disable+0xc>)
 800385e:	2200      	movs	r2, #0
 8003860:	605a      	str	r2, [r3, #4]
}
 8003862:	4770      	bx	lr
 8003864:	e000ed90 	.word	0xe000ed90

08003868 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8003868:	4913      	ldr	r1, [pc, #76]	; (80038b8 <arm_mpu_init+0x50>)
 800386a:	6808      	ldr	r0, [r1, #0]
 800386c:	2808      	cmp	r0, #8
{
 800386e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8003870:	d81e      	bhi.n	80038b0 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8003872:	f7ff fff1 	bl	8003858 <arm_core_mpu_disable>
	MPU->RNR = index;
 8003876:	4c11      	ldr	r4, [pc, #68]	; (80038bc <arm_mpu_init+0x54>)
 8003878:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800387a:	2200      	movs	r2, #0
 800387c:	4290      	cmp	r0, r2
 800387e:	f101 010c 	add.w	r1, r1, #12
 8003882:	d105      	bne.n	8003890 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8003884:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <arm_mpu_init+0x58>)
 8003886:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8003888:	f7ff ffdc 	bl	8003844 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
 800388c:	2000      	movs	r0, #0
}
 800388e:	bd10      	pop	{r4, pc}
 8003890:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk) | MPU_RBAR_VALID_Msk
 8003892:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8003896:	f023 031f 	bic.w	r3, r3, #31
			| index;
 800389a:	4313      	orrs	r3, r2
 800389c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk) | MPU_RBAR_VALID_Msk
 80038a0:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80038a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80038ac:	3201      	adds	r2, #1
 80038ae:	e7e5      	b.n	800387c <arm_mpu_init+0x14>
		return -1;
 80038b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038b4:	e7eb      	b.n	800388e <arm_mpu_init+0x26>
 80038b6:	bf00      	nop
 80038b8:	0800969c 	.word	0x0800969c
 80038bc:	e000ed90 	.word	0xe000ed90
 80038c0:	2000097a 	.word	0x2000097a

080038c4 <arm_core_mpu_configure_static_mpu_regions>:
{
 80038c4:	b510      	push	{r4, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_static_mpu_regions(
		const struct k_mem_partition *static_regions[], const u8_t regions_num,
		const u32_t background_area_base, const u32_t background_area_end) {
	int mpu_reg_index = static_regions_num;
 80038c6:	4c03      	ldr	r4, [pc, #12]	; (80038d4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions, regions_num,
 80038c8:	2301      	movs	r3, #1
 80038ca:	7822      	ldrb	r2, [r4, #0]
 80038cc:	f7ff ff76 	bl	80037bc <mpu_configure_regions>
			mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80038d0:	7020      	strb	r0, [r4, #0]
}
 80038d2:	bd10      	pop	{r4, pc}
 80038d4:	2000097a 	.word	0x2000097a

080038d8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 80038d8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions, regions_num,
 80038da:	4a08      	ldr	r2, [pc, #32]	; (80038fc <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
 80038dc:	2300      	movs	r3, #0
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	f7ff ff6c 	bl	80037bc <mpu_configure_regions>
			mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80038e4:	f110 0f16 	cmn.w	r0, #22
 80038e8:	d003      	beq.n	80038f2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
 80038ec:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 80038ee:	2807      	cmp	r0, #7
 80038f0:	dd00      	ble.n	80038f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
 80038f2:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 80038f4:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
 80038f6:	611a      	str	r2, [r3, #16]
 80038f8:	3001      	adds	r0, #1
 80038fa:	e7f8      	b.n	80038ee <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 80038fc:	2000097a 	.word	0x2000097a
 8003900:	e000ed90 	.word	0xe000ed90

08003904 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
 8003904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003908:	b09f      	sub	sp, #124	; 0x7c
 800390a:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
 800390c:	2300      	movs	r3, #0
{
 800390e:	9001      	str	r0, [sp, #4]
 8003910:	9104      	str	r1, [sp, #16]
	count = 0;
 8003912:	9300      	str	r3, [sp, #0]

	while ((c = *format++)) {
 8003914:	4613      	mov	r3, r2
 8003916:	f813 0b01 	ldrb.w	r0, [r3], #1
 800391a:	9305      	str	r3, [sp, #20]
 800391c:	b158      	cbz	r0, 8003936 <z_prf+0x32>
		if (c != '%') {
 800391e:	2825      	cmp	r0, #37	; 0x25
 8003920:	f000 8085 	beq.w	8003a2e <z_prf+0x12a>
			PUTC(c);
 8003924:	9904      	ldr	r1, [sp, #16]
 8003926:	9b01      	ldr	r3, [sp, #4]
 8003928:	4798      	blx	r3
 800392a:	3001      	adds	r0, #1
 800392c:	f040 840d 	bne.w	800414a <z_prf+0x846>
 8003930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003934:	9300      	str	r3, [sp, #0]
		}
	}
	return count;

#undef PUTC
}
 8003936:	9800      	ldr	r0, [sp, #0]
 8003938:	b01f      	add	sp, #124	; 0x7c
 800393a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
 800393e:	2c23      	cmp	r4, #35	; 0x23
 8003940:	d06c      	beq.n	8003a1c <z_prf+0x118>
 8003942:	d861      	bhi.n	8003a08 <z_prf+0x104>
 8003944:	2c00      	cmp	r4, #0
 8003946:	d0f6      	beq.n	8003936 <z_prf+0x32>
					fspace = true;
 8003948:	2c20      	cmp	r4, #32
 800394a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800394c:	bf08      	it	eq
 800394e:	2301      	moveq	r3, #1
 8003950:	930a      	str	r3, [sp, #40]	; 0x28
					fminus = true;
 8003952:	f8cd 8014 	str.w	r8, [sp, #20]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
 8003956:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800395a:	48b9      	ldr	r0, [pc, #740]	; (8003c40 <z_prf+0x33c>)
 800395c:	f818 4b01 	ldrb.w	r4, [r8], #1
 8003960:	4621      	mov	r1, r4
 8003962:	f004 fb20 	bl	8007fa6 <strchr>
 8003966:	2800      	cmp	r0, #0
 8003968:	d1e9      	bne.n	800393e <z_prf+0x3a>
			if (c == '*') {
 800396a:	2c2a      	cmp	r4, #42	; 0x2a
 800396c:	d166      	bne.n	8003a3c <z_prf+0x138>
				width = va_arg(vargs, int);
 800396e:	f856 3b04 	ldr.w	r3, [r6], #4
 8003972:	9307      	str	r3, [sp, #28]
				if (width < 0) {
 8003974:	2b00      	cmp	r3, #0
					width = -width;
 8003976:	bfbf      	itttt	lt
 8003978:	425b      	neglt	r3, r3
 800397a:	9307      	strlt	r3, [sp, #28]
					fminus = true;
 800397c:	2301      	movlt	r3, #1
 800397e:	930b      	strlt	r3, [sp, #44]	; 0x2c
				c = *format++;
 8003980:	9b05      	ldr	r3, [sp, #20]
 8003982:	f898 4000 	ldrb.w	r4, [r8]
 8003986:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
 800398a:	2c2e      	cmp	r4, #46	; 0x2e
 800398c:	d17c      	bne.n	8003a88 <z_prf+0x184>
				if (c == '*') {
 800398e:	f898 3000 	ldrb.w	r3, [r8]
 8003992:	2b2a      	cmp	r3, #42	; 0x2a
 8003994:	d175      	bne.n	8003a82 <z_prf+0x17e>
					precision = va_arg(vargs, int);
 8003996:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
 800399a:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
 800399e:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
 80039a2:	48a8      	ldr	r0, [pc, #672]	; (8003c44 <z_prf+0x340>)
 80039a4:	4621      	mov	r1, r4
 80039a6:	4627      	mov	r7, r4
 80039a8:	f004 fafd 	bl	8007fa6 <strchr>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d06e      	beq.n	8003a8e <z_prf+0x18a>
				c = *format++;
 80039b0:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
 80039b2:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
 80039b4:	f813 4b01 	ldrb.w	r4, [r3], #1
 80039b8:	9305      	str	r3, [sp, #20]
				} else if (i == 'h' && c == 'h') {
 80039ba:	d107      	bne.n	80039cc <z_prf+0xc8>
 80039bc:	2c68      	cmp	r4, #104	; 0x68
 80039be:	d105      	bne.n	80039cc <z_prf+0xc8>
					c = *format++;
 80039c0:	f108 0302 	add.w	r3, r8, #2
 80039c4:	f898 4001 	ldrb.w	r4, [r8, #1]
 80039c8:	9305      	str	r3, [sp, #20]
					i = 'H';
 80039ca:	2748      	movs	r7, #72	; 0x48
			switch (c) {
 80039cc:	2c67      	cmp	r4, #103	; 0x67
 80039ce:	d87c      	bhi.n	8003aca <z_prf+0x1c6>
 80039d0:	2c65      	cmp	r4, #101	; 0x65
 80039d2:	f080 8139 	bcs.w	8003c48 <z_prf+0x344>
 80039d6:	2c47      	cmp	r4, #71	; 0x47
 80039d8:	d85d      	bhi.n	8003a96 <z_prf+0x192>
 80039da:	2c45      	cmp	r4, #69	; 0x45
 80039dc:	f080 8134 	bcs.w	8003c48 <z_prf+0x344>
 80039e0:	2c00      	cmp	r4, #0
 80039e2:	d0a8      	beq.n	8003936 <z_prf+0x32>
 80039e4:	2c25      	cmp	r4, #37	; 0x25
 80039e6:	f000 83ac 	beq.w	8004142 <z_prf+0x83e>
				PUTC('%');
 80039ea:	9904      	ldr	r1, [sp, #16]
 80039ec:	9b01      	ldr	r3, [sp, #4]
 80039ee:	2025      	movs	r0, #37	; 0x25
 80039f0:	4798      	blx	r3
 80039f2:	3001      	adds	r0, #1
 80039f4:	d09c      	beq.n	8003930 <z_prf+0x2c>
				PUTC(c);
 80039f6:	9904      	ldr	r1, [sp, #16]
 80039f8:	9b01      	ldr	r3, [sp, #4]
 80039fa:	4620      	mov	r0, r4
 80039fc:	4798      	blx	r3
 80039fe:	3001      	adds	r0, #1
 8003a00:	d096      	beq.n	8003930 <z_prf+0x2c>
				count += 2;
 8003a02:	9b00      	ldr	r3, [sp, #0]
 8003a04:	3302      	adds	r3, #2
 8003a06:	e3a2      	b.n	800414e <z_prf+0x84a>
				switch (c) {
 8003a08:	2c2d      	cmp	r4, #45	; 0x2d
 8003a0a:	d00a      	beq.n	8003a22 <z_prf+0x11e>
 8003a0c:	2c30      	cmp	r4, #48	; 0x30
 8003a0e:	d00b      	beq.n	8003a28 <z_prf+0x124>
					fplus = true;
 8003a10:	2c2b      	cmp	r4, #43	; 0x2b
 8003a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a14:	bf08      	it	eq
 8003a16:	2301      	moveq	r3, #1
 8003a18:	9309      	str	r3, [sp, #36]	; 0x24
 8003a1a:	e79a      	b.n	8003952 <z_prf+0x4e>
					falt = true;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	9306      	str	r3, [sp, #24]
 8003a20:	e797      	b.n	8003952 <z_prf+0x4e>
					fminus = true;
 8003a22:	2301      	movs	r3, #1
 8003a24:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a26:	e794      	b.n	8003952 <z_prf+0x4e>
					fzero = true;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	9308      	str	r3, [sp, #32]
 8003a2c:	e791      	b.n	8003952 <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9308      	str	r3, [sp, #32]
 8003a32:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8003a36:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a38:	9306      	str	r3, [sp, #24]
 8003a3a:	e78c      	b.n	8003956 <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8003a3c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
 8003a40:	2b09      	cmp	r3, #9
				width = 0;
 8003a42:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
 8003a44:	d8a1      	bhi.n	800398a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
 8003a46:	220a      	movs	r2, #10
	while (isdigit(*p)) {
 8003a48:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8003a4c:	f818 4b01 	ldrb.w	r4, [r8], #1
 8003a50:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003a54:	2b09      	cmp	r3, #9
 8003a56:	d898      	bhi.n	800398a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
 8003a58:	9b07      	ldr	r3, [sp, #28]
 8003a5a:	f8cd 8014 	str.w	r8, [sp, #20]
 8003a5e:	fb02 4403 	mla	r4, r2, r3, r4
 8003a62:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003a66:	9307      	str	r3, [sp, #28]
 8003a68:	e7ee      	b.n	8003a48 <z_prf+0x144>
 8003a6a:	fb01 3505 	mla	r5, r1, r5, r3
 8003a6e:	3d30      	subs	r5, #48	; 0x30
 8003a70:	4690      	mov	r8, r2
	while (isdigit(*p)) {
 8003a72:	4642      	mov	r2, r8
 8003a74:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003a78:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8003a7c:	2809      	cmp	r0, #9
 8003a7e:	d9f4      	bls.n	8003a6a <z_prf+0x166>
 8003a80:	e78d      	b.n	800399e <z_prf+0x9a>
	int i = 0;
 8003a82:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
 8003a84:	210a      	movs	r1, #10
 8003a86:	e7f4      	b.n	8003a72 <z_prf+0x16e>
			precision = -1;
 8003a88:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003a8c:	e789      	b.n	80039a2 <z_prf+0x9e>
 8003a8e:	f8cd 8014 	str.w	r8, [sp, #20]
			i = 0;
 8003a92:	4607      	mov	r7, r0
 8003a94:	e79a      	b.n	80039cc <z_prf+0xc8>
			switch (c) {
 8003a96:	2c63      	cmp	r4, #99	; 0x63
 8003a98:	d05a      	beq.n	8003b50 <z_prf+0x24c>
 8003a9a:	d820      	bhi.n	8003ade <z_prf+0x1da>
 8003a9c:	2c58      	cmp	r4, #88	; 0x58
 8003a9e:	d1a4      	bne.n	80039ea <z_prf+0xe6>
				if (c == 'o') {
 8003aa0:	2c6f      	cmp	r4, #111	; 0x6f
 8003aa2:	f106 0904 	add.w	r9, r6, #4
 8003aa6:	6831      	ldr	r1, [r6, #0]
 8003aa8:	f040 831c 	bne.w	80040e4 <z_prf+0x7e0>
	if (alt_form) {
 8003aac:	9b06      	ldr	r3, [sp, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 830a 	beq.w	80040c8 <z_prf+0x7c4>
		*buf++ = '0';
 8003ab4:	2330      	movs	r3, #48	; 0x30
 8003ab6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		if (!value) {
 8003aba:	2900      	cmp	r1, #0
 8003abc:	f040 830f 	bne.w	80040de <z_prf+0x7da>
			*buf++ = 0;
 8003ac0:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
			prefix = 0;
 8003ac4:	4688      	mov	r8, r1
			return 1;
 8003ac6:	2601      	movs	r6, #1
 8003ac8:	e026      	b.n	8003b18 <z_prf+0x214>
			switch (c) {
 8003aca:	2c70      	cmp	r4, #112	; 0x70
 8003acc:	f000 82e7 	beq.w	800409e <z_prf+0x79a>
 8003ad0:	d828      	bhi.n	8003b24 <z_prf+0x220>
 8003ad2:	2c6e      	cmp	r4, #110	; 0x6e
 8003ad4:	f000 82d0 	beq.w	8004078 <z_prf+0x774>
 8003ad8:	d8e2      	bhi.n	8003aa0 <z_prf+0x19c>
 8003ada:	2c69      	cmp	r4, #105	; 0x69
 8003adc:	d185      	bne.n	80039ea <z_prf+0xe6>
				switch (i) {
 8003ade:	6834      	ldr	r4, [r6, #0]
	if (value < 0) {
 8003ae0:	2c00      	cmp	r4, #0
 8003ae2:	f106 0904 	add.w	r9, r6, #4
 8003ae6:	f280 809c 	bge.w	8003c22 <z_prf+0x31e>
		*buf++ = '-';
 8003aea:	232d      	movs	r3, #45	; 0x2d
 8003aec:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		value = -value;
 8003af0:	4261      	negs	r1, r4
		*buf++ = ' ';
 8003af2:	f10d 065d 	add.w	r6, sp, #93	; 0x5d
	return _to_x(buf, value, 10);
 8003af6:	4630      	mov	r0, r6
 8003af8:	220a      	movs	r2, #10
 8003afa:	f004 faf7 	bl	80080ec <_to_x>
				if (fplus || fspace || val < 0) {
 8003afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
 8003b00:	4406      	add	r6, r0
 8003b02:	a817      	add	r0, sp, #92	; 0x5c
 8003b04:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 8324 	bne.w	8004154 <z_prf+0x850>
 8003b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f040 8320 	bne.w	8004154 <z_prf+0x850>
 8003b14:	ea4f 78d4 	mov.w	r8, r4, lsr #31
			if (precision >= 0) {
 8003b18:	2d00      	cmp	r5, #0
 8003b1a:	da22      	bge.n	8003b62 <z_prf+0x25e>
			zero.predot = zero.postdot = zero.trail = 0;
 8003b1c:	2500      	movs	r5, #0
 8003b1e:	462f      	mov	r7, r5
 8003b20:	46aa      	mov	sl, r5
 8003b22:	e0e5      	b.n	8003cf0 <z_prf+0x3ec>
			switch (c) {
 8003b24:	2c75      	cmp	r4, #117	; 0x75
 8003b26:	d0bb      	beq.n	8003aa0 <z_prf+0x19c>
 8003b28:	2c78      	cmp	r4, #120	; 0x78
 8003b2a:	d0b9      	beq.n	8003aa0 <z_prf+0x19c>
 8003b2c:	2c73      	cmp	r4, #115	; 0x73
 8003b2e:	f47f af5c 	bne.w	80039ea <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
 8003b32:	46b1      	mov	r9, r6
					precision = INT_MAX;
 8003b34:	2d00      	cmp	r5, #0
				cptr = va_arg(vargs, char *);
 8003b36:	f859 3b04 	ldr.w	r3, [r9], #4
					precision = INT_MAX;
 8003b3a:	bfb8      	it	lt
 8003b3c:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
 8003b40:	2600      	movs	r6, #0
 8003b42:	42b5      	cmp	r5, r6
 8003b44:	f040 82bb 	bne.w	80040be <z_prf+0x7ba>
 8003b48:	462e      	mov	r6, r5
 8003b4a:	2500      	movs	r5, #0
 8003b4c:	46a8      	mov	r8, r5
 8003b4e:	e009      	b.n	8003b64 <z_prf+0x260>
				buf[0] = va_arg(vargs, int);
 8003b50:	46b1      	mov	r9, r6
				break;
 8003b52:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
 8003b56:	f859 3b04 	ldr.w	r3, [r9], #4
 8003b5a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
				clen = 1;
 8003b5e:	2601      	movs	r6, #1
				break;
 8003b60:	4645      	mov	r5, r8
 8003b62:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = precision - clen + prefix;
 8003b64:	eb05 0208 	add.w	r2, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
 8003b68:	2500      	movs	r5, #0
				zero_head = precision - clen + prefix;
 8003b6a:	1b92      	subs	r2, r2, r6
			zero.predot = zero.postdot = zero.trail = 0;
 8003b6c:	462f      	mov	r7, r5
 8003b6e:	46aa      	mov	sl, r5
			if (zero_head < 0) {
 8003b70:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
 8003b74:	1991      	adds	r1, r2, r6
 8003b76:	9106      	str	r1, [sp, #24]
 8003b78:	9907      	ldr	r1, [sp, #28]
 8003b7a:	1990      	adds	r0, r2, r6
 8003b7c:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
 8003b7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b80:	b911      	cbnz	r1, 8003b88 <z_prf+0x284>
 8003b82:	2c00      	cmp	r4, #0
 8003b84:	f300 8304 	bgt.w	8004190 <z_prf+0x88c>
			while (prefix-- > 0) {
 8003b88:	eb03 0b08 	add.w	fp, r3, r8
 8003b8c:	455b      	cmp	r3, fp
 8003b8e:	f040 8301 	bne.w	8004194 <z_prf+0x890>
			while (zero_head-- > 0) {
 8003b92:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8003b96:	f080 830d 	bcs.w	80041b4 <z_prf+0x8b0>
			clen -= prefix;
 8003b9a:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
 8003b9e:	f1ba 0f00 	cmp.w	sl, #0
 8003ba2:	d011      	beq.n	8003bc8 <z_prf+0x2c4>
				c = *cptr;
 8003ba4:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c)) {
 8003ba8:	eb0b 0806 	add.w	r8, fp, r6
 8003bac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003bb0:	2b09      	cmp	r3, #9
 8003bb2:	eba8 060b 	sub.w	r6, r8, fp
 8003bb6:	f240 8308 	bls.w	80041ca <z_prf+0x8c6>
 8003bba:	46d0      	mov	r8, sl
				while (zero.predot-- > 0) {
 8003bbc:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
 8003bc0:	f080 830c 	bcs.w	80041dc <z_prf+0x8d8>
				clen -= zero.predot;
 8003bc4:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.postdot) {
 8003bc8:	b1af      	cbz	r7, 8003bf6 <z_prf+0x2f2>
 8003bca:	eb0b 0806 	add.w	r8, fp, r6
					c = *cptr++;
 8003bce:	f81b ab01 	ldrb.w	sl, [fp], #1
					PUTC(c);
 8003bd2:	9904      	ldr	r1, [sp, #16]
 8003bd4:	9b01      	ldr	r3, [sp, #4]
 8003bd6:	4650      	mov	r0, sl
 8003bd8:	4798      	blx	r3
 8003bda:	3001      	adds	r0, #1
 8003bdc:	f43f aea8 	beq.w	8003930 <z_prf+0x2c>
				} while (c != '.');
 8003be0:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
 8003be4:	eba8 060b 	sub.w	r6, r8, fp
 8003be8:	d1f1      	bne.n	8003bce <z_prf+0x2ca>
				while (zero.postdot-- > 0) {
 8003bea:	46b8      	mov	r8, r7
 8003bec:	f1b8 0f00 	cmp.w	r8, #0
 8003bf0:	f300 82fd 	bgt.w	80041ee <z_prf+0x8ea>
				clen -= zero.postdot;
 8003bf4:	1bf6      	subs	r6, r6, r7
			if (zero.trail) {
 8003bf6:	b195      	cbz	r5, 8003c1e <z_prf+0x31a>
				c = *cptr;
 8003bf8:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c) || c == '.') {
 8003bfc:	eb0b 0806 	add.w	r8, fp, r6
 8003c00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003c04:	2b09      	cmp	r3, #9
 8003c06:	eba8 060b 	sub.w	r6, r8, fp
 8003c0a:	f240 82fb 	bls.w	8004204 <z_prf+0x900>
 8003c0e:	282e      	cmp	r0, #46	; 0x2e
 8003c10:	f000 82f8 	beq.w	8004204 <z_prf+0x900>
				while (zero.trail-- > 0) {
 8003c14:	462f      	mov	r7, r5
 8003c16:	2f00      	cmp	r7, #0
 8003c18:	f300 82fd 	bgt.w	8004216 <z_prf+0x912>
				clen -= zero.trail;
 8003c1c:	1b76      	subs	r6, r6, r5
 8003c1e:	445e      	add	r6, fp
 8003c20:	e30c      	b.n	800423c <z_prf+0x938>
	} else if (fplus) {
 8003c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c24:	b123      	cbz	r3, 8003c30 <z_prf+0x32c>
		*buf++ = '+';
 8003c26:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
 8003c28:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	e760      	b.n	8003af2 <z_prf+0x1ee>
	} else if (fspace) {
 8003c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c32:	b10b      	cbz	r3, 8003c38 <z_prf+0x334>
		*buf++ = ' ';
 8003c34:	2320      	movs	r3, #32
 8003c36:	e7f7      	b.n	8003c28 <z_prf+0x324>
	} else if (fspace) {
 8003c38:	4621      	mov	r1, r4
 8003c3a:	ae17      	add	r6, sp, #92	; 0x5c
 8003c3c:	e75b      	b.n	8003af6 <z_prf+0x1f2>
 8003c3e:	bf00      	nop
 8003c40:	0800a5e8 	.word	0x0800a5e8
 8003c44:	0800a5ee 	.word	0x0800a5ee
				u.d = va_arg(vargs, double);
 8003c48:	f106 0907 	add.w	r9, r6, #7
 8003c4c:	f029 0907 	bic.w	r9, r9, #7
 8003c50:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
 8003c54:	02d8      	lsls	r0, r3, #11
 8003c56:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
 8003c5a:	02d6      	lsls	r6, r2, #11
 8003c5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c60:	9602      	str	r6, [sp, #8]
 8003c62:	9003      	str	r0, [sp, #12]
 8003c64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
	if (sign) {
 8003c68:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
 8003c6a:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
 8003c6e:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
 8003c72:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	if (sign) {
 8003c76:	da43      	bge.n	8003d00 <z_prf+0x3fc>
		*buf++ = '-';
 8003c78:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
 8003c7a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8003c7e:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
	if (exp == 0x7ff) {
 8003c82:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003c86:	4299      	cmp	r1, r3
 8003c88:	d155      	bne.n	8003d36 <z_prf+0x432>
		if (!fract) {
 8003c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
 8003c94:	f107 0b03 	add.w	fp, r7, #3
 8003c98:	d142      	bne.n	8003d20 <z_prf+0x41c>
			if (isupper(c)) {
 8003c9a:	2c19      	cmp	r4, #25
 8003c9c:	d83a      	bhi.n	8003d14 <z_prf+0x410>
				*buf++ = 'I';
 8003c9e:	2349      	movs	r3, #73	; 0x49
 8003ca0:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
 8003ca2:	234e      	movs	r3, #78	; 0x4e
 8003ca4:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
 8003ca6:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
 8003ca8:	2500      	movs	r5, #0
		return buf - start;
 8003caa:	ae17      	add	r6, sp, #92	; 0x5c
				*buf++ = 'n';
 8003cac:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
 8003cae:	70fd      	strb	r5, [r7, #3]
		return buf - start;
 8003cb0:	ebab 0b06 	sub.w	fp, fp, r6
			zero.predot = zero.postdot = zero.trail = 0;
 8003cb4:	462f      	mov	r7, r5
 8003cb6:	46aa      	mov	sl, r5
				if (fplus || fspace || (buf[0] == '-')) {
 8003cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f040 81d9 	bne.w	8004072 <z_prf+0x76e>
 8003cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 81d5 	bne.w	8004072 <z_prf+0x76e>
 8003cc8:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
 8003ccc:	f1a8 032d 	sub.w	r3, r8, #45	; 0x2d
 8003cd0:	f1d3 0800 	rsbs	r8, r3, #0
 8003cd4:	eb48 0803 	adc.w	r8, r8, r3
				if (!isdigit(buf[prefix])) {
 8003cd8:	ab1e      	add	r3, sp, #120	; 0x78
 8003cda:	4443      	add	r3, r8
				clen += zero.predot + zero.postdot + zero.trail;
 8003cdc:	44bb      	add	fp, r7
 8003cde:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8003ce2:	3b30      	subs	r3, #48	; 0x30
 8003ce4:	eb0b 060a 	add.w	r6, fp, sl
				if (!isdigit(buf[prefix])) {
 8003ce8:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
 8003cea:	442e      	add	r6, r5
				if (!isdigit(buf[prefix])) {
 8003cec:	f200 8237 	bhi.w	800415e <z_prf+0x85a>
			} else if (fzero) {
 8003cf0:	9b08      	ldr	r3, [sp, #32]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8236 	beq.w	8004164 <z_prf+0x860>
 8003cf8:	9b07      	ldr	r3, [sp, #28]
 8003cfa:	1b9a      	subs	r2, r3, r6
 8003cfc:	ab17      	add	r3, sp, #92	; 0x5c
 8003cfe:	e737      	b.n	8003b70 <z_prf+0x26c>
	} else if (fplus) {
 8003d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d02:	b10b      	cbz	r3, 8003d08 <z_prf+0x404>
		*buf++ = '+';
 8003d04:	232b      	movs	r3, #43	; 0x2b
 8003d06:	e7b8      	b.n	8003c7a <z_prf+0x376>
	} else if (fspace) {
 8003d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d0a:	b10b      	cbz	r3, 8003d10 <z_prf+0x40c>
		*buf++ = ' ';
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	e7b4      	b.n	8003c7a <z_prf+0x376>
	} else if (fspace) {
 8003d10:	af17      	add	r7, sp, #92	; 0x5c
 8003d12:	e7b6      	b.n	8003c82 <z_prf+0x37e>
				*buf++ = 'i';
 8003d14:	2369      	movs	r3, #105	; 0x69
 8003d16:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
 8003d18:	236e      	movs	r3, #110	; 0x6e
 8003d1a:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
 8003d1c:	2366      	movs	r3, #102	; 0x66
 8003d1e:	e7c3      	b.n	8003ca8 <z_prf+0x3a4>
			if (isupper(c)) {
 8003d20:	2c19      	cmp	r4, #25
				*buf++ = 'N';
 8003d22:	bf99      	ittee	ls
 8003d24:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
 8003d26:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
 8003d28:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
 8003d2a:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
 8003d2c:	bf94      	ite	ls
 8003d2e:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
 8003d30:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
 8003d32:	707a      	strb	r2, [r7, #1]
 8003d34:	e7b8      	b.n	8003ca8 <z_prf+0x3a4>
	if ((exp | fract) != 0) {
 8003d36:	9b02      	ldr	r3, [sp, #8]
 8003d38:	9803      	ldr	r0, [sp, #12]
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	930c      	str	r3, [sp, #48]	; 0x30
 8003d3e:	17cb      	asrs	r3, r1, #31
 8003d40:	4303      	orrs	r3, r0
 8003d42:	930d      	str	r3, [sp, #52]	; 0x34
 8003d44:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
		c = 'f';
 8003d48:	2c46      	cmp	r4, #70	; 0x46
 8003d4a:	bf08      	it	eq
 8003d4c:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f000 80ff 	beq.w	8003f52 <z_prf+0x64e>
		if (exp == 0) {
 8003d54:	2900      	cmp	r1, #0
 8003d56:	f000 809f 	beq.w	8003e98 <z_prf+0x594>
		fract |= HIGHBIT64;
 8003d5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
 8003d60:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
 8003d64:	9313      	str	r3, [sp, #76]	; 0x4c
 8003d66:	2600      	movs	r6, #0
	while (exp <= -3) {
 8003d68:	f118 0f02 	cmn.w	r8, #2
 8003d6c:	f2c0 80a8 	blt.w	8003ec0 <z_prf+0x5bc>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8003d70:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8003d74:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
 8003d78:	f1b8 0f00 	cmp.w	r8, #0
 8003d7c:	f300 80cc 	bgt.w	8003f18 <z_prf+0x614>
		_rlrshift(&fract);
 8003d80:	a812      	add	r0, sp, #72	; 0x48
		exp++;
 8003d82:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
 8003d86:	f004 f9d3 	bl	8008130 <_rlrshift>
	while (exp < (0 + 4)) {
 8003d8a:	f1b8 0f04 	cmp.w	r8, #4
 8003d8e:	d1f7      	bne.n	8003d80 <z_prf+0x47c>
		precision = 6;		/* Default precision if none given */
 8003d90:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
 8003d92:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
 8003d96:	bfb8      	it	lt
 8003d98:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
 8003d9a:	2b47      	cmp	r3, #71	; 0x47
 8003d9c:	f040 80e1 	bne.w	8003f62 <z_prf+0x65e>
		if (decexp < (-4 + 1) || decexp > precision) {
 8003da0:	1cf2      	adds	r2, r6, #3
 8003da2:	db02      	blt.n	8003daa <z_prf+0x4a6>
 8003da4:	42ae      	cmp	r6, r5
 8003da6:	f340 80d7 	ble.w	8003f58 <z_prf+0x654>
			c += 'e' - 'g';
 8003daa:	3c02      	subs	r4, #2
 8003dac:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
 8003dae:	2d00      	cmp	r5, #0
 8003db0:	f000 80dd 	beq.w	8003f6e <z_prf+0x66a>
		if (!falt && (precision > 0)) {
 8003db4:	9b06      	ldr	r3, [sp, #24]
				precision--;
 8003db6:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f040 80d8 	bne.w	8003f6e <z_prf+0x66a>
 8003dbe:	2d00      	cmp	r5, #0
 8003dc0:	bfd4      	ite	le
 8003dc2:	f04f 0800 	movle.w	r8, #0
 8003dc6:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
 8003dca:	2c66      	cmp	r4, #102	; 0x66
 8003dcc:	f040 80d1 	bne.w	8003f72 <z_prf+0x66e>
		if (exp < 0) {
 8003dd0:	eb16 0a05 	adds.w	sl, r6, r5
 8003dd4:	f140 80d5 	bpl.w	8003f82 <z_prf+0x67e>
	digit_count = 16;
 8003dd8:	2310      	movs	r3, #16
 8003dda:	9311      	str	r3, [sp, #68]	; 0x44
 8003ddc:	2466      	movs	r4, #102	; 0x66
			exp = 0;
 8003dde:	f04f 0a00 	mov.w	sl, #0
	ltemp = 0x0800000000000000;
 8003de2:	2200      	movs	r2, #0
 8003de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003de8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
 8003dec:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
 8003df0:	f080 80c9 	bcs.w	8003f86 <z_prf+0x682>
	fract += ltemp;
 8003df4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003df6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003df8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003dfa:	189b      	adds	r3, r3, r2
 8003dfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003dfe:	eb41 0202 	adc.w	r2, r1, r2
 8003e02:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & 0xF0000000) {
 8003e06:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
 8003e0a:	930e      	str	r3, [sp, #56]	; 0x38
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003e14:	4313      	orrs	r3, r2
 8003e16:	d006      	beq.n	8003e26 <z_prf+0x522>
		_ldiv5(&fract);
 8003e18:	a812      	add	r0, sp, #72	; 0x48
 8003e1a:	f004 f99b 	bl	8008154 <_ldiv5>
		_rlrshift(&fract);
 8003e1e:	a812      	add	r0, sp, #72	; 0x48
 8003e20:	f004 f986 	bl	8008130 <_rlrshift>
		decexp++;
 8003e24:	3601      	adds	r6, #1
	if (c == 'f') {
 8003e26:	2c66      	cmp	r4, #102	; 0x66
 8003e28:	f040 80c7 	bne.w	8003fba <z_prf+0x6b6>
		if (decexp > 0) {
 8003e2c:	2e00      	cmp	r6, #0
 8003e2e:	f340 80b1 	ble.w	8003f94 <z_prf+0x690>
			while (decexp > 0 && digit_count > 0) {
 8003e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	dd07      	ble.n	8003e48 <z_prf+0x544>
				*buf++ = _get_digit(&fract, &digit_count);
 8003e38:	a911      	add	r1, sp, #68	; 0x44
 8003e3a:	a812      	add	r0, sp, #72	; 0x48
 8003e3c:	f004 f9b6 	bl	80081ac <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 8003e40:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
 8003e42:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
 8003e46:	d1f4      	bne.n	8003e32 <z_prf+0x52e>
			zp->predot = decexp;
 8003e48:	46b2      	mov	sl, r6
 8003e4a:	46bb      	mov	fp, r7
			decexp = 0;
 8003e4c:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
 8003e4e:	9b06      	ldr	r3, [sp, #24]
 8003e50:	b913      	cbnz	r3, 8003e58 <z_prf+0x554>
 8003e52:	2d00      	cmp	r5, #0
 8003e54:	f340 80af 	ble.w	8003fb6 <z_prf+0x6b2>
			*buf++ = '.';
 8003e58:	232e      	movs	r3, #46	; 0x2e
 8003e5a:	f80b 3b01 	strb.w	r3, [fp], #1
		if (decexp < 0 && precision > 0) {
 8003e5e:	2e00      	cmp	r6, #0
 8003e60:	f000 80a7 	beq.w	8003fb2 <z_prf+0x6ae>
 8003e64:	2d00      	cmp	r5, #0
 8003e66:	f340 80a6 	ble.w	8003fb6 <z_prf+0x6b2>
			zp->postdot = -decexp;
 8003e6a:	4277      	negs	r7, r6
 8003e6c:	42af      	cmp	r7, r5
 8003e6e:	bfa8      	it	ge
 8003e70:	462f      	movge	r7, r5
			precision -= zp->postdot;
 8003e72:	1bed      	subs	r5, r5, r7
		while (precision > 0 && digit_count > 0) {
 8003e74:	2d00      	cmp	r5, #0
 8003e76:	dd03      	ble.n	8003e80 <z_prf+0x57c>
 8003e78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f300 8091 	bgt.w	8003fa2 <z_prf+0x69e>
	if (prune_zero) {
 8003e80:	f1b8 0f00 	cmp.w	r8, #0
 8003e84:	f040 80af 	bne.w	8003fe6 <z_prf+0x6e2>
	*buf = 0;
 8003e88:	2300      	movs	r3, #0
	return buf - start;
 8003e8a:	ae17      	add	r6, sp, #92	; 0x5c
	*buf = 0;
 8003e8c:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
 8003e90:	ebab 0b06 	sub.w	fp, fp, r6
 8003e94:	e710      	b.n	8003cb8 <z_prf+0x3b4>
				exp--;
 8003e96:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
 8003e98:	9b02      	ldr	r3, [sp, #8]
 8003e9a:	18db      	adds	r3, r3, r3
 8003e9c:	9302      	str	r3, [sp, #8]
 8003e9e:	9b03      	ldr	r3, [sp, #12]
 8003ea0:	415b      	adcs	r3, r3
 8003ea2:	9303      	str	r3, [sp, #12]
 8003ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ea8:	2a00      	cmp	r2, #0
 8003eaa:	f173 0300 	sbcs.w	r3, r3, #0
 8003eae:	daf2      	bge.n	8003e96 <z_prf+0x592>
 8003eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003eb4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8003eb8:	e74f      	b.n	8003d5a <z_prf+0x456>
			_rlrshift(&fract);
 8003eba:	a812      	add	r0, sp, #72	; 0x48
 8003ebc:	f004 f938 	bl	8008130 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
 8003ec0:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
 8003ec4:	f04f 0b00 	mov.w	fp, #0
 8003ec8:	48b9      	ldr	r0, [pc, #740]	; (80041b0 <z_prf+0x8ac>)
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4559      	cmp	r1, fp
 8003ece:	bf08      	it	eq
 8003ed0:	4560      	cmpeq	r0, ip
 8003ed2:	f108 0801 	add.w	r8, r8, #1
 8003ed6:	d3f0      	bcc.n	8003eba <z_prf+0x5b6>
		fract *= 5U;
 8003ed8:	2005      	movs	r0, #5
 8003eda:	fba2 2300 	umull	r2, r3, r2, r0
 8003ede:	fb00 330c 	mla	r3, r0, ip, r3
 8003ee2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		decexp--;
 8003ee6:	46dc      	mov	ip, fp
 8003ee8:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8003eea:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8003eee:	f04f 0b00 	mov.w	fp, #0
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	458b      	cmp	fp, r1
 8003ef6:	bf08      	it	eq
 8003ef8:	459a      	cmpeq	sl, r3
 8003efa:	d206      	bcs.n	8003f0a <z_prf+0x606>
 8003efc:	f1bc 0f00 	cmp.w	ip, #0
 8003f00:	f43f af32 	beq.w	8003d68 <z_prf+0x464>
 8003f04:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8003f08:	e72e      	b.n	8003d68 <z_prf+0x464>
			fract <<= 1;
 8003f0a:	1892      	adds	r2, r2, r2
 8003f0c:	415b      	adcs	r3, r3
			exp--;
 8003f0e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003f12:	f04f 0c01 	mov.w	ip, #1
 8003f16:	e7ec      	b.n	8003ef2 <z_prf+0x5ee>
		_ldiv5(&fract);
 8003f18:	a812      	add	r0, sp, #72	; 0x48
 8003f1a:	f004 f91b 	bl	8008154 <_ldiv5>
		exp--;
 8003f1e:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
 8003f22:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
 8003f26:	3601      	adds	r6, #1
 8003f28:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	459b      	cmp	fp, r3
 8003f30:	bf08      	it	eq
 8003f32:	4582      	cmpeq	sl, r0
 8003f34:	d206      	bcs.n	8003f44 <z_prf+0x640>
 8003f36:	f1bc 0f00 	cmp.w	ip, #0
 8003f3a:	f43f af1d 	beq.w	8003d78 <z_prf+0x474>
 8003f3e:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
 8003f42:	e719      	b.n	8003d78 <z_prf+0x474>
			fract <<= 1;
 8003f44:	1849      	adds	r1, r1, r1
 8003f46:	4140      	adcs	r0, r0
			exp--;
 8003f48:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003f4c:	f04f 0c01 	mov.w	ip, #1
 8003f50:	e7ec      	b.n	8003f2c <z_prf+0x628>
	if ((exp | fract) != 0) {
 8003f52:	2600      	movs	r6, #0
 8003f54:	46b0      	mov	r8, r6
 8003f56:	e713      	b.n	8003d80 <z_prf+0x47c>
		if (!falt && (precision > 0)) {
 8003f58:	9b06      	ldr	r3, [sp, #24]
			precision -= decexp;
 8003f5a:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
 8003f5c:	b923      	cbnz	r3, 8003f68 <z_prf+0x664>
			c = 'f';
 8003f5e:	2466      	movs	r4, #102	; 0x66
 8003f60:	e72d      	b.n	8003dbe <z_prf+0x4ba>
	prune_zero = false;		/* Assume trailing 0's allowed     */
 8003f62:	f04f 0800 	mov.w	r8, #0
 8003f66:	e730      	b.n	8003dca <z_prf+0x4c6>
 8003f68:	f04f 0800 	mov.w	r8, #0
 8003f6c:	e730      	b.n	8003dd0 <z_prf+0x4cc>
 8003f6e:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
 8003f72:	f105 0a01 	add.w	sl, r5, #1
	digit_count = 16;
 8003f76:	2310      	movs	r3, #16
 8003f78:	459a      	cmp	sl, r3
 8003f7a:	9311      	str	r3, [sp, #68]	; 0x44
	if (exp > 16) {
 8003f7c:	bfa8      	it	ge
 8003f7e:	469a      	movge	sl, r3
 8003f80:	e72f      	b.n	8003de2 <z_prf+0x4de>
		if (exp < 0) {
 8003f82:	2466      	movs	r4, #102	; 0x66
 8003f84:	e7f7      	b.n	8003f76 <z_prf+0x672>
		_ldiv5(&ltemp);
 8003f86:	a814      	add	r0, sp, #80	; 0x50
 8003f88:	f004 f8e4 	bl	8008154 <_ldiv5>
		_rlrshift(&ltemp);
 8003f8c:	a814      	add	r0, sp, #80	; 0x50
 8003f8e:	f004 f8cf 	bl	8008130 <_rlrshift>
 8003f92:	e72b      	b.n	8003dec <z_prf+0x4e8>
			*buf++ = '0';
 8003f94:	46bb      	mov	fp, r7
 8003f96:	2330      	movs	r3, #48	; 0x30
 8003f98:	f80b 3b01 	strb.w	r3, [fp], #1
			zero.predot = zero.postdot = zero.trail = 0;
 8003f9c:	f04f 0a00 	mov.w	sl, #0
 8003fa0:	e755      	b.n	8003e4e <z_prf+0x54a>
			*buf++ = _get_digit(&fract, &digit_count);
 8003fa2:	a911      	add	r1, sp, #68	; 0x44
 8003fa4:	a812      	add	r0, sp, #72	; 0x48
 8003fa6:	f004 f901 	bl	80081ac <_get_digit>
			precision--;
 8003faa:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
 8003fac:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
 8003fb0:	e760      	b.n	8003e74 <z_prf+0x570>
			zero.predot = zero.postdot = zero.trail = 0;
 8003fb2:	4637      	mov	r7, r6
 8003fb4:	e75e      	b.n	8003e74 <z_prf+0x570>
 8003fb6:	2700      	movs	r7, #0
 8003fb8:	e762      	b.n	8003e80 <z_prf+0x57c>
		*buf = _get_digit(&fract, &digit_count);
 8003fba:	a911      	add	r1, sp, #68	; 0x44
 8003fbc:	a812      	add	r0, sp, #72	; 0x48
 8003fbe:	f004 f8f5 	bl	80081ac <_get_digit>
		if (falt || (precision > 0)) {
 8003fc2:	9b06      	ldr	r3, [sp, #24]
		*buf = _get_digit(&fract, &digit_count);
 8003fc4:	7038      	strb	r0, [r7, #0]
		if (*buf++ != '0') {
 8003fc6:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 8003fc8:	bf18      	it	ne
 8003fca:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d13b      	bne.n	800404a <z_prf+0x746>
 8003fd2:	2d00      	cmp	r5, #0
 8003fd4:	dc39      	bgt.n	800404a <z_prf+0x746>
		if (*buf++ != '0') {
 8003fd6:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
 8003fda:	f1b8 0f00 	cmp.w	r8, #0
 8003fde:	d045      	beq.n	800406c <z_prf+0x768>
			zero.predot = zero.postdot = zero.trail = 0;
 8003fe0:	f04f 0a00 	mov.w	sl, #0
 8003fe4:	4657      	mov	r7, sl
		while (*--buf == '0')
 8003fe6:	465b      	mov	r3, fp
 8003fe8:	f81b 2d01 	ldrb.w	r2, [fp, #-1]!
 8003fec:	2a30      	cmp	r2, #48	; 0x30
 8003fee:	d0fa      	beq.n	8003fe6 <z_prf+0x6e2>
		if (*buf != '.') {
 8003ff0:	2a2e      	cmp	r2, #46	; 0x2e
 8003ff2:	bf18      	it	ne
 8003ff4:	469b      	movne	fp, r3
 8003ff6:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
 8003ff8:	f004 03df 	and.w	r3, r4, #223	; 0xdf
 8003ffc:	2b45      	cmp	r3, #69	; 0x45
 8003ffe:	f47f af43 	bne.w	8003e88 <z_prf+0x584>
		if (decexp < 0) {
 8004002:	2e00      	cmp	r6, #0
		*buf++ = c;
 8004004:	465a      	mov	r2, fp
			decexp = -decexp;
 8004006:	bfba      	itte	lt
 8004008:	4276      	neglt	r6, r6
			*buf++ = '-';
 800400a:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
 800400c:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
 800400e:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
 8004010:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '-';
 8004014:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
 8004018:	dd0a      	ble.n	8004030 <z_prf+0x72c>
			*buf++ = (decexp / 100) + '0';
 800401a:	2164      	movs	r1, #100	; 0x64
 800401c:	fb96 f3f1 	sdiv	r3, r6, r1
 8004020:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004024:	f10b 0203 	add.w	r2, fp, #3
 8004028:	f88b 0002 	strb.w	r0, [fp, #2]
			decexp %= 100;
 800402c:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
 8004030:	210a      	movs	r1, #10
 8004032:	4693      	mov	fp, r2
 8004034:	fb96 f3f1 	sdiv	r3, r6, r1
		decexp %= 10;
 8004038:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
 800403c:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
 8004040:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 8004042:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
 8004046:	7056      	strb	r6, [r2, #1]
 8004048:	e71e      	b.n	8003e88 <z_prf+0x584>
			*buf++ = '.';
 800404a:	232e      	movs	r3, #46	; 0x2e
 800404c:	f107 0b02 	add.w	fp, r7, #2
 8004050:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
 8004052:	2d00      	cmp	r5, #0
 8004054:	ddc1      	ble.n	8003fda <z_prf+0x6d6>
 8004056:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004058:	2b00      	cmp	r3, #0
 800405a:	ddbe      	ble.n	8003fda <z_prf+0x6d6>
			*buf++ = _get_digit(&fract, &digit_count);
 800405c:	a911      	add	r1, sp, #68	; 0x44
 800405e:	a812      	add	r0, sp, #72	; 0x48
 8004060:	f004 f8a4 	bl	80081ac <_get_digit>
			precision--;
 8004064:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
 8004066:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
 800406a:	e7f2      	b.n	8004052 <z_prf+0x74e>
			zero.predot = zero.postdot = zero.trail = 0;
 800406c:	46c2      	mov	sl, r8
 800406e:	4647      	mov	r7, r8
 8004070:	e7c2      	b.n	8003ff8 <z_prf+0x6f4>
					prefix = 1;
 8004072:	f04f 0801 	mov.w	r8, #1
 8004076:	e62f      	b.n	8003cd8 <z_prf+0x3d4>
				switch (i) {
 8004078:	46b1      	mov	r9, r6
 800407a:	2f68      	cmp	r7, #104	; 0x68
 800407c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004080:	d005      	beq.n	800408e <z_prf+0x78a>
 8004082:	dc01      	bgt.n	8004088 <z_prf+0x784>
 8004084:	2f48      	cmp	r7, #72	; 0x48
 8004086:	d007      	beq.n	8004098 <z_prf+0x794>
					*va_arg(vargs, int *) = count;
 8004088:	9a00      	ldr	r2, [sp, #0]
 800408a:	601a      	str	r2, [r3, #0]
					break;
 800408c:	e001      	b.n	8004092 <z_prf+0x78e>
					*va_arg(vargs, short *) = count;
 800408e:	9a00      	ldr	r2, [sp, #0]
 8004090:	801a      	strh	r2, [r3, #0]
				continue;
 8004092:	464e      	mov	r6, r9
 8004094:	9a05      	ldr	r2, [sp, #20]
 8004096:	e43d      	b.n	8003914 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
 8004098:	9a00      	ldr	r2, [sp, #0]
 800409a:	701a      	strb	r2, [r3, #0]
					break;
 800409c:	e7f9      	b.n	8004092 <z_prf+0x78e>
				val = (uintptr_t) va_arg(vargs, void *);
 800409e:	46b1      	mov	r9, r6
		*buf++ = '0';
 80040a0:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
 80040a4:	2210      	movs	r2, #16
 80040a6:	f859 1b04 	ldr.w	r1, [r9], #4
		*buf++ = '0';
 80040aa:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	len = _to_x(buf, value, 16);
 80040ae:	f10d 005e 	add.w	r0, sp, #94	; 0x5e
 80040b2:	f004 f81b 	bl	80080ec <_to_x>
				prefix = 2;
 80040b6:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
 80040ba:	1c86      	adds	r6, r0, #2
				break;
 80040bc:	e52c      	b.n	8003b18 <z_prf+0x214>
					if (cptr[clen] == '\0') {
 80040be:	5d9a      	ldrb	r2, [r3, r6]
 80040c0:	2a00      	cmp	r2, #0
 80040c2:	d04a      	beq.n	800415a <z_prf+0x856>
				for (clen = 0; clen < precision; clen++) {
 80040c4:	3601      	adds	r6, #1
 80040c6:	e53c      	b.n	8003b42 <z_prf+0x23e>
	if (alt_form) {
 80040c8:	ac17      	add	r4, sp, #92	; 0x5c
	return (buf - buf0) + _to_x(buf, value, 8);
 80040ca:	2208      	movs	r2, #8
 80040cc:	4620      	mov	r0, r4
 80040ce:	f004 f80d 	bl	80080ec <_to_x>
 80040d2:	ae17      	add	r6, sp, #92	; 0x5c
 80040d4:	1ba6      	subs	r6, r4, r6
 80040d6:	4406      	add	r6, r0
			prefix = 0;
 80040d8:	f04f 0800 	mov.w	r8, #0
 80040dc:	e51c      	b.n	8003b18 <z_prf+0x214>
		*buf++ = '0';
 80040de:	f10d 045d 	add.w	r4, sp, #93	; 0x5d
 80040e2:	e7f2      	b.n	80040ca <z_prf+0x7c6>
				} else if (c == 'u') {
 80040e4:	2c75      	cmp	r4, #117	; 0x75
 80040e6:	d105      	bne.n	80040f4 <z_prf+0x7f0>
	return _to_x(buf, value, 10);
 80040e8:	220a      	movs	r2, #10
 80040ea:	a817      	add	r0, sp, #92	; 0x5c
 80040ec:	f003 fffe 	bl	80080ec <_to_x>
 80040f0:	4606      	mov	r6, r0
 80040f2:	e7f1      	b.n	80040d8 <z_prf+0x7d4>
	if (alt_form) {
 80040f4:	9b06      	ldr	r3, [sp, #24]
 80040f6:	b193      	cbz	r3, 800411e <z_prf+0x81a>
		*buf++ = '0';
 80040f8:	f647 0330 	movw	r3, #30768	; 0x7830
 80040fc:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
		*buf++ = 'x';
 8004100:	f10d 075e 	add.w	r7, sp, #94	; 0x5e
	len = _to_x(buf, value, 16);
 8004104:	2210      	movs	r2, #16
 8004106:	4638      	mov	r0, r7
 8004108:	f003 fff0 	bl	80080ec <_to_x>
	if (prefix == 'X') {
 800410c:	2c58      	cmp	r4, #88	; 0x58
 800410e:	d008      	beq.n	8004122 <z_prf+0x81e>
	return len + (buf - buf0);
 8004110:	ae17      	add	r6, sp, #92	; 0x5c
						prefix = 2;
 8004112:	9b06      	ldr	r3, [sp, #24]
	return len + (buf - buf0);
 8004114:	1bbe      	subs	r6, r7, r6
 8004116:	4406      	add	r6, r0
						prefix = 2;
 8004118:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800411c:	e4fc      	b.n	8003b18 <z_prf+0x214>
	if (alt_form) {
 800411e:	af17      	add	r7, sp, #92	; 0x5c
 8004120:	e7f0      	b.n	8004104 <z_prf+0x800>
 8004122:	aa17      	add	r2, sp, #92	; 0x5c
		if (*buf >= 'a' && *buf <= 'z') {
 8004124:	f812 3b01 	ldrb.w	r3, [r2], #1
 8004128:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 800412c:	2919      	cmp	r1, #25
 800412e:	d803      	bhi.n	8004138 <z_prf+0x834>
			*buf += 'A' - 'a';
 8004130:	3b20      	subs	r3, #32
 8004132:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004136:	e7f5      	b.n	8004124 <z_prf+0x820>
	} while (*buf++);
 8004138:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f1      	bne.n	8004124 <z_prf+0x820>
 8004140:	e7e6      	b.n	8004110 <z_prf+0x80c>
				PUTC('%');
 8004142:	9904      	ldr	r1, [sp, #16]
 8004144:	4620      	mov	r0, r4
 8004146:	f7ff bbee 	b.w	8003926 <z_prf+0x22>
				count++;
 800414a:	9b00      	ldr	r3, [sp, #0]
 800414c:	3301      	adds	r3, #1
				count += 2;
 800414e:	9300      	str	r3, [sp, #0]
				continue;
 8004150:	46b1      	mov	r9, r6
 8004152:	e79e      	b.n	8004092 <z_prf+0x78e>
					prefix = 1;
 8004154:	f04f 0801 	mov.w	r8, #1
 8004158:	e4de      	b.n	8003b18 <z_prf+0x214>
 800415a:	4615      	mov	r5, r2
 800415c:	e4f6      	b.n	8003b4c <z_prf+0x248>
			cptr = buf;
 800415e:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = 0;
 8004160:	2200      	movs	r2, #0
 8004162:	e507      	b.n	8003b74 <z_prf+0x270>
 8004164:	ab17      	add	r3, sp, #92	; 0x5c
 8004166:	9a08      	ldr	r2, [sp, #32]
 8004168:	e504      	b.n	8003b74 <z_prf+0x270>
 800416a:	e9cd 3207 	strd	r3, r2, [sp, #28]
					PUTC(' ');
 800416e:	9904      	ldr	r1, [sp, #16]
 8004170:	9b01      	ldr	r3, [sp, #4]
 8004172:	2020      	movs	r0, #32
 8004174:	4798      	blx	r3
 8004176:	3001      	adds	r0, #1
 8004178:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800417c:	f43f abd8 	beq.w	8003930 <z_prf+0x2c>
				while (width-- > 0) {
 8004180:	f11b 3bff 	adds.w	fp, fp, #4294967295	; 0xffffffff
 8004184:	d2f1      	bcs.n	800416a <z_prf+0x866>
				count += width;
 8004186:	9900      	ldr	r1, [sp, #0]
 8004188:	4421      	add	r1, r4
 800418a:	9100      	str	r1, [sp, #0]
				while (width-- > 0) {
 800418c:	465c      	mov	r4, fp
 800418e:	e4fb      	b.n	8003b88 <z_prf+0x284>
 8004190:	46a3      	mov	fp, r4
 8004192:	e7f5      	b.n	8004180 <z_prf+0x87c>
				PUTC(*cptr++);
 8004194:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004198:	9307      	str	r3, [sp, #28]
 800419a:	9904      	ldr	r1, [sp, #16]
 800419c:	9b01      	ldr	r3, [sp, #4]
 800419e:	9208      	str	r2, [sp, #32]
 80041a0:	4798      	blx	r3
 80041a2:	3001      	adds	r0, #1
 80041a4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80041a8:	f47f acf0 	bne.w	8003b8c <z_prf+0x288>
 80041ac:	f7ff bbc0 	b.w	8003930 <z_prf+0x2c>
 80041b0:	33333332 	.word	0x33333332
				PUTC('0');
 80041b4:	9904      	ldr	r1, [sp, #16]
 80041b6:	9b01      	ldr	r3, [sp, #4]
 80041b8:	9207      	str	r2, [sp, #28]
 80041ba:	2030      	movs	r0, #48	; 0x30
 80041bc:	4798      	blx	r3
 80041be:	3001      	adds	r0, #1
 80041c0:	9a07      	ldr	r2, [sp, #28]
 80041c2:	f47f ace6 	bne.w	8003b92 <z_prf+0x28e>
 80041c6:	f7ff bbb3 	b.w	8003930 <z_prf+0x2c>
					PUTC(c);
 80041ca:	9904      	ldr	r1, [sp, #16]
 80041cc:	9b01      	ldr	r3, [sp, #4]
 80041ce:	4798      	blx	r3
 80041d0:	3001      	adds	r0, #1
 80041d2:	f43f abad 	beq.w	8003930 <z_prf+0x2c>
					c = *++cptr;
 80041d6:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
 80041da:	e4e7      	b.n	8003bac <z_prf+0x2a8>
					PUTC('0');
 80041dc:	9904      	ldr	r1, [sp, #16]
 80041de:	9b01      	ldr	r3, [sp, #4]
 80041e0:	2030      	movs	r0, #48	; 0x30
 80041e2:	4798      	blx	r3
 80041e4:	3001      	adds	r0, #1
 80041e6:	f47f ace9 	bne.w	8003bbc <z_prf+0x2b8>
 80041ea:	f7ff bba1 	b.w	8003930 <z_prf+0x2c>
					PUTC('0');
 80041ee:	9904      	ldr	r1, [sp, #16]
 80041f0:	9b01      	ldr	r3, [sp, #4]
 80041f2:	2030      	movs	r0, #48	; 0x30
 80041f4:	4798      	blx	r3
 80041f6:	3001      	adds	r0, #1
 80041f8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80041fc:	f47f acf6 	bne.w	8003bec <z_prf+0x2e8>
 8004200:	f7ff bb96 	b.w	8003930 <z_prf+0x2c>
					PUTC(c);
 8004204:	9904      	ldr	r1, [sp, #16]
 8004206:	9b01      	ldr	r3, [sp, #4]
 8004208:	4798      	blx	r3
 800420a:	3001      	adds	r0, #1
 800420c:	f43f ab90 	beq.w	8003930 <z_prf+0x2c>
					c = *++cptr;
 8004210:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
 8004214:	e4f4      	b.n	8003c00 <z_prf+0x2fc>
					PUTC('0');
 8004216:	9904      	ldr	r1, [sp, #16]
 8004218:	9b01      	ldr	r3, [sp, #4]
 800421a:	2030      	movs	r0, #48	; 0x30
 800421c:	4798      	blx	r3
 800421e:	3001      	adds	r0, #1
 8004220:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8004224:	f47f acf7 	bne.w	8003c16 <z_prf+0x312>
 8004228:	f7ff bb82 	b.w	8003930 <z_prf+0x2c>
				PUTC(*cptr++);
 800422c:	9904      	ldr	r1, [sp, #16]
 800422e:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8004232:	9b01      	ldr	r3, [sp, #4]
 8004234:	4798      	blx	r3
 8004236:	3001      	adds	r0, #1
 8004238:	f43f ab7a 	beq.w	8003930 <z_prf+0x2c>
 800423c:	eba6 030b 	sub.w	r3, r6, fp
			while (clen-- > 0) {
 8004240:	2b00      	cmp	r3, #0
 8004242:	dcf3      	bgt.n	800422c <z_prf+0x928>
			count += clen;
 8004244:	9b00      	ldr	r3, [sp, #0]
 8004246:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
 8004248:	2c00      	cmp	r4, #0
			count += clen;
 800424a:	4413      	add	r3, r2
 800424c:	9300      	str	r3, [sp, #0]
			if (width > 0) {
 800424e:	f77f af20 	ble.w	8004092 <z_prf+0x78e>
 8004252:	4625      	mov	r5, r4
 8004254:	e006      	b.n	8004264 <z_prf+0x960>
					PUTC(' ');
 8004256:	9904      	ldr	r1, [sp, #16]
 8004258:	9b01      	ldr	r3, [sp, #4]
 800425a:	2020      	movs	r0, #32
 800425c:	4798      	blx	r3
 800425e:	3001      	adds	r0, #1
 8004260:	f43f ab66 	beq.w	8003930 <z_prf+0x2c>
				while (width-- > 0) {
 8004264:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8004268:	d2f5      	bcs.n	8004256 <z_prf+0x952>
				count += width;
 800426a:	9b00      	ldr	r3, [sp, #0]
 800426c:	4423      	add	r3, r4
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	e70f      	b.n	8004092 <z_prf+0x78e>
 8004272:	bf00      	nop

08004274 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8004274:	4b01      	ldr	r3, [pc, #4]	; (800427c <__stdout_hook_install+0x8>)
 8004276:	6018      	str	r0, [r3, #0]
}
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	200029d8 	.word	0x200029d8

08004280 <pinmux_stm32_init>:
        {STM32_PIN_PA12, STM32F4_PINMUX_FUNC_PA12_CAN1_TX},
#endif /* CONFIG_CAN_1 */
};

static int pinmux_stm32_init(struct device *port)
{
 8004280:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 8004282:	2105      	movs	r1, #5
 8004284:	4802      	ldr	r0, [pc, #8]	; (8004290 <pinmux_stm32_init+0x10>)
 8004286:	f7fe f921 	bl	80024cc <stm32_setup_pins>

	return 0;
}
 800428a:	2000      	movs	r0, #0
 800428c:	bd08      	pop	{r3, pc}
 800428e:	bf00      	nop
 8004290:	080096bc 	.word	0x080096bc

08004294 <gpio_stm32_init>:
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8004294:	6803      	ldr	r3, [r0, #0]
{
 8004296:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8004298:	689c      	ldr	r4, [r3, #8]
 800429a:	4806      	ldr	r0, [pc, #24]	; (80042b4 <gpio_stm32_init+0x20>)
 800429c:	f000 fccc 	bl	8004c38 <z_impl_device_get_binding>
 80042a0:	6843      	ldr	r3, [r0, #4]
 80042a2:	f104 0108 	add.w	r1, r4, #8
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4798      	blx	r3

	/* enable clock for subsystem */
	struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 80042aa:	2800      	cmp	r0, #0
		}
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 80042ac:	bf18      	it	ne
 80042ae:	f06f 0004 	mvnne.w	r0, #4
 80042b2:	bd10      	pop	{r4, pc}
 80042b4:	0800a1be 	.word	0x0800a1be

080042b8 <gpio_stm32_config>:
{
 80042b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80042bc:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 80042be:	6803      	ldr	r3, [r0, #0]
 80042c0:	689f      	ldr	r7, [r3, #8]
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 80042c2:	f005 0380 	and.w	r3, r5, #128	; 0x80
 80042c6:	430b      	orrs	r3, r1
{
 80042c8:	4680      	mov	r8, r0
 80042ca:	4614      	mov	r4, r2
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 80042cc:	d005      	beq.n	80042da <gpio_stm32_config+0x22>
		return -ENOTSUP;
 80042ce:	f06f 0622 	mvn.w	r6, #34	; 0x22
}
 80042d2:	4630      	mov	r0, r6
 80042d4:	b004      	add	sp, #16
 80042d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	map_res = gpio_stm32_flags_to_conf(flags, &pincfg);
 80042da:	a901      	add	r1, sp, #4
 80042dc:	4628      	mov	r0, r5
 80042de:	f003 fffd 	bl	80082dc <gpio_stm32_flags_to_conf>
	if (map_res != 0) {
 80042e2:	4606      	mov	r6, r0
 80042e4:	2800      	cmp	r0, #0
 80042e6:	d1f4      	bne.n	80042d2 <gpio_stm32_config+0x1a>
	if (gpio_stm32_configure(cfg->base, pin, pincfg, 0) != 0) {
 80042e8:	4603      	mov	r3, r0
 80042ea:	9a01      	ldr	r2, [sp, #4]
 80042ec:	6838      	ldr	r0, [r7, #0]
 80042ee:	4621      	mov	r1, r4
 80042f0:	f004 f811 	bl	8008316 <gpio_stm32_configure>
 80042f4:	b110      	cbz	r0, 80042fc <gpio_stm32_config+0x44>
		err = -EIO;
 80042f6:	f06f 0604 	mvn.w	r6, #4
 80042fa:	e7ea      	b.n	80042d2 <gpio_stm32_config+0x1a>
	if (flags & GPIO_INT) {
 80042fc:	f015 0602 	ands.w	r6, r5, #2
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	d051      	beq.n	80043a8 <gpio_stm32_config+0xf0>
		if (stm32_exti_set_callback(pin, cfg->port,
 8004304:	4643      	mov	r3, r8
 8004306:	4a41      	ldr	r2, [pc, #260]	; (800440c <gpio_stm32_config+0x154>)
 8004308:	4620      	mov	r0, r4
 800430a:	f7fd ffc9 	bl	80022a0 <stm32_exti_set_callback>
 800430e:	2800      	cmp	r0, #0
 8004310:	d178      	bne.n	8004404 <gpio_stm32_config+0x14c>
		gpio_stm32_enable_int(cfg->port, pin);
 8004312:	687e      	ldr	r6, [r7, #4]
 8004314:	483e      	ldr	r0, [pc, #248]	; (8004410 <gpio_stm32_config+0x158>)
 8004316:	f000 fc8f 	bl	8004c38 <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 800431a:	493e      	ldr	r1, [pc, #248]	; (8004414 <gpio_stm32_config+0x15c>)
 800431c:	4602      	mov	r2, r0
 800431e:	c903      	ldmia	r1, {r0, r1}
 8004320:	ab02      	add	r3, sp, #8
 8004322:	e883 0003 	stmia.w	r3, {r0, r1}
 8004326:	6851      	ldr	r1, [r2, #4]
 8004328:	4610      	mov	r0, r2
 800432a:	680f      	ldr	r7, [r1, #0]
 800432c:	4619      	mov	r1, r3
 800432e:	47b8      	blx	r7
	if (pin > 15) {
 8004330:	2c0f      	cmp	r4, #15
 8004332:	dc24      	bgt.n	800437e <gpio_stm32_config+0xc6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8004334:	4262      	negs	r2, r4
 8004336:	f002 0203 	and.w	r2, r2, #3
 800433a:	f004 0303 	and.w	r3, r4, #3
 800433e:	bf58      	it	pl
 8004340:	4253      	negpl	r3, r2
 8004342:	3304      	adds	r3, #4
 8004344:	009a      	lsls	r2, r3, #2
 8004346:	2c00      	cmp	r4, #0
 8004348:	f04f 030f 	mov.w	r3, #15
 800434c:	fa03 f302 	lsl.w	r3, r3, r2
 8004350:	4622      	mov	r2, r4
 8004352:	bfb8      	it	lt
 8004354:	1ce2      	addlt	r2, r4, #3
 8004356:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800435a:	b2da      	uxtb	r2, r3
 800435c:	0092      	lsls	r2, r2, #2
 800435e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004362:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8004366:	0c1b      	lsrs	r3, r3, #16
 8004368:	6891      	ldr	r1, [r2, #8]
 800436a:	ea21 0103 	bic.w	r1, r1, r3
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004372:	fab3 f383 	clz	r3, r3
 8004376:	fa06 f303 	lsl.w	r3, r6, r3
 800437a:	430b      	orrs	r3, r1
 800437c:	6093      	str	r3, [r2, #8]
		if ((flags & GPIO_INT_EDGE) != 0) {
 800437e:	06aa      	lsls	r2, r5, #26
 8004380:	d5a5      	bpl.n	80042ce <gpio_stm32_config+0x16>
			if ((flags & GPIO_INT_DOUBLE_EDGE) != 0) {
 8004382:	066b      	lsls	r3, r5, #25
 8004384:	d40e      	bmi.n	80043a4 <gpio_stm32_config+0xec>
				edge = STM32_EXTI_TRIG_FALLING;
 8004386:	f015 0f04 	tst.w	r5, #4
 800438a:	bf14      	ite	ne
 800438c:	2101      	movne	r1, #1
 800438e:	2102      	moveq	r1, #2
			stm32_exti_trigger(pin, edge);
 8004390:	4620      	mov	r0, r4
 8004392:	f7fd ff6d 	bl	8002270 <stm32_exti_trigger>
		if (stm32_exti_enable(pin) != 0) {
 8004396:	4620      	mov	r0, r4
 8004398:	f7fd ff46 	bl	8002228 <stm32_exti_enable>
 800439c:	2800      	cmp	r0, #0
 800439e:	d1aa      	bne.n	80042f6 <gpio_stm32_config+0x3e>
	int err = 0;
 80043a0:	2600      	movs	r6, #0
 80043a2:	e796      	b.n	80042d2 <gpio_stm32_config+0x1a>
				edge = STM32_EXTI_TRIG_RISING |
 80043a4:	2103      	movs	r1, #3
 80043a6:	e7f3      	b.n	8004390 <gpio_stm32_config+0xd8>
	if (pin > 15) {
 80043a8:	2c0f      	cmp	r4, #15
 80043aa:	dc28      	bgt.n	80043fe <gpio_stm32_config+0x146>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80043ac:	4263      	negs	r3, r4
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	f004 0203 	and.w	r2, r4, #3
 80043b6:	bf58      	it	pl
 80043b8:	425a      	negpl	r2, r3
 80043ba:	3204      	adds	r2, #4
 80043bc:	0093      	lsls	r3, r2, #2
 80043be:	2c00      	cmp	r4, #0
 80043c0:	f04f 020f 	mov.w	r2, #15
 80043c4:	fa02 f203 	lsl.w	r2, r2, r3
 80043c8:	4623      	mov	r3, r4
 80043ca:	bfb8      	it	lt
 80043cc:	1ce3      	addlt	r3, r4, #3
 80043ce:	ea42 02a3 	orr.w	r2, r2, r3, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 80043d2:	b2d3      	uxtb	r3, r2
 80043d4:	4810      	ldr	r0, [pc, #64]	; (8004418 <gpio_stm32_config+0x160>)
 80043d6:	3302      	adds	r3, #2
 80043d8:	0c12      	lsrs	r2, r2, #16
 80043da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80043de:	4013      	ands	r3, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80043e4:	fab2 f282 	clz	r2, r2
 80043e8:	fa23 f202 	lsr.w	r2, r3, r2
		if (gpio_stm32_int_enabled_port(pin) == cfg->port) {
 80043ec:	4291      	cmp	r1, r2
 80043ee:	d1d7      	bne.n	80043a0 <gpio_stm32_config+0xe8>
			stm32_exti_disable(pin);
 80043f0:	4620      	mov	r0, r4
 80043f2:	f7fd ff31 	bl	8002258 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80043f6:	4620      	mov	r0, r4
 80043f8:	f7fd ff64 	bl	80022c4 <stm32_exti_unset_callback>
 80043fc:	e769      	b.n	80042d2 <gpio_stm32_config+0x1a>
		return -EINVAL;
 80043fe:	f06f 0215 	mvn.w	r2, #21
 8004402:	e7f3      	b.n	80043ec <gpio_stm32_config+0x134>
			err = -EBUSY;
 8004404:	f06f 060f 	mvn.w	r6, #15
 8004408:	e763      	b.n	80042d2 <gpio_stm32_config+0x1a>
 800440a:	bf00      	nop
 800440c:	080081e1 	.word	0x080081e1
 8004410:	0800a1be 	.word	0x0800a1be
 8004414:	080092dc 	.word	0x080092dc
 8004418:	40013800 	.word	0x40013800

0800441c <pwm_stm32_pin_set>:
 *
 * return 0, or negative errno code
 */
static int pwm_stm32_pin_set(struct device *dev, u32_t pwm,
			     u32_t period_cycles, u32_t pulse_cycles)
{
 800441c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441e:	461f      	mov	r7, r3
 8004420:	b089      	sub	sp, #36	; 0x24
	struct pwm_stm32_data *data = DEV_DATA(dev);
 8004422:	6886      	ldr	r6, [r0, #8]
	TIM_HandleTypeDef *TimerHandle = &data->hpwm;
	TIM_OC_InitTypeDef sConfig;
	u32_t channel;
	bool counter_32b;

	if (period_cycles == 0U || pulse_cycles > period_cycles) {
 8004424:	b3a2      	cbz	r2, 8004490 <pwm_stm32_pin_set+0x74>
 8004426:	429a      	cmp	r2, r3
 8004428:	d332      	bcc.n	8004490 <pwm_stm32_pin_set+0x74>
	}

	/* configure channel */
	channel = (pwm - 1)*CHANNEL_LENGTH;

	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 800442a:	6803      	ldr	r3, [r0, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
	channel = (pwm - 1)*CHANNEL_LENGTH;
 800442e:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	4b33      	ldr	r3, [pc, #204]	; (8004504 <pwm_stm32_pin_set+0xe8>)
	channel = (pwm - 1)*CHANNEL_LENGTH;
 8004436:	3c01      	subs	r4, #1
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8004438:	4299      	cmp	r1, r3
	channel = (pwm - 1)*CHANNEL_LENGTH;
 800443a:	ea4f 0484 	mov.w	r4, r4, lsl #2
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 800443e:	d05e      	beq.n	80044fe <pwm_stm32_pin_set+0xe2>
 8004440:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8004444:	d027      	beq.n	8004496 <pwm_stm32_pin_set+0x7a>
 8004446:	4830      	ldr	r0, [pc, #192]	; (8004508 <pwm_stm32_pin_set+0xec>)
 8004448:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 800444c:	4283      	cmp	r3, r0
 800444e:	d053      	beq.n	80044f8 <pwm_stm32_pin_set+0xdc>
 8004450:	f421 5580 	bic.w	r5, r1, #4096	; 0x1000
 8004454:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004458:	4285      	cmp	r5, r0
 800445a:	d04d      	beq.n	80044f8 <pwm_stm32_pin_set+0xdc>
 800445c:	f421 6580 	bic.w	r5, r1, #1024	; 0x400
 8004460:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8004464:	4285      	cmp	r5, r0
 8004466:	d047      	beq.n	80044f8 <pwm_stm32_pin_set+0xdc>
 8004468:	f421 4580 	bic.w	r5, r1, #16384	; 0x4000
 800446c:	f500 4074 	add.w	r0, r0, #62464	; 0xf400
 8004470:	4285      	cmp	r5, r0
 8004472:	d041      	beq.n	80044f8 <pwm_stm32_pin_set+0xdc>
 8004474:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 8004478:	4283      	cmp	r3, r0
 800447a:	d03d      	beq.n	80044f8 <pwm_stm32_pin_set+0xdc>
 800447c:	4b23      	ldr	r3, [pc, #140]	; (800450c <pwm_stm32_pin_set+0xf0>)
 800447e:	4299      	cmp	r1, r3
 8004480:	d03d      	beq.n	80044fe <pwm_stm32_pin_set+0xe2>
 8004482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004486:	4299      	cmp	r1, r3
 8004488:	d039      	beq.n	80044fe <pwm_stm32_pin_set+0xe2>
		!IS_TIM_CHANNELS(channel)) {
		return -ENOTSUP;
 800448a:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800448e:	e031      	b.n	80044f4 <pwm_stm32_pin_set+0xd8>
		return -EINVAL;
 8004490:	f06f 0015 	mvn.w	r0, #21
 8004494:	e02e      	b.n	80044f4 <pwm_stm32_pin_set+0xd8>
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8004496:	b184      	cbz	r4, 80044ba <pwm_stm32_pin_set+0x9e>
		!IS_TIM_CHANNELS(channel)) {
 8004498:	f024 0308 	bic.w	r3, r4, #8
 800449c:	2b04      	cmp	r3, #4
 800449e:	d003      	beq.n	80044a8 <pwm_stm32_pin_set+0x8c>
 80044a0:	2c08      	cmp	r4, #8
 80044a2:	d001      	beq.n	80044a8 <pwm_stm32_pin_set+0x8c>
 80044a4:	2c3c      	cmp	r4, #60	; 0x3c
 80044a6:	d1f0      	bne.n	800448a <pwm_stm32_pin_set+0x6e>
	/* FIXME: IS_TIM_32B_COUNTER_INSTANCE not available on
	 * SMT32F1 Cube HAL since all timer counters are 16 bits
	 */
	counter_32b = 0;
#else
	counter_32b = IS_TIM_32B_COUNTER_INSTANCE(PWM_STRUCT(dev));
 80044a8:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80044ac:	d005      	beq.n	80044ba <pwm_stm32_pin_set+0x9e>

	/*
	 * The timer counts from 0 up to the value in the ARR register (16-bit).
	 * Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!counter_32b && (period_cycles > 0x10000)) {
 80044ae:	4b18      	ldr	r3, [pc, #96]	; (8004510 <pwm_stm32_pin_set+0xf4>)
 80044b0:	4299      	cmp	r1, r3
 80044b2:	d002      	beq.n	80044ba <pwm_stm32_pin_set+0x9e>
 80044b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80044b8:	d8e7      	bhi.n	800448a <pwm_stm32_pin_set+0x6e>
	}

	/* Configure Timer IP */
	TimerHandle->Instance = PWM_STRUCT(dev);
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
	TimerHandle->Init.ClockDivision = 0;
 80044ba:	2500      	movs	r5, #0
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
 80044bc:	6c33      	ldr	r3, [r6, #64]	; 0x40
	TimerHandle->Instance = PWM_STRUCT(dev);
 80044be:	6031      	str	r1, [r6, #0]
	TimerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
	TimerHandle->Init.RepetitionCounter = 0;

	/* Set period value */
	TimerHandle->Init.Period = period_cycles - 1;
 80044c0:	3a01      	subs	r2, #1
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
 80044c2:	6073      	str	r3, [r6, #4]
	TimerHandle->Init.Period = period_cycles - 1;
 80044c4:	60f2      	str	r2, [r6, #12]
	TimerHandle->Init.ClockDivision = 0;
 80044c6:	6135      	str	r5, [r6, #16]
	TimerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 80044c8:	60b5      	str	r5, [r6, #8]
	TimerHandle->Init.RepetitionCounter = 0;
 80044ca:	6175      	str	r5, [r6, #20]

	HAL_TIM_PWM_Init(TimerHandle);
 80044cc:	4630      	mov	r0, r6
 80044ce:	f004 f8f2 	bl	80086b6 <HAL_TIM_PWM_Init>

	/* Configure PWM channel */
	sConfig.OCMode       = TIM_OCMODE_PWM1;
 80044d2:	2360      	movs	r3, #96	; 0x60
	sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;

	/* Set the pulse value */
	sConfig.Pulse = pulse_cycles;

	HAL_TIM_PWM_ConfigChannel(TimerHandle, &sConfig, channel);
 80044d4:	a901      	add	r1, sp, #4
 80044d6:	4622      	mov	r2, r4
 80044d8:	4630      	mov	r0, r6
	sConfig.OCMode       = TIM_OCMODE_PWM1;
 80044da:	9301      	str	r3, [sp, #4]
	sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 80044dc:	9503      	str	r5, [sp, #12]
	sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 80044de:	e9cd 5504 	strd	r5, r5, [sp, #16]
	sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 80044e2:	e9cd 5506 	strd	r5, r5, [sp, #24]
	sConfig.Pulse = pulse_cycles;
 80044e6:	9702      	str	r7, [sp, #8]
	HAL_TIM_PWM_ConfigChannel(TimerHandle, &sConfig, channel);
 80044e8:	f004 f8ff 	bl	80086ea <HAL_TIM_PWM_ConfigChannel>

	return HAL_TIM_PWM_Start(TimerHandle, channel);
 80044ec:	4621      	mov	r1, r4
 80044ee:	4630      	mov	r0, r6
 80044f0:	f004 f96b 	bl	80087ca <HAL_TIM_PWM_Start>
}
 80044f4:	b009      	add	sp, #36	; 0x24
 80044f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80044f8:	2c00      	cmp	r4, #0
 80044fa:	d1cd      	bne.n	8004498 <pwm_stm32_pin_set+0x7c>
 80044fc:	e7d7      	b.n	80044ae <pwm_stm32_pin_set+0x92>
 80044fe:	2c00      	cmp	r4, #0
 8004500:	d1ca      	bne.n	8004498 <pwm_stm32_pin_set+0x7c>
 8004502:	e7d7      	b.n	80044b4 <pwm_stm32_pin_set+0x98>
 8004504:	40010000 	.word	0x40010000
 8004508:	40000400 	.word	0x40000400
 800450c:	40001c00 	.word	0x40001c00
 8004510:	40000c00 	.word	0x40000c00

08004514 <pwm_stm32_init>:
	data->clock = clk;
}


static int pwm_stm32_init(struct device *dev)
{
 8004514:	b538      	push	{r3, r4, r5, lr}
	const struct pwm_stm32_config *config = DEV_CFG(dev);
 8004516:	6803      	ldr	r3, [r0, #0]
	struct pwm_stm32_data *data = DEV_DATA(dev);
 8004518:	6885      	ldr	r5, [r0, #8]
	const struct pwm_stm32_config *config = DEV_CFG(dev);
 800451a:	689c      	ldr	r4, [r3, #8]
 800451c:	4806      	ldr	r0, [pc, #24]	; (8004538 <pwm_stm32_init+0x24>)
 800451e:	f000 fb8b 	bl	8004c38 <z_impl_device_get_binding>
 8004522:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 8004524:	6468      	str	r0, [r5, #68]	; 0x44
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	1d21      	adds	r1, r4, #4
 800452a:	4798      	blx	r3

	__pwm_stm32_get_clock(dev);

	/* enable clock */
	if (clock_control_on(data->clock,
 800452c:	2800      	cmp	r0, #0
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
	}

	return 0;
}
 800452e:	bf18      	it	ne
 8004530:	f06f 0004 	mvnne.w	r0, #4
 8004534:	bd38      	pop	{r3, r4, r5, pc}
 8004536:	bf00      	nop
 8004538:	0800a1be 	.word	0x0800a1be

0800453c <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800453c:	6803      	ldr	r3, [r0, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004542:	695a      	ldr	r2, [r3, #20]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	615a      	str	r2, [r3, #20]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 800454a:	4a10      	ldr	r2, [pc, #64]	; (800458c <uart_stm32_irq_err_enable+0x50>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d013      	beq.n	8004578 <uart_stm32_irq_err_enable+0x3c>
 8004550:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8004554:	4293      	cmp	r3, r2
 8004556:	d00f      	beq.n	8004578 <uart_stm32_irq_err_enable+0x3c>
 8004558:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800455c:	4293      	cmp	r3, r2
 800455e:	d00b      	beq.n	8004578 <uart_stm32_irq_err_enable+0x3c>
 8004560:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004564:	4293      	cmp	r3, r2
 8004566:	d007      	beq.n	8004578 <uart_stm32_irq_err_enable+0x3c>
 8004568:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <uart_stm32_irq_err_enable+0x3c>
 8004570:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8004574:	4293      	cmp	r3, r2
 8004576:	d103      	bne.n	8004580 <uart_stm32_irq_err_enable+0x44>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800457e:	611a      	str	r2, [r3, #16]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004586:	60da      	str	r2, [r3, #12]
		LL_USART_EnableIT_LBD(UartInstance);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(UartInstance);
}
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40011000 	.word	0x40011000

08004590 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004590:	6803      	ldr	r3, [r0, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004596:	695a      	ldr	r2, [r3, #20]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	615a      	str	r2, [r3, #20]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 800459e:	4a10      	ldr	r2, [pc, #64]	; (80045e0 <uart_stm32_irq_err_disable+0x50>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d013      	beq.n	80045cc <uart_stm32_irq_err_disable+0x3c>
 80045a4:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00f      	beq.n	80045cc <uart_stm32_irq_err_disable+0x3c>
 80045ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00b      	beq.n	80045cc <uart_stm32_irq_err_disable+0x3c>
 80045b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d007      	beq.n	80045cc <uart_stm32_irq_err_disable+0x3c>
 80045bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d003      	beq.n	80045cc <uart_stm32_irq_err_disable+0x3c>
 80045c4:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d103      	bne.n	80045d4 <uart_stm32_irq_err_disable+0x44>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045da:	60da      	str	r2, [r3, #12]
		LL_USART_DisableIT_LBD(UartInstance);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(UartInstance);
}
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40011000 	.word	0x40011000

080045e4 <uart_stm32_configure>:
{
 80045e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80045e8:	6803      	ldr	r3, [r0, #0]
	const u32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80045ea:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80045ec:	689b      	ldr	r3, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80045ee:	6886      	ldr	r6, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80045f0:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 80045f2:	2a01      	cmp	r2, #1
{
 80045f4:	460d      	mov	r5, r1
	switch (parity) {
 80045f6:	d075      	beq.n	80046e4 <uart_stm32_configure+0x100>
		return LL_USART_PARITY_NONE;
 80045f8:	2a02      	cmp	r2, #2
 80045fa:	bf0c      	ite	eq
 80045fc:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8004600:	2100      	movne	r1, #0
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8004602:	f895 8005 	ldrb.w	r8, [r5, #5]
	const u32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 8004606:	f895 9006 	ldrb.w	r9, [r5, #6]
	const u32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800460a:	79ef      	ldrb	r7, [r5, #7]
 800460c:	f1b8 0f02 	cmp.w	r8, #2
 8004610:	bf96      	itet	ls
 8004612:	4b37      	ldrls	r3, [pc, #220]	; (80046f0 <uart_stm32_configure+0x10c>)
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8004614:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 8004618:	f833 e018 	ldrhls.w	lr, [r3, r8, lsl #1]
		return LL_USART_DATAWIDTH_8B;
 800461c:	f1b9 0f04 	cmp.w	r9, #4
 8004620:	bf0c      	ite	eq
 8004622:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8004626:	2300      	movne	r3, #0
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8004628:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 800462a:	2f01      	cmp	r7, #1
 800462c:	bf14      	ite	ne
 800462e:	f04f 0c00 	movne.w	ip, #0
 8004632:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8004636:	2a01      	cmp	r2, #1
 8004638:	d957      	bls.n	80046ea <uart_stm32_configure+0x106>
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 800463a:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 800463e:	d054      	beq.n	80046ea <uart_stm32_configure+0x106>
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 8004640:	f1b9 0f02 	cmp.w	r9, #2
 8004644:	d951      	bls.n	80046ea <uart_stm32_configure+0x106>
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 8004646:	b187      	cbz	r7, 800466a <uart_stm32_configure+0x86>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8004648:	4a2a      	ldr	r2, [pc, #168]	; (80046f4 <uart_stm32_configure+0x110>)
 800464a:	4294      	cmp	r4, r2
 800464c:	d00b      	beq.n	8004666 <uart_stm32_configure+0x82>
 800464e:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8004652:	4294      	cmp	r4, r2
 8004654:	d007      	beq.n	8004666 <uart_stm32_configure+0x82>
 8004656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800465a:	4294      	cmp	r4, r2
 800465c:	d003      	beq.n	8004666 <uart_stm32_configure+0x82>
 800465e:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 8004662:	4294      	cmp	r4, r2
 8004664:	d141      	bne.n	80046ea <uart_stm32_configure+0x106>
 8004666:	2f01      	cmp	r7, #1
 8004668:	d13f      	bne.n	80046ea <uart_stm32_configure+0x106>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800466a:	68e2      	ldr	r2, [r4, #12]
 800466c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004670:	60e2      	str	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004672:	68e2      	ldr	r2, [r4, #12]
 8004674:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8004678:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800467a:	bf1f      	itttt	ne
 800467c:	68e7      	ldrne	r7, [r4, #12]
 800467e:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8004682:	430f      	orrne	r7, r1
 8004684:	60e7      	strne	r7, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8004686:	6922      	ldr	r2, [r4, #16]
 8004688:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800468c:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800468e:	bf1f      	itttt	ne
 8004690:	6921      	ldrne	r1, [r4, #16]
 8004692:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8004696:	ea41 010e 	orrne.w	r1, r1, lr
 800469a:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800469c:	68e2      	ldr	r2, [r4, #12]
	if (cfg->baudrate != data->baud_rate) {
 800469e:	6829      	ldr	r1, [r5, #0]
 80046a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 80046a4:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80046a6:	bf1f      	itttt	ne
 80046a8:	68e2      	ldrne	r2, [r4, #12]
 80046aa:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 80046ae:	431a      	orrne	r2, r3
 80046b0:	60e2      	strne	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80046b2:	6963      	ldr	r3, [r4, #20]
 80046b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80046b8:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80046ba:	bf1f      	itttt	ne
 80046bc:	6963      	ldrne	r3, [r4, #20]
 80046be:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 80046c2:	ea43 030c 	orrne.w	r3, r3, ip
 80046c6:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 80046c8:	6833      	ldr	r3, [r6, #0]
 80046ca:	4299      	cmp	r1, r3
 80046cc:	d003      	beq.n	80046d6 <uart_stm32_configure+0xf2>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 80046ce:	f003 ff98 	bl	8008602 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 80046d2:	682b      	ldr	r3, [r5, #0]
 80046d4:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80046d6:	68e3      	ldr	r3, [r4, #12]
 80046d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046dc:	60e3      	str	r3, [r4, #12]
	return 0;
 80046de:	2000      	movs	r0, #0
};
 80046e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return LL_USART_PARITY_ODD;
 80046e4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046e8:	e78b      	b.n	8004602 <uart_stm32_configure+0x1e>
		return -ENOTSUP;
 80046ea:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80046ee:	e7f7      	b.n	80046e0 <uart_stm32_configure+0xfc>
 80046f0:	08009820 	.word	0x08009820
 80046f4:	40011000 	.word	0x40011000

080046f8 <uart_stm32_init>:
 *
 * @return 0
 */
static int uart_stm32_init(struct device *dev)
{
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80046f8:	6803      	ldr	r3, [r0, #0]
{
 80046fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80046fe:	689f      	ldr	r7, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004700:	f8d0 8008 	ldr.w	r8, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004704:	463e      	mov	r6, r7
{
 8004706:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004708:	f856 4b0c 	ldr.w	r4, [r6], #12
 800470c:	481a      	ldr	r0, [pc, #104]	; (8004778 <uart_stm32_init+0x80>)
 800470e:	f000 fa93 	bl	8004c38 <z_impl_device_get_binding>
 8004712:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 8004714:	f8c8 0004 	str.w	r0, [r8, #4]
 8004718:	4631      	mov	r1, r6
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4798      	blx	r3

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 800471e:	4606      	mov	r6, r0
 8004720:	bb38      	cbnz	r0, 8004772 <uart_stm32_init+0x7a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8004722:	68e3      	ldr	r3, [r4, #12]
 8004724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004728:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800472a:	68e3      	ldr	r3, [r4, #12]
 800472c:	f043 030c 	orr.w	r3, r3, #12
 8004730:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8004732:	68e3      	ldr	r3, [r4, #12]
 8004734:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004738:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800473a:	6923      	ldr	r3, [r4, #16]
 800473c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004740:	6123      	str	r3, [r4, #16]
	LL_USART_ConfigCharacter(UartInstance,
				 LL_USART_DATAWIDTH_8B,
				 LL_USART_PARITY_NONE,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8004742:	7d3b      	ldrb	r3, [r7, #20]
 8004744:	b133      	cbz	r3, 8004754 <uart_stm32_init+0x5c>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004746:	682b      	ldr	r3, [r5, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800474c:	6953      	ldr	r3, [r2, #20]
 800474e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004752:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8004754:	4628      	mov	r0, r5
 8004756:	f8d8 1000 	ldr.w	r1, [r8]
 800475a:	f003 ff52 	bl	8008602 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800475e:	68e3      	ldr	r3, [r4, #12]
 8004760:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004764:	60e3      	str	r3, [r4, #12]
	while (!(LL_USART_IsActiveFlag_REACK(UartInstance))) {
	}
#endif /* !USART_ISR_REACK */

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
 8004766:	4628      	mov	r0, r5
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4798      	blx	r3
#endif
	return 0;
}
 800476c:	4630      	mov	r0, r6
 800476e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 8004772:	f06f 0604 	mvn.w	r6, #4
 8004776:	e7f9      	b.n	800476c <uart_stm32_init+0x74>
 8004778:	0800a1be 	.word	0x0800a1be

0800477c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800477c:	6a03      	ldr	r3, [r0, #32]
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004784:	6a03      	ldr	r3, [r0, #32]
{
 8004786:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004788:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800478a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800478c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800478e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004792:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004794:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004796:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800479a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800479c:	4d0e      	ldr	r5, [pc, #56]	; (80047d8 <TIM_OC1_SetConfig+0x5c>)
 800479e:	42a8      	cmp	r0, r5
 80047a0:	d002      	beq.n	80047a8 <TIM_OC1_SetConfig+0x2c>
 80047a2:	4e0e      	ldr	r6, [pc, #56]	; (80047dc <TIM_OC1_SetConfig+0x60>)
 80047a4:	42b0      	cmp	r0, r6
 80047a6:	d110      	bne.n	80047ca <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047a8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80047aa:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80047ae:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80047b2:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b6:	d002      	beq.n	80047be <TIM_OC1_SetConfig+0x42>
 80047b8:	4d08      	ldr	r5, [pc, #32]	; (80047dc <TIM_OC1_SetConfig+0x60>)
 80047ba:	42a8      	cmp	r0, r5
 80047bc:	d105      	bne.n	80047ca <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047be:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047c2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80047c6:	4335      	orrs	r5, r6
 80047c8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047cc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ce:	684a      	ldr	r2, [r1, #4]
 80047d0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d2:	6203      	str	r3, [r0, #32]
}
 80047d4:	bd70      	pop	{r4, r5, r6, pc}
 80047d6:	bf00      	nop
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40010400 	.word	0x40010400

080047e0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047e0:	6a03      	ldr	r3, [r0, #32]
 80047e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e8:	6a03      	ldr	r3, [r0, #32]
{
 80047ea:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047f2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80047f6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047f8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80047fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004802:	4d11      	ldr	r5, [pc, #68]	; (8004848 <TIM_OC3_SetConfig+0x68>)
 8004804:	42a8      	cmp	r0, r5
 8004806:	d003      	beq.n	8004810 <TIM_OC3_SetConfig+0x30>
 8004808:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800480c:	42a8      	cmp	r0, r5
 800480e:	d114      	bne.n	800483a <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004810:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004816:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481a:	4d0b      	ldr	r5, [pc, #44]	; (8004848 <TIM_OC3_SetConfig+0x68>)
 800481c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800481e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	d003      	beq.n	800482c <TIM_OC3_SetConfig+0x4c>
 8004824:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004828:	42a8      	cmp	r0, r5
 800482a:	d106      	bne.n	800483a <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800482c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004830:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004834:	4335      	orrs	r5, r6
 8004836:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800483c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800483e:	684a      	ldr	r2, [r1, #4]
 8004840:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004842:	6203      	str	r3, [r0, #32]
}
 8004844:	bd70      	pop	{r4, r5, r6, pc}
 8004846:	bf00      	nop
 8004848:	40010000 	.word	0x40010000

0800484c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800484c:	6a03      	ldr	r3, [r0, #32]
 800484e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004852:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004854:	6a03      	ldr	r3, [r0, #32]
{
 8004856:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004858:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800485a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800485c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800485e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004862:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004866:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004868:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800486c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004870:	4d08      	ldr	r5, [pc, #32]	; (8004894 <TIM_OC4_SetConfig+0x48>)
 8004872:	42a8      	cmp	r0, r5
 8004874:	d003      	beq.n	800487e <TIM_OC4_SetConfig+0x32>
 8004876:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800487a:	42a8      	cmp	r0, r5
 800487c:	d104      	bne.n	8004888 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800487e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004880:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004884:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004888:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800488a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800488c:	684a      	ldr	r2, [r1, #4]
 800488e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004890:	6203      	str	r3, [r0, #32]
}
 8004892:	bd30      	pop	{r4, r5, pc}
 8004894:	40010000 	.word	0x40010000

08004898 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004898:	4a30      	ldr	r2, [pc, #192]	; (800495c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800489a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800489c:	4290      	cmp	r0, r2
 800489e:	d012      	beq.n	80048c6 <TIM_Base_SetConfig+0x2e>
 80048a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80048a4:	d00f      	beq.n	80048c6 <TIM_Base_SetConfig+0x2e>
 80048a6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80048aa:	4290      	cmp	r0, r2
 80048ac:	d00b      	beq.n	80048c6 <TIM_Base_SetConfig+0x2e>
 80048ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048b2:	4290      	cmp	r0, r2
 80048b4:	d007      	beq.n	80048c6 <TIM_Base_SetConfig+0x2e>
 80048b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048ba:	4290      	cmp	r0, r2
 80048bc:	d003      	beq.n	80048c6 <TIM_Base_SetConfig+0x2e>
 80048be:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80048c2:	4290      	cmp	r0, r2
 80048c4:	d119      	bne.n	80048fa <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80048c6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80048cc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ce:	4a23      	ldr	r2, [pc, #140]	; (800495c <TIM_Base_SetConfig+0xc4>)
 80048d0:	4290      	cmp	r0, r2
 80048d2:	d029      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 80048d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80048d8:	d026      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 80048da:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80048de:	4290      	cmp	r0, r2
 80048e0:	d022      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 80048e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048e6:	4290      	cmp	r0, r2
 80048e8:	d01e      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 80048ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048ee:	4290      	cmp	r0, r2
 80048f0:	d01a      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 80048f2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80048f6:	4290      	cmp	r0, r2
 80048f8:	d016      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 80048fa:	4a19      	ldr	r2, [pc, #100]	; (8004960 <TIM_Base_SetConfig+0xc8>)
 80048fc:	4290      	cmp	r0, r2
 80048fe:	d013      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 8004900:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004904:	4290      	cmp	r0, r2
 8004906:	d00f      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 8004908:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800490c:	4290      	cmp	r0, r2
 800490e:	d00b      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 8004910:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004914:	4290      	cmp	r0, r2
 8004916:	d007      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 8004918:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800491c:	4290      	cmp	r0, r2
 800491e:	d003      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 8004920:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004924:	4290      	cmp	r0, r2
 8004926:	d103      	bne.n	8004930 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004928:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800492a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800492e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004930:	694a      	ldr	r2, [r1, #20]
 8004932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004936:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004938:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800493a:	688b      	ldr	r3, [r1, #8]
 800493c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800493e:	680b      	ldr	r3, [r1, #0]
 8004940:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <TIM_Base_SetConfig+0xc4>)
 8004944:	4298      	cmp	r0, r3
 8004946:	d003      	beq.n	8004950 <TIM_Base_SetConfig+0xb8>
 8004948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800494c:	4298      	cmp	r0, r3
 800494e:	d101      	bne.n	8004954 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8004950:	690b      	ldr	r3, [r1, #16]
 8004952:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004954:	2301      	movs	r3, #1
 8004956:	6143      	str	r3, [r0, #20]
}
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40010000 	.word	0x40010000
 8004960:	40014000 	.word	0x40014000

08004964 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004964:	6a03      	ldr	r3, [r0, #32]
 8004966:	f023 0310 	bic.w	r3, r3, #16
 800496a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800496c:	6a03      	ldr	r3, [r0, #32]
{
 800496e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8004970:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004972:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004974:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004976:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800497a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800497e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004980:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004984:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004988:	4d10      	ldr	r5, [pc, #64]	; (80049cc <TIM_OC2_SetConfig+0x68>)
 800498a:	42a8      	cmp	r0, r5
 800498c:	d003      	beq.n	8004996 <TIM_OC2_SetConfig+0x32>
 800498e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004992:	42a8      	cmp	r0, r5
 8004994:	d114      	bne.n	80049c0 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004996:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800499c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a0:	4d0a      	ldr	r5, [pc, #40]	; (80049cc <TIM_OC2_SetConfig+0x68>)
 80049a2:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80049a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a8:	d003      	beq.n	80049b2 <TIM_OC2_SetConfig+0x4e>
 80049aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80049ae:	42a8      	cmp	r0, r5
 80049b0:	d106      	bne.n	80049c0 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049b2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049b6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049ba:	4335      	orrs	r5, r6
 80049bc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80049c0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80049c2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80049c4:	684a      	ldr	r2, [r1, #4]
 80049c6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80049c8:	6203      	str	r3, [r0, #32]
}
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	40010000 	.word	0x40010000

080049d0 <HAL_TIM_OC_Start>:
{
 80049d0:	b510      	push	{r4, lr}
 80049d2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049d4:	2201      	movs	r2, #1
 80049d6:	6800      	ldr	r0, [r0, #0]
 80049d8:	f003 fee9 	bl	80087ae <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	4a0b      	ldr	r2, [pc, #44]	; (8004a0c <HAL_TIM_OC_Start+0x3c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d003      	beq.n	80049ec <HAL_TIM_OC_Start+0x1c>
 80049e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d103      	bne.n	80049f4 <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80049ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049f2:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fa:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80049fc:	bf1e      	ittt	ne
 80049fe:	681a      	ldrne	r2, [r3, #0]
 8004a00:	f042 0201 	orrne.w	r2, r2, #1
 8004a04:	601a      	strne	r2, [r3, #0]
}
 8004a06:	2000      	movs	r0, #0
 8004a08:	bd10      	pop	{r4, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40010000 	.word	0x40010000

08004a10 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <UTILS_PLL_IsBusy+0x18>)
 8004a12:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLI2SRDY    LL_RCC_PLLI2S_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLI2S_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8004a14:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004a16:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8004a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8004a1e:	4313      	orrs	r3, r2
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 8004a20:	bf14      	ite	ne
 8004a22:	2001      	movne	r0, #1
 8004a24:	2000      	moveq	r0, #0
 8004a26:	4770      	bx	lr
 8004a28:	40023800 	.word	0x40023800

08004a2c <UTILS_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8004a2c:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <UTILS_SetFlashLatency.part.0+0x84>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8004a30:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 8004a34:	d010      	beq.n	8004a58 <UTILS_SetFlashLatency.part.0+0x2c>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004a36:	4b1f      	ldr	r3, [pc, #124]	; (8004ab4 <UTILS_SetFlashLatency.part.0+0x88>)
 8004a38:	4298      	cmp	r0, r3
 8004a3a:	d80c      	bhi.n	8004a56 <UTILS_SetFlashLatency.part.0+0x2a>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004a3c:	4b1e      	ldr	r3, [pc, #120]	; (8004ab8 <UTILS_SetFlashLatency.part.0+0x8c>)
 8004a3e:	4298      	cmp	r0, r3
 8004a40:	d901      	bls.n	8004a46 <UTILS_SetFlashLatency.part.0+0x1a>
        latency = LL_FLASH_LATENCY_4;
 8004a42:	2304      	movs	r3, #4
 8004a44:	e008      	b.n	8004a58 <UTILS_SetFlashLatency.part.0+0x2c>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004a46:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <UTILS_SetFlashLatency.part.0+0x90>)
 8004a48:	4298      	cmp	r0, r3
 8004a4a:	d828      	bhi.n	8004a9e <UTILS_SetFlashLatency.part.0+0x72>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004a4c:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <UTILS_SetFlashLatency.part.0+0x94>)
 8004a4e:	4298      	cmp	r0, r3
 8004a50:	d927      	bls.n	8004aa2 <UTILS_SetFlashLatency.part.0+0x76>
        latency = LL_FLASH_LATENCY_2;
 8004a52:	2302      	movs	r3, #2
 8004a54:	e000      	b.n	8004a58 <UTILS_SetFlashLatency.part.0+0x2c>
        latency = LL_FLASH_LATENCY_5;
 8004a56:	2305      	movs	r3, #5
 8004a58:	4a15      	ldr	r2, [pc, #84]	; (8004ab0 <UTILS_SetFlashLatency.part.0+0x84>)
 8004a5a:	6812      	ldr	r2, [r2, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8004a5c:	0452      	lsls	r2, r2, #17
 8004a5e:	d411      	bmi.n	8004a84 <UTILS_SetFlashLatency.part.0+0x58>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004a60:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <UTILS_SetFlashLatency.part.0+0x98>)
 8004a62:	4290      	cmp	r0, r2
 8004a64:	d908      	bls.n	8004a78 <UTILS_SetFlashLatency.part.0+0x4c>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004a66:	4a15      	ldr	r2, [pc, #84]	; (8004abc <UTILS_SetFlashLatency.part.0+0x90>)
        latency = LL_FLASH_LATENCY_4;
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bf08      	it	eq
 8004a6c:	2304      	moveq	r3, #4
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004a6e:	4290      	cmp	r0, r2
 8004a70:	d808      	bhi.n	8004a84 <UTILS_SetFlashLatency.part.0+0x58>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004a72:	4a13      	ldr	r2, [pc, #76]	; (8004ac0 <UTILS_SetFlashLatency.part.0+0x94>)
 8004a74:	4290      	cmp	r0, r2
 8004a76:	d805      	bhi.n	8004a84 <UTILS_SetFlashLatency.part.0+0x58>
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004a78:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <UTILS_SetFlashLatency.part.0+0x9c>)
 8004a7a:	4290      	cmp	r0, r2
 8004a7c:	d902      	bls.n	8004a84 <UTILS_SetFlashLatency.part.0+0x58>
          latency = LL_FLASH_LATENCY_1;
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bf08      	it	eq
 8004a82:	2301      	moveq	r3, #1
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004a84:	4911      	ldr	r1, [pc, #68]	; (8004acc <UTILS_SetFlashLatency.part.0+0xa0>)
 8004a86:	680a      	ldr	r2, [r1, #0]
 8004a88:	f022 020f 	bic.w	r2, r2, #15
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004a90:	6808      	ldr	r0, [r1, #0]
 8004a92:	f000 000f 	and.w	r0, r0, #15
  return status;
 8004a96:	1ac0      	subs	r0, r0, r3
 8004a98:	bf18      	it	ne
 8004a9a:	2001      	movne	r0, #1
}
 8004a9c:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e7da      	b.n	8004a58 <UTILS_SetFlashLatency.part.0+0x2c>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <UTILS_SetFlashLatency.part.0+0x9c>)
 8004aa4:	4298      	cmp	r0, r3
 8004aa6:	bf94      	ite	ls
 8004aa8:	2300      	movls	r3, #0
 8004aaa:	2301      	movhi	r3, #1
 8004aac:	e7d4      	b.n	8004a58 <UTILS_SetFlashLatency.part.0+0x2c>
 8004aae:	bf00      	nop
 8004ab0:	40007000 	.word	0x40007000
 8004ab4:	08f0d180 	.word	0x08f0d180
 8004ab8:	07270e00 	.word	0x07270e00
 8004abc:	055d4a80 	.word	0x055d4a80
 8004ac0:	03938700 	.word	0x03938700
 8004ac4:	00b71b00 	.word	0x00b71b00
 8004ac8:	01c9c380 	.word	0x01c9c380
 8004acc:	40023c00 	.word	0x40023c00

08004ad0 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8004ad0:	680b      	ldr	r3, [r1, #0]
 8004ad2:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <UTILS_EnablePLLAndSwitchSystem+0x94>)
 8004ad4:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8004ad8:	b570      	push	{r4, r5, r6, lr}

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8004ada:	4d23      	ldr	r5, [pc, #140]	; (8004b68 <UTILS_EnablePLLAndSwitchSystem+0x98>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8004adc:	5cd4      	ldrb	r4, [r2, r3]
  if(SystemCoreClock < hclk_frequency)
 8004ade:	682b      	ldr	r3, [r5, #0]
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8004ae0:	fa20 f404 	lsr.w	r4, r0, r4
  if(SystemCoreClock < hclk_frequency)
 8004ae4:	42a3      	cmp	r3, r4
{
 8004ae6:	460e      	mov	r6, r1
  if(SystemCoreClock < hclk_frequency)
 8004ae8:	d327      	bcc.n	8004b3a <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004aea:	4b20      	ldr	r3, [pc, #128]	; (8004b6c <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004af2:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004af4:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8004af6:	0192      	lsls	r2, r2, #6
 8004af8:	d5fc      	bpl.n	8004af4 <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	6831      	ldr	r1, [r6, #0]
 8004afe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004b02:	430a      	orrs	r2, r1
 8004b04:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	f022 0203 	bic.w	r2, r2, #3
 8004b0c:	f042 0202 	orr.w	r2, r2, #2
 8004b10:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004b12:	4b16      	ldr	r3, [pc, #88]	; (8004b6c <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004b1a:	2a08      	cmp	r2, #8
 8004b1c:	d1fa      	bne.n	8004b14 <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	6871      	ldr	r1, [r6, #4]
 8004b22:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004b26:	430a      	orrs	r2, r1
 8004b28:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	68b1      	ldr	r1, [r6, #8]
 8004b2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b32:	430a      	orrs	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]
 8004b36:	2000      	movs	r0, #0
 8004b38:	e005      	b.n	8004b46 <UTILS_EnablePLLAndSwitchSystem+0x76>
  if(HCLK_Frequency == 0U)
 8004b3a:	b174      	cbz	r4, 8004b5a <UTILS_EnablePLLAndSwitchSystem+0x8a>
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f7ff ff75 	bl	8004a2c <UTILS_SetFlashLatency.part.0>
  if(status == SUCCESS)
 8004b42:	2800      	cmp	r0, #0
 8004b44:	d0d1      	beq.n	8004aea <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8004b46:	682b      	ldr	r3, [r5, #0]
 8004b48:	42a3      	cmp	r3, r4
 8004b4a:	d903      	bls.n	8004b54 <UTILS_EnablePLLAndSwitchSystem+0x84>
  if(HCLK_Frequency == 0U)
 8004b4c:	b13c      	cbz	r4, 8004b5e <UTILS_EnablePLLAndSwitchSystem+0x8e>
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f7ff ff6c 	bl	8004a2c <UTILS_SetFlashLatency.part.0>
    /* Set FLASH latency to lowest latency */
    status = UTILS_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8004b54:	b900      	cbnz	r0, 8004b58 <UTILS_EnablePLLAndSwitchSystem+0x88>
  SystemCoreClock = HCLKFrequency;
 8004b56:	602c      	str	r4, [r5, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8004b58:	bd70      	pop	{r4, r5, r6, pc}
    status = ERROR;
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	e7f3      	b.n	8004b46 <UTILS_EnablePLLAndSwitchSystem+0x76>
 8004b5e:	2001      	movs	r0, #1
 8004b60:	e7fa      	b.n	8004b58 <UTILS_EnablePLLAndSwitchSystem+0x88>
 8004b62:	bf00      	nop
 8004b64:	0800a637 	.word	0x0800a637
 8004b68:	200029ec 	.word	0x200029ec
 8004b6c:	40023800 	.word	0x40023800

08004b70 <LL_PLL_ConfigSystemClock_HSE>:
{
 8004b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b74:	460d      	mov	r5, r1
 8004b76:	4604      	mov	r4, r0
 8004b78:	4690      	mov	r8, r2
 8004b7a:	4619      	mov	r1, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8004b7c:	f7ff ff48 	bl	8004a10 <UTILS_PLL_IsBusy>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	d138      	bne.n	8004bf6 <LL_PLL_ConfigSystemClock_HSE+0x86>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8004b84:	f8d8 6000 	ldr.w	r6, [r8]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8004b88:	f8d8 7004 	ldr.w	r7, [r8, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8004b90:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 8004b94:	fbb4 f4f0 	udiv	r4, r4, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8004b98:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8004b9c:	4344      	muls	r4, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b9e:	0c18      	lsrs	r0, r3, #16
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	0040      	lsls	r0, r0, #1
 8004ba4:	fbb4 f0f0 	udiv	r0, r4, r0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004ba8:	4c14      	ldr	r4, [pc, #80]	; (8004bfc <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 8004baa:	6822      	ldr	r2, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 8004bac:	0392      	lsls	r2, r2, #14
 8004bae:	d40f      	bmi.n	8004bd0 <LL_PLL_ConfigSystemClock_HSE+0x60>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004bb0:	6822      	ldr	r2, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8004bb2:	2d01      	cmp	r5, #1
 8004bb4:	bf0c      	ite	eq
 8004bb6:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004bba:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 8004bbe:	6022      	str	r2, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004bc0:	6822      	ldr	r2, [r4, #0]
 8004bc2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004bc6:	6022      	str	r2, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004bc8:	4c0c      	ldr	r4, [pc, #48]	; (8004bfc <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 8004bca:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8004bcc:	0392      	lsls	r2, r2, #14
 8004bce:	d5fc      	bpl.n	8004bca <LL_PLL_ConfigSystemClock_HSE+0x5a>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8004bd0:	4c0a      	ldr	r4, [pc, #40]	; (8004bfc <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 8004bd2:	4a0b      	ldr	r2, [pc, #44]	; (8004c00 <LL_PLL_ConfigSystemClock_HSE+0x90>)
 8004bd4:	6865      	ldr	r5, [r4, #4]
 8004bd6:	402a      	ands	r2, r5
 8004bd8:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 8004bdc:	4332      	orrs	r2, r6
 8004bde:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004be2:	6062      	str	r2, [r4, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8004be4:	6862      	ldr	r2, [r4, #4]
 8004be6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004bea:	431a      	orrs	r2, r3
 8004bec:	6062      	str	r2, [r4, #4]
}
 8004bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8004bf2:	f7ff bf6d 	b.w	8004ad0 <UTILS_EnablePLLAndSwitchSystem>
}
 8004bf6:	2001      	movs	r0, #1
 8004bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	ffbf8000 	.word	0xffbf8000

08004c04 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	z_sys_device_level = level;
 8004c04:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <z_sys_device_do_config_level+0x2c>)
{
 8004c06:	b570      	push	{r4, r5, r6, lr}
	z_sys_device_level = level;
 8004c08:	7018      	strb	r0, [r3, #0]
	for (info = config_levels[level]; info < config_levels[level+1];
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <z_sys_device_do_config_level+0x30>)
 8004c0c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8004c10:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
 8004c12:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 8004c14:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8004c18:	42a5      	cmp	r5, r4
 8004c1a:	d800      	bhi.n	8004c1e <z_sys_device_do_config_level+0x1a>
		} else {
			z_object_init(info);
		}
	}
}
 8004c1c:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	4620      	mov	r0, r4
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4798      	blx	r3
		if (retval != 0) {
 8004c26:	b100      	cbz	r0, 8004c2a <z_sys_device_do_config_level+0x26>
			info->driver_api = NULL;
 8004c28:	6066      	str	r6, [r4, #4]
								info++) {
 8004c2a:	340c      	adds	r4, #12
 8004c2c:	e7f4      	b.n	8004c18 <z_sys_device_do_config_level+0x14>
 8004c2e:	bf00      	nop
 8004c30:	2000097b 	.word	0x2000097b
 8004c34:	08009808 	.word	0x08009808

08004c38 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004c38:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <z_impl_device_get_binding+0x44>)
{
 8004c3a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004c3c:	4c10      	ldr	r4, [pc, #64]	; (8004c80 <z_impl_device_get_binding+0x48>)
{
 8004c3e:	4605      	mov	r5, r0
 8004c40:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004c42:	429c      	cmp	r4, r3
 8004c44:	d104      	bne.n	8004c50 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
 8004c46:	4c0e      	ldr	r4, [pc, #56]	; (8004c80 <z_impl_device_get_binding+0x48>)
 8004c48:	42b4      	cmp	r4, r6
 8004c4a:	d109      	bne.n	8004c60 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
 8004c4c:	2400      	movs	r4, #0
 8004c4e:	e012      	b.n	8004c76 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
 8004c50:	6862      	ldr	r2, [r4, #4]
 8004c52:	b11a      	cbz	r2, 8004c5c <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
 8004c54:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	42aa      	cmp	r2, r5
 8004c5a:	d00c      	beq.n	8004c76 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004c5c:	340c      	adds	r4, #12
 8004c5e:	e7f0      	b.n	8004c42 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
 8004c60:	6863      	ldr	r3, [r4, #4]
 8004c62:	b90b      	cbnz	r3, 8004c68 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004c64:	340c      	adds	r4, #12
 8004c66:	e7ef      	b.n	8004c48 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	6819      	ldr	r1, [r3, #0]
 8004c6e:	f003 f9af 	bl	8007fd0 <strcmp>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	d1f6      	bne.n	8004c64 <z_impl_device_get_binding+0x2c>
}
 8004c76:	4620      	mov	r0, r4
 8004c78:	bd70      	pop	{r4, r5, r6, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20002b00 	.word	0x20002b00
 8004c80:	200029f8 	.word	0x200029f8

08004c84 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 8004c84:	4b01      	ldr	r3, [pc, #4]	; (8004c8c <z_impl_z_errno+0x8>)
 8004c86:	6898      	ldr	r0, [r3, #8]
}
 8004c88:	3054      	adds	r0, #84	; 0x54
 8004c8a:	4770      	bx	lr
 8004c8c:	20000858 	.word	0x20000858

08004c90 <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
 8004c90:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8004c92:	4807      	ldr	r0, [pc, #28]	; (8004cb0 <z_bss_zero+0x20>)
 8004c94:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <z_bss_zero+0x24>)
 8004c96:	2100      	movs	r1, #0
 8004c98:	1a12      	subs	r2, r2, r0
 8004c9a:	f003 fa05 	bl	80080a8 <memset>
#ifdef DT_CCM_BASE_ADDRESS
	(void)memset(&__ccm_bss_start, 0,
 8004c9e:	4806      	ldr	r0, [pc, #24]	; (8004cb8 <z_bss_zero+0x28>)
 8004ca0:	4a06      	ldr	r2, [pc, #24]	; (8004cbc <z_bss_zero+0x2c>)
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	1a12      	subs	r2, r2, r0
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((u32_t) &__gcov_bss_end - (u32_t) &__gcov_bss_start));
#endif
}
 8004ca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memset(&__ccm_bss_start, 0,
 8004caa:	f003 b9fd 	b.w	80080a8 <memset>
 8004cae:	bf00      	nop
 8004cb0:	20000000 	.word	0x20000000
 8004cb4:	2000097c 	.word	0x2000097c
 8004cb8:	10000000 	.word	0x10000000
 8004cbc:	10000000 	.word	0x10000000

08004cc0 <z_data_copy>:
 * @return N/A
 */
void z_data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 8004cc0:	4809      	ldr	r0, [pc, #36]	; (8004ce8 <z_data_copy+0x28>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8004cc2:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <z_data_copy+0x2c>)
 8004cc4:	490a      	ldr	r1, [pc, #40]	; (8004cf0 <z_data_copy+0x30>)
{
 8004cc6:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8004cc8:	1a12      	subs	r2, r2, r0
 8004cca:	f003 f9c3 	bl	8008054 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 8004cce:	4a09      	ldr	r2, [pc, #36]	; (8004cf4 <z_data_copy+0x34>)
 8004cd0:	4909      	ldr	r1, [pc, #36]	; (8004cf8 <z_data_copy+0x38>)
 8004cd2:	480a      	ldr	r0, [pc, #40]	; (8004cfc <z_data_copy+0x3c>)
 8004cd4:	f003 f9be 	bl	8008054 <memcpy>
		 (uintptr_t) &_ramfunc_ram_size);
#endif /* CONFIG_ARCH_HAS_RAMFUNC_SUPPORT */
#ifdef DT_CCM_BASE_ADDRESS
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
		 __ccm_data_end - __ccm_data_start);
 8004cd8:	4809      	ldr	r0, [pc, #36]	; (8004d00 <z_data_copy+0x40>)
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
 8004cda:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <z_data_copy+0x44>)
 8004cdc:	490a      	ldr	r1, [pc, #40]	; (8004d08 <z_data_copy+0x48>)
 8004cde:	1a12      	subs	r2, r2, r0
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8004ce0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
 8004ce4:	f003 b9b6 	b.w	8008054 <memcpy>
 8004ce8:	2000294c 	.word	0x2000294c
 8004cec:	20002b3c 	.word	0x20002b3c
 8004cf0:	0800a6ac 	.word	0x0800a6ac
 8004cf4:	00000000 	.word	0x00000000
 8004cf8:	0800a6ac 	.word	0x0800a6ac
 8004cfc:	20000000 	.word	0x20000000
 8004d00:	10000000 	.word	0x10000000
 8004d04:	10000000 	.word	0x10000000
 8004d08:	0800a89c 	.word	0x0800a89c

08004d0c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8004d0c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8004d0e:	2002      	movs	r0, #2
 8004d10:	f7ff ff78 	bl	8004c04 <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8004d14:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <bg_thread_main+0x2c>)
 8004d16:	4909      	ldr	r1, [pc, #36]	; (8004d3c <bg_thread_main+0x30>)
 8004d18:	4809      	ldr	r0, [pc, #36]	; (8004d40 <bg_thread_main+0x34>)
 8004d1a:	f001 fd1c 	bl	8006756 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 8004d1e:	2003      	movs	r0, #3
 8004d20:	f7ff ff70 	bl	8004c04 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
 8004d24:	f000 fde8 	bl	80058f8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
 8004d28:	f7fb fd38 	bl	800079c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8004d2c:	4a05      	ldr	r2, [pc, #20]	; (8004d44 <bg_thread_main+0x38>)
 8004d2e:	7b13      	ldrb	r3, [r2, #12]
 8004d30:	f023 0301 	bic.w	r3, r3, #1
 8004d34:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8004d36:	bd08      	pop	{r3, pc}
 8004d38:	08009ab9 	.word	0x08009ab9
 8004d3c:	0800a647 	.word	0x0800a647
 8004d40:	0800a667 	.word	0x0800a667
 8004d44:	200007ec 	.word	0x200007ec

08004d48 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 8004d48:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
 8004d4a:	4b36      	ldr	r3, [pc, #216]	; (8004e24 <z_cstart+0xdc>)
 8004d4c:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004d4e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8004d52:	4c35      	ldr	r4, [pc, #212]	; (8004e28 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
 8004d54:	4e35      	ldr	r6, [pc, #212]	; (8004e2c <z_cstart+0xe4>)
 8004d56:	6963      	ldr	r3, [r4, #20]
 8004d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d5c:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d5e:	2500      	movs	r5, #0
 8004d60:	23f0      	movs	r3, #240	; 0xf0
 8004d62:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8004d66:	77e5      	strb	r5, [r4, #31]
 8004d68:	7625      	strb	r5, [r4, #24]
 8004d6a:	7665      	strb	r5, [r4, #25]
 8004d6c:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8004d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d70:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004d74:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8004d76:	f7fe fccb 	bl	8003710 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8004d7a:	f7fe fbaf 	bl	80034dc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8004d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d82:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8004d84:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
 8004d86:	ab07      	add	r3, sp, #28
 8004d88:	226c      	movs	r2, #108	; 0x6c
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f003 f98b 	bl	80080a8 <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
 8004d92:	4c27      	ldr	r4, [pc, #156]	; (8004e30 <z_cstart+0xe8>)
	struct k_thread dummy_thread = {
 8004d94:	2701      	movs	r7, #1
	_current = &dummy_thread;
 8004d96:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8004d98:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
 8004d9a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8004d9e:	f7ff ff31 	bl	8004c04 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8004da2:	4638      	mov	r0, r7
 8004da4:	f7ff ff2e 	bl	8004c04 <z_sys_device_do_config_level>
	z_sched_init();
 8004da8:	f000 fc06 	bl	80055b8 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
 8004dac:	4b21      	ldr	r3, [pc, #132]	; (8004e34 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
 8004dae:	6226      	str	r6, [r4, #32]
	z_setup_new_thread(&z_main_thread, z_main_stack,
 8004db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004db4:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8004db8:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8004dbc:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <z_cstart+0xf0>)
 8004dbe:	491f      	ldr	r1, [pc, #124]	; (8004e3c <z_cstart+0xf4>)
 8004dc0:	e9cd 5500 	strd	r5, r5, [sp]
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f000 fd15 	bl	80057f4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004dca:	7b73      	ldrb	r3, [r6, #13]
 8004dcc:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8004dd0:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004dd4:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8004dd6:	d104      	bne.n	8004de2 <z_cstart+0x9a>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
 8004dd8:	69b3      	ldr	r3, [r6, #24]
 8004dda:	b913      	cbnz	r3, 8004de2 <z_cstart+0x9a>
		z_add_thread_to_ready_q(thread);
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f000 fa35 	bl	800524c <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
 8004de2:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <z_cstart+0xf8>)
 8004de4:	4d17      	ldr	r5, [pc, #92]	; (8004e44 <z_cstart+0xfc>)
 8004de6:	9305      	str	r3, [sp, #20]
 8004de8:	2201      	movs	r2, #1
 8004dea:	230f      	movs	r3, #15
 8004dec:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004df0:	2300      	movs	r3, #0
 8004df2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004dfc:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <z_cstart+0x100>)
 8004dfe:	4913      	ldr	r1, [pc, #76]	; (8004e4c <z_cstart+0x104>)
 8004e00:	4628      	mov	r0, r5
 8004e02:	f000 fcf7 	bl	80057f4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004e06:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
 8004e08:	60e5      	str	r5, [r4, #12]
 8004e0a:	f023 0304 	bic.w	r3, r3, #4
 8004e0e:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <z_cstart+0x108>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
 8004e12:	490a      	ldr	r1, [pc, #40]	; (8004e3c <z_cstart+0xf4>)
 8004e14:	4805      	ldr	r0, [pc, #20]	; (8004e2c <z_cstart+0xe4>)
	list->tail = (sys_dnode_t *)list;
 8004e16:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8004e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e1e:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <z_cstart+0xf0>)
 8004e20:	f7fe fb3e 	bl	80034a0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8004e24:	200022c0 	.word	0x200022c0
 8004e28:	e000ed00 	.word	0xe000ed00
 8004e2c:	200007ec 	.word	0x200007ec
 8004e30:	20000858 	.word	0x20000858
 8004e34:	0800a68e 	.word	0x0800a68e
 8004e38:	08004d0d 	.word	0x08004d0d
 8004e3c:	20001580 	.word	0x20001580
 8004e40:	0800a693 	.word	0x0800a693
 8004e44:	20000780 	.word	0x20000780
 8004e48:	08008ea9 	.word	0x08008ea9
 8004e4c:	20001980 	.word	0x20001980
 8004e50:	20000870 	.word	0x20000870

08004e54 <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
 8004e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e58:	4613      	mov	r3, r2
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 8004e5e:	f100 0808 	add.w	r8, r0, #8
 8004e62:	f04f 0210 	mov.w	r2, #16
 8004e66:	f3ef 8611 	mrs	r6, BASEPRI
 8004e6a:	f382 8811 	msr	BASEPRI, r2
 8004e6e:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
 8004e72:	6a01      	ldr	r1, [r0, #32]
 8004e74:	68c2      	ldr	r2, [r0, #12]
 8004e76:	4291      	cmp	r1, r2
 8004e78:	d22e      	bcs.n	8004ed8 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8004e7a:	f003 fe39 	bl	8008af0 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
 8004e7e:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
 8004e80:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
 8004e82:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
 8004e84:	b198      	cbz	r0, 8004eae <z_impl_k_msgq_put+0x5a>
			(void)memcpy(pending_thread->base.swap_data, data,
 8004e86:	6940      	ldr	r0, [r0, #20]
 8004e88:	f003 f8e4 	bl	8008054 <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8004e90:	7b6b      	ldrb	r3, [r5, #13]
 8004e92:	06db      	lsls	r3, r3, #27
 8004e94:	d104      	bne.n	8004ea0 <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
 8004e96:	69ab      	ldr	r3, [r5, #24]
 8004e98:	b913      	cbnz	r3, 8004ea0 <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f000 f9d6 	bl	800524c <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
 8004ea0:	4640      	mov	r0, r8
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	f003 fdae 	bl	8008a04 <z_reschedule>
			return 0;
 8004ea8:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8004eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
 8004eae:	69e0      	ldr	r0, [r4, #28]
 8004eb0:	f003 f8d0 	bl	8008054 <memcpy>
			msgq->write_ptr += msgq->msg_size;
 8004eb4:	69e3      	ldr	r3, [r4, #28]
 8004eb6:	68a2      	ldr	r2, [r4, #8]
 8004eb8:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
 8004eba:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
 8004ebc:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
 8004ebe:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
 8004ec0:	bf04      	itt	eq
 8004ec2:	6923      	ldreq	r3, [r4, #16]
 8004ec4:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
 8004ec6:	6a23      	ldr	r3, [r4, #32]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	6223      	str	r3, [r4, #32]
		result = 0;
 8004ecc:	2000      	movs	r0, #0
	__asm__ volatile(
 8004ece:	f386 8811 	msr	BASEPRI, r6
 8004ed2:	f3bf 8f6f 	isb	sy
	return result;
 8004ed6:	e7e8      	b.n	8004eaa <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
 8004ed8:	b14b      	cbz	r3, 8004eee <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
 8004eda:	4a06      	ldr	r2, [pc, #24]	; (8004ef4 <z_impl_k_msgq_put+0xa0>)
 8004edc:	6892      	ldr	r2, [r2, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8004ede:	4631      	mov	r1, r6
		_current->base.swap_data = data;
 8004ee0:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	4640      	mov	r0, r8
}
 8004ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8004eea:	f000 bae1 	b.w	80054b0 <z_pend_curr>
		result = -ENOMSG;
 8004eee:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8004ef2:	e7ec      	b.n	8004ece <z_impl_k_msgq_put+0x7a>
 8004ef4:	20000858 	.word	0x20000858

08004ef8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
 8004ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004efc:	4604      	mov	r4, r0
 8004efe:	4613      	mov	r3, r2
 8004f00:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 8004f02:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
 8004f06:	f04f 0210 	mov.w	r2, #16
 8004f0a:	f3ef 8611 	mrs	r6, BASEPRI
 8004f0e:	f382 8811 	msr	BASEPRI, r2
 8004f12:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
 8004f16:	6a22      	ldr	r2, [r4, #32]
 8004f18:	2a00      	cmp	r2, #0
 8004f1a:	d037      	beq.n	8004f8c <z_impl_k_msgq_get+0x94>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
 8004f1c:	68a2      	ldr	r2, [r4, #8]
 8004f1e:	69a1      	ldr	r1, [r4, #24]
 8004f20:	f003 f898 	bl	8008054 <memcpy>
		msgq->read_ptr += msgq->msg_size;
 8004f24:	69a3      	ldr	r3, [r4, #24]
 8004f26:	68a2      	ldr	r2, [r4, #8]
 8004f28:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
 8004f2a:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
 8004f2c:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
 8004f2e:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
 8004f30:	bf04      	itt	eq
 8004f32:	6923      	ldreq	r3, [r4, #16]
 8004f34:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
 8004f36:	6a23      	ldr	r3, [r4, #32]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f003 fdd7 	bl	8008af0 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8004f42:	4605      	mov	r5, r0
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d02e      	beq.n	8004fa6 <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
 8004f48:	68a2      	ldr	r2, [r4, #8]
 8004f4a:	6941      	ldr	r1, [r0, #20]
 8004f4c:	69e0      	ldr	r0, [r4, #28]
 8004f4e:	f003 f881 	bl	8008054 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 8004f52:	69e3      	ldr	r3, [r4, #28]
 8004f54:	68a2      	ldr	r2, [r4, #8]
 8004f56:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
 8004f58:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
 8004f5a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
 8004f5c:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
 8004f5e:	bf04      	itt	eq
 8004f60:	6923      	ldreq	r3, [r4, #16]
 8004f62:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
 8004f64:	6a23      	ldr	r3, [r4, #32]
 8004f66:	3301      	adds	r3, #1
 8004f68:	6223      	str	r3, [r4, #32]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8004f6e:	7b6b      	ldrb	r3, [r5, #13]
 8004f70:	06db      	lsls	r3, r3, #27
 8004f72:	d104      	bne.n	8004f7e <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
 8004f74:	69ab      	ldr	r3, [r5, #24]
 8004f76:	b913      	cbnz	r3, 8004f7e <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f000 f967 	bl	800524c <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
 8004f7e:	4638      	mov	r0, r7
 8004f80:	4631      	mov	r1, r6
 8004f82:	f003 fd3f 	bl	8008a04 <z_reschedule>
			return 0;
 8004f86:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8004f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
 8004f8c:	b14b      	cbz	r3, 8004fa2 <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
 8004f8e:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <z_impl_k_msgq_get+0xb8>)
 8004f90:	6892      	ldr	r2, [r2, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8004f92:	4638      	mov	r0, r7
		_current->base.swap_data = data;
 8004f94:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8004f96:	4622      	mov	r2, r4
 8004f98:	4631      	mov	r1, r6
}
 8004f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8004f9e:	f000 ba87 	b.w	80054b0 <z_pend_curr>
		result = -ENOMSG;
 8004fa2:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
 8004fa6:	f386 8811 	msr	BASEPRI, r6
 8004faa:	f3bf 8f6f 	isb	sy
	return result;
 8004fae:	e7eb      	b.n	8004f88 <z_impl_k_msgq_get+0x90>
 8004fb0:	20000858 	.word	0x20000858

08004fb4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	460f      	mov	r7, r1
	__asm__ volatile(
 8004fba:	f04f 0310 	mov.w	r3, #16
 8004fbe:	f3ef 8511 	mrs	r5, BASEPRI
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8004fca:	68c2      	ldr	r2, [r0, #12]
 8004fcc:	4930      	ldr	r1, [pc, #192]	; (8005090 <z_impl_k_mutex_lock+0xdc>)
 8004fce:	b15a      	cbz	r2, 8004fe8 <z_impl_k_mutex_lock+0x34>
 8004fd0:	6880      	ldr	r0, [r0, #8]
 8004fd2:	688e      	ldr	r6, [r1, #8]
 8004fd4:	42b0      	cmp	r0, r6
 8004fd6:	d015      	beq.n	8005004 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
 8004fd8:	b9b7      	cbnz	r7, 8005008 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
 8004fda:	f385 8811 	msr	BASEPRI, r5
 8004fde:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
 8004fe2:	f06f 000f 	mvn.w	r0, #15
 8004fe6:	e00c      	b.n	8005002 <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
 8004fe8:	688b      	ldr	r3, [r1, #8]
 8004fea:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8004fee:	6123      	str	r3, [r4, #16]
		mutex->lock_count++;
 8004ff0:	3201      	adds	r2, #1
		mutex->owner = _current;
 8004ff2:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
 8004ff4:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
 8004ff6:	60a3      	str	r3, [r4, #8]
 8004ff8:	f385 8811 	msr	BASEPRI, r5
 8004ffc:	f3bf 8f6f 	isb	sy
		return 0;
 8005000:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
 8005002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
 8005004:	6923      	ldr	r3, [r4, #16]
 8005006:	e7f2      	b.n	8004fee <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8005008:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800500c:	f996 100e 	ldrsb.w	r1, [r6, #14]
 8005010:	4299      	cmp	r1, r3
 8005012:	bfa8      	it	ge
 8005014:	4619      	movge	r1, r3
 8005016:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800501a:	4299      	cmp	r1, r3
 800501c:	da2b      	bge.n	8005076 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
 800501e:	f000 fa89 	bl	8005534 <z_set_prio>
 8005022:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8005024:	463b      	mov	r3, r7
 8005026:	4622      	mov	r2, r4
 8005028:	4629      	mov	r1, r5
 800502a:	481a      	ldr	r0, [pc, #104]	; (8005094 <z_impl_k_mutex_lock+0xe0>)
 800502c:	f000 fa40 	bl	80054b0 <z_pend_curr>
	if (got_mutex == 0) {
 8005030:	2800      	cmp	r0, #0
 8005032:	d0e6      	beq.n	8005002 <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
 8005034:	f04f 0310 	mov.w	r3, #16
 8005038:	f3ef 8511 	mrs	r5, BASEPRI
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005048:	429c      	cmp	r4, r3
 800504a:	d007      	beq.n	800505c <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
 800504c:	b133      	cbz	r3, 800505c <z_impl_k_mutex_lock+0xa8>
 800504e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8005052:	4299      	cmp	r1, r3
 8005054:	bfa8      	it	ge
 8005056:	4619      	movge	r1, r3
 8005058:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800505c:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
 800505e:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8005062:	4299      	cmp	r1, r3
 8005064:	d109      	bne.n	800507a <z_impl_k_mutex_lock+0xc6>
	if (resched) {
 8005066:	b16e      	cbz	r6, 8005084 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
 8005068:	4629      	mov	r1, r5
 800506a:	480a      	ldr	r0, [pc, #40]	; (8005094 <z_impl_k_mutex_lock+0xe0>)
 800506c:	f003 fcca 	bl	8008a04 <z_reschedule>
	return -EAGAIN;
 8005070:	f06f 000a 	mvn.w	r0, #10
 8005074:	e7c5      	b.n	8005002 <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
 8005076:	2600      	movs	r6, #0
 8005078:	e7d4      	b.n	8005024 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
 800507a:	f000 fa5b 	bl	8005534 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800507e:	2800      	cmp	r0, #0
 8005080:	d1f2      	bne.n	8005068 <z_impl_k_mutex_lock+0xb4>
 8005082:	e7f0      	b.n	8005066 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
 8005084:	f385 8811 	msr	BASEPRI, r5
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	e7f0      	b.n	8005070 <z_impl_k_mutex_lock+0xbc>
 800508e:	bf00      	nop
 8005090:	20000858 	.word	0x20000858
 8005094:	2000097c 	.word	0x2000097c

08005098 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 8005098:	b538      	push	{r3, r4, r5, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 800509a:	4b1d      	ldr	r3, [pc, #116]	; (8005110 <z_impl_k_mutex_unlock+0x78>)
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	7bd3      	ldrb	r3, [r2, #15]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	4604      	mov	r4, r0
 80050a4:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
 80050a6:	68c3      	ldr	r3, [r0, #12]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d005      	beq.n	80050b8 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
 80050ac:	3b01      	subs	r3, #1
 80050ae:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
 80050b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sched_unlock();
 80050b4:	f000 b8ae 	b.w	8005214 <k_sched_unlock>
	__asm__ volatile(
 80050b8:	f04f 0310 	mov.w	r3, #16
 80050bc:	f3ef 8511 	mrs	r5, BASEPRI
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 80050c8:	6901      	ldr	r1, [r0, #16]
 80050ca:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
 80050cc:	f990 300e 	ldrsb.w	r3, [r0, #14]
 80050d0:	4299      	cmp	r1, r3
 80050d2:	d001      	beq.n	80050d8 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
 80050d4:	f000 fa2e 	bl	8005534 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 80050d8:	4620      	mov	r0, r4
 80050da:	f003 fd09 	bl	8008af0 <z_unpend_first_thread>
	mutex->owner = new_owner;
 80050de:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 80050e0:	b180      	cbz	r0, 8005104 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
 80050e2:	f990 200e 	ldrsb.w	r2, [r0, #14]
 80050e6:	6122      	str	r2, [r4, #16]
 80050e8:	2200      	movs	r2, #0
 80050ea:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80050ec:	7b42      	ldrb	r2, [r0, #13]
 80050ee:	06d2      	lsls	r2, r2, #27
 80050f0:	d103      	bne.n	80050fa <z_impl_k_mutex_unlock+0x62>
	if (z_is_thread_ready(thread)) {
 80050f2:	6983      	ldr	r3, [r0, #24]
 80050f4:	b90b      	cbnz	r3, 80050fa <z_impl_k_mutex_unlock+0x62>
		z_add_thread_to_ready_q(thread);
 80050f6:	f000 f8a9 	bl	800524c <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
 80050fa:	4629      	mov	r1, r5
 80050fc:	4805      	ldr	r0, [pc, #20]	; (8005114 <z_impl_k_mutex_unlock+0x7c>)
 80050fe:	f003 fc81 	bl	8008a04 <z_reschedule>
 8005102:	e7d5      	b.n	80050b0 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
 8005104:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8005106:	f385 8811 	msr	BASEPRI, r5
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	e7cf      	b.n	80050b0 <z_impl_k_mutex_unlock+0x18>
 8005110:	20000858 	.word	0x20000858
 8005114:	2000097c 	.word	0x2000097c

08005118 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8005118:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 800511a:	4c08      	ldr	r4, [pc, #32]	; (800513c <z_reset_time_slice+0x24>)
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	b15b      	cbz	r3, 8005138 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8005120:	f7fe f8de 	bl	80032e0 <z_clock_elapsed>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	4a06      	ldr	r2, [pc, #24]	; (8005140 <z_reset_time_slice+0x28>)
 8005128:	4418      	add	r0, r3
 800512a:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 800512c:	2100      	movs	r1, #0
 800512e:	4618      	mov	r0, r3
	}
}
 8005130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
 8005134:	f003 bd88 	b.w	8008c48 <z_set_timeout_expiry>
}
 8005138:	bd10      	pop	{r4, pc}
 800513a:	bf00      	nop
 800513c:	2000088c 	.word	0x2000088c
 8005140:	20000858 	.word	0x20000858

08005144 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
 8005144:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005146:	f04f 0310 	mov.w	r3, #16
 800514a:	f3ef 8411 	mrs	r4, BASEPRI
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8005156:	4b08      	ldr	r3, [pc, #32]	; (8005178 <k_sched_time_slice_set+0x34>)
 8005158:	2200      	movs	r2, #0
 800515a:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
 800515c:	4a07      	ldr	r2, [pc, #28]	; (800517c <k_sched_time_slice_set+0x38>)
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((u32_t)t) * (to_hz / from_hz);
 800515e:	230a      	movs	r3, #10
 8005160:	4343      	muls	r3, r0
 8005162:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 8005164:	4b06      	ldr	r3, [pc, #24]	; (8005180 <k_sched_time_slice_set+0x3c>)
 8005166:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 8005168:	f7ff ffd6 	bl	8005118 <z_reset_time_slice>
	__asm__ volatile(
 800516c:	f384 8811 	msr	BASEPRI, r4
 8005170:	f3bf 8f6f 	isb	sy
	}
}
 8005174:	bd10      	pop	{r4, pc}
 8005176:	bf00      	nop
 8005178:	20000858 	.word	0x20000858
 800517c:	2000088c 	.word	0x2000088c
 8005180:	20000888 	.word	0x20000888

08005184 <k_sched_lock>:
	__asm__ volatile(
 8005184:	f04f 0310 	mov.w	r3, #16
 8005188:	f3ef 8111 	mrs	r1, BASEPRI
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 8005194:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <k_sched_lock+0x24>)
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	7bd3      	ldrb	r3, [r2, #15]
 800519a:	3b01      	subs	r3, #1
 800519c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800519e:	f381 8811 	msr	BASEPRI, r1
 80051a2:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 80051a6:	4770      	bx	lr
 80051a8:	20000858 	.word	0x20000858

080051ac <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 80051ac:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <z_priq_dumb_remove+0x28>)
 80051ae:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80051b2:	4282      	cmp	r2, r0
 80051b4:	d105      	bne.n	80051c2 <z_priq_dumb_remove+0x16>
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	428b      	cmp	r3, r1
 80051ba:	d102      	bne.n	80051c2 <z_priq_dumb_remove+0x16>
 80051bc:	7b4b      	ldrb	r3, [r1, #13]
 80051be:	06db      	lsls	r3, r3, #27
 80051c0:	d106      	bne.n	80051d0 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 80051c2:	e9d1 3200 	ldrd	r3, r2, [r1]
 80051c6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 80051c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80051ca:	2300      	movs	r3, #0
	node->prev = NULL;
 80051cc:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000858 	.word	0x20000858

080051d8 <update_cache>:
{
 80051d8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 80051da:	4c0d      	ldr	r4, [pc, #52]	; (8005210 <update_cache+0x38>)
{
 80051dc:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 80051de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80051e2:	f003 fc4e 	bl	8008a82 <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
 80051e6:	4605      	mov	r5, r0
 80051e8:	b900      	cbnz	r0, 80051ec <update_cache+0x14>
 80051ea:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 80051ec:	68a3      	ldr	r3, [r4, #8]
 80051ee:	b94a      	cbnz	r2, 8005204 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
 80051f0:	7b5a      	ldrb	r2, [r3, #13]
 80051f2:	06d2      	lsls	r2, r2, #27
 80051f4:	d106      	bne.n	8005204 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80051f6:	69aa      	ldr	r2, [r5, #24]
 80051f8:	b922      	cbnz	r2, 8005204 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
 80051fa:	89da      	ldrh	r2, [r3, #14]
 80051fc:	2a7f      	cmp	r2, #127	; 0x7f
 80051fe:	d901      	bls.n	8005204 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
 8005200:	6223      	str	r3, [r4, #32]
}
 8005202:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 8005204:	429d      	cmp	r5, r3
 8005206:	d001      	beq.n	800520c <update_cache+0x34>
			z_reset_time_slice();
 8005208:	f7ff ff86 	bl	8005118 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800520c:	6225      	str	r5, [r4, #32]
}
 800520e:	e7f8      	b.n	8005202 <update_cache+0x2a>
 8005210:	20000858 	.word	0x20000858

08005214 <k_sched_unlock>:
{
 8005214:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005216:	f04f 0310 	mov.w	r3, #16
 800521a:	f3ef 8411 	mrs	r4, BASEPRI
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8005226:	4b08      	ldr	r3, [pc, #32]	; (8005248 <k_sched_unlock+0x34>)
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	7bd3      	ldrb	r3, [r2, #15]
 800522c:	3301      	adds	r3, #1
 800522e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8005230:	2000      	movs	r0, #0
 8005232:	f7ff ffd1 	bl	80051d8 <update_cache>
	__asm__ volatile(
 8005236:	f384 8811 	msr	BASEPRI, r4
 800523a:	f3bf 8f6f 	isb	sy
}
 800523e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8005242:	f003 bbf6 	b.w	8008a32 <z_reschedule_unlocked>
 8005246:	bf00      	nop
 8005248:	20000858 	.word	0x20000858

0800524c <z_add_thread_to_ready_q>:
{
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 800524e:	f04f 0310 	mov.w	r3, #16
 8005252:	f3ef 8411 	mrs	r4, BASEPRI
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800525e:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <z_add_thread_to_ready_q+0x68>)
 8005260:	4611      	mov	r1, r2
 8005262:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005266:	428b      	cmp	r3, r1
 8005268:	d01d      	beq.n	80052a6 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800526a:	b1e3      	cbz	r3, 80052a6 <z_add_thread_to_ready_q+0x5a>
 800526c:	6a96      	ldr	r6, [r2, #40]	; 0x28
	if (thread_1->base.prio < thread_2->base.prio) {
 800526e:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8005272:	f993 700e 	ldrsb.w	r7, [r3, #14]
 8005276:	42af      	cmp	r7, r5
 8005278:	dd10      	ble.n	800529c <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
 800527a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800527c:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 8005280:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8005282:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 8005284:	7b43      	ldrb	r3, [r0, #13]
 8005286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800528a:	7343      	strb	r3, [r0, #13]
		update_cache(0);
 800528c:	2000      	movs	r0, #0
 800528e:	f7ff ffa3 	bl	80051d8 <update_cache>
	__asm__ volatile(
 8005292:	f384 8811 	msr	BASEPRI, r4
 8005296:	f3bf 8f6f 	isb	sy
}
 800529a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 800529c:	42b3      	cmp	r3, r6
 800529e:	d002      	beq.n	80052a6 <z_add_thread_to_ready_q+0x5a>
 80052a0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e5      	bne.n	8005272 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
 80052a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80052a8:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
 80052aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->next = list;
 80052ac:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
 80052ae:	6018      	str	r0, [r3, #0]
	list->tail = node;
 80052b0:	6290      	str	r0, [r2, #40]	; 0x28
 80052b2:	e7e7      	b.n	8005284 <z_add_thread_to_ready_q+0x38>
 80052b4:	20000858 	.word	0x20000858

080052b8 <z_move_thread_to_end_of_prio_q>:
{
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	4604      	mov	r4, r0
	__asm__ volatile(
 80052bc:	f04f 0310 	mov.w	r3, #16
 80052c0:	f3ef 8511 	mrs	r5, BASEPRI
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80052cc:	7b43      	ldrb	r3, [r0, #13]
 80052ce:	065a      	lsls	r2, r3, #25
 80052d0:	d503      	bpl.n	80052da <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 80052d2:	4601      	mov	r1, r0
 80052d4:	4817      	ldr	r0, [pc, #92]	; (8005334 <z_move_thread_to_end_of_prio_q+0x7c>)
 80052d6:	f7ff ff69 	bl	80051ac <z_priq_dumb_remove>
	return list->head == list;
 80052da:	4a17      	ldr	r2, [pc, #92]	; (8005338 <z_move_thread_to_end_of_prio_q+0x80>)
 80052dc:	e9d2 3009 	ldrd	r3, r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80052e0:	f102 0124 	add.w	r1, r2, #36	; 0x24
 80052e4:	428b      	cmp	r3, r1
 80052e6:	d01f      	beq.n	8005328 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80052e8:	b1f3      	cbz	r3, 8005328 <z_move_thread_to_end_of_prio_q+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
 80052ea:	f994 600e 	ldrsb.w	r6, [r4, #14]
 80052ee:	f993 700e 	ldrsb.w	r7, [r3, #14]
 80052f2:	42b7      	cmp	r7, r6
 80052f4:	dd13      	ble.n	800531e <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
 80052f6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 80052f8:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
 80052fc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 80052fe:	605c      	str	r4, [r3, #4]
 8005300:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 8005302:	6890      	ldr	r0, [r2, #8]
 8005304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005308:	7363      	strb	r3, [r4, #13]
 800530a:	1b03      	subs	r3, r0, r4
 800530c:	4258      	negs	r0, r3
 800530e:	4158      	adcs	r0, r3
 8005310:	f7ff ff62 	bl	80051d8 <update_cache>
	__asm__ volatile(
 8005314:	f385 8811 	msr	BASEPRI, r5
 8005318:	f3bf 8f6f 	isb	sy
}
 800531c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 800531e:	4283      	cmp	r3, r0
 8005320:	d002      	beq.n	8005328 <z_move_thread_to_end_of_prio_q+0x70>
 8005322:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e2      	bne.n	80052ee <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
 8005328:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
 800532c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800532e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8005330:	6294      	str	r4, [r2, #40]	; 0x28
 8005332:	e7e5      	b.n	8005300 <z_move_thread_to_end_of_prio_q+0x48>
 8005334:	2000087c 	.word	0x2000087c
 8005338:	20000858 	.word	0x20000858

0800533c <z_time_slice>:
	if (pending_current == _current) {
 800533c:	4a15      	ldr	r2, [pc, #84]	; (8005394 <z_time_slice+0x58>)
 800533e:	4916      	ldr	r1, [pc, #88]	; (8005398 <z_time_slice+0x5c>)
{
 8005340:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
 8005342:	680c      	ldr	r4, [r1, #0]
 8005344:	6893      	ldr	r3, [r2, #8]
 8005346:	42a3      	cmp	r3, r4
 8005348:	4614      	mov	r4, r2
 800534a:	d103      	bne.n	8005354 <z_time_slice+0x18>
}
 800534c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
 8005350:	f7ff bee2 	b.w	8005118 <z_reset_time_slice>
	pending_current = NULL;
 8005354:	2500      	movs	r5, #0
 8005356:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
 8005358:	4910      	ldr	r1, [pc, #64]	; (800539c <z_time_slice+0x60>)
 800535a:	6809      	ldr	r1, [r1, #0]
 800535c:	b1b9      	cbz	r1, 800538e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
 800535e:	89d9      	ldrh	r1, [r3, #14]
 8005360:	297f      	cmp	r1, #127	; 0x7f
 8005362:	d814      	bhi.n	800538e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8005364:	490e      	ldr	r1, [pc, #56]	; (80053a0 <z_time_slice+0x64>)
 8005366:	f993 500e 	ldrsb.w	r5, [r3, #14]
 800536a:	6809      	ldr	r1, [r1, #0]
 800536c:	428d      	cmp	r5, r1
 800536e:	db0e      	blt.n	800538e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
 8005370:	490c      	ldr	r1, [pc, #48]	; (80053a4 <z_time_slice+0x68>)
 8005372:	428b      	cmp	r3, r1
 8005374:	d00b      	beq.n	800538e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
 8005376:	6999      	ldr	r1, [r3, #24]
 8005378:	b949      	cbnz	r1, 800538e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
 800537a:	6911      	ldr	r1, [r2, #16]
 800537c:	4281      	cmp	r1, r0
 800537e:	dc03      	bgt.n	8005388 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff ff99 	bl	80052b8 <z_move_thread_to_end_of_prio_q>
 8005386:	e7e1      	b.n	800534c <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
 8005388:	1a09      	subs	r1, r1, r0
 800538a:	6111      	str	r1, [r2, #16]
}
 800538c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	6123      	str	r3, [r4, #16]
 8005392:	e7fb      	b.n	800538c <z_time_slice+0x50>
 8005394:	20000858 	.word	0x20000858
 8005398:	20000884 	.word	0x20000884
 800539c:	2000088c 	.word	0x2000088c
 80053a0:	20000888 	.word	0x20000888
 80053a4:	20000780 	.word	0x20000780

080053a8 <z_remove_thread_from_ready_q>:
{
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4604      	mov	r4, r0
	__asm__ volatile(
 80053ac:	f04f 0310 	mov.w	r3, #16
 80053b0:	f3ef 8511 	mrs	r5, BASEPRI
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80053bc:	7b43      	ldrb	r3, [r0, #13]
 80053be:	065a      	lsls	r2, r3, #25
 80053c0:	d507      	bpl.n	80053d2 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 80053c2:	4601      	mov	r1, r0
 80053c4:	4809      	ldr	r0, [pc, #36]	; (80053ec <z_remove_thread_from_ready_q+0x44>)
 80053c6:	f7ff fef1 	bl	80051ac <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 80053ca:	7b63      	ldrb	r3, [r4, #13]
 80053cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 80053d2:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <z_remove_thread_from_ready_q+0x48>)
 80053d4:	6898      	ldr	r0, [r3, #8]
 80053d6:	1b03      	subs	r3, r0, r4
 80053d8:	4258      	negs	r0, r3
 80053da:	4158      	adcs	r0, r3
 80053dc:	f7ff fefc 	bl	80051d8 <update_cache>
	__asm__ volatile(
 80053e0:	f385 8811 	msr	BASEPRI, r5
 80053e4:	f3bf 8f6f 	isb	sy
}
 80053e8:	bd38      	pop	{r3, r4, r5, pc}
 80053ea:	bf00      	nop
 80053ec:	2000087c 	.word	0x2000087c
 80053f0:	20000858 	.word	0x20000858

080053f4 <pend>:
{
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	4604      	mov	r4, r0
 80053f8:	460d      	mov	r5, r1
 80053fa:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
 80053fc:	f7ff ffd4 	bl	80053a8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
 8005400:	7b63      	ldrb	r3, [r4, #13]
 8005402:	f043 0302 	orr.w	r3, r3, #2
 8005406:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8005408:	b17d      	cbz	r5, 800542a <pend+0x36>
	return list->head == list;
 800540a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 800540c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800540e:	429d      	cmp	r5, r3
 8005410:	d01f      	beq.n	8005452 <pend+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005412:	b1f3      	cbz	r3, 8005452 <pend+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
 8005414:	f994 200e 	ldrsb.w	r2, [r4, #14]
 8005418:	f993 100e 	ldrsb.w	r1, [r3, #14]
 800541c:	4291      	cmp	r1, r2
 800541e:	dd12      	ble.n	8005446 <pend+0x52>
	node->prev = successor->prev;
 8005420:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8005422:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
 8005426:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8005428:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
 800542a:	1c73      	adds	r3, r6, #1
 800542c:	d018      	beq.n	8005460 <pend+0x6c>
		ticks = _TICK_ALIGN + k_ms_to_ticks_ceil32(timeout);
 800542e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8005432:	220a      	movs	r2, #10
 8005434:	4372      	muls	r2, r6

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8005436:	f104 0018 	add.w	r0, r4, #24
 800543a:	3201      	adds	r2, #1
 800543c:	4909      	ldr	r1, [pc, #36]	; (8005464 <pend+0x70>)
}
 800543e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005442:	f000 baff 	b.w	8005a44 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
 8005446:	6869      	ldr	r1, [r5, #4]
 8005448:	428b      	cmp	r3, r1
 800544a:	d002      	beq.n	8005452 <pend+0x5e>
 800544c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e2      	bne.n	8005418 <pend+0x24>
	node->prev = list->tail;
 8005452:	686b      	ldr	r3, [r5, #4]
 8005454:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8005456:	686b      	ldr	r3, [r5, #4]
	node->next = list;
 8005458:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
 800545a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800545c:	606c      	str	r4, [r5, #4]
 800545e:	e7e4      	b.n	800542a <pend+0x36>
}
 8005460:	bd70      	pop	{r4, r5, r6, pc}
 8005462:	bf00      	nop
 8005464:	08008a8f 	.word	0x08008a8f

08005468 <z_pend_curr_irqlock>:
{
 8005468:	b570      	push	{r4, r5, r6, lr}
	pend(_current, wait_q, timeout);
 800546a:	4d0f      	ldr	r5, [pc, #60]	; (80054a8 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
 800546c:	4c0f      	ldr	r4, [pc, #60]	; (80054ac <z_pend_curr_irqlock+0x44>)
{
 800546e:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
 8005470:	68a8      	ldr	r0, [r5, #8]
 8005472:	f7ff ffbf 	bl	80053f4 <pend>
	pending_current = _current;
 8005476:	68ab      	ldr	r3, [r5, #8]
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	4630      	mov	r0, r6
 800547c:	f7fd ff72 	bl	8003364 <arch_swap>
	__asm__ volatile(
 8005480:	f04f 0210 	mov.w	r2, #16
 8005484:	f3ef 8311 	mrs	r3, BASEPRI
 8005488:	f382 8811 	msr	BASEPRI, r2
 800548c:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
 8005490:	6822      	ldr	r2, [r4, #0]
 8005492:	68a9      	ldr	r1, [r5, #8]
 8005494:	4291      	cmp	r1, r2
			pending_current = NULL;
 8005496:	bf04      	itt	eq
 8005498:	2200      	moveq	r2, #0
 800549a:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
}
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
 80054a6:	bf00      	nop
 80054a8:	20000858 	.word	0x20000858
 80054ac:	20000884 	.word	0x20000884

080054b0 <z_pend_curr>:
{
 80054b0:	b510      	push	{r4, lr}
 80054b2:	460c      	mov	r4, r1
 80054b4:	4611      	mov	r1, r2
	pending_current = _current;
 80054b6:	4a06      	ldr	r2, [pc, #24]	; (80054d0 <z_pend_curr+0x20>)
 80054b8:	6890      	ldr	r0, [r2, #8]
 80054ba:	4a06      	ldr	r2, [pc, #24]	; (80054d4 <z_pend_curr+0x24>)
 80054bc:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
 80054be:	461a      	mov	r2, r3
 80054c0:	f7ff ff98 	bl	80053f4 <pend>
 80054c4:	4620      	mov	r0, r4
}
 80054c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ca:	f7fd bf4b 	b.w	8003364 <arch_swap>
 80054ce:	bf00      	nop
 80054d0:	20000858 	.word	0x20000858
 80054d4:	20000884 	.word	0x20000884

080054d8 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
 80054da:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
 80054dc:	f003 fbce 	bl	8008c7c <z_tick_get_32>
 80054e0:	1834      	adds	r4, r6, r0
	__asm__ volatile(
 80054e2:	f04f 0310 	mov.w	r3, #16
 80054e6:	f3ef 8711 	mrs	r7, BASEPRI
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 80054f2:	4d0d      	ldr	r5, [pc, #52]	; (8005528 <z_tick_sleep.part.19+0x50>)
 80054f4:	4b0d      	ldr	r3, [pc, #52]	; (800552c <z_tick_sleep.part.19+0x54>)
 80054f6:	68a8      	ldr	r0, [r5, #8]
 80054f8:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
 80054fa:	f7ff ff55 	bl	80053a8 <z_remove_thread_from_ready_q>
 80054fe:	68a8      	ldr	r0, [r5, #8]
 8005500:	490b      	ldr	r1, [pc, #44]	; (8005530 <z_tick_sleep.part.19+0x58>)
 8005502:	4632      	mov	r2, r6
 8005504:	3018      	adds	r0, #24
 8005506:	f000 fa9d 	bl	8005a44 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
 800550a:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800550c:	7b53      	ldrb	r3, [r2, #13]
 800550e:	f043 0310 	orr.w	r3, r3, #16
 8005512:	7353      	strb	r3, [r2, #13]
 8005514:	4638      	mov	r0, r7
 8005516:	f7fd ff25 	bl	8003364 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 800551a:	f003 fbaf 	bl	8008c7c <z_tick_get_32>
 800551e:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
 8005520:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005526:	bf00      	nop
 8005528:	20000858 	.word	0x20000858
 800552c:	20000884 	.word	0x20000884
 8005530:	08008a8f 	.word	0x08008a8f

08005534 <z_set_prio>:
{
 8005534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005538:	4604      	mov	r4, r0
 800553a:	f04f 0310 	mov.w	r3, #16
 800553e:	f3ef 8911 	mrs	r9, BASEPRI
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
 800554a:	f003 fa30 	bl	80089ae <z_is_thread_ready>
		if (need_sched) {
 800554e:	b24e      	sxtb	r6, r1
 8005550:	4680      	mov	r8, r0
 8005552:	b360      	cbz	r0, 80055ae <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
 8005554:	4d17      	ldr	r5, [pc, #92]	; (80055b4 <z_set_prio+0x80>)
 8005556:	f105 0724 	add.w	r7, r5, #36	; 0x24
 800555a:	4621      	mov	r1, r4
 800555c:	4638      	mov	r0, r7
 800555e:	f7ff fe25 	bl	80051ac <z_priq_dumb_remove>
	return list->head == list;
 8005562:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				thread->base.prio = prio;
 8005564:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005566:	42bb      	cmp	r3, r7
 8005568:	462a      	mov	r2, r5
 800556a:	d019      	beq.n	80055a0 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800556c:	b1c3      	cbz	r3, 80055a0 <z_set_prio+0x6c>
 800556e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	if (thread_1->base.prio < thread_2->base.prio) {
 8005570:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8005574:	42b0      	cmp	r0, r6
 8005576:	dd0e      	ble.n	8005596 <z_set_prio+0x62>
	node->prev = successor->prev;
 8005578:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800557a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
 800557e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8005580:	605c      	str	r4, [r3, #4]
			update_cache(1);
 8005582:	2001      	movs	r0, #1
 8005584:	f7ff fe28 	bl	80051d8 <update_cache>
	__asm__ volatile(
 8005588:	f389 8811 	msr	BASEPRI, r9
 800558c:	f3bf 8f6f 	isb	sy
}
 8005590:	4640      	mov	r0, r8
 8005592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
 8005596:	4299      	cmp	r1, r3
 8005598:	d002      	beq.n	80055a0 <z_set_prio+0x6c>
 800559a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e7      	bne.n	8005570 <z_set_prio+0x3c>
	node->prev = list->tail;
 80055a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80055a2:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 80055a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->next = list;
 80055a6:	6027      	str	r7, [r4, #0]
	list->tail->next = node;
 80055a8:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80055aa:	6294      	str	r4, [r2, #40]	; 0x28
 80055ac:	e7e9      	b.n	8005582 <z_set_prio+0x4e>
			thread->base.prio = prio;
 80055ae:	73a6      	strb	r6, [r4, #14]
 80055b0:	e7ea      	b.n	8005588 <z_set_prio+0x54>
 80055b2:	bf00      	nop
 80055b4:	20000858 	.word	0x20000858

080055b8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 80055b8:	4b04      	ldr	r3, [pc, #16]	; (80055cc <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80055ba:	2100      	movs	r1, #0
 80055bc:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 80055c0:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 80055c4:	4608      	mov	r0, r1
 80055c6:	f7ff bdbd 	b.w	8005144 <k_sched_time_slice_set>
 80055ca:	bf00      	nop
 80055cc:	20000858 	.word	0x20000858

080055d0 <z_impl_k_yield>:
{
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
 80055d2:	4c23      	ldr	r4, [pc, #140]	; (8005660 <z_impl_k_yield+0x90>)
 80055d4:	4b23      	ldr	r3, [pc, #140]	; (8005664 <z_impl_k_yield+0x94>)
 80055d6:	68a2      	ldr	r2, [r4, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d029      	beq.n	8005630 <z_impl_k_yield+0x60>
	__asm__ volatile(
 80055dc:	f04f 0310 	mov.w	r3, #16
 80055e0:	f3ef 8611 	mrs	r6, BASEPRI
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 80055ec:	f104 0524 	add.w	r5, r4, #36	; 0x24
 80055f0:	68a1      	ldr	r1, [r4, #8]
 80055f2:	4628      	mov	r0, r5
 80055f4:	f7ff fdda 	bl	80051ac <z_priq_dumb_remove>
	return list->head == list;
 80055f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
			_priq_run_add(&_kernel.ready_q.runq, _current);
 80055fa:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80055fc:	42aa      	cmp	r2, r5
 80055fe:	d028      	beq.n	8005652 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005600:	b33a      	cbz	r2, 8005652 <z_impl_k_yield+0x82>
 8005602:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	if (thread_1->base.prio < thread_2->base.prio) {
 8005604:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8005608:	f992 700e 	ldrsb.w	r7, [r2, #14]
 800560c:	428f      	cmp	r7, r1
 800560e:	dd1b      	ble.n	8005648 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
 8005610:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8005612:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
 8005616:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8005618:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
 800561a:	7b5a      	ldrb	r2, [r3, #13]
 800561c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005620:	735a      	strb	r2, [r3, #13]
			update_cache(1);
 8005622:	2001      	movs	r0, #1
 8005624:	f7ff fdd8 	bl	80051d8 <update_cache>
	__asm__ volatile(
 8005628:	f386 8811 	msr	BASEPRI, r6
 800562c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8005630:	f04f 0310 	mov.w	r3, #16
 8005634:	f3ef 8011 	mrs	r0, BASEPRI
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
}
 8005640:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005644:	f7fd be8e 	b.w	8003364 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 8005648:	4282      	cmp	r2, r0
 800564a:	d002      	beq.n	8005652 <z_impl_k_yield+0x82>
 800564c:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800564e:	2a00      	cmp	r2, #0
 8005650:	d1da      	bne.n	8005608 <z_impl_k_yield+0x38>
	node->prev = list->tail;
 8005652:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005654:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
 8005656:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	node->next = list;
 8005658:	601d      	str	r5, [r3, #0]
	list->tail->next = node;
 800565a:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800565c:	62a3      	str	r3, [r4, #40]	; 0x28
 800565e:	e7dc      	b.n	800561a <z_impl_k_yield+0x4a>
 8005660:	20000858 	.word	0x20000858
 8005664:	20000780 	.word	0x20000780

08005668 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
 8005668:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
 800566a:	1c43      	adds	r3, r0, #1
{
 800566c:	4605      	mov	r5, r0
	if (ms == K_FOREVER) {
 800566e:	d105      	bne.n	800567c <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <z_impl_k_sleep+0x38>)
 8005672:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8005674:	f000 f920 	bl	80058b8 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
 8005678:	4628      	mov	r0, r5
 800567a:	bd38      	pop	{r3, r4, r5, pc}
 800567c:	240a      	movs	r4, #10
	if (ticks == 0) {
 800567e:	4344      	muls	r4, r0
 8005680:	d109      	bne.n	8005696 <z_impl_k_sleep+0x2e>
	z_impl_k_yield();
 8005682:	f7ff ffa5 	bl	80055d0 <z_impl_k_yield>
			return t / (from_hz / to_hz);
 8005686:	220a      	movs	r2, #10
 8005688:	2300      	movs	r3, #0
 800568a:	4620      	mov	r0, r4
 800568c:	17e1      	asrs	r1, r4, #31
 800568e:	f7fa fd7b 	bl	8000188 <__aeabi_uldivmod>
 8005692:	4605      	mov	r5, r0
	return k_ticks_to_ms_floor64(ticks);
 8005694:	e7f0      	b.n	8005678 <z_impl_k_sleep+0x10>
 8005696:	4620      	mov	r0, r4
 8005698:	f7ff ff1e 	bl	80054d8 <z_tick_sleep.part.19>
 800569c:	4604      	mov	r4, r0
 800569e:	e7f2      	b.n	8005686 <z_impl_k_sleep+0x1e>
 80056a0:	20000858 	.word	0x20000858

080056a4 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
 80056a4:	4b01      	ldr	r3, [pc, #4]	; (80056ac <z_impl_k_current_get+0x8>)
 80056a6:	6898      	ldr	r0, [r3, #8]
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20000858 	.word	0x20000858

080056b0 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 80056b0:	b570      	push	{r4, r5, r6, lr}
 80056b2:	4604      	mov	r4, r0
 80056b4:	f04f 0310 	mov.w	r3, #16
 80056b8:	f3ef 8611 	mrs	r6, BASEPRI
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
 80056c4:	f003 fa14 	bl	8008af0 <z_unpend_first_thread>
	if (thread != NULL) {
 80056c8:	4605      	mov	r5, r0
 80056ca:	b170      	cbz	r0, 80056ea <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80056cc:	7b43      	ldrb	r3, [r0, #13]
 80056ce:	06db      	lsls	r3, r3, #27
 80056d0:	d103      	bne.n	80056da <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
 80056d2:	6983      	ldr	r3, [r0, #24]
 80056d4:	b90b      	cbnz	r3, 80056da <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
 80056d6:	f7ff fdb9 	bl	800524c <z_add_thread_to_ready_q>
 80056da:	2300      	movs	r3, #0
 80056dc:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
 80056de:	4631      	mov	r1, r6
 80056e0:	4808      	ldr	r0, [pc, #32]	; (8005704 <z_impl_k_sem_give+0x54>)
}
 80056e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 80056e6:	f003 b98d 	b.w	8008a04 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80056ea:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	bf18      	it	ne
 80056f2:	3301      	addne	r3, #1
 80056f4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 80056f6:	2102      	movs	r1, #2
 80056f8:	f104 0010 	add.w	r0, r4, #16
 80056fc:	f003 fbbc 	bl	8008e78 <z_handle_obj_poll_events>
 8005700:	e7ed      	b.n	80056de <z_impl_k_sem_give+0x2e>
 8005702:	bf00      	nop
 8005704:	2000097c 	.word	0x2000097c

08005708 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
 8005708:	b410      	push	{r4}
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	f04f 0010 	mov.w	r0, #16
 8005712:	f3ef 8111 	mrs	r1, BASEPRI
 8005716:	f380 8811 	msr	BASEPRI, r0
 800571a:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
 800571e:	6894      	ldr	r4, [r2, #8]
 8005720:	b144      	cbz	r4, 8005734 <z_impl_k_sem_take+0x2c>
		sem->count--;
 8005722:	3c01      	subs	r4, #1
 8005724:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
 8005726:	f381 8811 	msr	BASEPRI, r1
 800572a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
 800572e:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
 8005730:	bc10      	pop	{r4}
 8005732:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
 8005734:	b933      	cbnz	r3, 8005744 <z_impl_k_sem_take+0x3c>
 8005736:	f381 8811 	msr	BASEPRI, r1
 800573a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 800573e:	f06f 000f 	mvn.w	r0, #15
 8005742:	e7f5      	b.n	8005730 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8005744:	4801      	ldr	r0, [pc, #4]	; (800574c <z_impl_k_sem_take+0x44>)
}
 8005746:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8005748:	f7ff beb2 	b.w	80054b0 <z_pend_curr>
 800574c:	2000097c 	.word	0x2000097c

08005750 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
 8005750:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
 8005752:	4c08      	ldr	r4, [pc, #32]	; (8005774 <k_sys_work_q_init+0x24>)
 8005754:	4908      	ldr	r1, [pc, #32]	; (8005778 <k_sys_work_q_init+0x28>)
 8005756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800575a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800575e:	4620      	mov	r0, r4
 8005760:	f000 f912 	bl	8005988 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
 8005764:	4905      	ldr	r1, [pc, #20]	; (800577c <k_sys_work_q_init+0x2c>)
 8005766:	f104 0010 	add.w	r0, r4, #16
 800576a:	f003 fa16 	bl	8008b9a <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
 800576e:	2000      	movs	r0, #0
 8005770:	bd10      	pop	{r4, pc}
 8005772:	bf00      	nop
 8005774:	20000890 	.word	0x20000890
 8005778:	200022c0 	.word	0x200022c0
 800577c:	0800a698 	.word	0x0800a698

08005780 <z_impl_k_busy_wait>:
{
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	/* use 64-bit math to prevent overflow when multiplying */
	u32_t cycles_to_wait = (u32_t)(
		(u64_t)usec_to_wait *
		(u64_t)sys_clock_hw_cycles_per_sec() /
 8005780:	4908      	ldr	r1, [pc, #32]	; (80057a4 <z_impl_k_busy_wait+0x24>)
 8005782:	4a09      	ldr	r2, [pc, #36]	; (80057a8 <z_impl_k_busy_wait+0x28>)
{
 8005784:	b538      	push	{r3, r4, r5, lr}
		(u64_t)sys_clock_hw_cycles_per_sec() /
 8005786:	fba0 0101 	umull	r0, r1, r0, r1
 800578a:	2300      	movs	r3, #0
 800578c:	f7fa fcfc 	bl	8000188 <__aeabi_uldivmod>
 8005790:	4604      	mov	r4, r0
 8005792:	f7fd fdc3 	bl	800331c <z_timer_cycle_get_32>
 8005796:	4605      	mov	r5, r0
 8005798:	f7fd fdc0 	bl	800331c <z_timer_cycle_get_32>

	for (;;) {
		u32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800579c:	1b40      	subs	r0, r0, r5
 800579e:	42a0      	cmp	r0, r4
 80057a0:	d3fa      	bcc.n	8005798 <z_impl_k_busy_wait+0x18>
		}
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	0a037a00 	.word	0x0a037a00
 80057a8:	000f4240 	.word	0x000f4240

080057ac <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
 80057ac:	b510      	push	{r4, lr}
 80057ae:	4602      	mov	r2, r0
	__asm__ volatile(
 80057b0:	f04f 0310 	mov.w	r3, #16
 80057b4:	f3ef 8411 	mrs	r4, BASEPRI
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
 80057c0:	7b43      	ldrb	r3, [r0, #13]
 80057c2:	0759      	lsls	r1, r3, #29
 80057c4:	d404      	bmi.n	80057d0 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
 80057c6:	f384 8811 	msr	BASEPRI, r4
 80057ca:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
 80057ce:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80057d0:	f023 0304 	bic.w	r3, r3, #4
 80057d4:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
 80057d6:	f003 f9d7 	bl	8008b88 <z_is_thread_ready>
 80057da:	b110      	cbz	r0, 80057e2 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
 80057dc:	4610      	mov	r0, r2
 80057de:	f7ff fd35 	bl	800524c <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
 80057e2:	4621      	mov	r1, r4
 80057e4:	4802      	ldr	r0, [pc, #8]	; (80057f0 <z_impl_k_thread_start+0x44>)
}
 80057e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
 80057ea:	f003 b90b 	b.w	8008a04 <z_reschedule>
 80057ee:	bf00      	nop
 80057f0:	2000097c 	.word	0x2000097c

080057f4 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
 80057f4:	b530      	push	{r4, r5, lr}
 80057f6:	b087      	sub	sp, #28
 80057f8:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80057fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80057fc:	9504      	str	r5, [sp, #16]
 80057fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005800:	9503      	str	r5, [sp, #12]
 8005802:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005804:	9502      	str	r5, [sp, #8]
 8005806:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005808:	9501      	str	r5, [sp, #4]
 800580a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800580c:	9500      	str	r5, [sp, #0]
 800580e:	f7fd fe25 	bl	800345c <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 8005812:	4b03      	ldr	r3, [pc, #12]	; (8005820 <z_setup_new_thread+0x2c>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	b103      	cbz	r3, 800581a <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 8005818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581a:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
 800581c:	b007      	add	sp, #28
 800581e:	bd30      	pop	{r4, r5, pc}
 8005820:	20000858 	.word	0x20000858

08005824 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
 8005824:	b570      	push	{r4, r5, r6, lr}
 8005826:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8005828:	2600      	movs	r6, #0
 800582a:	9605      	str	r6, [sp, #20]
 800582c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800582e:	9604      	str	r6, [sp, #16]
 8005830:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8005832:	9603      	str	r6, [sp, #12]
 8005834:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005836:	9602      	str	r6, [sp, #8]
 8005838:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
 800583a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800583c:	9601      	str	r6, [sp, #4]
 800583e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005840:	9600      	str	r6, [sp, #0]
{
 8005842:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8005844:	f7ff ffd6 	bl	80057f4 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
 8005848:	1c6b      	adds	r3, r5, #1
 800584a:	d003      	beq.n	8005854 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
 800584c:	b92d      	cbnz	r5, 800585a <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
 800584e:	4620      	mov	r0, r4
 8005850:	f7ff ffac 	bl	80057ac <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
 8005854:	4620      	mov	r0, r4
 8005856:	b006      	add	sp, #24
 8005858:	bd70      	pop	{r4, r5, r6, pc}
			return ((u32_t)t) * (to_hz / from_hz);
 800585a:	220a      	movs	r2, #10
 800585c:	436a      	muls	r2, r5
 800585e:	3201      	adds	r2, #1
 8005860:	4902      	ldr	r1, [pc, #8]	; (800586c <z_impl_k_thread_create+0x48>)
 8005862:	f104 0018 	add.w	r0, r4, #24
 8005866:	f000 f8ed 	bl	8005a44 <z_add_timeout>
 800586a:	e7f3      	b.n	8005854 <z_impl_k_thread_create+0x30>
 800586c:	08008a8f 	.word	0x08008a8f

08005870 <z_thread_single_suspend>:
#include <syscalls/k_thread_create_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_MULTITHREADING */

void z_thread_single_suspend(struct k_thread *thread)
{
 8005870:	b510      	push	{r4, lr}
 8005872:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
 8005874:	f003 f988 	bl	8008b88 <z_is_thread_ready>
 8005878:	b110      	cbz	r0, 8005880 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
 800587a:	4620      	mov	r0, r4
 800587c:	f7ff fd94 	bl	80053a8 <z_remove_thread_from_ready_q>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8005880:	f104 0018 	add.w	r0, r4, #24
 8005884:	f003 f9ba 	bl	8008bfc <z_abort_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8005888:	7b63      	ldrb	r3, [r4, #13]
 800588a:	f043 0310 	orr.w	r3, r3, #16
 800588e:	7363      	strb	r3, [r4, #13]

	(void)z_abort_thread_timeout(thread);

	z_mark_thread_as_suspended(thread);

	if (thread == _current) {
 8005890:	4b08      	ldr	r3, [pc, #32]	; (80058b4 <z_thread_single_suspend+0x44>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	42a3      	cmp	r3, r4
 8005896:	d10b      	bne.n	80058b0 <z_thread_single_suspend+0x40>
	__asm__ volatile(
 8005898:	f04f 0310 	mov.w	r3, #16
 800589c:	f3ef 8011 	mrs	r0, BASEPRI
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
 80058a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 80058ac:	f003 b8b5 	b.w	8008a1a <z_reschedule_irqlock>
 80058b0:	bd10      	pop	{r4, pc}
 80058b2:	bf00      	nop
 80058b4:	20000858 	.word	0x20000858

080058b8 <z_impl_k_thread_suspend>:

void z_impl_k_thread_suspend(struct k_thread *thread)
{
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4605      	mov	r5, r0
 80058bc:	f04f 0310 	mov.w	r3, #16
 80058c0:	f3ef 8411 	mrs	r4, BASEPRI
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
 80058cc:	f7ff ffd0 	bl	8005870 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <z_impl_k_thread_suspend+0x38>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	42ab      	cmp	r3, r5
 80058d6:	d105      	bne.n	80058e4 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
 80058d8:	4621      	mov	r1, r4
 80058da:	4806      	ldr	r0, [pc, #24]	; (80058f4 <z_impl_k_thread_suspend+0x3c>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
 80058dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
 80058e0:	f003 b890 	b.w	8008a04 <z_reschedule>
	__asm__ volatile(
 80058e4:	f384 8811 	msr	BASEPRI, r4
 80058e8:	f3bf 8f6f 	isb	sy
}
 80058ec:	bd38      	pop	{r3, r4, r5, pc}
 80058ee:	bf00      	nop
 80058f0:	20000858 	.word	0x20000858
 80058f4:	2000097c 	.word	0x2000097c

080058f8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 80058f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 80058fa:	4e20      	ldr	r6, [pc, #128]	; (800597c <z_init_static_threads+0x84>)
 80058fc:	4d20      	ldr	r5, [pc, #128]	; (8005980 <z_init_static_threads+0x88>)
{
 80058fe:	b087      	sub	sp, #28
 8005900:	4637      	mov	r7, r6
	_FOREACH_STATIC_THREAD(thread_data) {
 8005902:	42b5      	cmp	r5, r6
 8005904:	f105 0430 	add.w	r4, r5, #48	; 0x30
 8005908:	d30b      	bcc.n	8005922 <z_init_static_threads+0x2a>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 800590a:	f7ff fc3b 	bl	8005184 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800590e:	4c1c      	ldr	r4, [pc, #112]	; (8005980 <z_init_static_threads+0x88>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8005910:	4e1c      	ldr	r6, [pc, #112]	; (8005984 <z_init_static_threads+0x8c>)
 8005912:	250a      	movs	r5, #10
 8005914:	42bc      	cmp	r4, r7
 8005916:	d321      	bcc.n	800595c <z_init_static_threads+0x64>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
 8005918:	b007      	add	sp, #28
 800591a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 800591e:	f7ff bc79 	b.w	8005214 <k_sched_unlock>
		z_setup_new_thread(
 8005922:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005926:	9305      	str	r3, [sp, #20]
 8005928:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800592c:	9304      	str	r3, [sp, #16]
 800592e:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8005932:	9303      	str	r3, [sp, #12]
 8005934:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8005938:	9302      	str	r3, [sp, #8]
 800593a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 800594a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 800594e:	f7ff ff51 	bl	80057f4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8005952:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8005956:	64dd      	str	r5, [r3, #76]	; 0x4c
 8005958:	4625      	mov	r5, r4
 800595a:	e7d2      	b.n	8005902 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
 800595c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800595e:	1c53      	adds	r3, r2, #1
 8005960:	d003      	beq.n	800596a <z_init_static_threads+0x72>
			schedule_new_thread(thread_data->init_thread,
 8005962:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
 8005964:	b91a      	cbnz	r2, 800596e <z_init_static_threads+0x76>
 8005966:	f7ff ff21 	bl	80057ac <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800596a:	3430      	adds	r4, #48	; 0x30
 800596c:	e7d2      	b.n	8005914 <z_init_static_threads+0x1c>
 800596e:	436a      	muls	r2, r5
 8005970:	3201      	adds	r2, #1
 8005972:	4631      	mov	r1, r6
 8005974:	3018      	adds	r0, #24
 8005976:	f000 f865 	bl	8005a44 <z_add_timeout>
 800597a:	e7f6      	b.n	800596a <z_init_static_threads+0x72>
 800597c:	20002b00 	.word	0x20002b00
 8005980:	20002b00 	.word	0x20002b00
 8005984:	08008a8f 	.word	0x08008a8f

08005988 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
 8005988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800598c:	4605      	mov	r5, r0
 800598e:	b086      	sub	sp, #24
 8005990:	460e      	mov	r6, r1
 8005992:	4617      	mov	r7, r2
 8005994:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
 8005996:	f002 ff98 	bl	80088ca <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
 800599a:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800599e:	2000      	movs	r0, #0
 80059a0:	e9cd 0004 	strd	r0, r0, [sp, #16]
 80059a4:	e9cd 0802 	strd	r0, r8, [sp, #8]
 80059a8:	e9cd 5000 	strd	r5, r0, [sp]
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <k_work_q_start+0x40>)
 80059ae:	463a      	mov	r2, r7
 80059b0:	4631      	mov	r1, r6
 80059b2:	4620      	mov	r0, r4
 80059b4:	f7ff ff36 	bl	8005824 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
 80059b8:	4904      	ldr	r1, [pc, #16]	; (80059cc <k_work_q_start+0x44>)
 80059ba:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
 80059bc:	b006      	add	sp, #24
 80059be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059c2:	f003 b8ea 	b.w	8008b9a <z_impl_k_thread_name_set>
 80059c6:	bf00      	nop
 80059c8:	08006419 	.word	0x08006419
 80059cc:	0800a6a1 	.word	0x0800a6a1

080059d0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 80059d0:	4b03      	ldr	r3, [pc, #12]	; (80059e0 <elapsed+0x10>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	b90b      	cbnz	r3, 80059da <elapsed+0xa>
 80059d6:	f7fd bc83 	b.w	80032e0 <z_clock_elapsed>
}
 80059da:	2000      	movs	r0, #0
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	2000090c 	.word	0x2000090c

080059e4 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80059e4:	6803      	ldr	r3, [r0, #0]
 80059e6:	b140      	cbz	r0, 80059fa <remove_timeout+0x16>
 80059e8:	4a07      	ldr	r2, [pc, #28]	; (8005a08 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
 80059ea:	6852      	ldr	r2, [r2, #4]
 80059ec:	4290      	cmp	r0, r2
 80059ee:	d004      	beq.n	80059fa <remove_timeout+0x16>
	if (next(t) != NULL) {
 80059f0:	b11b      	cbz	r3, 80059fa <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	6881      	ldr	r1, [r0, #8]
 80059f6:	440a      	add	r2, r1
 80059f8:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
 80059fa:	6842      	ldr	r2, [r0, #4]
 80059fc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 80059fe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8005a00:	2300      	movs	r3, #0
	node->prev = NULL;
 8005a02:	e9c0 3300 	strd	r3, r3, [r0]
}
 8005a06:	4770      	bx	lr
 8005a08:	200029f0 	.word	0x200029f0

08005a0c <next_timeout>:
	return list->head == list;
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005a12:	429c      	cmp	r4, r3
 8005a14:	bf08      	it	eq
 8005a16:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
 8005a18:	f7ff ffda 	bl	80059d0 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 8005a1c:	b154      	cbz	r4, 8005a34 <next_timeout+0x28>
 8005a1e:	68a3      	ldr	r3, [r4, #8]
 8005a20:	1a18      	subs	r0, r3, r0
 8005a22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8005a26:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <next_timeout+0x34>)
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	b113      	cbz	r3, 8005a32 <next_timeout+0x26>
 8005a2c:	4298      	cmp	r0, r3
 8005a2e:	bfa8      	it	ge
 8005a30:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8005a32:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 8005a34:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8005a38:	e7f5      	b.n	8005a26 <next_timeout+0x1a>
 8005a3a:	bf00      	nop
 8005a3c:	200029f0 	.word	0x200029f0
 8005a40:	20000858 	.word	0x20000858

08005a44 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	4604      	mov	r4, r0
 8005a48:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8005a4a:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
 8005a4c:	f04f 0310 	mov.w	r3, #16
 8005a50:	f3ef 8511 	mrs	r5, BASEPRI
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 8005a5c:	f7ff ffb8 	bl	80059d0 <elapsed>
	return list->head == list;
 8005a60:	4b18      	ldr	r3, [pc, #96]	; (8005ac4 <z_add_timeout+0x80>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	2e01      	cmp	r6, #1
 8005a66:	bfac      	ite	ge
 8005a68:	1980      	addge	r0, r0, r6
 8005a6a:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	60a0      	str	r0, [r4, #8]
 8005a70:	d001      	beq.n	8005a76 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8005a72:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 8005a74:	b932      	cbnz	r2, 8005a84 <z_add_timeout+0x40>
	node->prev = list->tail;
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
 8005a7a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 8005a7c:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
 8005a7e:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8005a80:	605c      	str	r4, [r3, #4]
 8005a82:	e00a      	b.n	8005a9a <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
 8005a84:	6890      	ldr	r0, [r2, #8]
 8005a86:	68a1      	ldr	r1, [r4, #8]
 8005a88:	4288      	cmp	r0, r1
 8005a8a:	dd15      	ble.n	8005ab8 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
 8005a8c:	1a41      	subs	r1, r0, r1
 8005a8e:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
 8005a90:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8005a92:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
 8005a96:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 8005a98:	6054      	str	r4, [r2, #4]
	return list->head == list;
 8005a9a:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d006      	beq.n	8005aae <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8005aa0:	4294      	cmp	r4, r2
 8005aa2:	d104      	bne.n	8005aae <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
 8005aa4:	f7ff ffb2 	bl	8005a0c <next_timeout>
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	f7fd fbb5 	bl	8003218 <z_clock_set_timeout>
	__asm__ volatile(
 8005aae:	f385 8811 	msr	BASEPRI, r5
 8005ab2:	f3bf 8f6f 	isb	sy
		}
	}
}
 8005ab6:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
 8005ab8:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 8005aba:	42b2      	cmp	r2, r6
 8005abc:	60a1      	str	r1, [r4, #8]
 8005abe:	d0da      	beq.n	8005a76 <z_add_timeout+0x32>
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	e7d7      	b.n	8005a74 <z_add_timeout+0x30>
 8005ac4:	200029f0 	.word	0x200029f0

08005ac8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
 8005ac8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8005acc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8005ace:	f7ff fc35 	bl	800533c <z_time_slice>
	__asm__ volatile(
 8005ad2:	f04f 0310 	mov.w	r3, #16
 8005ad6:	f3ef 8511 	mrs	r5, BASEPRI
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8005ae2:	4e21      	ldr	r6, [pc, #132]	; (8005b68 <z_clock_announce+0xa0>)
 8005ae4:	4f21      	ldr	r7, [pc, #132]	; (8005b6c <z_clock_announce+0xa4>)
	return list->head == list;
 8005ae6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005b70 <z_clock_announce+0xa8>
 8005aea:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8005aec:	46b8      	mov	r8, r7
 8005aee:	f8d9 4000 	ldr.w	r4, [r9]
 8005af2:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005af4:	454c      	cmp	r4, r9
 8005af6:	e9d7 bc00 	ldrd	fp, ip, [r7]
 8005afa:	d005      	beq.n	8005b08 <z_clock_announce+0x40>
 8005afc:	b124      	cbz	r4, 8005b08 <z_clock_announce+0x40>
 8005afe:	68a3      	ldr	r3, [r4, #8]
 8005b00:	4293      	cmp	r3, r2
 8005b02:	dd14      	ble.n	8005b2e <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
 8005b08:	eb1b 0002 	adds.w	r0, fp, r2
 8005b0c:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
 8005b10:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8005b12:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
 8005b16:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
 8005b18:	f7ff ff78 	bl	8005a0c <next_timeout>
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	f7fd fb7b 	bl	8003218 <z_clock_set_timeout>
	__asm__ volatile(
 8005b22:	f385 8811 	msr	BASEPRI, r5
 8005b26:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8005b2a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
 8005b2e:	eb1b 0003 	adds.w	r0, fp, r3
 8005b32:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 8005b3a:	2300      	movs	r3, #0
		curr_tick += dt;
 8005b3c:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
 8005b40:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
 8005b42:	4620      	mov	r0, r4
 8005b44:	f7ff ff4e 	bl	80059e4 <remove_timeout>
 8005b48:	f385 8811 	msr	BASEPRI, r5
 8005b4c:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8005b50:	68e3      	ldr	r3, [r4, #12]
 8005b52:	4798      	blx	r3
	__asm__ volatile(
 8005b54:	f04f 0310 	mov.w	r3, #16
 8005b58:	f3ef 8511 	mrs	r5, BASEPRI
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8005b64:	e7c3      	b.n	8005aee <z_clock_announce+0x26>
 8005b66:	bf00      	nop
 8005b68:	2000090c 	.word	0x2000090c
 8005b6c:	200000d0 	.word	0x200000d0
 8005b70:	200029f0 	.word	0x200029f0

08005b74 <z_tick_get>:

s64_t z_tick_get(void)
{
 8005b74:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
 8005b78:	f04f 0310 	mov.w	r3, #16
 8005b7c:	f3ef 8411 	mrs	r4, BASEPRI
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 8005b88:	f7fd fbaa 	bl	80032e0 <z_clock_elapsed>
 8005b8c:	4b07      	ldr	r3, [pc, #28]	; (8005bac <z_tick_get+0x38>)
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	eb12 0b00 	adds.w	fp, r2, r0
 8005b96:	f143 0c00 	adc.w	ip, r3, #0
 8005b9a:	4658      	mov	r0, fp
 8005b9c:	4661      	mov	r1, ip
	__asm__ volatile(
 8005b9e:	f384 8811 	msr	BASEPRI, r4
 8005ba2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8005ba6:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
 8005baa:	bf00      	nop
 8005bac:	200000d0 	.word	0x200000d0

08005bb0 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
 8005bb0:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
 8005bb2:	7b44      	ldrb	r4, [r0, #13]
 8005bb4:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
 8005bb8:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
 8005bba:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
 8005bbc:	f362 0141 	bfi	r1, r2, #1, #1
 8005bc0:	7381      	strb	r1, [r0, #14]
	event->poller = NULL;
 8005bc2:	2200      	movs	r2, #0
	event->state = K_POLL_STATE_NOT_READY;
 8005bc4:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
 8005bc6:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
 8005bc8:	4a02      	ldr	r2, [pc, #8]	; (8005bd4 <k_poll_event_init+0x24>)
 8005bca:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
 8005bcc:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
 8005bd0:	bd10      	pop	{r4, pc}
 8005bd2:	bf00      	nop
 8005bd4:	00020fff 	.word	0x00020fff

08005bd8 <z_impl_k_poll>:

	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
 8005bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bdc:	b086      	sub	sp, #24
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
 8005bde:	2301      	movs	r3, #1
 8005be0:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
 8005be4:	4b23      	ldr	r3, [pc, #140]	; (8005c74 <z_impl_k_poll+0x9c>)
	struct _poller poller = { .is_polling = true,
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	9304      	str	r3, [sp, #16]
 8005bea:	4b23      	ldr	r3, [pc, #140]	; (8005c78 <z_impl_k_poll+0xa0>)
 8005bec:	9305      	str	r3, [sp, #20]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	events_registered = register_events(events, num_events, &poller,
 8005bee:	fab2 f382 	clz	r3, r2
 8005bf2:	4690      	mov	r8, r2
 8005bf4:	095b      	lsrs	r3, r3, #5
 8005bf6:	aa03      	add	r2, sp, #12
{
 8005bf8:	4606      	mov	r6, r0
	events_registered = register_events(events, num_events, &poller,
 8005bfa:	f003 f8e3 	bl	8008dc4 <register_events>
 8005bfe:	4607      	mov	r7, r0
	__asm__ volatile(
 8005c00:	f04f 0310 	mov.w	r3, #16
 8005c04:	f3ef 8511 	mrs	r5, BASEPRI
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
 8005c10:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005c14:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8005c18:	b94b      	cbnz	r3, 8005c2e <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
 8005c1a:	462a      	mov	r2, r5
 8005c1c:	4639      	mov	r1, r7
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f003 f838 	bl	8008c94 <clear_event_registrations>
	__asm__ volatile(
 8005c24:	f385 8811 	msr	BASEPRI, r5
 8005c28:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
 8005c2c:	e00b      	b.n	8005c46 <z_impl_k_poll+0x6e>
	poller.is_polling = false;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
 8005c34:	f1b8 0f00 	cmp.w	r8, #0
 8005c38:	d109      	bne.n	8005c4e <z_impl_k_poll+0x76>
 8005c3a:	f385 8811 	msr	BASEPRI, r5
 8005c3e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 8005c42:	f06f 040a 	mvn.w	r4, #10
}
 8005c46:	4620      	mov	r0, r4
 8005c48:	b006      	add	sp, #24
 8005c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
 8005c4e:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8005c50:	4643      	mov	r3, r8
 8005c52:	4629      	mov	r1, r5
 8005c54:	4809      	ldr	r0, [pc, #36]	; (8005c7c <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
 8005c56:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8005c5a:	f7ff fc29 	bl	80054b0 <z_pend_curr>
 8005c5e:	4604      	mov	r4, r0
	__asm__ volatile(
 8005c60:	f04f 0310 	mov.w	r3, #16
 8005c64:	f3ef 8511 	mrs	r5, BASEPRI
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	e7d3      	b.n	8005c1a <z_impl_k_poll+0x42>
 8005c72:	bf00      	nop
 8005c74:	20000858 	.word	0x20000858
 8005c78:	08008d25 	.word	0x08008d25
 8005c7c:	2000097c 	.word	0x2000097c

08005c80 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	f04f 0310 	mov.w	r3, #16
 8005c86:	f3ef 8511 	mrs	r5, BASEPRI
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8005c92:	6803      	ldr	r3, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
 8005c94:	60c1      	str	r1, [r0, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 8005c96:	4298      	cmp	r0, r3
	signal->signaled = 1U;
 8005c98:	f04f 0101 	mov.w	r1, #1
 8005c9c:	6081      	str	r1, [r0, #8]
 8005c9e:	d106      	bne.n	8005cae <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
 8005ca0:	f385 8811 	msr	BASEPRI, r5
 8005ca4:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
 8005ca8:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
 8005caa:	4620      	mov	r0, r4
 8005cac:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
 8005cae:	e9d3 2000 	ldrd	r2, r0, [r3]
 8005cb2:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
 8005cb4:	6050      	str	r0, [r2, #4]
	node->next = NULL;
 8005cb6:	2200      	movs	r2, #0
	node->prev = NULL;
 8005cb8:	e9c3 2200 	strd	r2, r2, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f003 f816 	bl	8008cee <signal_poll_event>
	z_reschedule(&lock, key);
 8005cc2:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8005cc4:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 8005cc6:	4802      	ldr	r0, [pc, #8]	; (8005cd0 <z_impl_k_poll_signal_raise+0x50>)
 8005cc8:	f002 fe9c 	bl	8008a04 <z_reschedule>
	return rc;
 8005ccc:	e7ed      	b.n	8005caa <z_impl_k_poll_signal_raise+0x2a>
 8005cce:	bf00      	nop
 8005cd0:	2000097c 	.word	0x2000097c

08005cd4 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
 8005cd4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 8005cd6:	4c07      	ldr	r4, [pc, #28]	; (8005cf4 <init_static_pools+0x20>)
 8005cd8:	4d07      	ldr	r5, [pc, #28]	; (8005cf8 <init_static_pools+0x24>)
 8005cda:	42ac      	cmp	r4, r5
 8005cdc:	d301      	bcc.n	8005ce2 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
 8005cde:	2000      	movs	r0, #0
 8005ce0:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8005ce2:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
 8005ce6:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
 8005ce8:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8005cec:	f000 f9f7 	bl	80060de <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 8005cf0:	341c      	adds	r4, #28
 8005cf2:	e7f2      	b.n	8005cda <init_static_pools+0x6>
 8005cf4:	20002b00 	.word	0x20002b00
 8005cf8:	20002b00 	.word	0x20002b00

08005cfc <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
 8005cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
 8005d00:	1e1c      	subs	r4, r3, #0
{
 8005d02:	b085      	sub	sp, #20
 8005d04:	4607      	mov	r7, r0
 8005d06:	460d      	mov	r5, r1
 8005d08:	4692      	mov	sl, r2
	if (timeout > 0) {
 8005d0a:	dd3b      	ble.n	8005d84 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
 8005d0c:	f002 ffba 	bl	8008c84 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
 8005d10:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
 8005d14:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <k_mem_pool_alloc+0x90>)
 8005d16:	4e1e      	ldr	r6, [pc, #120]	; (8005d90 <k_mem_pool_alloc+0x94>)
 8005d18:	1afb      	subs	r3, r7, r3
 8005d1a:	109b      	asrs	r3, r3, #2
 8005d1c:	435e      	muls	r6, r3
		u32_t level_num, block_num;

		ret = z_sys_mem_pool_block_alloc(&p->base, size,
						 &level_num, &block_num,
						 &block->data);
		block->id.pool = pool_id(p);
 8005d1e:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
 8005d20:	f107 0b14 	add.w	fp, r7, #20
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
 8005d24:	ab03      	add	r3, sp, #12
 8005d26:	aa02      	add	r2, sp, #8
 8005d28:	9500      	str	r5, [sp, #0]
 8005d2a:	4651      	mov	r1, sl
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	f000 fa1c 	bl	800616a <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
 8005d32:	796b      	ldrb	r3, [r5, #5]
 8005d34:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
 8005d36:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
 8005d38:	f362 0303 	bfi	r3, r2, #0, #4
 8005d3c:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
 8005d3e:	686b      	ldr	r3, [r5, #4]
 8005d40:	9a03      	ldr	r2, [sp, #12]
 8005d42:	f362 331f 	bfi	r3, r2, #12, #20
 8005d46:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
 8005d48:	b1c8      	cbz	r0, 8005d7e <k_mem_pool_alloc+0x82>
 8005d4a:	b1c4      	cbz	r4, 8005d7e <k_mem_pool_alloc+0x82>
 8005d4c:	f110 0f0c 	cmn.w	r0, #12
 8005d50:	d115      	bne.n	8005d7e <k_mem_pool_alloc+0x82>
	__asm__ volatile(
 8005d52:	f04f 0310 	mov.w	r3, #16
 8005d56:	f3ef 8011 	mrs	r0, BASEPRI
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
 8005d62:	4622      	mov	r2, r4
 8005d64:	4659      	mov	r1, fp
 8005d66:	f7ff fb7f 	bl	8005468 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
 8005d6a:	1c63      	adds	r3, r4, #1
 8005d6c:	d0da      	beq.n	8005d24 <k_mem_pool_alloc+0x28>
 8005d6e:	f002 ff89 	bl	8008c84 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
 8005d72:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
 8005d76:	2c00      	cmp	r4, #0
 8005d78:	dcd4      	bgt.n	8005d24 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
 8005d7a:	f06f 000a 	mvn.w	r0, #10
}
 8005d7e:	b005      	add	sp, #20
 8005d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
 8005d84:	f04f 0800 	mov.w	r8, #0
 8005d88:	e7c4      	b.n	8005d14 <k_mem_pool_alloc+0x18>
 8005d8a:	bf00      	nop
 8005d8c:	20002b00 	.word	0x20002b00
 8005d90:	b6db6db7 	.word	0xb6db6db7

08005d94 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
 8005d98:	6802      	ldr	r2, [r0, #0]
 8005d9a:	7841      	ldrb	r1, [r0, #1]
 8005d9c:	4e11      	ldr	r6, [pc, #68]	; (8005de4 <k_mem_pool_free_id+0x50>)
 8005d9e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8005da2:	00a4      	lsls	r4, r4, #2
 8005da4:	0b12      	lsrs	r2, r2, #12
 8005da6:	f001 010f 	and.w	r1, r1, #15
 8005daa:	1930      	adds	r0, r6, r4
 8005dac:	f000 fa90 	bl	80062d0 <z_sys_mem_pool_block_free>
 8005db0:	f04f 0310 	mov.w	r3, #16
 8005db4:	f3ef 8511 	mrs	r5, BASEPRI
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
 8005dc0:	f104 0014 	add.w	r0, r4, #20
 8005dc4:	4430      	add	r0, r6
 8005dc6:	f002 fec0 	bl	8008b4a <z_unpend_all>

	if (need_sched != 0) {
 8005dca:	b128      	cbz	r0, 8005dd8 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4806      	ldr	r0, [pc, #24]	; (8005de8 <k_mem_pool_free_id+0x54>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
 8005dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
 8005dd4:	f002 be16 	b.w	8008a04 <z_reschedule>
	__asm__ volatile(
 8005dd8:	f385 8811 	msr	BASEPRI, r5
 8005ddc:	f3bf 8f6f 	isb	sy
}
 8005de0:	bd70      	pop	{r4, r5, r6, pc}
 8005de2:	bf00      	nop
 8005de4:	20002b00 	.word	0x20002b00
 8005de8:	2000097c 	.word	0x2000097c

08005dec <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
 8005dec:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <z_thread_malloc+0x10>)
 8005dee:	689b      	ldr	r3, [r3, #8]
{
 8005df0:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
 8005df2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005df4:	b108      	cbz	r0, 8005dfa <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
 8005df6:	f003 b86b 	b.w	8008ed0 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
 8005dfa:	4770      	bx	lr
 8005dfc:	20000858 	.word	0x20000858

08005e00 <k_sleep>:
	return z_impl_k_sleep(ms);
 8005e00:	f7ff bc32 	b.w	8005668 <z_impl_k_sleep>

08005e04 <gpio_pin_write>:
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
 8005e04:	b410      	push	{r4}
 8005e06:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
 8005e08:	6842      	ldr	r2, [r0, #4]
 8005e0a:	6854      	ldr	r4, [r2, #4]
 8005e0c:	460a      	mov	r2, r1
 8005e0e:	46a4      	mov	ip, r4
 8005e10:	2100      	movs	r1, #0
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
 8005e12:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
 8005e14:	4760      	bx	ip

08005e16 <int32_to_array>:
	array[1] = BYTE(u_val,1);
 8005e16:	0a03      	lsrs	r3, r0, #8
	array[0] = BYTE(u_val,0);
 8005e18:	7008      	strb	r0, [r1, #0]
	array[1] = BYTE(u_val,1);
 8005e1a:	704b      	strb	r3, [r1, #1]
	array[2] = BYTE(u_val,2);
 8005e1c:	0c03      	lsrs	r3, r0, #16
	array[3] = BYTE(u_val,3);
 8005e1e:	0e00      	lsrs	r0, r0, #24
	array[2] = BYTE(u_val,2);
 8005e20:	708b      	strb	r3, [r1, #2]
	array[3] = BYTE(u_val,3);
 8005e22:	70c8      	strb	r0, [r1, #3]
}
 8005e24:	4770      	bx	lr

08005e26 <get_motor_status>:
void get_motor_status(struct motor_dev * motor, struct device * dev){
 8005e26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e28:	4604      	mov	r4, r0
 8005e2a:	4608      	mov	r0, r1
	if(motor->initialized){
 8005e2c:	7863      	ldrb	r3, [r4, #1]
 8005e2e:	b3e3      	cbz	r3, 8005eaa <get_motor_status+0x84>
		u8_t data[4];

		if(can_motor_request(dev, motor, CS_DOWNLOAD, SDO_STATUS_REGISTER_INDEX, SDO_STATUS_REGISTER_SUBINDEX, data)){
 8005e30:	ab03      	add	r3, sp, #12
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	2300      	movs	r3, #0
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	2240      	movs	r2, #64	; 0x40
 8005e3a:	f243 0302 	movw	r3, #12290	; 0x3002
 8005e3e:	4621      	mov	r1, r4
 8005e40:	f7fa fbea 	bl	8000618 <can_motor_request>
 8005e44:	b388      	cbz	r0, 8005eaa <get_motor_status+0x84>
			motor->status_register.STAT_Enabled = (data[0] >> 0 ) & 0x1;
 8005e46:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005e4a:	f003 0201 	and.w	r2, r3, #1
 8005e4e:	70e2      	strb	r2, [r4, #3]
			motor->status_register.STAT_Errror = (data[0] >> 1 ) & 0x1;
 8005e50:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8005e54:	7122      	strb	r2, [r4, #4]
			motor->status_register.STAT_Warning = (data[0] >> 2 ) & 0x1;
 8005e56:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8005e5a:	7162      	strb	r2, [r4, #5]
			motor->status_register.STAT_Moving = (data[0] >> 3 ) & 0x1;
 8005e5c:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8005e60:	71a2      	strb	r2, [r4, #6]
			motor->status_register.STAT_Reached = (data[0] >> 4 ) & 0x1;
 8005e62:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8005e66:	71e2      	strb	r2, [r4, #7]
			motor->status_register.STAT_Limit = (data[0] >> 5 ) & 0x1;
 8005e68:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8005e6c:	7222      	strb	r2, [r4, #8]
			motor->status_register.STAT_FollowingError = (data[0] >> 6 ) & 0x1;
 8005e6e:	f3c3 1280 	ubfx	r2, r3, #6, #1
			motor->status_register.STAT_HomingDone = (data[0] >> 7 ) & 0x1;
 8005e72:	09db      	lsrs	r3, r3, #7
 8005e74:	72a3      	strb	r3, [r4, #10]
			motor->status_register.STAT_Toggle = (data[1] >> 0 ) & 0x1;
 8005e76:	f89d 300d 	ldrb.w	r3, [sp, #13]
			motor->status_register.STAT_FollowingError = (data[0] >> 6 ) & 0x1;
 8005e7a:	7262      	strb	r2, [r4, #9]
			motor->status_register.STAT_Toggle = (data[1] >> 0 ) & 0x1;
 8005e7c:	f003 0201 	and.w	r2, r3, #1
 8005e80:	72e2      	strb	r2, [r4, #11]
			motor->status_register.STAT_CmdToggle = (data[1] >> 1 ) & 0x1;
 8005e82:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8005e86:	7322      	strb	r2, [r4, #12]
			motor->status_register.STAT_CmdError = (data[1] >> 2 ) & 0x1;
 8005e88:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8005e8c:	7362      	strb	r2, [r4, #13]
			motor->status_register.STAT_StopOrHalt = (data[1] >> 3 ) & 0x1;
 8005e8e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8005e92:	73a2      	strb	r2, [r4, #14]
			motor->status_register.STAT_LimitCurrent = (data[1] >> 4 ) & 0x1;
 8005e94:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8005e98:	73e2      	strb	r2, [r4, #15]
			motor->status_register.STAT_LimitVel = (data[1] >> 5 ) & 0x1;
 8005e9a:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8005e9e:	7422      	strb	r2, [r4, #16]
			motor->status_register.STAT_LimitPos = (data[1] >> 6 ) & 0x1;
 8005ea0:	f3c3 1280 	ubfx	r2, r3, #6, #1
			motor->status_register.STAT_LimitSVel = (data[1] >> 7 ) & 0x1;
 8005ea4:	09db      	lsrs	r3, r3, #7
			motor->status_register.STAT_LimitPos = (data[1] >> 6 ) & 0x1;
 8005ea6:	7462      	strb	r2, [r4, #17]
			motor->status_register.STAT_LimitSVel = (data[1] >> 7 ) & 0x1;
 8005ea8:	74a3      	strb	r3, [r4, #18]
		}
	}
}
 8005eaa:	b004      	add	sp, #16
 8005eac:	bd10      	pop	{r4, pc}

08005eae <get_error_register>:
void get_error_register(struct motor_dev * motor, struct device * dev){
 8005eae:	b530      	push	{r4, r5, lr}
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	b085      	sub	sp, #20
	if(motor->initialized){
 8005eb4:	7863      	ldrb	r3, [r4, #1]
void get_error_register(struct motor_dev * motor, struct device * dev){
 8005eb6:	4608      	mov	r0, r1
	if(motor->initialized){
 8005eb8:	b15b      	cbz	r3, 8005ed2 <get_error_register+0x24>
		u8_t data[4];
		if(can_motor_request(dev, motor, CS_DOWNLOAD, SDO_STATUS_REGISTER_INDEX, SDO_STATUS_REGISTER_SUBINDEX, data)){
 8005eba:	ab03      	add	r3, sp, #12
 8005ebc:	2500      	movs	r5, #0
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	9500      	str	r5, [sp, #0]
 8005ec2:	f243 0302 	movw	r3, #12290	; 0x3002
 8005ec6:	2240      	movs	r2, #64	; 0x40
 8005ec8:	4621      	mov	r1, r4
 8005eca:	f7fa fba5 	bl	8000618 <can_motor_request>
 8005ece:	b100      	cbz	r0, 8005ed2 <get_error_register+0x24>
			motor->error_register = data[0] & (data[1] << 8) & (data[2] << 16) & (data[3] << 24);
 8005ed0:	6165      	str	r5, [r4, #20]
		}
	}
}
 8005ed2:	b005      	add	sp, #20
 8005ed4:	bd30      	pop	{r4, r5, pc}

08005ed6 <get_motor_mode>:

void get_motor_mode(struct motor_dev * motor, struct device * dev){
 8005ed6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u8_t data[4];
	if(can_motor_request(dev, motor, CS_DOWNLOAD, SDO_MODE_INDEX, SDO_MODE_SUBINDEX, data)){
 8005ed8:	ab03      	add	r3, sp, #12
void get_motor_mode(struct motor_dev * motor, struct device * dev){
 8005eda:	4604      	mov	r4, r0
	if(can_motor_request(dev, motor, CS_DOWNLOAD, SDO_MODE_INDEX, SDO_MODE_SUBINDEX, data)){
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	2300      	movs	r3, #0
void get_motor_mode(struct motor_dev * motor, struct device * dev){
 8005ee0:	4608      	mov	r0, r1
	if(can_motor_request(dev, motor, CS_DOWNLOAD, SDO_MODE_INDEX, SDO_MODE_SUBINDEX, data)){
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	2240      	movs	r2, #64	; 0x40
 8005ee6:	f243 0303 	movw	r3, #12291	; 0x3003
 8005eea:	4621      	mov	r1, r4
 8005eec:	f7fa fb94 	bl	8000618 <can_motor_request>
 8005ef0:	b110      	cbz	r0, 8005ef8 <get_motor_mode+0x22>
		motor->mode = data[0];
 8005ef2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005ef6:	7623      	strb	r3, [r4, #24]
	}
}
 8005ef8:	b004      	add	sp, #16
 8005efa:	bd10      	pop	{r4, pc}

08005efc <motor_enable>:
	if(can_motor_request(dev, motor, CS_DOWNLOAD, SDO_POSITION_LIMIT_MAX_INDEX, SDO_POSITION_LIMIT_MAX_SUBINDEX, data)){
		motor->actual_limits.PosMax = data[0] | (data[1] << 8) | (data[2] << 16) | (data[3] << 24);
	}
}

void motor_enable(struct motor_dev * motor, struct device * dev){
 8005efc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(motor->initialized){
 8005efe:	7843      	ldrb	r3, [r0, #1]
void motor_enable(struct motor_dev * motor, struct device * dev){
 8005f00:	4604      	mov	r4, r0
 8005f02:	460d      	mov	r5, r1
	if(motor->initialized){
 8005f04:	b193      	cbz	r3, 8005f2c <motor_enable+0x30>

		u8_t data[4];
		zero_table(data);
		data[0] = 1;
 8005f06:	2301      	movs	r3, #1
 8005f08:	9303      	str	r3, [sp, #12]

		if(can_motor_request(dev, motor, CS_UPLOAD, SDO_ENABLE_INDEX, SDO_ENABLE_SUBINDEX, data)){
 8005f0a:	2600      	movs	r6, #0
 8005f0c:	ab03      	add	r3, sp, #12
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	4601      	mov	r1, r0
 8005f12:	9600      	str	r6, [sp, #0]
 8005f14:	f243 0304 	movw	r3, #12292	; 0x3004
 8005f18:	2223      	movs	r2, #35	; 0x23
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f7fa fb7c 	bl	8000618 <can_motor_request>
 8005f20:	b100      	cbz	r0, 8005f24 <motor_enable+0x28>
			motor->error_register = data[0] & (data[1] << 8) & (data[2] << 16) & (data[3] << 24);
 8005f22:	6166      	str	r6, [r4, #20]
		}

		get_motor_status(motor, dev);
 8005f24:	4629      	mov	r1, r5
 8005f26:	4620      	mov	r0, r4
 8005f28:	f7ff ff7d 	bl	8005e26 <get_motor_status>
	}
}
 8005f2c:	b004      	add	sp, #16
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}

08005f30 <motor_disable>:


void motor_disable(struct motor_dev * motor, struct device * dev){
 8005f30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005f32:	460e      	mov	r6, r1
	tb[0] = 0;
 8005f34:	2500      	movs	r5, #0
	u8_t data[4];
	zero_table(data);

	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_ENABLE_INDEX, SDO_ENABLE_SUBINDEX, data)){
 8005f36:	ab03      	add	r3, sp, #12
void motor_disable(struct motor_dev * motor, struct device * dev){
 8005f38:	4604      	mov	r4, r0
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_ENABLE_INDEX, SDO_ENABLE_SUBINDEX, data)){
 8005f3a:	e9cd 5300 	strd	r5, r3, [sp]
 8005f3e:	4601      	mov	r1, r0
 8005f40:	f243 0304 	movw	r3, #12292	; 0x3004
 8005f44:	2223      	movs	r2, #35	; 0x23
 8005f46:	4630      	mov	r0, r6
	tb[0] = 0;
 8005f48:	9503      	str	r5, [sp, #12]
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_ENABLE_INDEX, SDO_ENABLE_SUBINDEX, data)){
 8005f4a:	f7fa fb65 	bl	8000618 <can_motor_request>
 8005f4e:	b100      	cbz	r0, 8005f52 <motor_disable+0x22>
		motor->error_register = data[0] & (data[1] << 8) & (data[2] << 16) & (data[3] << 24);
 8005f50:	6165      	str	r5, [r4, #20]
	}

	get_motor_status(motor, dev);
 8005f52:	4631      	mov	r1, r6
 8005f54:	4620      	mov	r0, r4
 8005f56:	f7ff ff66 	bl	8005e26 <get_motor_status>
}
 8005f5a:	b004      	add	sp, #16
 8005f5c:	bd70      	pop	{r4, r5, r6, pc}

08005f5e <motor_svel_feedback_encoder>:

	get_motor_status(motor, dev);
}


void motor_svel_feedback_encoder(struct motor_dev * motor, struct device * dev){
 8005f5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f60:	460c      	mov	r4, r1
	tb[0] = 0;
 8005f62:	2300      	movs	r3, #0
	u8_t data[4];
	zero_table(data);

	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_SVEL_FEEDBACK_INDEX, SDO_SVEL_FEEDBACK_SUBINDEX, data)){
 8005f64:	aa03      	add	r2, sp, #12
 8005f66:	e9cd 3200 	strd	r3, r2, [sp]
	tb[0] = 0;
 8005f6a:	9303      	str	r3, [sp, #12]
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_SVEL_FEEDBACK_INDEX, SDO_SVEL_FEEDBACK_SUBINDEX, data)){
 8005f6c:	4601      	mov	r1, r0
 8005f6e:	f243 5350 	movw	r3, #13648	; 0x3550
 8005f72:	2223      	movs	r2, #35	; 0x23
 8005f74:	4620      	mov	r0, r4
 8005f76:	f7fa fb4f 	bl	8000618 <can_motor_request>

	}

}
 8005f7a:	b004      	add	sp, #16
 8005f7c:	bd10      	pop	{r4, pc}

08005f7e <motor_mode>:
void motor_mode(struct motor_dev * motor, struct device *dev, u8_t mode){
 8005f7e:	b530      	push	{r4, r5, lr}
 8005f80:	b085      	sub	sp, #20
 8005f82:	460d      	mov	r5, r1
	tb[1] = 0;
 8005f84:	2300      	movs	r3, #0

	u8_t data[4];
	zero_table(data);
	data[0] = mode;
 8005f86:	f88d 200c 	strb.w	r2, [sp, #12]
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_MODE_INDEX, SDO_MODE_SUBINDEX, data)){
 8005f8a:	aa03      	add	r2, sp, #12
 8005f8c:	e9cd 3200 	strd	r3, r2, [sp]
void motor_mode(struct motor_dev * motor, struct device *dev, u8_t mode){
 8005f90:	4604      	mov	r4, r0
	tb[1] = 0;
 8005f92:	f88d 300d 	strb.w	r3, [sp, #13]
	tb[2] = 0;
 8005f96:	f8ad 300e 	strh.w	r3, [sp, #14]
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_MODE_INDEX, SDO_MODE_SUBINDEX, data)){
 8005f9a:	2223      	movs	r2, #35	; 0x23
 8005f9c:	f243 0303 	movw	r3, #12291	; 0x3003
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	f7fa fb38 	bl	8000618 <can_motor_request>

	}
	get_motor_status(motor, dev);
 8005fa8:	4629      	mov	r1, r5
 8005faa:	4620      	mov	r0, r4
 8005fac:	f7ff ff3b 	bl	8005e26 <get_motor_status>
}
 8005fb0:	b005      	add	sp, #20
 8005fb2:	bd30      	pop	{r4, r5, pc}

08005fb4 <motor_set_factor_group>:

void motor_set_factor_group(struct motor_dev * motor, struct device *dev, u8_t mode){
 8005fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	tb[1] = 0;
 8005fb6:	2300      	movs	r3, #0
void motor_set_factor_group(struct motor_dev * motor, struct device *dev, u8_t mode){
 8005fb8:	460c      	mov	r4, r1

	u8_t data[4];
	zero_table(data);
	data[0] = mode;
 8005fba:	f88d 200c 	strb.w	r2, [sp, #12]
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_FACTOR_GROUP_INDEX, SDO_FACTOR_GROUP_SUBINDEX, data)){
 8005fbe:	aa03      	add	r2, sp, #12
 8005fc0:	e9cd 3200 	strd	r3, r2, [sp]
	tb[1] = 0;
 8005fc4:	f88d 300d 	strb.w	r3, [sp, #13]
	tb[2] = 0;
 8005fc8:	f8ad 300e 	strh.w	r3, [sp, #14]
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_FACTOR_GROUP_INDEX, SDO_FACTOR_GROUP_SUBINDEX, data)){
 8005fcc:	4601      	mov	r1, r0
 8005fce:	f44f 536c 	mov.w	r3, #15104	; 0x3b00
 8005fd2:	2223      	movs	r2, #35	; 0x23
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f7fa fb1f 	bl	8000618 <can_motor_request>

	}
}
 8005fda:	b004      	add	sp, #16
 8005fdc:	bd10      	pop	{r4, pc}

08005fde <motor_set_velocity>:

void motor_set_velocity(struct motor_dev * motor, struct device *dev, int32_t velocity){
 8005fde:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005fe0:	4615      	mov	r5, r2
	u8_t data[4];
	int32_to_array(velocity, data);
 8005fe2:	aa03      	add	r2, sp, #12
void motor_set_velocity(struct motor_dev * motor, struct device *dev, int32_t velocity){
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	460e      	mov	r6, r1
	int32_to_array(velocity, data);
 8005fe8:	4628      	mov	r0, r5
 8005fea:	4611      	mov	r1, r2
 8005fec:	f7ff ff13 	bl	8005e16 <int32_to_array>

	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_SET_VELOCITY_INDEX, SDO_SET_VELOCITY_SUBINDEX, data)){
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	9201      	str	r2, [sp, #4]
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2223      	movs	r2, #35	; 0x23
 8005ff8:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4630      	mov	r0, r6
 8006000:	f7fa fb0a 	bl	8000618 <can_motor_request>
 8006004:	b100      	cbz	r0, 8006008 <motor_set_velocity+0x2a>
		motor->setpoints.Velocity = velocity;
 8006006:	6225      	str	r5, [r4, #32]
	}
}
 8006008:	b004      	add	sp, #16
 800600a:	bd70      	pop	{r4, r5, r6, pc}

0800600c <motor_set_encoder_resolution>:
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_POSITION_LIMIT_MIN_INDEX, SDO_POSITION_LIMIT_MIN_SUBINDEX, data)){
		motor->actual_limits.PosMin = val;
	}
}

void motor_set_encoder_resolution(struct motor_dev * motor, struct device *dev, int32_t val){
 800600c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800600e:	4615      	mov	r5, r2
	u8_t data[4];
	int32_to_array(val, data);
 8006010:	aa03      	add	r2, sp, #12
void motor_set_encoder_resolution(struct motor_dev * motor, struct device *dev, int32_t val){
 8006012:	4604      	mov	r4, r0
 8006014:	460e      	mov	r6, r1
	int32_to_array(val, data);
 8006016:	4628      	mov	r0, r5
 8006018:	4611      	mov	r1, r2
 800601a:	f7ff fefc 	bl	8005e16 <int32_to_array>

	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_ENCODER_RESOLUTION_INDEX, SDO_ENCODER_RESOLUTION_SUBINDEX, data)){
 800601e:	2300      	movs	r3, #0
 8006020:	9201      	str	r2, [sp, #4]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	2223      	movs	r2, #35	; 0x23
 8006026:	f643 1362 	movw	r3, #14690	; 0x3962
 800602a:	4621      	mov	r1, r4
 800602c:	4630      	mov	r0, r6
 800602e:	f7fa faf3 	bl	8000618 <can_motor_request>
 8006032:	b100      	cbz	r0, 8006036 <motor_set_encoder_resolution+0x2a>
		motor->actual_limits.PosMin = val;
 8006034:	65e5      	str	r5, [r4, #92]	; 0x5c
	}
}
 8006036:	b004      	add	sp, #16
 8006038:	bd70      	pop	{r4, r5, r6, pc}

0800603a <motor_set_actual_position>:



void motor_set_actual_position(struct motor_dev * motor, struct device *dev, int32_t val){
 800603a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800603c:	4615      	mov	r5, r2
	u8_t data[4];
	int32_to_array(val, data);
 800603e:	aa03      	add	r2, sp, #12
void motor_set_actual_position(struct motor_dev * motor, struct device *dev, int32_t val){
 8006040:	4604      	mov	r4, r0
 8006042:	460e      	mov	r6, r1
	int32_to_array(val, data);
 8006044:	4628      	mov	r0, r5
 8006046:	4611      	mov	r1, r2
 8006048:	f7ff fee5 	bl	8005e16 <int32_to_array>

	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_ACTUAL_POSITION_INDEX, SDO_ACTUAL_POSITION_SUBINDEX, data)){
 800604c:	2300      	movs	r3, #0
 800604e:	9201      	str	r2, [sp, #4]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	2223      	movs	r2, #35	; 0x23
 8006054:	f243 7362 	movw	r3, #14178	; 0x3762
 8006058:	4621      	mov	r1, r4
 800605a:	4630      	mov	r0, r6
 800605c:	f7fa fadc 	bl	8000618 <can_motor_request>
 8006060:	b100      	cbz	r0, 8006064 <motor_set_actual_position+0x2a>
		motor->actual_values.Position = val;
 8006062:	6365      	str	r5, [r4, #52]	; 0x34
	}
}
 8006064:	b004      	add	sp, #16
 8006066:	bd70      	pop	{r4, r5, r6, pc}

08006068 <motor_movr>:


void motor_movr(struct motor_dev * motor, struct device *dev, int32_t val){
 8006068:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	u8_t data[4];
	int32_to_array(val, data);
 800606a:	ac03      	add	r4, sp, #12
void motor_movr(struct motor_dev * motor, struct device *dev, int32_t val){
 800606c:	4606      	mov	r6, r0
 800606e:	460d      	mov	r5, r1
	int32_to_array(val, data);
 8006070:	4610      	mov	r0, r2
 8006072:	4621      	mov	r1, r4
 8006074:	f7ff fecf 	bl	8005e16 <int32_to_array>

	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_RELATIVE_MOVING_INDEX, SDO_RELATIVE_MOVING_SUBINDEX, data)){
 8006078:	2300      	movs	r3, #0
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	9401      	str	r4, [sp, #4]
 800607e:	f243 7391 	movw	r3, #14225	; 0x3791
 8006082:	2223      	movs	r2, #35	; 0x23
 8006084:	4631      	mov	r1, r6
 8006086:	4628      	mov	r0, r5
 8006088:	f7fa fac6 	bl	8000618 <can_motor_request>
	}
}
 800608c:	b004      	add	sp, #16
 800608e:	bd70      	pop	{r4, r5, r6, pc}

08006090 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
 8006094:	f990 000b 	ldrsb.w	r0, [r0, #11]
 8006098:	250c      	movs	r5, #12
 800609a:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
 800609c:	4288      	cmp	r0, r1
 800609e:	eb06 0405 	add.w	r4, r6, r5
 80060a2:	bfb8      	it	lt
 80060a4:	5974      	ldrlt	r4, [r6, r5]

	*word = &bitarray[bn / 32];
 80060a6:	2a00      	cmp	r2, #0
 80060a8:	4610      	mov	r0, r2
 80060aa:	bfb8      	it	lt
 80060ac:	f102 001f 	addlt.w	r0, r2, #31
 80060b0:	1140      	asrs	r0, r0, #5
 80060b2:	eb04 0180 	add.w	r1, r4, r0, lsl #2
 80060b6:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
 80060b8:	f002 001f 	and.w	r0, r2, #31
 80060bc:	bd70      	pop	{r4, r5, r6, pc}

080060be <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
 80060be:	f04f 0310 	mov.w	r3, #16
 80060c2:	f3ef 8011 	mrs	r0, BASEPRI
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
 80060ce:	4770      	bx	lr

080060d0 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80060d0:	07c3      	lsls	r3, r0, #31
 80060d2:	d503      	bpl.n	80060dc <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
 80060d4:	f381 8811 	msr	BASEPRI, r1
 80060d8:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
 80060dc:	4770      	bx	lr

080060de <z_sys_mem_pool_base_init>:
{
 80060de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 80060e2:	6846      	ldr	r6, [r0, #4]
 80060e4:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 80060e6:	6801      	ldr	r1, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
 80060e8:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
 80060ec:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 80060ee:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
 80060f2:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 80060f4:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 80060f6:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
 80060f8:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
 80060fa:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
 80060fe:	4598      	cmp	r8, r3
 8006100:	dc05      	bgt.n	800610e <z_sys_mem_pool_base_init+0x30>
 8006102:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
 8006104:	4619      	mov	r1, r3
 8006106:	428f      	cmp	r7, r1
 8006108:	dc20      	bgt.n	800614c <z_sys_mem_pool_base_init+0x6e>
}
 800610a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
 800610e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
 8006112:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
 8006116:	fb09 fe03 	mul.w	lr, r9, r3
 800611a:	eb0a 040e 	add.w	r4, sl, lr
 800611e:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
 8006122:	2d20      	cmp	r5, #32
 8006124:	e9c4 bb01 	strd	fp, fp, [r4, #4]
 8006128:	d805      	bhi.n	8006136 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
 800612a:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
 800612c:	0892      	lsrs	r2, r2, #2
 800612e:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
 8006132:	3301      	adds	r3, #1
 8006134:	e7e3      	b.n	80060fe <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
 8006136:	f115 041f 	adds.w	r4, r5, #31
 800613a:	bf48      	it	mi
 800613c:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
 8006140:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
 8006142:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
 8006146:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800614a:	e7ef      	b.n	800612c <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
 800614c:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
 800614e:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
 8006150:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
 8006154:	18ec      	adds	r4, r5, r3
	node->next = list;
 8006156:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
 800615a:	6895      	ldr	r5, [r2, #8]
 800615c:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
 800615e:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
 8006160:	3101      	adds	r1, #1
 8006162:	602c      	str	r4, [r5, #0]
	list->tail = node;
 8006164:	4433      	add	r3, r6
 8006166:	6094      	str	r4, [r2, #8]
 8006168:	e7cd      	b.n	8006106 <z_sys_mem_pool_base_init+0x28>

0800616a <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
 800616a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616e:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 8006170:	7a85      	ldrb	r5, [r0, #10]
{
 8006172:	af00      	add	r7, sp, #0
 8006174:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 8006178:	00ab      	lsls	r3, r5, #2
 800617a:	3307      	adds	r3, #7
 800617c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006180:	ebad 0d03 	sub.w	sp, sp, r3
 8006184:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
 8006186:	4653      	mov	r3, sl
 8006188:	6842      	ldr	r2, [r0, #4]
 800618a:	f843 2904 	str.w	r2, [r3], #-4
{
 800618e:	4604      	mov	r4, r0
	for (i = 0; i < p->n_levels; i++) {
 8006190:	2200      	movs	r2, #0
 8006192:	4295      	cmp	r5, r2
 8006194:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
 8006198:	dd09      	ble.n	80061ae <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
 800619a:	b122      	cbz	r2, 80061a6 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
 800619c:	6818      	ldr	r0, [r3, #0]
 800619e:	0880      	lsrs	r0, r0, #2
 80061a0:	f020 0003 	bic.w	r0, r0, #3
 80061a4:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
 80061a6:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80061aa:	4288      	cmp	r0, r1
 80061ac:	d208      	bcs.n	80061c0 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
 80061ae:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80061b2:	d107      	bne.n	80061c4 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
 80061b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061b6:	2300      	movs	r3, #0
 80061b8:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
 80061ba:	f06f 000b 	mvn.w	r0, #11
 80061be:	e044      	b.n	800624a <z_sys_mem_pool_block_alloc+0xe0>
	for (i = 0; i < p->n_levels; i++) {
 80061c0:	3201      	adds	r2, #1
 80061c2:	e7e6      	b.n	8006192 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80061c4:	7c20      	ldrb	r0, [r4, #16]
 80061c6:	f010 0001 	ands.w	r0, r0, #1
 80061ca:	d001      	beq.n	80061d0 <z_sys_mem_pool_block_alloc+0x66>
 80061cc:	f7ff ff77 	bl	80060be <pool_irq_lock.isra.2.part.3>
 80061d0:	68e2      	ldr	r2, [r4, #12]
 80061d2:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
 80061d4:	4680      	mov	r8, r0
	for (i = alloc_l; i >= 0; i--) {
 80061d6:	fb03 2309 	mla	r3, r3, r9, r2
	block = sys_dlist_get(&p->levels[l].free_list);
 80061da:	464e      	mov	r6, r9
	return list->head == list;
 80061dc:	461a      	mov	r2, r3
 80061de:	f852 5f04 	ldr.w	r5, [r2, #4]!
	if (!sys_dlist_is_empty(list)) {
 80061e2:	4295      	cmp	r5, r2
 80061e4:	d06d      	beq.n	80062c2 <z_sys_mem_pool_block_alloc+0x158>
	node->prev->next = node->next;
 80061e6:	e9d5 3200 	ldrd	r3, r2, [r5]
 80061ea:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 80061ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80061ee:	2300      	movs	r3, #0
	node->prev = NULL;
 80061f0:	e9c5 3300 	strd	r3, r3, [r5]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 80061f4:	6823      	ldr	r3, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
 80061f6:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
 80061fa:	f107 0b14 	add.w	fp, r7, #20
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 80061fe:	1aea      	subs	r2, r5, r3
	int bit = get_bit_ptr(p, level, bn, &word);
 8006200:	4620      	mov	r0, r4
 8006202:	fb92 f2f1 	sdiv	r2, r2, r1
 8006206:	465b      	mov	r3, fp
 8006208:	4631      	mov	r1, r6
 800620a:	f7ff ff41 	bl	8006090 <get_bit_ptr>
	*word |= (1<<bit);
 800620e:	6979      	ldr	r1, [r7, #20]
 8006210:	2201      	movs	r2, #1
 8006212:	680b      	ldr	r3, [r1, #0]
 8006214:	603a      	str	r2, [r7, #0]
 8006216:	fa02 f000 	lsl.w	r0, r2, r0
 800621a:	4303      	orrs	r3, r0
 800621c:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
 800621e:	454e      	cmp	r6, r9
 8006220:	db17      	blt.n	8006252 <z_sys_mem_pool_block_alloc+0xe8>
	pool_irq_unlock(p, key);
 8006222:	4641      	mov	r1, r8
 8006224:	7c20      	ldrb	r0, [r4, #16]
 8006226:	f7ff ff53 	bl	80060d0 <pool_irq_unlock.isra.4>
	*data_p = data;
 800622a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800622c:	601d      	str	r5, [r3, #0]
	if (data == NULL) {
 800622e:	2d00      	cmp	r5, #0
 8006230:	d0c3      	beq.n	80061ba <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	1aed      	subs	r5, r5, r3
 800623c:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
 8006240:	fb95 f5f3 	sdiv	r5, r5, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
 8006244:	687b      	ldr	r3, [r7, #4]

	return 0;
 8006246:	2000      	movs	r0, #0
	*block_p = block_num(p, data, lsizes[alloc_l]);
 8006248:	601d      	str	r5, [r3, #0]
}
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8006252:	6822      	ldr	r2, [r4, #0]
 8006254:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
	set_alloc_bit(p, l + 1, 4*bn);
 8006258:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
 800625a:	4631      	mov	r1, r6
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 800625c:	1aaa      	subs	r2, r5, r2
	int bit = get_bit_ptr(p, level, bn, &word);
 800625e:	4620      	mov	r0, r4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8006260:	fb92 f2f3 	sdiv	r2, r2, r3
	int bit = get_bit_ptr(p, level, bn, &word);
 8006264:	465b      	mov	r3, fp
 8006266:	0092      	lsls	r2, r2, #2
 8006268:	f7ff ff12 	bl	8006090 <get_bit_ptr>
	*word |= (1<<bit);
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
 8006270:	68e1      	ldr	r1, [r4, #12]
	*word |= (1<<bit);
 8006272:	fa03 f000 	lsl.w	r0, r3, r0
 8006276:	6813      	ldr	r3, [r2, #0]
 8006278:	4303      	orrs	r3, r0
 800627a:	6013      	str	r3, [r2, #0]
		int lsz = lsizes[l + 1];
 800627c:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
 8006280:	230c      	movs	r3, #12
 8006282:	fb03 1106 	mla	r1, r3, r6, r1
 8006286:	2203      	movs	r2, #3
 8006288:	f101 0e04 	add.w	lr, r1, #4
 800628c:	182b      	adds	r3, r5, r0
 800628e:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
 8006290:	688a      	ldr	r2, [r1, #8]
 8006292:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
 8006294:	688a      	ldr	r2, [r1, #8]
	node->next = list;
 8006296:	f8c3 e000 	str.w	lr, [r3]
	list->tail->next = node;
 800629a:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
 800629c:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
 800629e:	608b      	str	r3, [r1, #8]
 80062a0:	3a01      	subs	r2, #1
 80062a2:	4403      	add	r3, r0
 80062a4:	60fa      	str	r2, [r7, #12]
 80062a6:	d1f3      	bne.n	8006290 <z_sys_mem_pool_block_alloc+0x126>
				pool_irq_unlock(p, key);
 80062a8:	4641      	mov	r1, r8
 80062aa:	7c20      	ldrb	r0, [r4, #16]
 80062ac:	f7ff ff10 	bl	80060d0 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80062b0:	7c23      	ldrb	r3, [r4, #16]
 80062b2:	07d9      	lsls	r1, r3, #31
 80062b4:	d503      	bpl.n	80062be <z_sys_mem_pool_block_alloc+0x154>
 80062b6:	f7ff ff02 	bl	80060be <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
 80062ba:	4680      	mov	r8, r0
 80062bc:	e7af      	b.n	800621e <z_sys_mem_pool_block_alloc+0xb4>
		return 0;
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	e7fb      	b.n	80062ba <z_sys_mem_pool_block_alloc+0x150>
	for (i = alloc_l; i >= 0; i--) {
 80062c2:	3e01      	subs	r6, #1
 80062c4:	1c72      	adds	r2, r6, #1
 80062c6:	f1a3 030c 	sub.w	r3, r3, #12
 80062ca:	d187      	bne.n	80061dc <z_sys_mem_pool_block_alloc+0x72>
 80062cc:	2500      	movs	r5, #0
 80062ce:	e7a8      	b.n	8006222 <z_sys_mem_pool_block_alloc+0xb8>

080062d0 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 80062d6:	7a83      	ldrb	r3, [r0, #10]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	3307      	adds	r3, #7
 80062dc:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
 80062e0:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 80062e2:	ebad 0d03 	sub.w	sp, sp, r3
 80062e6:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
 80062e8:	6843      	ldr	r3, [r0, #4]
 80062ea:	f8cb 3000 	str.w	r3, [fp]
{
 80062ee:	4606      	mov	r6, r0
	for (i = 1; i <= level; i++) {
 80062f0:	465c      	mov	r4, fp
 80062f2:	2001      	movs	r0, #1
 80062f4:	4281      	cmp	r1, r0
 80062f6:	d215      	bcs.n	8006324 <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80062f8:	7c30      	ldrb	r0, [r6, #16]
 80062fa:	f010 0001 	ands.w	r0, r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
 80062fe:	4688      	mov	r8, r1
 8006300:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 8006302:	d001      	beq.n	8006308 <z_sys_mem_pool_block_free+0x38>
 8006304:	f7ff fedb 	bl	80060be <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
 8006308:	4604      	mov	r4, r0
	while (level >= 0) {
 800630a:	f1b8 0f00 	cmp.w	r8, #0
 800630e:	da11      	bge.n	8006334 <z_sys_mem_pool_block_free+0x64>
	return -1;
 8006310:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
 8006314:	4621      	mov	r1, r4
 8006316:	7c30      	ldrb	r0, [r6, #16]
 8006318:	f7ff feda 	bl	80060d0 <pool_irq_unlock.isra.4>
}
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	089b      	lsrs	r3, r3, #2
 8006328:	f023 0303 	bic.w	r3, r3, #3
 800632c:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
 8006330:	3001      	adds	r0, #1
 8006332:	e7df      	b.n	80062f4 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
 8006334:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8006338:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
 800633a:	fb03 fa05 	mul.w	sl, r3, r5
 800633e:	6833      	ldr	r3, [r6, #0]
 8006340:	603b      	str	r3, [r7, #0]
 8006342:	eb03 090a 	add.w	r9, r3, sl
	int bit = get_bit_ptr(p, level, bn, &word);
 8006346:	462a      	mov	r2, r5
 8006348:	f107 030c 	add.w	r3, r7, #12
 800634c:	4641      	mov	r1, r8
 800634e:	4630      	mov	r0, r6
 8006350:	f7ff fe9e 	bl	8006090 <get_bit_ptr>
	*word &= ~(1<<bit);
 8006354:	68fa      	ldr	r2, [r7, #12]
	node->next = list;
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	2301      	movs	r3, #1
 800635a:	fa03 f000 	lsl.w	r0, r3, r0
 800635e:	6813      	ldr	r3, [r2, #0]
 8006360:	ea23 0300 	bic.w	r3, r3, r0
 8006364:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
 8006366:	68f3      	ldr	r3, [r6, #12]
 8006368:	220c      	movs	r2, #12
 800636a:	fb02 3308 	mla	r3, r2, r8, r3
 800636e:	1d1a      	adds	r2, r3, #4
 8006370:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
 8006380:	f8c3 9008 	str.w	r9, [r3, #8]
		pool_irq_unlock(p, key);
 8006384:	7c30      	ldrb	r0, [r6, #16]
 8006386:	4621      	mov	r1, r4
 8006388:	f7ff fea2 	bl	80060d0 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 800638c:	7c30      	ldrb	r0, [r6, #16]
 800638e:	f010 0001 	ands.w	r0, r0, #1
 8006392:	d001      	beq.n	8006398 <z_sys_mem_pool_block_free+0xc8>
 8006394:	f7ff fe93 	bl	80060be <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
 8006398:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
 800639a:	f1b8 0f00 	cmp.w	r8, #0
 800639e:	d0b9      	beq.n	8006314 <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
 80063a0:	f107 030c 	add.w	r3, r7, #12
 80063a4:	462a      	mov	r2, r5
 80063a6:	4641      	mov	r1, r8
 80063a8:	4630      	mov	r0, r6
 80063aa:	f7ff fe71 	bl	8006090 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2800      	cmp	r0, #0
 80063b2:	bfb8      	it	lt
 80063b4:	3003      	addlt	r0, #3
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f020 0003 	bic.w	r0, r0, #3
 80063bc:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
 80063c0:	f010 000f 	ands.w	r0, r0, #15
 80063c4:	d1a6      	bne.n	8006314 <z_sys_mem_pool_block_free+0x44>
			int b = (bn & ~3) + i;
 80063c6:	f025 0a03 	bic.w	sl, r5, #3
	node->next = NULL;
 80063ca:	4684      	mov	ip, r0
	return (u8_t *)p->buf + lsz * block;
 80063cc:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
 80063ce:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
 80063d2:	4353      	muls	r3, r2
 80063d4:	6832      	ldr	r2, [r6, #0]
 80063d6:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
 80063d8:	f852 e003 	ldr.w	lr, [r2, r3]
 80063dc:	f8d1 9004 	ldr.w	r9, [r1, #4]
		for (i = 0; i < 4; i++) {
 80063e0:	3001      	adds	r0, #1
 80063e2:	2804      	cmp	r0, #4
 80063e4:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
 80063e8:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
 80063ec:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
 80063f0:	f8c1 c004 	str.w	ip, [r1, #4]
 80063f4:	d1ea      	bne.n	80063cc <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
 80063f6:	2d00      	cmp	r5, #0
 80063f8:	bfb8      	it	lt
 80063fa:	3503      	addlt	r5, #3
		level = level - 1;
 80063fc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
 8006400:	10ad      	asrs	r5, r5, #2
 8006402:	e782      	b.n	800630a <z_sys_mem_pool_block_free+0x3a>

08006404 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8006404:	4604      	mov	r4, r0
 8006406:	b508      	push	{r3, lr}
 8006408:	4608      	mov	r0, r1
 800640a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 800640c:	461a      	mov	r2, r3
 800640e:	47a0      	blx	r4
	return z_impl_k_current_get();
 8006410:	f7ff f948 	bl	80056a4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 8006414:	f7fd f990 	bl	8003738 <z_impl_k_thread_abort>

08006418 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
 8006418:	b510      	push	{r4, lr}
 800641a:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
 800641c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006420:	4620      	mov	r0, r4
 8006422:	f002 fa5f 	bl	80088e4 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
 8006426:	4603      	mov	r3, r0
 8006428:	2800      	cmp	r0, #0
 800642a:	d0f7      	beq.n	800641c <z_work_q_main+0x4>
 800642c:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
 800642e:	6842      	ldr	r2, [r0, #4]
 8006430:	f3bf 8f5b 	dmb	ish
 8006434:	e853 1f00 	ldrex	r1, [r3]
 8006438:	f021 0c01 	bic.w	ip, r1, #1
 800643c:	e843 ce00 	strex	lr, ip, [r3]
 8006440:	f1be 0f00 	cmp.w	lr, #0
 8006444:	d1f6      	bne.n	8006434 <z_work_q_main+0x1c>
 8006446:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
 800644a:	07cb      	lsls	r3, r1, #31
 800644c:	d500      	bpl.n	8006450 <z_work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
 800644e:	4790      	blx	r2
	z_impl_k_yield();
 8006450:	f7ff f8be 	bl	80055d0 <z_impl_k_yield>
 8006454:	e7e2      	b.n	800641c <z_work_q_main+0x4>

08006456 <arch_printk_char_out>:
}
 8006456:	2000      	movs	r0, #0
 8006458:	4770      	bx	lr

0800645a <print_err>:
{
 800645a:	b570      	push	{r4, r5, r6, lr}
 800645c:	4604      	mov	r4, r0
 800645e:	460d      	mov	r5, r1
	out('E', ctx);
 8006460:	2045      	movs	r0, #69	; 0x45
 8006462:	47a0      	blx	r4
	out('R', ctx);
 8006464:	4629      	mov	r1, r5
 8006466:	2052      	movs	r0, #82	; 0x52
 8006468:	47a0      	blx	r4
	out('R', ctx);
 800646a:	4629      	mov	r1, r5
 800646c:	4623      	mov	r3, r4
 800646e:	2052      	movs	r0, #82	; 0x52
}
 8006470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
 8006474:	4718      	bx	r3

08006476 <z_vprintk>:
{
 8006476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647a:	b08b      	sub	sp, #44	; 0x2c
 800647c:	461c      	mov	r4, r3
	char length_mod = 0;
 800647e:	f04f 0800 	mov.w	r8, #0
 8006482:	1e53      	subs	r3, r2, #1
{
 8006484:	4606      	mov	r6, r0
 8006486:	460f      	mov	r7, r1
 8006488:	9302      	str	r3, [sp, #8]
	int min_width = -1;
 800648a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 800648e:	46c1      	mov	r9, r8
			might_format = 0;
 8006490:	2500      	movs	r5, #0
					break;
 8006492:	e005      	b.n	80064a0 <z_vprintk+0x2a>
		if (!might_format) {
 8006494:	b96d      	cbnz	r5, 80064b2 <z_vprintk+0x3c>
			if (*fmt != '%') {
 8006496:	2825      	cmp	r0, #37	; 0x25
 8006498:	f000 814f 	beq.w	800673a <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
 800649c:	4639      	mov	r1, r7
 800649e:	47b0      	blx	r6
	while (*fmt) {
 80064a0:	9b02      	ldr	r3, [sp, #8]
 80064a2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80064a6:	9302      	str	r3, [sp, #8]
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d1f3      	bne.n	8006494 <z_vprintk+0x1e>
}
 80064ac:	b00b      	add	sp, #44	; 0x2c
 80064ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
 80064b2:	2864      	cmp	r0, #100	; 0x64
 80064b4:	d06e      	beq.n	8006594 <z_vprintk+0x11e>
 80064b6:	d81a      	bhi.n	80064ee <z_vprintk+0x78>
 80064b8:	2839      	cmp	r0, #57	; 0x39
 80064ba:	d80a      	bhi.n	80064d2 <z_vprintk+0x5c>
 80064bc:	2831      	cmp	r0, #49	; 0x31
 80064be:	d260      	bcs.n	8006582 <z_vprintk+0x10c>
 80064c0:	282d      	cmp	r0, #45	; 0x2d
 80064c2:	f000 8140 	beq.w	8006746 <z_vprintk+0x2d0>
 80064c6:	2830      	cmp	r0, #48	; 0x30
 80064c8:	d04c      	beq.n	8006564 <z_vprintk+0xee>
 80064ca:	2825      	cmp	r0, #37	; 0x25
 80064cc:	d107      	bne.n	80064de <z_vprintk+0x68>
				out((int)'%', ctx);
 80064ce:	4639      	mov	r1, r7
 80064d0:	e00b      	b.n	80064ea <z_vprintk+0x74>
			switch (*fmt) {
 80064d2:	2858      	cmp	r0, #88	; 0x58
 80064d4:	f000 80bb 	beq.w	800664e <z_vprintk+0x1d8>
 80064d8:	2863      	cmp	r0, #99	; 0x63
 80064da:	f000 812a 	beq.w	8006732 <z_vprintk+0x2bc>
					out((int)'%', ctx);
 80064de:	4639      	mov	r1, r7
 80064e0:	2025      	movs	r0, #37	; 0x25
 80064e2:	47b0      	blx	r6
					out((int)*fmt, ctx);
 80064e4:	9b02      	ldr	r3, [sp, #8]
 80064e6:	7818      	ldrb	r0, [r3, #0]
 80064e8:	4639      	mov	r1, r7
 80064ea:	47b0      	blx	r6
 80064ec:	e7d0      	b.n	8006490 <z_vprintk+0x1a>
			switch (*fmt) {
 80064ee:	2870      	cmp	r0, #112	; 0x70
 80064f0:	f000 80a3 	beq.w	800663a <z_vprintk+0x1c4>
 80064f4:	d811      	bhi.n	800651a <z_vprintk+0xa4>
 80064f6:	2869      	cmp	r0, #105	; 0x69
 80064f8:	d04c      	beq.n	8006594 <z_vprintk+0x11e>
 80064fa:	286c      	cmp	r0, #108	; 0x6c
 80064fc:	d105      	bne.n	800650a <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
 80064fe:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8006502:	d12a      	bne.n	800655a <z_vprintk+0xe4>
					length_mod = 'L';
 8006504:	f04f 084c 	mov.w	r8, #76	; 0x4c
 8006508:	e7ca      	b.n	80064a0 <z_vprintk+0x2a>
			switch (*fmt) {
 800650a:	2868      	cmp	r0, #104	; 0x68
 800650c:	d1e7      	bne.n	80064de <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
 800650e:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
 8006512:	d122      	bne.n	800655a <z_vprintk+0xe4>
					length_mod = 'H';
 8006514:	f04f 0848 	mov.w	r8, #72	; 0x48
 8006518:	e7c2      	b.n	80064a0 <z_vprintk+0x2a>
			switch (*fmt) {
 800651a:	2875      	cmp	r0, #117	; 0x75
 800651c:	d071      	beq.n	8006602 <z_vprintk+0x18c>
 800651e:	d818      	bhi.n	8006552 <z_vprintk+0xdc>
 8006520:	2873      	cmp	r0, #115	; 0x73
 8006522:	d1dc      	bne.n	80064de <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
 8006524:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
 8006528:	46ab      	mov	fp, r5
 800652a:	465b      	mov	r3, fp
 800652c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006530:	2800      	cmp	r0, #0
 8006532:	f040 80fb 	bne.w	800672c <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
 8006536:	f1b9 0f03 	cmp.w	r9, #3
 800653a:	f040 810a 	bne.w	8006752 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
 800653e:	1b5d      	subs	r5, r3, r5
 8006540:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
 8006544:	2d00      	cmp	r5, #0
 8006546:	dda3      	ble.n	8006490 <z_vprintk+0x1a>
						out(' ', ctx);
 8006548:	4639      	mov	r1, r7
 800654a:	2020      	movs	r0, #32
 800654c:	47b0      	blx	r6
 800654e:	3d01      	subs	r5, #1
 8006550:	e7f8      	b.n	8006544 <z_vprintk+0xce>
			switch (*fmt) {
 8006552:	2878      	cmp	r0, #120	; 0x78
 8006554:	d07b      	beq.n	800664e <z_vprintk+0x1d8>
 8006556:	287a      	cmp	r0, #122	; 0x7a
 8006558:	d1c1      	bne.n	80064de <z_vprintk+0x68>
				} else if (length_mod == 0) {
 800655a:	f1b8 0f00 	cmp.w	r8, #0
 800655e:	d1be      	bne.n	80064de <z_vprintk+0x68>
 8006560:	4680      	mov	r8, r0
 8006562:	e79d      	b.n	80064a0 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
 8006564:	f1ba 0f00 	cmp.w	sl, #0
 8006568:	da0e      	bge.n	8006588 <z_vprintk+0x112>
 800656a:	f1b9 0f00 	cmp.w	r9, #0
 800656e:	f000 80ed 	beq.w	800674c <z_vprintk+0x2d6>
					min_width = *fmt - '0';
 8006572:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 8006576:	f1b9 0f00 	cmp.w	r9, #0
 800657a:	bf08      	it	eq
 800657c:	f04f 0902 	moveq.w	r9, #2
 8006580:	e78e      	b.n	80064a0 <z_vprintk+0x2a>
				if (min_width < 0) {
 8006582:	f1ba 0f00 	cmp.w	sl, #0
 8006586:	dbf4      	blt.n	8006572 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
 8006588:	230a      	movs	r3, #10
 800658a:	fb03 0a0a 	mla	sl, r3, sl, r0
 800658e:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8006592:	e7f0      	b.n	8006576 <z_vprintk+0x100>
				if (length_mod == 'z') {
 8006594:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 8006598:	d102      	bne.n	80065a0 <z_vprintk+0x12a>
					d = va_arg(ap, int);
 800659a:	f854 5b04 	ldr.w	r5, [r4], #4
 800659e:	e01f      	b.n	80065e0 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
 80065a0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 80065a4:	d0f9      	beq.n	800659a <z_vprintk+0x124>
				} else if (length_mod == 'L') {
 80065a6:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 80065aa:	d1f6      	bne.n	800659a <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
 80065ac:	3407      	adds	r4, #7
 80065ae:	f024 0407 	bic.w	r4, r4, #7
 80065b2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
 80065b6:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
 80065ba:	9106      	str	r1, [sp, #24]
 80065bc:	f143 0100 	adc.w	r1, r3, #0
 80065c0:	9107      	str	r1, [sp, #28]
 80065c2:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80065c6:	2100      	movs	r1, #0
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065cc:	4561      	cmp	r1, ip
 80065ce:	bf08      	it	eq
 80065d0:	4558      	cmpeq	r0, fp
 80065d2:	d204      	bcs.n	80065de <z_vprintk+0x168>
						print_err(out, ctx);
 80065d4:	4639      	mov	r1, r7
 80065d6:	4630      	mov	r0, r6
 80065d8:	f7ff ff3f 	bl	800645a <print_err>
						break;
 80065dc:	e758      	b.n	8006490 <z_vprintk+0x1a>
					d = lld;
 80065de:	4615      	mov	r5, r2
				if (d < 0) {
 80065e0:	2d00      	cmp	r5, #0
 80065e2:	da05      	bge.n	80065f0 <z_vprintk+0x17a>
					out((int)'-', ctx);
 80065e4:	4639      	mov	r1, r7
 80065e6:	202d      	movs	r0, #45	; 0x2d
 80065e8:	47b0      	blx	r6
					d = -d;
 80065ea:	426d      	negs	r5, r5
					min_width--;
 80065ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
 80065f0:	f8cd a000 	str.w	sl, [sp]
 80065f4:	464b      	mov	r3, r9
 80065f6:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
 80065f8:	4639      	mov	r1, r7
 80065fa:	4630      	mov	r0, r6
 80065fc:	f7fa f9d2 	bl	80009a4 <_printk_dec_ulong>
				break;
 8006600:	e746      	b.n	8006490 <z_vprintk+0x1a>
				if (length_mod == 'z') {
 8006602:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 8006606:	d102      	bne.n	800660e <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
 8006608:	f854 2b04 	ldr.w	r2, [r4], #4
 800660c:	e011      	b.n	8006632 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
 800660e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8006612:	d0f9      	beq.n	8006608 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
 8006614:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 8006618:	d1f6      	bne.n	8006608 <z_vprintk+0x192>
					unsigned long long llu =
 800661a:	3407      	adds	r4, #7
 800661c:	f024 0407 	bic.w	r4, r4, #7
 8006620:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
 8006624:	2100      	movs	r1, #0
 8006626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800662a:	4299      	cmp	r1, r3
 800662c:	bf08      	it	eq
 800662e:	4290      	cmpeq	r0, r2
 8006630:	d3d0      	bcc.n	80065d4 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
 8006632:	f8cd a000 	str.w	sl, [sp]
 8006636:	464b      	mov	r3, r9
 8006638:	e7de      	b.n	80065f8 <z_vprintk+0x182>
				out('0', ctx);
 800663a:	4639      	mov	r1, r7
 800663c:	2030      	movs	r0, #48	; 0x30
 800663e:	47b0      	blx	r6
				out('x', ctx);
 8006640:	4639      	mov	r1, r7
 8006642:	2078      	movs	r0, #120	; 0x78
 8006644:	47b0      	blx	r6
					min_width = 8;
 8006646:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
 800664a:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
 800664e:	9b02      	ldr	r3, [sp, #8]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b70      	cmp	r3, #112	; 0x70
 8006654:	d104      	bne.n	8006660 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
 8006656:	f854 3b04 	ldr.w	r3, [r4], #4
 800665a:	9304      	str	r3, [sp, #16]
 800665c:	2300      	movs	r3, #0
 800665e:	e00d      	b.n	800667c <z_vprintk+0x206>
				} else if (length_mod == 'l') {
 8006660:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8006664:	d0f7      	beq.n	8006656 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
 8006666:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 800666a:	d1f4      	bne.n	8006656 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
 800666c:	3407      	adds	r4, #7
 800666e:	f024 0307 	bic.w	r3, r4, #7
 8006672:	461c      	mov	r4, r3
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f854 2b08 	ldr.w	r2, [r4], #8
 800667a:	9204      	str	r2, [sp, #16]
	int digits = 0;
 800667c:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
 800667e:	2210      	movs	r2, #16
	int digits = 0;
 8006680:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
 8006682:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
 8006684:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
 8006688:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
 800668c:	9804      	ldr	r0, [sp, #16]
 800668e:	f1cb 0c20 	rsb	ip, fp, #32
 8006692:	f1ab 0120 	sub.w	r1, fp, #32
 8006696:	fa20 f00b 	lsr.w	r0, r0, fp
 800669a:	fa03 fc0c 	lsl.w	ip, r3, ip
 800669e:	ea40 000c 	orr.w	r0, r0, ip
 80066a2:	fa23 f101 	lsr.w	r1, r3, r1
 80066a6:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
 80066a8:	f010 000f 	ands.w	r0, r0, #15
 80066ac:	d108      	bne.n	80066c0 <z_vprintk+0x24a>
 80066ae:	9905      	ldr	r1, [sp, #20]
 80066b0:	b911      	cbnz	r1, 80066b8 <z_vprintk+0x242>
 80066b2:	f1bb 0f00 	cmp.w	fp, #0
 80066b6:	d124      	bne.n	8006702 <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
 80066b8:	2130      	movs	r1, #48	; 0x30
 80066ba:	e005      	b.n	80066c8 <z_vprintk+0x252>
			found_largest_digit = 1;
 80066bc:	9505      	str	r5, [sp, #20]
 80066be:	e7e3      	b.n	8006688 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
 80066c0:	2809      	cmp	r0, #9
 80066c2:	bf8c      	ite	hi
 80066c4:	2157      	movhi	r1, #87	; 0x57
 80066c6:	2130      	movls	r1, #48	; 0x30
 80066c8:	4408      	add	r0, r1
			out((int)nibble, ctx);
 80066ca:	b240      	sxtb	r0, r0
 80066cc:	4639      	mov	r1, r7
 80066ce:	9308      	str	r3, [sp, #32]
 80066d0:	9205      	str	r2, [sp, #20]
 80066d2:	47b0      	blx	r6
			digits++;
 80066d4:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
 80066d6:	9a05      	ldr	r2, [sp, #20]
			digits++;
 80066d8:	3301      	adds	r3, #1
 80066da:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
 80066dc:	9b08      	ldr	r3, [sp, #32]
 80066de:	f1bb 0f00 	cmp.w	fp, #0
 80066e2:	d1eb      	bne.n	80066bc <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
 80066e4:	f1b9 0f03 	cmp.w	r9, #3
 80066e8:	f47f aed2 	bne.w	8006490 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
 80066ec:	9b03      	ldr	r3, [sp, #12]
 80066ee:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
 80066f2:	2d00      	cmp	r5, #0
 80066f4:	f77f aecc 	ble.w	8006490 <z_vprintk+0x1a>
			out(' ', ctx);
 80066f8:	4639      	mov	r1, r7
 80066fa:	2020      	movs	r0, #32
 80066fc:	47b0      	blx	r6
 80066fe:	3d01      	subs	r5, #1
 8006700:	e7f7      	b.n	80066f2 <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
 8006702:	1e51      	subs	r1, r2, #1
 8006704:	4592      	cmp	sl, r2
 8006706:	9108      	str	r1, [sp, #32]
 8006708:	db07      	blt.n	800671a <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
 800670a:	f1b9 0f01 	cmp.w	r9, #1
 800670e:	d106      	bne.n	800671e <z_vprintk+0x2a8>
 8006710:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
 8006712:	4639      	mov	r1, r7
 8006714:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
 8006716:	47b0      	blx	r6
 8006718:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
 800671a:	9a08      	ldr	r2, [sp, #32]
 800671c:	e7b4      	b.n	8006688 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
 800671e:	f1b9 0f02 	cmp.w	r9, #2
 8006722:	d1fa      	bne.n	800671a <z_vprintk+0x2a4>
 8006724:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
 8006726:	4639      	mov	r1, r7
 8006728:	2020      	movs	r0, #32
 800672a:	e7f4      	b.n	8006716 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
 800672c:	4639      	mov	r1, r7
 800672e:	47b0      	blx	r6
 8006730:	e6fb      	b.n	800652a <z_vprintk+0xb4>
				out(c, ctx);
 8006732:	4639      	mov	r1, r7
 8006734:	f854 0b04 	ldr.w	r0, [r4], #4
 8006738:	e6d7      	b.n	80064ea <z_vprintk+0x74>
				length_mod = 0;
 800673a:	46a8      	mov	r8, r5
				padding = PAD_NONE;
 800673c:	46a9      	mov	r9, r5
				min_width = -1;
 800673e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
 8006742:	2501      	movs	r5, #1
 8006744:	e6ac      	b.n	80064a0 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
 8006746:	f04f 0903 	mov.w	r9, #3
 800674a:	e6a9      	b.n	80064a0 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
 800674c:	f04f 0901 	mov.w	r9, #1
 8006750:	e6a6      	b.n	80064a0 <z_vprintk+0x2a>
			might_format = 0;
 8006752:	4605      	mov	r5, r0
		++fmt;
 8006754:	e6a4      	b.n	80064a0 <z_vprintk+0x2a>

08006756 <printk>:
{
 8006756:	b40f      	push	{r0, r1, r2, r3}
 8006758:	b507      	push	{r0, r1, r2, lr}
 800675a:	a904      	add	r1, sp, #16
 800675c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8006760:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 8006762:	f7fa f971 	bl	8000a48 <vprintk>
}
 8006766:	b003      	add	sp, #12
 8006768:	f85d eb04 	ldr.w	lr, [sp], #4
 800676c:	b004      	add	sp, #16
 800676e:	4770      	bx	lr

08006770 <ring_buf_space_get>:
 *
 * @return Ring buffer free space (in 32-bit words or bytes).
 */
static inline u32_t ring_buf_space_get(struct ring_buf *buf)
{
	return z_ring_buf_custom_space_get(buf->size, buf->head, buf->tail);
 8006770:	6903      	ldr	r3, [r0, #16]
 8006772:	e9d0 2000 	ldrd	r2, r0, [r0]
	if (tail < head) {
 8006776:	4282      	cmp	r2, r0
	return (size - tail) + head - 1;
 8006778:	bf96      	itet	ls
 800677a:	189b      	addls	r3, r3, r2
		return head - tail - 1;
 800677c:	f102 33ff 	addhi.w	r3, r2, #4294967295	; 0xffffffff
	return (size - tail) + head - 1;
 8006780:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
 8006784:	1a18      	subs	r0, r3, r0
}
 8006786:	4770      	bx	lr

08006788 <ring_buf_put_claim>:

u32_t ring_buf_put_claim(struct ring_buf *buf, u8_t **data, u32_t size)
{
	u32_t space, trail_size, allocated;

	space = z_ring_buf_custom_space_get(buf->size, buf->head,
 8006788:	6803      	ldr	r3, [r0, #0]
{
 800678a:	b570      	push	{r4, r5, r6, lr}
	space = z_ring_buf_custom_space_get(buf->size, buf->head,
 800678c:	6884      	ldr	r4, [r0, #8]
 800678e:	6906      	ldr	r6, [r0, #16]
	if (tail < head) {
 8006790:	42a3      	cmp	r3, r4
					    buf->misc.byte_mode.tmp_tail);

	/* Limit requested size to available size. */
	size = MIN(size, space);
	trail_size = buf->size - buf->misc.byte_mode.tmp_tail;
 8006792:	eba6 0504 	sub.w	r5, r6, r4
	return (size - tail) + head - 1;
 8006796:	bf98      	it	ls
 8006798:	199b      	addls	r3, r3, r6
 800679a:	3b01      	subs	r3, #1

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
 800679c:	4295      	cmp	r5, r2
 800679e:	eba3 0304 	sub.w	r3, r3, r4
 80067a2:	bf28      	it	cs
 80067a4:	4615      	movcs	r5, r2
 80067a6:	42ab      	cmp	r3, r5

	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
 80067a8:	6942      	ldr	r2, [r0, #20]
	allocated = MIN(trail_size, size);
 80067aa:	bf28      	it	cs
 80067ac:	462b      	movcs	r3, r5
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
 80067ae:	4422      	add	r2, r4
	buf->misc.byte_mode.tmp_tail =
		wrap(buf->misc.byte_mode.tmp_tail + allocated, buf->size);
 80067b0:	441c      	add	r4, r3
	return val >= max ? (val - max) : val;
 80067b2:	42a6      	cmp	r6, r4
 80067b4:	bf98      	it	ls
 80067b6:	1ba4      	subls	r4, r4, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
 80067b8:	600a      	str	r2, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
 80067ba:	6084      	str	r4, [r0, #8]

	return allocated;
}
 80067bc:	4618      	mov	r0, r3
 80067be:	bd70      	pop	{r4, r5, r6, pc}

080067c0 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, u32_t size)
{
 80067c0:	b510      	push	{r4, lr}
 80067c2:	4604      	mov	r4, r0
	if (size > ring_buf_space_get(buf)) {
 80067c4:	f7ff ffd4 	bl	8006770 <ring_buf_space_get>
 80067c8:	4288      	cmp	r0, r1
 80067ca:	d309      	bcc.n	80067e0 <ring_buf_put_finish+0x20>
		return -EINVAL;
	}

	buf->tail = wrap(buf->tail + size, buf->size);
 80067cc:	6863      	ldr	r3, [r4, #4]
 80067ce:	4419      	add	r1, r3
 80067d0:	6923      	ldr	r3, [r4, #16]
	return val >= max ? (val - max) : val;
 80067d2:	4299      	cmp	r1, r3
 80067d4:	bf28      	it	cs
 80067d6:	1ac9      	subcs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
 80067d8:	e9c4 1101 	strd	r1, r1, [r4, #4]

	return 0;
 80067dc:	2000      	movs	r0, #0
}
 80067de:	bd10      	pop	{r4, pc}
		return -EINVAL;
 80067e0:	f06f 0015 	mvn.w	r0, #21
 80067e4:	e7fb      	b.n	80067de <ring_buf_put_finish+0x1e>

080067e6 <ring_buf_put>:

u32_t ring_buf_put(struct ring_buf *buf, const u8_t *data, u32_t size)
{
 80067e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80067ea:	4680      	mov	r8, r0
 80067ec:	460f      	mov	r7, r1
 80067ee:	4616      	mov	r6, r2
	u8_t *dst;
	u32_t partial_size;
	u32_t total_size = 0U;
 80067f0:	2500      	movs	r5, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
 80067f2:	4632      	mov	r2, r6
 80067f4:	a901      	add	r1, sp, #4
 80067f6:	4640      	mov	r0, r8
 80067f8:	f7ff ffc6 	bl	8006788 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
 80067fc:	4639      	mov	r1, r7
		partial_size = ring_buf_put_claim(buf, &dst, size);
 80067fe:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
 8006800:	4602      	mov	r2, r0
 8006802:	9801      	ldr	r0, [sp, #4]
 8006804:	f001 fc26 	bl	8008054 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 8006808:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
 800680a:	4425      	add	r5, r4
		data += partial_size;
 800680c:	4427      	add	r7, r4
	} while (size && partial_size);
 800680e:	d001      	beq.n	8006814 <ring_buf_put+0x2e>
 8006810:	2c00      	cmp	r4, #0
 8006812:	d1ee      	bne.n	80067f2 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
 8006814:	4629      	mov	r1, r5
 8006816:	4640      	mov	r0, r8
 8006818:	f7ff ffd2 	bl	80067c0 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 800681c:	4628      	mov	r0, r5
 800681e:	b002      	add	sp, #8
 8006820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006824 <ring_buf_get_claim>:

u32_t ring_buf_get_claim(struct ring_buf *buf, u8_t **data, u32_t size)
{
 8006824:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t space, granted_size, trail_size;

	space = (buf->size - 1) -
		z_ring_buf_custom_space_get(buf->size,
 8006826:	e9d0 3603 	ldrd	r3, r6, [r0, #12]
 800682a:	6844      	ldr	r4, [r0, #4]
	if (tail < head) {
 800682c:	42a3      	cmp	r3, r4
	return (size - tail) + head - 1;
 800682e:	bf95      	itete	ls
 8006830:	18f7      	addls	r7, r6, r3
		return head - tail - 1;
 8006832:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
	return (size - tail) + head - 1;
 8006836:	f107 37ff 	addls.w	r7, r7, #4294967295	; 0xffffffff
		return head - tail - 1;
 800683a:	1b2d      	subhi	r5, r5, r4
	return (size - tail) + head - 1;
 800683c:	bf98      	it	ls
 800683e:	1b3d      	subls	r5, r7, r4
	space = (buf->size - 1) -
 8006840:	1e74      	subs	r4, r6, #1
 8006842:	1b64      	subs	r4, r4, r5
					    buf->misc.byte_mode.tmp_head,
					    buf->tail);
	trail_size = buf->size - buf->misc.byte_mode.tmp_head;
 8006844:	1af5      	subs	r5, r6, r3

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
 8006846:	42aa      	cmp	r2, r5
 8006848:	bf28      	it	cs
 800684a:	462a      	movcs	r2, r5
 800684c:	42a2      	cmp	r2, r4
 800684e:	bf28      	it	cs
 8006850:	4622      	movcs	r2, r4

	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
 8006852:	6944      	ldr	r4, [r0, #20]
 8006854:	441c      	add	r4, r3
	buf->misc.byte_mode.tmp_head =
		wrap(buf->misc.byte_mode.tmp_head + granted_size, buf->size);
 8006856:	4413      	add	r3, r2
	return val >= max ? (val - max) : val;
 8006858:	429e      	cmp	r6, r3
 800685a:	bf98      	it	ls
 800685c:	1b9b      	subls	r3, r3, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
 800685e:	600c      	str	r4, [r1, #0]
	buf->misc.byte_mode.tmp_head =
 8006860:	60c3      	str	r3, [r0, #12]

	return granted_size;
}
 8006862:	4610      	mov	r0, r2
 8006864:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006866 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, u32_t size)
{
 8006866:	b538      	push	{r3, r4, r5, lr}
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
 8006868:	6905      	ldr	r5, [r0, #16]
{
 800686a:	4604      	mov	r4, r0
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
 800686c:	f7ff ff80 	bl	8006770 <ring_buf_space_get>
 8006870:	1e6b      	subs	r3, r5, #1
 8006872:	1a18      	subs	r0, r3, r0

	if (size > allocated) {
 8006874:	4288      	cmp	r0, r1
 8006876:	d308      	bcc.n	800688a <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->head = wrap(buf->head + size, buf->size);
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	4419      	add	r1, r3
	return val >= max ? (val - max) : val;
 800687c:	428d      	cmp	r5, r1
 800687e:	bf98      	it	ls
 8006880:	1b49      	subls	r1, r1, r5
	buf->head = wrap(buf->head + size, buf->size);
 8006882:	6021      	str	r1, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
 8006884:	60e1      	str	r1, [r4, #12]

	return 0;
 8006886:	2000      	movs	r0, #0
}
 8006888:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 800688a:	f06f 0015 	mvn.w	r0, #21
 800688e:	e7fb      	b.n	8006888 <ring_buf_get_finish+0x22>

08006890 <ring_buf_get>:

u32_t ring_buf_get(struct ring_buf *buf, u8_t *data, u32_t size)
{
 8006890:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006894:	4680      	mov	r8, r0
 8006896:	460f      	mov	r7, r1
 8006898:	4616      	mov	r6, r2
	u8_t *src;
	u32_t partial_size;
	u32_t total_size = 0U;
 800689a:	2500      	movs	r5, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
 800689c:	4632      	mov	r2, r6
 800689e:	a901      	add	r1, sp, #4
 80068a0:	4640      	mov	r0, r8
 80068a2:	f7ff ffbf 	bl	8006824 <ring_buf_get_claim>
		memcpy(data, src, partial_size);
 80068a6:	9901      	ldr	r1, [sp, #4]
		partial_size = ring_buf_get_claim(buf, &src, size);
 80068a8:	4604      	mov	r4, r0
		memcpy(data, src, partial_size);
 80068aa:	4602      	mov	r2, r0
 80068ac:	4638      	mov	r0, r7
 80068ae:	f001 fbd1 	bl	8008054 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 80068b2:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
 80068b4:	4425      	add	r5, r4
		data += partial_size;
 80068b6:	4427      	add	r7, r4
	} while (size && partial_size);
 80068b8:	d001      	beq.n	80068be <ring_buf_get+0x2e>
 80068ba:	2c00      	cmp	r4, #0
 80068bc:	d1ee      	bne.n	800689c <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
 80068be:	4629      	mov	r1, r5
 80068c0:	4640      	mov	r0, r8
 80068c2:	f7ff ffd0 	bl	8006866 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 80068c6:	4628      	mov	r0, r5
 80068c8:	b002      	add	sp, #8
 80068ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080068ce <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80068ce:	4770      	bx	lr

080068d0 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
 80068d0:	070b      	lsls	r3, r1, #28
 80068d2:	d504      	bpl.n	80068de <foldcase+0xe>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 80068d4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80068d8:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
 80068da:	bf98      	it	ls
 80068dc:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
 80068de:	4770      	bx	lr

080068e0 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
 80068e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	b087      	sub	sp, #28
 80068e6:	468a      	mov	sl, r1
 80068e8:	4614      	mov	r4, r2
 80068ea:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
 80068ec:	4605      	mov	r5, r0
 80068ee:	b918      	cbnz	r0, 80068f8 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
 80068f0:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
 80068f2:	b007      	add	sp, #28
 80068f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
 80068f8:	2900      	cmp	r1, #0
 80068fa:	d0f9      	beq.n	80068f0 <fnmatchx+0x10>
    if (recursion-- == 0)
 80068fc:	9b02      	ldr	r3, [sp, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 8114 	beq.w	8006b2c <fnmatchx+0x24c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 8006904:	f004 0304 	and.w	r3, r4, #4
 8006908:	460a      	mov	r2, r1
 800690a:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
 800690c:	46a8      	mov	r8, r5
 800690e:	4621      	mov	r1, r4
 8006910:	f818 0b01 	ldrb.w	r0, [r8], #1
 8006914:	f7ff ffdc 	bl	80068d0 <foldcase>
 8006918:	b2c0      	uxtb	r0, r0
 800691a:	283f      	cmp	r0, #63	; 0x3f
 800691c:	4606      	mov	r6, r0
 800691e:	7817      	ldrb	r7, [r2, #0]
 8006920:	d022      	beq.n	8006968 <fnmatchx+0x88>
 8006922:	dc0a      	bgt.n	800693a <fnmatchx+0x5a>
 8006924:	b1c0      	cbz	r0, 8006958 <fnmatchx+0x78>
 8006926:	282a      	cmp	r0, #42	; 0x2a
 8006928:	d035      	beq.n	8006996 <fnmatchx+0xb6>
            if (c != FOLDCASE(*string++, flags))
 800692a:	4621      	mov	r1, r4
 800692c:	4638      	mov	r0, r7
 800692e:	3201      	adds	r2, #1
 8006930:	f7ff ffce 	bl	80068d0 <foldcase>
 8006934:	4286      	cmp	r6, r0
 8006936:	d01e      	beq.n	8006976 <fnmatchx+0x96>
 8006938:	e7da      	b.n	80068f0 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
 800693a:	285b      	cmp	r0, #91	; 0x5b
 800693c:	d07a      	beq.n	8006a34 <fnmatchx+0x154>
 800693e:	285c      	cmp	r0, #92	; 0x5c
 8006940:	d1f3      	bne.n	800692a <fnmatchx+0x4a>
            if (!(flags & FNM_NOESCAPE)) {
 8006942:	07e3      	lsls	r3, r4, #31
 8006944:	d4f1      	bmi.n	800692a <fnmatchx+0x4a>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
 8006946:	7868      	ldrb	r0, [r5, #1]
 8006948:	f7ff ffc2 	bl	80068d0 <foldcase>
 800694c:	b2c6      	uxtb	r6, r0
 800694e:	2e00      	cmp	r6, #0
 8006950:	d0eb      	beq.n	800692a <fnmatchx+0x4a>
 8006952:	f105 0802 	add.w	r8, r5, #2
 8006956:	e7e8      	b.n	800692a <fnmatchx+0x4a>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
 8006958:	06e4      	lsls	r4, r4, #27
 800695a:	d501      	bpl.n	8006960 <fnmatchx+0x80>
 800695c:	2f2f      	cmp	r7, #47	; 0x2f
 800695e:	d0c8      	beq.n	80068f2 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
 8006960:	1c38      	adds	r0, r7, #0
                        0 : FNM_NOMATCH;
 8006962:	bf18      	it	ne
 8006964:	2001      	movne	r0, #1
 8006966:	e7c4      	b.n	80068f2 <fnmatchx+0x12>
            if (*string == EOS)
 8006968:	2f00      	cmp	r7, #0
 800696a:	d0c1      	beq.n	80068f0 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
 800696c:	2f2f      	cmp	r7, #47	; 0x2f
 800696e:	d104      	bne.n	800697a <fnmatchx+0x9a>
 8006970:	07a1      	lsls	r1, r4, #30
 8006972:	d4bd      	bmi.n	80068f0 <fnmatchx+0x10>
            ++string;
 8006974:	3201      	adds	r2, #1
            break;
 8006976:	4645      	mov	r5, r8
 8006978:	e7c8      	b.n	800690c <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 800697a:	2f2e      	cmp	r7, #46	; 0x2e
 800697c:	d1fa      	bne.n	8006974 <fnmatchx+0x94>
 800697e:	9b04      	ldr	r3, [sp, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0f7      	beq.n	8006974 <fnmatchx+0x94>
 8006984:	4552      	cmp	r2, sl
 8006986:	d0b3      	beq.n	80068f0 <fnmatchx+0x10>
                (string == stringstart ||
 8006988:	07a3      	lsls	r3, r4, #30
 800698a:	d5f3      	bpl.n	8006974 <fnmatchx+0x94>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
 800698c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8006990:	2b2f      	cmp	r3, #47	; 0x2f
 8006992:	d1ef      	bne.n	8006974 <fnmatchx+0x94>
 8006994:	e7ac      	b.n	80068f0 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
 8006996:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
 8006998:	f7ff ff9a 	bl	80068d0 <foldcase>
 800699c:	b2c1      	uxtb	r1, r0
            while (c == '*')
 800699e:	292a      	cmp	r1, #42	; 0x2a
 80069a0:	d018      	beq.n	80069d4 <fnmatchx+0xf4>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 80069a2:	2f2e      	cmp	r7, #46	; 0x2e
 80069a4:	d109      	bne.n	80069ba <fnmatchx+0xda>
 80069a6:	9b04      	ldr	r3, [sp, #16]
 80069a8:	b13b      	cbz	r3, 80069ba <fnmatchx+0xda>
 80069aa:	4552      	cmp	r2, sl
 80069ac:	d0a0      	beq.n	80068f0 <fnmatchx+0x10>
                (string == stringstart ||
 80069ae:	07a7      	lsls	r7, r4, #30
 80069b0:	d503      	bpl.n	80069ba <fnmatchx+0xda>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
 80069b2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80069b6:	2b2f      	cmp	r3, #47	; 0x2f
 80069b8:	d09a      	beq.n	80068f0 <fnmatchx+0x10>
            if (c == EOS) {
 80069ba:	b979      	cbnz	r1, 80069dc <fnmatchx+0xfc>
                if (flags & FNM_PATHNAME)
 80069bc:	f014 0002 	ands.w	r0, r4, #2
 80069c0:	d097      	beq.n	80068f2 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
 80069c2:	06e6      	lsls	r6, r4, #27
 80069c4:	f100 80b4 	bmi.w	8006b30 <fnmatchx+0x250>
                        strchr(string, '/') == NULL ?
 80069c8:	212f      	movs	r1, #47	; 0x2f
 80069ca:	4610      	mov	r0, r2
 80069cc:	f001 faeb 	bl	8007fa6 <strchr>
                        0 : FNM_NOMATCH;
 80069d0:	3000      	adds	r0, #0
 80069d2:	e7c6      	b.n	8006962 <fnmatchx+0x82>
                c = FOLDCASE(*++pattern, flags);
 80069d4:	4621      	mov	r1, r4
 80069d6:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 80069da:	e7dd      	b.n	8006998 <fnmatchx+0xb8>
            } else if (c == '/' && flags & FNM_PATHNAME) {
 80069dc:	292f      	cmp	r1, #47	; 0x2f
 80069de:	d101      	bne.n	80069e4 <fnmatchx+0x104>
 80069e0:	07a5      	lsls	r5, r4, #30
 80069e2:	d420      	bmi.n	8006a26 <fnmatchx+0x146>
    if (recursion-- == 0)
 80069e4:	9b02      	ldr	r3, [sp, #8]
 80069e6:	4615      	mov	r5, r2
 80069e8:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
 80069ea:	f024 0904 	bic.w	r9, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
 80069ee:	f004 0a02 	and.w	sl, r4, #2
 80069f2:	46ab      	mov	fp, r5
            while ((test = FOLDCASE(*string, flags)) != EOS) {
 80069f4:	4621      	mov	r1, r4
 80069f6:	f89b 0000 	ldrb.w	r0, [fp]
 80069fa:	f7ff ff69 	bl	80068d0 <foldcase>
 80069fe:	b2c6      	uxtb	r6, r0
 8006a00:	3501      	adds	r5, #1
 8006a02:	2e00      	cmp	r6, #0
 8006a04:	f43f af74 	beq.w	80068f0 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
 8006a08:	463b      	mov	r3, r7
 8006a0a:	464a      	mov	r2, r9
 8006a0c:	4659      	mov	r1, fp
 8006a0e:	4640      	mov	r0, r8
 8006a10:	f7ff ff66 	bl	80068e0 <fnmatchx>
 8006a14:	2801      	cmp	r0, #1
 8006a16:	f47f af6c 	bne.w	80068f2 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
 8006a1a:	2e2f      	cmp	r6, #47	; 0x2f
 8006a1c:	d1e9      	bne.n	80069f2 <fnmatchx+0x112>
 8006a1e:	f1ba 0f00 	cmp.w	sl, #0
 8006a22:	d0e6      	beq.n	80069f2 <fnmatchx+0x112>
 8006a24:	e764      	b.n	80068f0 <fnmatchx+0x10>
                if ((string = strchr(string, '/')) == NULL)
 8006a26:	4610      	mov	r0, r2
 8006a28:	f001 fabd 	bl	8007fa6 <strchr>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d1a1      	bne.n	8006976 <fnmatchx+0x96>
 8006a32:	e75d      	b.n	80068f0 <fnmatchx+0x10>
            if (*string == EOS)
 8006a34:	2f00      	cmp	r7, #0
 8006a36:	f43f af5b 	beq.w	80068f0 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
 8006a3a:	2f2f      	cmp	r7, #47	; 0x2f
 8006a3c:	d102      	bne.n	8006a44 <fnmatchx+0x164>
 8006a3e:	07a0      	lsls	r0, r4, #30
 8006a40:	f53f af56 	bmi.w	80068f0 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
 8006a44:	4621      	mov	r1, r4
 8006a46:	4638      	mov	r0, r7
 8006a48:	f7ff ff42 	bl	80068d0 <foldcase>
 8006a4c:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
 8006a4e:	f1b8 0f00 	cmp.w	r8, #0
 8006a52:	f43f af4d 	beq.w	80068f0 <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 8006a56:	786b      	ldrb	r3, [r5, #1]
 8006a58:	2b21      	cmp	r3, #33	; 0x21
 8006a5a:	d001      	beq.n	8006a60 <fnmatchx+0x180>
 8006a5c:	2b5e      	cmp	r3, #94	; 0x5e
 8006a5e:	d126      	bne.n	8006aae <fnmatchx+0x1ce>
        ++pattern;
 8006a60:	3502      	adds	r5, #2
 8006a62:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 8006a64:	9301      	str	r3, [sp, #4]
    need = 1;
 8006a66:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 8006a68:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
 8006a6c:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 8006a70:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
 8006a72:	462e      	mov	r6, r5
 8006a74:	4621      	mov	r1, r4
 8006a76:	f816 0b01 	ldrb.w	r0, [r6], #1
 8006a7a:	9305      	str	r3, [sp, #20]
 8006a7c:	f7ff ff28 	bl	80068d0 <foldcase>
 8006a80:	fa5f f980 	uxtb.w	r9, r0
 8006a84:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
 8006a88:	9b05      	ldr	r3, [sp, #20]
 8006a8a:	d113      	bne.n	8006ab4 <fnmatchx+0x1d4>
 8006a8c:	bb2b      	cbnz	r3, 8006ada <fnmatchx+0x1fa>
    return ok == negate ? NULL : pattern;
 8006a8e:	9b01      	ldr	r3, [sp, #4]
 8006a90:	455b      	cmp	r3, fp
 8006a92:	f43f af2d 	beq.w	80068f0 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
 8006a96:	2e00      	cmp	r6, #0
 8006a98:	f43f af2a 	beq.w	80068f0 <fnmatchx+0x10>
            if (r == (void *)-1) {
 8006a9c:	1c71      	adds	r1, r6, #1
 8006a9e:	d103      	bne.n	8006aa8 <fnmatchx+0x1c8>
                if (*string != '[')
 8006aa0:	2f5b      	cmp	r7, #91	; 0x5b
 8006aa2:	f47f af25 	bne.w	80068f0 <fnmatchx+0x10>
 8006aa6:	4646      	mov	r6, r8
            ++string;
 8006aa8:	3201      	adds	r2, #1
            break;
 8006aaa:	46b0      	mov	r8, r6
 8006aac:	e763      	b.n	8006976 <fnmatchx+0x96>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 8006aae:	4645      	mov	r5, r8
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	e7d7      	b.n	8006a64 <fnmatchx+0x184>
        if (c == '/')
 8006ab4:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
 8006ab8:	d0f2      	beq.n	8006aa0 <fnmatchx+0x1c0>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 8006aba:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
 8006abe:	d108      	bne.n	8006ad2 <fnmatchx+0x1f2>
 8006ac0:	9b03      	ldr	r3, [sp, #12]
 8006ac2:	b953      	cbnz	r3, 8006ada <fnmatchx+0x1fa>
            c = FOLDCASE(*pattern++, flags);
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	7868      	ldrb	r0, [r5, #1]
 8006ac8:	f7ff ff02 	bl	80068d0 <foldcase>
 8006acc:	1cae      	adds	r6, r5, #2
 8006ace:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
 8006ad2:	f1b9 0f00 	cmp.w	r9, #0
 8006ad6:	f43f af0b 	beq.w	80068f0 <fnmatchx+0x10>
        if (*pattern == '-' 
 8006ada:	7833      	ldrb	r3, [r6, #0]
 8006adc:	2b2d      	cmp	r3, #45	; 0x2d
 8006ade:	d11e      	bne.n	8006b1e <fnmatchx+0x23e>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	7870      	ldrb	r0, [r6, #1]
 8006ae4:	f7ff fef4 	bl	80068d0 <foldcase>
 8006ae8:	b2c0      	uxtb	r0, r0
 8006aea:	b1c0      	cbz	r0, 8006b1e <fnmatchx+0x23e>
 8006aec:	285d      	cmp	r0, #93	; 0x5d
 8006aee:	d016      	beq.n	8006b1e <fnmatchx+0x23e>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
 8006af0:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
 8006af2:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
 8006af6:	d109      	bne.n	8006b0c <fnmatchx+0x22c>
 8006af8:	9b03      	ldr	r3, [sp, #12]
 8006afa:	b93b      	cbnz	r3, 8006b0c <fnmatchx+0x22c>
                c2 = FOLDCASE(*pattern++, flags);
 8006afc:	78b0      	ldrb	r0, [r6, #2]
 8006afe:	f7ff fee7 	bl	80068d0 <foldcase>
 8006b02:	b2c0      	uxtb	r0, r0
 8006b04:	1cf5      	adds	r5, r6, #3
            if (c2 == EOS)
 8006b06:	2800      	cmp	r0, #0
 8006b08:	f43f aef2 	beq.w	80068f0 <fnmatchx+0x10>
            if (c <= test && test <= c2)
 8006b0c:	9b00      	ldr	r3, [sp, #0]
 8006b0e:	454b      	cmp	r3, r9
 8006b10:	db03      	blt.n	8006b1a <fnmatchx+0x23a>
                ok = 1;
 8006b12:	4283      	cmp	r3, r0
 8006b14:	bfd8      	it	le
 8006b16:	f04f 0b01 	movle.w	fp, #1
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e7a9      	b.n	8006a72 <fnmatchx+0x192>
        } else if (c == test)
 8006b1e:	9b00      	ldr	r3, [sp, #0]
 8006b20:	4635      	mov	r5, r6
 8006b22:	454b      	cmp	r3, r9
 8006b24:	bf08      	it	eq
 8006b26:	f04f 0b01 	moveq.w	fp, #1
 8006b2a:	e7f6      	b.n	8006b1a <fnmatchx+0x23a>
        return FNM_NORES;
 8006b2c:	2003      	movs	r0, #3
 8006b2e:	e6e0      	b.n	80068f2 <fnmatchx+0x12>
                return 0;
 8006b30:	4608      	mov	r0, r1
 8006b32:	e6de      	b.n	80068f2 <fnmatchx+0x12>

08006b34 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
 8006b34:	2340      	movs	r3, #64	; 0x40
 8006b36:	f7ff bed3 	b.w	80068e0 <fnmatchx>

08006b3a <shell_strlen>:
{
 8006b3a:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
 8006b3c:	b110      	cbz	r0, 8006b44 <shell_strlen+0xa>
 8006b3e:	f001 fa40 	bl	8007fc2 <strlen>
 8006b42:	b280      	uxth	r0, r0
}
 8006b44:	bd08      	pop	{r3, pc}

08006b46 <shell_raw_fprintf>:
{
 8006b46:	b40e      	push	{r1, r2, r3}
 8006b48:	b503      	push	{r0, r1, lr}
 8006b4a:	aa03      	add	r2, sp, #12
 8006b4c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8006b50:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
 8006b52:	f7fa fe4f 	bl	80017f4 <shell_fprintf_fmt>
}
 8006b56:	b002      	add	sp, #8
 8006b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b5c:	b003      	add	sp, #12
 8006b5e:	4770      	bx	lr

08006b60 <shell_internal_help_print>:
{
 8006b60:	b510      	push	{r4, lr}
 8006b62:	4604      	mov	r4, r0
	shell_help_cmd_print(shell);
 8006b64:	f7fb f91a 	bl	8001d9c <shell_help_cmd_print>
	shell_help_subcmd_print(shell);
 8006b68:	4620      	mov	r0, r4
}
 8006b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_help_subcmd_print(shell);
 8006b6e:	f7fb b8a5 	b.w	8001cbc <shell_help_subcmd_print>

08006b72 <state_set.constprop.31>:
	shell->ctx->state = state;
 8006b72:	6883      	ldr	r3, [r0, #8]
 8006b74:	2202      	movs	r2, #2
 8006b76:	711a      	strb	r2, [r3, #4]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
 8006b7e:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
 8006b80:	865a      	strh	r2, [r3, #50]	; 0x32
		shell_print_prompt_and_cmd(shell);
 8006b82:	f7fa bfdd 	b.w	8001b40 <shell_print_prompt_and_cmd>

08006b86 <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
 8006b86:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
 8006b88:	b920      	cbnz	r0, 8006b94 <transport_evt_handler+0xe>
 8006b8a:	f503 7017 	add.w	r0, r3, #604	; 0x25c
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
 8006b8e:	2100      	movs	r1, #0
 8006b90:	f7ff b876 	b.w	8005c80 <z_impl_k_poll_signal_raise>
 8006b94:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8006b98:	e7f9      	b.n	8006b8e <transport_evt_handler+0x8>

08006b9a <k_mutex_lock.constprop.34>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8006b9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b9e:	f7fe ba09 	b.w	8004fb4 <z_impl_k_mutex_lock>

08006ba2 <shell_fprintf>:
/* This function mustn't be used from shell context to avoid deadlock.
 * However it can be used in shell command handlers.
 */
void shell_fprintf(const struct shell *shell, enum shell_vt100_color color,
		   const char *fmt, ...)
{
 8006ba2:	b40c      	push	{r2, r3}
 8006ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ba6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8006ba8:	6880      	ldr	r0, [r0, #8]
 8006baa:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
{
 8006bae:	460d      	mov	r5, r1
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8006bb0:	f7ff fff3 	bl	8006b9a <k_mutex_lock.constprop.34>
	if (!flag_cmd_ctx_get(shell)) {
 8006bb4:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
 8006bb6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8006bba:	061a      	lsls	r2, r3, #24
 8006bbc:	d402      	bmi.n	8006bc4 <shell_fprintf+0x22>
		shell_cmd_line_erase(shell);
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 fae2 	bl	8007188 <shell_cmd_line_erase>
	}

	va_start(args, fmt);
 8006bc4:	ab07      	add	r3, sp, #28
	shell_internal_vfprintf(shell, color, fmt, args);
 8006bc6:	9a06      	ldr	r2, [sp, #24]
	va_start(args, fmt);
 8006bc8:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
 8006bca:	4629      	mov	r1, r5
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 fb2a 	bl	8007226 <shell_internal_vfprintf>
	va_end(args);

	if (!flag_cmd_ctx_get(shell)) {
 8006bd2:	68a3      	ldr	r3, [r4, #8]
 8006bd4:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8006bd8:	061b      	lsls	r3, r3, #24
 8006bda:	d402      	bmi.n	8006be2 <shell_fprintf+0x40>
		shell_print_prompt_and_cmd(shell);
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f7fa ffaf 	bl	8001b40 <shell_print_prompt_and_cmd>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
 8006be2:	6960      	ldr	r0, [r4, #20]
 8006be4:	f000 f80a 	bl	8006bfc <shell_fprintf_buffer_flush>
	}
	transport_buffer_flush(shell);
	k_mutex_unlock(&shell->ctx->wr_mtx);
 8006be8:	68a0      	ldr	r0, [r4, #8]
 8006bea:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
	z_impl_k_mutex_unlock(mutex);
 8006bee:	f7fe fa53 	bl	8005098 <z_impl_k_mutex_unlock>
}
 8006bf2:	b003      	add	sp, #12
 8006bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bf8:	b002      	add	sp, #8
 8006bfa:	4770      	bx	lr

08006bfc <shell_fprintf_buffer_flush>:


void shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 8006bfc:	6902      	ldr	r2, [r0, #16]
 8006bfe:	6883      	ldr	r3, [r0, #8]
 8006c00:	6812      	ldr	r2, [r2, #0]
 8006c02:	6801      	ldr	r1, [r0, #0]
{
 8006c04:	b510      	push	{r4, lr}
 8006c06:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 8006c08:	68c0      	ldr	r0, [r0, #12]
 8006c0a:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]
}
 8006c12:	bd10      	pop	{r4, pc}

08006c14 <out_func>:
{
 8006c14:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 8006c16:	68cb      	ldr	r3, [r1, #12]
 8006c18:	7c1b      	ldrb	r3, [r3, #16]
 8006c1a:	2b02      	cmp	r3, #2
{
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 8006c20:	d104      	bne.n	8006c2c <out_func+0x18>
 8006c22:	280a      	cmp	r0, #10
 8006c24:	d102      	bne.n	8006c2c <out_func+0x18>
		(void)out_func('\r', ctx);
 8006c26:	200d      	movs	r0, #13
 8006c28:	f7ff fff4 	bl	8006c14 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (u8_t)c;
 8006c2c:	6923      	ldr	r3, [r4, #16]
 8006c2e:	6822      	ldr	r2, [r4, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
 8006c34:	6922      	ldr	r2, [r4, #16]
 8006c36:	6813      	ldr	r3, [r2, #0]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
 8006c3c:	6862      	ldr	r2, [r4, #4]
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d102      	bne.n	8006c48 <out_func+0x34>
		shell_fprintf_buffer_flush(sh_fprintf);
 8006c42:	4620      	mov	r0, r4
 8006c44:	f7ff ffda 	bl	8006bfc <shell_fprintf_buffer_flush>
}
 8006c48:	2000      	movs	r0, #0
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}

08006c4c <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
 8006c4c:	2820      	cmp	r0, #32
 8006c4e:	d005      	beq.n	8006c5c <isspace+0x10>
 8006c50:	3809      	subs	r0, #9
 8006c52:	2804      	cmp	r0, #4
 8006c54:	bf8c      	ite	hi
 8006c56:	2000      	movhi	r0, #0
 8006c58:	2001      	movls	r0, #1
 8006c5a:	4770      	bx	lr
 8006c5c:	2001      	movs	r0, #1
}
 8006c5e:	4770      	bx	lr

08006c60 <shell_strlen>:
{
 8006c60:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
 8006c62:	b110      	cbz	r0, 8006c6a <shell_strlen+0xa>
 8006c64:	f001 f9ad 	bl	8007fc2 <strlen>
 8006c68:	b280      	uxth	r0, r0
}
 8006c6a:	bd08      	pop	{r3, pc}

08006c6c <column_span_with_buffer_offsets_get>:
{
 8006c6c:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
 8006c6e:	7b03      	ldrb	r3, [r0, #12]
 8006c70:	8944      	ldrh	r4, [r0, #10]
 8006c72:	441a      	add	r2, r3
 8006c74:	4419      	add	r1, r3
 8006c76:	fbb2 f0f4 	udiv	r0, r2, r4
 8006c7a:	fbb1 f3f4 	udiv	r3, r1, r4
 8006c7e:	fb04 2010 	mls	r0, r4, r0, r2
 8006c82:	fb04 1313 	mls	r3, r4, r3, r1
}
 8006c86:	1ac0      	subs	r0, r0, r3
 8006c88:	bd10      	pop	{r4, pc}

08006c8a <row_span_with_buffer_offsets_get>:
{
 8006c8a:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
 8006c8c:	7b03      	ldrb	r3, [r0, #12]
 8006c8e:	8944      	ldrh	r4, [r0, #10]
 8006c90:	441a      	add	r2, r3
 8006c92:	4419      	add	r1, r3
 8006c94:	fbb2 f0f4 	udiv	r0, r2, r4
 8006c98:	fbb1 f1f4 	udiv	r1, r1, r4
}
 8006c9c:	1a40      	subs	r0, r0, r1
 8006c9e:	bd10      	pop	{r4, pc}

08006ca0 <shell_multiline_data_calc>:
{
 8006ca0:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 8006ca2:	7b04      	ldrb	r4, [r0, #12]
 8006ca4:	8945      	ldrh	r5, [r0, #10]
 8006ca6:	4421      	add	r1, r4
 8006ca8:	fbb1 f3f5 	udiv	r3, r1, r5
 8006cac:	fb05 1113 	mls	r1, r5, r3, r1
 8006cb0:	3101      	adds	r1, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 8006cb2:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 8006cb4:	4422      	add	r2, r4
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 8006cb6:	8001      	strh	r1, [r0, #0]
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 8006cb8:	8083      	strh	r3, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 8006cba:	fbb2 f3f5 	udiv	r3, r2, r5
 8006cbe:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 8006cc0:	fb05 2313 	mls	r3, r5, r3, r2
 8006cc4:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 8006cc6:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 8006cc8:	8043      	strh	r3, [r0, #2]
}
 8006cca:	bd30      	pop	{r4, r5, pc}

08006ccc <shell_make_argv>:
{
 8006ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
 8006cd0:	2500      	movs	r5, #0
{
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460f      	mov	r7, r1
 8006cd6:	4614      	mov	r4, r2
 8006cd8:	4698      	mov	r8, r3
	*argc = 0;
 8006cda:	6005      	str	r5, [r0, #0]
		c = *cmd;
 8006cdc:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
 8006cde:	b140      	cbz	r0, 8006cf2 <shell_make_argv+0x26>
		if (isspace((int) c)) {
 8006ce0:	f7ff ffb4 	bl	8006c4c <isspace>
 8006ce4:	b160      	cbz	r0, 8006d00 <shell_make_argv+0x34>
			*cmd++ = '\0';
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f804 3b01 	strb.w	r3, [r4], #1
	} while (*argc < max_argc);
 8006cec:	6833      	ldr	r3, [r6, #0]
 8006cee:	4543      	cmp	r3, r8
 8006cf0:	d3f4      	bcc.n	8006cdc <shell_make_argv+0x10>
	argv[*argc] = 0;
 8006cf2:	6833      	ldr	r3, [r6, #0]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
}
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		argv[(*argc)++] = cmd;
 8006d00:	6833      	ldr	r3, [r6, #0]
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	6032      	str	r2, [r6, #0]
 8006d06:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
	char quote = 0;
 8006d0a:	4605      	mov	r5, r0
		c = *cmd;
 8006d0c:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
 8006d10:	f1b9 0f00 	cmp.w	r9, #0
 8006d14:	d0ea      	beq.n	8006cec <shell_make_argv+0x20>
		if (!quote) {
 8006d16:	2d00      	cmp	r5, #0
 8006d18:	f040 8089 	bne.w	8006e2e <shell_make_argv+0x162>
			switch (c) {
 8006d1c:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
 8006d20:	d006      	beq.n	8006d30 <shell_make_argv+0x64>
 8006d22:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
 8006d26:	f000 808a 	beq.w	8006e3e <shell_make_argv+0x172>
 8006d2a:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
 8006d2e:	d176      	bne.n	8006e1e <shell_make_argv+0x152>
						shell_strlen(cmd));
 8006d30:	4620      	mov	r0, r4
 8006d32:	f7ff ff95 	bl	8006c60 <shell_strlen>
				memmove(cmd, cmd + 1,
 8006d36:	1c61      	adds	r1, r4, #1
 8006d38:	4602      	mov	r2, r0
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f001 f973 	bl	8008026 <memmove>
 8006d40:	464d      	mov	r5, r9
 8006d42:	e7e3      	b.n	8006d0c <shell_make_argv+0x40>
			memmove(cmd, cmd + 1, shell_strlen(cmd));
 8006d44:	4620      	mov	r0, r4
 8006d46:	f7ff ff8b 	bl	8006c60 <shell_strlen>
 8006d4a:	1c61      	adds	r1, r4, #1
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f001 f969 	bl	8008026 <memmove>
			quote = 0;
 8006d54:	2500      	movs	r5, #0
 8006d56:	e7d9      	b.n	8006d0c <shell_make_argv+0x40>
			if (t == '0') {
 8006d58:	2930      	cmp	r1, #48	; 0x30
 8006d5a:	d125      	bne.n	8006da8 <shell_make_argv+0xdc>
 8006d5c:	2302      	movs	r3, #2
				u8_t v = 0U;
 8006d5e:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
 8006d62:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
 8006d64:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006d68:	b2d0      	uxtb	r0, r2
 8006d6a:	2807      	cmp	r0, #7
 8006d6c:	fa5f f983 	uxtb.w	r9, r3
 8006d70:	d817      	bhi.n	8006da2 <shell_make_argv+0xd6>
						v = (v << 3) | (t - '0');
 8006d72:	3301      	adds	r3, #1
 8006d74:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
 8006d78:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
 8006d7a:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
 8006d7e:	d1f0      	bne.n	8006d62 <shell_make_argv+0x96>
 8006d80:	4699      	mov	r9, r3
						shell_strlen(cmd) - (i - 2));
 8006d82:	4620      	mov	r0, r4
 8006d84:	f7ff ff6c 	bl	8006c60 <shell_strlen>
					memmove(cmd, cmd + (i - 1),
 8006d88:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006d8c:	44a3      	add	fp, r4
						shell_strlen(cmd) - (i - 2));
 8006d8e:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
 8006d90:	eba2 0209 	sub.w	r2, r2, r9
 8006d94:	4620      	mov	r0, r4
 8006d96:	4659      	mov	r1, fp
 8006d98:	f001 f945 	bl	8008026 <memmove>
					*cmd++ = v;
 8006d9c:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
 8006da0:	e7b4      	b.n	8006d0c <shell_make_argv+0x40>
				if (i > 2) {
 8006da2:	f1b9 0f02 	cmp.w	r9, #2
 8006da6:	d1ec      	bne.n	8006d82 <shell_make_argv+0xb6>
			if (t == 'x') {
 8006da8:	2978      	cmp	r1, #120	; 0x78
 8006daa:	d13e      	bne.n	8006e2a <shell_make_argv+0x15e>
 8006dac:	2202      	movs	r2, #2
				u8_t v = 0U;
 8006dae:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
 8006db2:	5ca3      	ldrb	r3, [r4, r2]
					if (t >= '0' && t <= '9') {
 8006db4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006db8:	fa5f fc81 	uxtb.w	ip, r1
 8006dbc:	f1bc 0f09 	cmp.w	ip, #9
 8006dc0:	b2d0      	uxtb	r0, r2
 8006dc2:	d819      	bhi.n	8006df8 <shell_make_argv+0x12c>
						v = (v << 4) | (t - '0');
 8006dc4:	ea41 1309 	orr.w	r3, r1, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
 8006dc8:	2a03      	cmp	r2, #3
						v = (v << 4) | (t - 'A' + 10);
 8006dca:	fa5f f983 	uxtb.w	r9, r3
				for (i = 2U; i < (2 + 2); i++) {
 8006dce:	d111      	bne.n	8006df4 <shell_make_argv+0x128>
 8006dd0:	f04f 0b04 	mov.w	fp, #4
						shell_strlen(cmd) - (i - 2));
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f7ff ff43 	bl	8006c60 <shell_strlen>
					memmove(cmd, cmd + (i - 1),
 8006dda:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8006dde:	44a2      	add	sl, r4
						shell_strlen(cmd) - (i - 2));
 8006de0:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
 8006de2:	eba2 020b 	sub.w	r2, r2, fp
 8006de6:	4620      	mov	r0, r4
 8006de8:	4651      	mov	r1, sl
 8006dea:	f001 f91c 	bl	8008026 <memmove>
					*cmd++ = v;
 8006dee:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
 8006df2:	e78b      	b.n	8006d0c <shell_make_argv+0x40>
				for (i = 2U; i < (2 + 2); i++) {
 8006df4:	2203      	movs	r2, #3
 8006df6:	e7dc      	b.n	8006db2 <shell_make_argv+0xe6>
					} else if ((t >= 'a') &&
 8006df8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8006dfc:	2905      	cmp	r1, #5
 8006dfe:	d803      	bhi.n	8006e08 <shell_make_argv+0x13c>
						v = (v << 4) | (t - 'a' + 10);
 8006e00:	3b57      	subs	r3, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
 8006e02:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
 8006e06:	e7df      	b.n	8006dc8 <shell_make_argv+0xfc>
					} else if ((t >= 'A') && (t <= 'F')) {
 8006e08:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 8006e0c:	2905      	cmp	r1, #5
 8006e0e:	d801      	bhi.n	8006e14 <shell_make_argv+0x148>
						v = (v << 4) | (t - 'A' + 10);
 8006e10:	3b37      	subs	r3, #55	; 0x37
 8006e12:	e7f6      	b.n	8006e02 <shell_make_argv+0x136>
				if (i > 2) {
 8006e14:	2802      	cmp	r0, #2
 8006e16:	d008      	beq.n	8006e2a <shell_make_argv+0x15e>
 8006e18:	f04f 0b03 	mov.w	fp, #3
 8006e1c:	e7da      	b.n	8006dd4 <shell_make_argv+0x108>
		if (!quote && isspace((int) c)) {
 8006e1e:	4648      	mov	r0, r9
 8006e20:	f7ff ff14 	bl	8006c4c <isspace>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	f47f af61 	bne.w	8006cec <shell_make_argv+0x20>
		cmd += 1;
 8006e2a:	3401      	adds	r4, #1
 8006e2c:	e76e      	b.n	8006d0c <shell_make_argv+0x40>
		if (quote == c) {
 8006e2e:	45a9      	cmp	r9, r5
 8006e30:	d088      	beq.n	8006d44 <shell_make_argv+0x78>
		if (quote && c == '\\') {
 8006e32:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
 8006e36:	d1f8      	bne.n	8006e2a <shell_make_argv+0x15e>
 8006e38:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
 8006e3a:	428d      	cmp	r5, r1
 8006e3c:	d18c      	bne.n	8006d58 <shell_make_argv+0x8c>
						shell_strlen(cmd));
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f7ff ff0e 	bl	8006c60 <shell_strlen>
				memmove(cmd, cmd + 1,
 8006e44:	f104 0901 	add.w	r9, r4, #1
 8006e48:	4602      	mov	r2, r0
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f001 f8ea 	bl	8008026 <memmove>
				cmd += 1;
 8006e52:	464c      	mov	r4, r9
 8006e54:	e75a      	b.n	8006d0c <shell_make_argv+0x40>

08006e56 <shell_pattern_remove>:
{
 8006e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e58:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
 8006e5a:	4611      	mov	r1, r2
{
 8006e5c:	4615      	mov	r5, r2
 8006e5e:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
 8006e60:	f001 f867 	bl	8007f32 <strstr>
 8006e64:	4604      	mov	r4, r0
	u16_t pattern_len = shell_strlen(pattern);
 8006e66:	4628      	mov	r0, r5
 8006e68:	f7ff fefa 	bl	8006c60 <shell_strlen>
 8006e6c:	4605      	mov	r5, r0
	if (!pattern_addr) {
 8006e6e:	b1c4      	cbz	r4, 8006ea2 <shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
 8006e70:	42a7      	cmp	r7, r4
 8006e72:	d207      	bcs.n	8006e84 <shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
 8006e74:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006e78:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
 8006e7a:	bf02      	ittt	eq
 8006e7c:	3501      	addeq	r5, #1
 8006e7e:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
 8006e80:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 8006e84:	4620      	mov	r0, r4
 8006e86:	f7ff feeb 	bl	8006c60 <shell_strlen>
	*buff_len -= pattern_len;
 8006e8a:	8833      	ldrh	r3, [r6, #0]
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 8006e8c:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
 8006e8e:	1b5b      	subs	r3, r3, r5
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 8006e90:	3201      	adds	r2, #1
	*buff_len -= pattern_len;
 8006e92:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
 8006e94:	1961      	adds	r1, r4, r5
 8006e96:	4620      	mov	r0, r4
 8006e98:	b292      	uxth	r2, r2
}
 8006e9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
 8006e9e:	f001 b8c2 	b.w	8008026 <memmove>
}
 8006ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ea4 <shell_get_last_command>:
					     size_t argc,
					     char *argv[],
					     size_t *match_arg,
					     struct shell_static_entry *d_entry,
					     bool only_static)
{
 8006ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea8:	b087      	sub	sp, #28
 8006eaa:	461d      	mov	r5, r3
	const struct shell_static_entry *prev_entry = NULL;
	const struct shell_static_entry *entry = NULL;
	const struct shell_cmd_entry *cmd = NULL;

	*match_arg = SHELL_CMD_ROOT_LVL;
 8006eac:	2400      	movs	r4, #0
{
 8006eae:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8006eb2:	9303      	str	r3, [sp, #12]
 8006eb4:	4681      	mov	r9, r0
 8006eb6:	4688      	mov	r8, r1
 8006eb8:	4617      	mov	r7, r2
	*match_arg = SHELL_CMD_ROOT_LVL;
 8006eba:	602c      	str	r4, [r5, #0]
	const struct shell_static_entry *entry = NULL;
 8006ebc:	46a2      	mov	sl, r4

	while (*match_arg < argc) {
 8006ebe:	682b      	ldr	r3, [r5, #0]
 8006ec0:	4543      	cmp	r3, r8
 8006ec2:	d303      	bcc.n	8006ecc <shell_get_last_command+0x28>
			return NULL;
		}
	}

	return entry;
}
 8006ec4:	4650      	mov	r0, sl
 8006ec6:	b007      	add	sp, #28
 8006ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (shell_wildcard_character_exist(argv[*match_arg])) {
 8006ecc:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8006ed0:	f000 fc0b 	bl	80076ea <shell_wildcard_character_exist>
 8006ed4:	682e      	ldr	r6, [r5, #0]
 8006ed6:	b110      	cbz	r0, 8006ede <shell_get_last_command+0x3a>
				(*match_arg)++;
 8006ed8:	3601      	adds	r6, #1
 8006eda:	602e      	str	r6, [r5, #0]
				continue;
 8006edc:	e7ef      	b.n	8006ebe <shell_get_last_command+0x1a>
		entry = find_cmd(shell, cmd, *match_arg, argv[*match_arg],
 8006ede:	f857 b026 	ldr.w	fp, [r7, r6, lsl #2]
	const struct shell_static_entry *entry = NULL;
 8006ee2:	9005      	str	r0, [sp, #20]
	size_t idx = 0;
 8006ee4:	4603      	mov	r3, r0
		shell_cmd_get(shell, cmd, lvl, idx++, &entry, d_entry);
 8006ee6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ee8:	9201      	str	r2, [sp, #4]
 8006eea:	aa05      	add	r2, sp, #20
 8006eec:	9200      	str	r2, [sp, #0]
 8006eee:	4621      	mov	r1, r4
 8006ef0:	4632      	mov	r2, r6
 8006ef2:	4648      	mov	r0, r9
 8006ef4:	f103 0a01 	add.w	sl, r3, #1
 8006ef8:	f7fa fc90 	bl	800181c <shell_cmd_get>
		if (entry && (strcmp(cmd_str, entry->syntax) == 0)) {
 8006efc:	9b05      	ldr	r3, [sp, #20]
 8006efe:	b13b      	cbz	r3, 8006f10 <shell_get_last_command+0x6c>
 8006f00:	6819      	ldr	r1, [r3, #0]
 8006f02:	4658      	mov	r0, fp
 8006f04:	f001 f864 	bl	8007fd0 <strcmp>
 8006f08:	9a05      	ldr	r2, [sp, #20]
 8006f0a:	b920      	cbnz	r0, 8006f16 <shell_get_last_command+0x72>
		if (entry) {
 8006f0c:	4692      	mov	sl, r2
 8006f0e:	b932      	cbnz	r2, 8006f1e <shell_get_last_command+0x7a>
 8006f10:	f04f 0a00 	mov.w	sl, #0
 8006f14:	e7d6      	b.n	8006ec4 <shell_get_last_command+0x20>
		shell_cmd_get(shell, cmd, lvl, idx++, &entry, d_entry);
 8006f16:	4653      	mov	r3, sl
	} while (entry);
 8006f18:	2a00      	cmp	r2, #0
 8006f1a:	d1e4      	bne.n	8006ee6 <shell_get_last_command+0x42>
 8006f1c:	e7f8      	b.n	8006f10 <shell_get_last_command+0x6c>
			(*match_arg)++;
 8006f1e:	682b      	ldr	r3, [r5, #0]
			cmd = entry->subcmd;
 8006f20:	6894      	ldr	r4, [r2, #8]
			(*match_arg)++;
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	602a      	str	r2, [r5, #0]
		if (cmd == NULL) {
 8006f26:	2c00      	cmp	r4, #0
 8006f28:	d0f2      	beq.n	8006f10 <shell_get_last_command+0x6c>
		if (only_static && cmd->is_dynamic) {
 8006f2a:	9a03      	ldr	r2, [sp, #12]
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	d0c6      	beq.n	8006ebe <shell_get_last_command+0x1a>
 8006f30:	7822      	ldrb	r2, [r4, #0]
 8006f32:	2a00      	cmp	r2, #0
 8006f34:	d0c3      	beq.n	8006ebe <shell_get_last_command+0x1a>
			(*match_arg)--;
 8006f36:	602b      	str	r3, [r5, #0]
			return NULL;
 8006f38:	e7ea      	b.n	8006f10 <shell_get_last_command+0x6c>

08006f3a <shell_spaces_trim>:

	return 0;
}

void shell_spaces_trim(char *str)
{
 8006f3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f3e:	4607      	mov	r7, r0
	u16_t len = shell_strlen(str);
 8006f40:	f7ff fe8e 	bl	8006c60 <shell_strlen>
 8006f44:	4680      	mov	r8, r0
	u16_t shift = 0U;

	if (!str) {
 8006f46:	bb4f      	cbnz	r7, 8006f9c <shell_spaces_trim+0x62>

				break;
			}
		}
	}
}
 8006f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
 8006f4c:	b15c      	cbz	r4, 8006f66 <shell_spaces_trim+0x2c>
						len - shift + 1);
 8006f4e:	f108 0201 	add.w	r2, r8, #1
					memmove(&str[i + 1],
 8006f52:	1c68      	adds	r0, r5, #1
 8006f54:	1b12      	subs	r2, r2, r4
 8006f56:	4438      	add	r0, r7
 8006f58:	f001 f865 	bl	8008026 <memmove>
					len -= shift;
 8006f5c:	eba8 0404 	sub.w	r4, r8, r4
 8006f60:	fa1f f884 	uxth.w	r8, r4
					shift = 0U;
 8006f64:	464c      	mov	r4, r9
	for (u16_t i = 0; i < len - 1; i++) {
 8006f66:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8006f6a:	429e      	cmp	r6, r3
 8006f6c:	daec      	bge.n	8006f48 <shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
 8006f6e:	5db8      	ldrb	r0, [r7, r6]
 8006f70:	f7ff fe6c 	bl	8006c4c <isspace>
 8006f74:	4635      	mov	r5, r6
 8006f76:	3601      	adds	r6, #1
 8006f78:	b2b6      	uxth	r6, r6
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d0f3      	beq.n	8006f66 <shell_spaces_trim+0x2c>
			for (u16_t j = i + 1; j < len; j++) {
 8006f7e:	4633      	mov	r3, r6
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	4590      	cmp	r8, r2
 8006f84:	d9ef      	bls.n	8006f66 <shell_spaces_trim+0x2c>
				if (isspace((int)str[j])) {
 8006f86:	5cf8      	ldrb	r0, [r7, r3]
 8006f88:	18f9      	adds	r1, r7, r3
 8006f8a:	f7ff fe5f 	bl	8006c4c <isspace>
 8006f8e:	3301      	adds	r3, #1
 8006f90:	4681      	mov	r9, r0
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d0da      	beq.n	8006f4c <shell_spaces_trim+0x12>
					shift++;
 8006f96:	3401      	adds	r4, #1
 8006f98:	b2a4      	uxth	r4, r4
					continue;
 8006f9a:	e7f1      	b.n	8006f80 <shell_spaces_trim+0x46>
	for (u16_t i = 0; i < len - 1; i++) {
 8006f9c:	2600      	movs	r6, #0
	u16_t shift = 0U;
 8006f9e:	4634      	mov	r4, r6
 8006fa0:	e7e1      	b.n	8006f66 <shell_spaces_trim+0x2c>

08006fa2 <shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void shell_cmd_trim(const struct shell *shell)
{
 8006fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
 8006fa6:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
 8006fa8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
{
 8006fac:	4606      	mov	r6, r0
	if (buff[0] == '\0') {
 8006fae:	b95b      	cbnz	r3, 8006fc8 <shell_cmd_trim+0x26>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 8006fb0:	68b3      	ldr	r3, [r6, #8]
 8006fb2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006fb4:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8006fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*buff_len -= 1U;
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	8663      	strh	r3, [r4, #50]	; 0x32
		if (*buff_len == 0U) {
 8006fc0:	b923      	cbnz	r3, 8006fcc <shell_cmd_trim+0x2a>
			buff[0] = '\0';
 8006fc2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			return;
 8006fc6:	e7f3      	b.n	8006fb0 <shell_cmd_trim+0xe>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
 8006fc8:	f104 0538 	add.w	r5, r4, #56	; 0x38
	while (isspace((int) buff[*buff_len - 1U])) {
 8006fcc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006fce:	18ea      	adds	r2, r5, r3
 8006fd0:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8006fd4:	f7ff fe3a 	bl	8006c4c <isspace>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d1ee      	bne.n	8006fba <shell_cmd_trim+0x18>
	buff[*buff_len] = '\0';
 8006fdc:	54e8      	strb	r0, [r5, r3]
 8006fde:	4603      	mov	r3, r0
 8006fe0:	fa1f f883 	uxth.w	r8, r3
	}
 8006fe4:	4647      	mov	r7, r8
	while (isspace((int) buff[i++])) {
 8006fe6:	f815 0008 	ldrb.w	r0, [r5, r8]
 8006fea:	19e9      	adds	r1, r5, r7
 8006fec:	f7ff fe2e 	bl	8006c4c <isspace>
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d1f4      	bne.n	8006fe0 <shell_cmd_trim+0x3e>
	if (--i > 0) {
 8006ff6:	f1b8 0f00 	cmp.w	r8, #0
 8006ffa:	d0d9      	beq.n	8006fb0 <shell_cmd_trim+0xe>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
 8006ffc:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8006ffe:	3201      	adds	r2, #1
 8007000:	1bd2      	subs	r2, r2, r7
 8007002:	4628      	mov	r0, r5
 8007004:	f001 f80f 	bl	8008026 <memmove>
		*buff_len = *buff_len - i;
 8007008:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800700a:	eba3 0308 	sub.w	r3, r3, r8
 800700e:	8663      	strh	r3, [r4, #50]	; 0x32
 8007010:	e7ce      	b.n	8006fb0 <shell_cmd_trim+0xe>

08007012 <shell_raw_fprintf>:
{
 8007012:	b40e      	push	{r1, r2, r3}
 8007014:	b503      	push	{r0, r1, lr}
 8007016:	aa03      	add	r2, sp, #12
 8007018:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 800701c:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
 800701e:	f7fa fbe9 	bl	80017f4 <shell_fprintf_fmt>
}
 8007022:	b002      	add	sp, #8
 8007024:	f85d eb04 	ldr.w	lr, [sp], #4
 8007028:	b003      	add	sp, #12
 800702a:	4770      	bx	lr

0800702c <full_line_cmd.isra.8>:
static inline bool full_line_cmd(const struct shell *shell)
 800702c:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
 800702e:	6803      	ldr	r3, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
 8007030:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
 8007032:	6818      	ldr	r0, [r3, #0]
 8007034:	8e5d      	ldrh	r5, [r3, #50]	; 0x32
	return str == NULL ? 0U : (u16_t)strlen(str);
 8007036:	b110      	cbz	r0, 800703e <full_line_cmd.isra.8+0x12>
 8007038:	f000 ffc3 	bl	8007fc2 <strlen>
 800703c:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
 8007042:	4428      	add	r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 8007044:	fbb0 f3f2 	udiv	r3, r0, r2
 8007048:	fb02 0013 	mls	r0, r2, r3, r0
}
 800704c:	fab0 f080 	clz	r0, r0
 8007050:	0940      	lsrs	r0, r0, #5
 8007052:	bd38      	pop	{r3, r4, r5, pc}

08007054 <shell_cursor_in_empty_line>:
{
 8007054:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
 8007056:	6883      	ldr	r3, [r0, #8]
{
 8007058:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
 800705e:	b110      	cbz	r0, 8007066 <shell_cursor_in_empty_line+0x12>
 8007060:	f000 ffaf 	bl	8007fc2 <strlen>
 8007064:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 8007066:	68a3      	ldr	r3, [r4, #8]
 8007068:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
 800706a:	4428      	add	r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 800706c:	fbb0 f3f2 	udiv	r3, r0, r2
 8007070:	fb02 0013 	mls	r0, r2, r3, r0
}
 8007074:	fab0 f080 	clz	r0, r0
 8007078:	0940      	lsrs	r0, r0, #5
 800707a:	bd38      	pop	{r3, r4, r5, pc}

0800707c <shell_op_cursor_move>:
{
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 8007080:	6880      	ldr	r0, [r0, #8]
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
 8007082:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 8007084:	8e42      	ldrh	r2, [r0, #50]	; 0x32
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
 8007086:	4419      	add	r1, r3
 8007088:	b28d      	uxth	r5, r1
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 800708a:	3020      	adds	r0, #32
 800708c:	4619      	mov	r1, r3
 800708e:	f7ff fe07 	bl	8006ca0 <shell_multiline_data_calc>
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
 8007092:	68a0      	ldr	r0, [r4, #8]
 8007094:	462a      	mov	r2, r5
 8007096:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8007098:	3020      	adds	r0, #32
 800709a:	f7ff fdf6 	bl	8006c8a <row_span_with_buffer_offsets_get>
 800709e:	4607      	mov	r7, r0
						    &shell->ctx->vt100_ctx.cons,
 80070a0:	68a0      	ldr	r0, [r4, #8]
	col_span = column_span_with_buffer_offsets_get(
 80070a2:	462a      	mov	r2, r5
 80070a4:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80070a6:	3020      	adds	r0, #32
 80070a8:	f7ff fde0 	bl	8006c6c <column_span_with_buffer_offsets_get>
	shell_op_cursor_vert_move(shell, -row_span);
 80070ac:	4279      	negs	r1, r7
	col_span = column_span_with_buffer_offsets_get(
 80070ae:	4606      	mov	r6, r0
	shell_op_cursor_vert_move(shell, -row_span);
 80070b0:	4620      	mov	r0, r4
 80070b2:	f7fa fbe5 	bl	8001880 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, col_span);
 80070b6:	4631      	mov	r1, r6
 80070b8:	4620      	mov	r0, r4
 80070ba:	f7fa fbf1 	bl	80018a0 <shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
 80070be:	68a3      	ldr	r3, [r4, #8]
 80070c0:	869d      	strh	r5, [r3, #52]	; 0x34
}
 80070c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080070c4 <shell_op_cursor_word_move>:
{
 80070c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
 80070c8:	1e0c      	subs	r4, r1, #0
{
 80070ca:	4606      	mov	r6, r0
	if (val < 0) {
 80070cc:	da32      	bge.n	8007134 <shell_op_cursor_word_move+0x70>
		val = -val;
 80070ce:	4264      	negs	r4, r4
 80070d0:	b224      	sxth	r4, r4
		sign = -1;
 80070d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80070d6:	b2af      	uxth	r7, r5
 80070d8:	e022      	b.n	8007120 <shell_op_cursor_word_move+0x5c>
		shift = shift_calc(shell->ctx->cmd_buff,
 80070da:	68b3      	ldr	r3, [r6, #8]
 80070dc:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
 80070e0:	f8b3 9032 	ldrh.w	r9, [r3, #50]	; 0x32
 80070e4:	f103 0838 	add.w	r8, r3, #56	; 0x38
	bool found = false;
 80070e8:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
 80070ea:	4673      	mov	r3, lr
		idx = pos + ret * sign;
 80070ec:	eba3 010e 	sub.w	r1, r3, lr
 80070f0:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
 80070f2:	b90b      	cbnz	r3, 80070f8 <shell_op_cursor_word_move+0x34>
 80070f4:	1c6a      	adds	r2, r5, #1
 80070f6:	d010      	beq.n	800711a <shell_op_cursor_word_move+0x56>
 80070f8:	4599      	cmp	r9, r3
 80070fa:	d101      	bne.n	8007100 <shell_op_cursor_word_move+0x3c>
		    ((idx == len) && (sign > 0))) {
 80070fc:	2d01      	cmp	r5, #1
 80070fe:	d00c      	beq.n	800711a <shell_op_cursor_word_move+0x56>
		if (isalnum((int)str[idx]) != 0) {
 8007100:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 8007104:	f042 0c20 	orr.w	ip, r2, #32
 8007108:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
 800710c:	f1bc 0f19 	cmp.w	ip, #25
 8007110:	d90c      	bls.n	800712c <shell_op_cursor_word_move+0x68>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8007112:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
 8007114:	2a09      	cmp	r2, #9
 8007116:	d909      	bls.n	800712c <shell_op_cursor_word_move+0x68>
			if (found) {
 8007118:	b148      	cbz	r0, 800712e <shell_op_cursor_word_move+0x6a>
		shell_op_cursor_move(shell, sign * shift);
 800711a:	4630      	mov	r0, r6
 800711c:	f7ff ffae 	bl	800707c <shell_op_cursor_move>
	while (val--) {
 8007120:	3c01      	subs	r4, #1
 8007122:	b224      	sxth	r4, r4
 8007124:	1c63      	adds	r3, r4, #1
 8007126:	d1d8      	bne.n	80070da <shell_op_cursor_word_move+0x16>
}
 8007128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
 800712c:	2001      	movs	r0, #1
		ret++;
 800712e:	443b      	add	r3, r7
 8007130:	b29b      	uxth	r3, r3
 8007132:	e7db      	b.n	80070ec <shell_op_cursor_word_move+0x28>
		sign = 1;
 8007134:	2501      	movs	r5, #1
 8007136:	e7ce      	b.n	80070d6 <shell_op_cursor_word_move+0x12>

08007138 <shell_op_cursor_home_move>:
	shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
 8007138:	6883      	ldr	r3, [r0, #8]
 800713a:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 800713c:	4249      	negs	r1, r1
 800713e:	b209      	sxth	r1, r1
 8007140:	f7ff bf9c 	b.w	800707c <shell_op_cursor_move>

08007144 <shell_op_cursor_end_move>:
	shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
 8007144:	6883      	ldr	r3, [r0, #8]
 8007146:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 8007148:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800714a:	1ac9      	subs	r1, r1, r3
 800714c:	b209      	sxth	r1, r1
 800714e:	f7ff bf95 	b.w	800707c <shell_op_cursor_move>

08007152 <shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
 8007152:	6883      	ldr	r3, [r0, #8]
 8007154:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007156:	b11b      	cbz	r3, 8007160 <shell_op_left_arrow+0xe>
		shell_op_cursor_move(shell, -1);
 8007158:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800715c:	f7ff bf8e 	b.w	800707c <shell_op_cursor_move>
}
 8007160:	4770      	bx	lr

08007162 <shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
 8007162:	6883      	ldr	r3, [r0, #8]
 8007164:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8007166:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007168:	429a      	cmp	r2, r3
 800716a:	d202      	bcs.n	8007172 <shell_op_right_arrow+0x10>
		shell_op_cursor_move(shell, 1);
 800716c:	2101      	movs	r1, #1
 800716e:	f7ff bf85 	b.w	800707c <shell_op_cursor_move>
}
 8007172:	4770      	bx	lr

08007174 <shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
 8007174:	6883      	ldr	r3, [r0, #8]
 8007176:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8007178:	865a      	strh	r2, [r3, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
 800717a:	4413      	add	r3, r2
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	clear_eos(shell);
 8007182:	6940      	ldr	r0, [r0, #20]
 8007184:	f7fa bb74 	b.w	8001870 <clear_eos.isra.6>

08007188 <shell_cmd_line_erase>:
{
 8007188:	b510      	push	{r4, lr}
 800718a:	4604      	mov	r4, r0
	shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
 800718c:	6880      	ldr	r0, [r0, #8]
 800718e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8007190:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8007192:	3020      	adds	r0, #32
 8007194:	f7ff fd84 	bl	8006ca0 <shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
 8007198:	68a3      	ldr	r3, [r4, #8]
 800719a:	8c19      	ldrh	r1, [r3, #32]
	shell_op_cursor_horiz_move(shell,
 800719c:	4620      	mov	r0, r4
 800719e:	f1c1 0101 	rsb	r1, r1, #1
 80071a2:	f7fa fb7d 	bl	80018a0 <shell_op_cursor_horiz_move>
	shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
 80071a6:	68a3      	ldr	r3, [r4, #8]
 80071a8:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80071aa:	4620      	mov	r0, r4
 80071ac:	3901      	subs	r1, #1
 80071ae:	f7fa fb67 	bl	8001880 <shell_op_cursor_vert_move>
	clear_eos(shell);
 80071b2:	6960      	ldr	r0, [r4, #20]
}
 80071b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	clear_eos(shell);
 80071b8:	f7fa bb5a 	b.w	8001870 <clear_eos.isra.6>

080071bc <shell_write>:
{
 80071bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80071c0:	4607      	mov	r7, r0
 80071c2:	4688      	mov	r8, r1
 80071c4:	4614      	mov	r4, r2
	size_t offset = 0;
 80071c6:	2600      	movs	r6, #0
	while (length) {
 80071c8:	b914      	cbnz	r4, 80071d0 <shell_write+0x14>
}
 80071ca:	b002      	add	sp, #8
 80071cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	6803      	ldr	r3, [r0, #0]
 80071d4:	4622      	mov	r2, r4
 80071d6:	68dd      	ldr	r5, [r3, #12]
 80071d8:	eb08 0106 	add.w	r1, r8, r6
 80071dc:	ab01      	add	r3, sp, #4
 80071de:	47a8      	blx	r5
		offset += tmp_cnt;
 80071e0:	9d01      	ldr	r5, [sp, #4]
 80071e2:	442e      	add	r6, r5
		length -= tmp_cnt;
 80071e4:	1b64      	subs	r4, r4, r5
		if (tmp_cnt == 0 &&
 80071e6:	2d00      	cmp	r5, #0
 80071e8:	d1ee      	bne.n	80071c8 <shell_write+0xc>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
 80071ea:	68b8      	ldr	r0, [r7, #8]
 80071ec:	7903      	ldrb	r3, [r0, #4]
		if (tmp_cnt == 0 &&
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d0ea      	beq.n	80071c8 <shell_write+0xc>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d80a      	bhi.n	800720c <shell_write+0x50>
	return z_impl_k_poll(events, num_events, timeout);
 80071f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071fa:	2101      	movs	r1, #1
 80071fc:	f500 7036 	add.w	r0, r0, #728	; 0x2d8
 8007200:	f7fe fcea 	bl	8005bd8 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
 8007204:	68bb      	ldr	r3, [r7, #8]
	signal->signaled = 0U;
 8007206:	f8c3 5294 	str.w	r5, [r3, #660]	; 0x294
 800720a:	e7dd      	b.n	80071c8 <shell_write+0xc>
	return shell->ctx->internal.flags.tx_rdy == 1 ? true : false;
 800720c:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
		while (!flag_tx_rdy_get(shell)) {
 8007210:	06db      	lsls	r3, r3, #27
 8007212:	d5fb      	bpl.n	800720c <shell_write+0x50>
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
 8007214:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8007218:	f36f 1304 	bfc	r3, #4, #1
 800721c:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
 8007220:	e7d2      	b.n	80071c8 <shell_write+0xc>

08007222 <shell_print_stream>:
	shell_write((const struct shell *) user_ctx, data, data_len);
 8007222:	f7ff bfcb 	b.w	80071bc <shell_write>

08007226 <shell_internal_vfprintf>:

void shell_internal_vfprintf(const struct shell *shell,
			     enum shell_vt100_color color, const char *fmt,
			     va_list args)
{
 8007226:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007228:	460f      	mov	r7, r1
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    shell->ctx->internal.flags.use_colors &&
 800722a:	6881      	ldr	r1, [r0, #8]
{
 800722c:	461e      	mov	r6, r3
	    shell->ctx->internal.flags.use_colors &&
 800722e:	f8d1 3258 	ldr.w	r3, [r1, #600]	; 0x258
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
 8007232:	079b      	lsls	r3, r3, #30
{
 8007234:	4604      	mov	r4, r0
 8007236:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
 8007238:	d517      	bpl.n	800726a <shell_internal_vfprintf+0x44>
	    shell->ctx->internal.flags.use_colors &&
 800723a:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
 800723e:	42bb      	cmp	r3, r7
 8007240:	d013      	beq.n	800726a <shell_internal_vfprintf+0x44>
			   enum shell_vt100_color color);

static inline void shell_vt100_colors_store(const struct shell *shell,
					    struct shell_vt100_colors *color)
{
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
 8007242:	2202      	movs	r2, #2
 8007244:	312e      	adds	r1, #46	; 0x2e
 8007246:	a801      	add	r0, sp, #4
 8007248:	f000 ff04 	bl	8008054 <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		shell_vt100_colors_store(shell, &col);
		shell_vt100_color_set(shell, color);
 800724c:	4639      	mov	r1, r7
 800724e:	4620      	mov	r0, r4
 8007250:	f7fa fb7c 	bl	800194c <shell_vt100_color_set>

		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 8007254:	4629      	mov	r1, r5
 8007256:	6960      	ldr	r0, [r4, #20]
 8007258:	4632      	mov	r2, r6
 800725a:	f7fa facb 	bl	80017f4 <shell_fprintf_fmt>

		shell_vt100_colors_restore(shell, &col);
 800725e:	a901      	add	r1, sp, #4
 8007260:	4620      	mov	r0, r4
 8007262:	f7fa fb97 	bl	8001994 <shell_vt100_colors_restore>
	} else {
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
 8007266:	b003      	add	sp, #12
 8007268:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 800726a:	4632      	mov	r2, r6
 800726c:	4629      	mov	r1, r5
 800726e:	6960      	ldr	r0, [r4, #20]
 8007270:	f7fa fac0 	bl	80017f4 <shell_fprintf_fmt>
}
 8007274:	e7f7      	b.n	8007266 <shell_internal_vfprintf+0x40>

08007276 <shell_internal_fprintf>:

void shell_internal_fprintf(const struct shell *shell,
			    enum shell_vt100_color color,
			    const char *fmt, ...)
{
 8007276:	b40c      	push	{r2, r3}
 8007278:	b507      	push	{r0, r1, r2, lr}
 800727a:	ab04      	add	r3, sp, #16
 800727c:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	va_start(args, fmt);
 8007280:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
 8007282:	f7ff ffd0 	bl	8007226 <shell_internal_vfprintf>
	va_end(args);
}
 8007286:	b003      	add	sp, #12
 8007288:	f85d eb04 	ldr.w	lr, [sp], #4
 800728c:	b002      	add	sp, #8
 800728e:	4770      	bx	lr

08007290 <data_insert>:
{
 8007290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8007294:	6886      	ldr	r6, [r0, #8]
 8007296:	8e74      	ldrh	r4, [r6, #50]	; 0x32
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 8007298:	18a3      	adds	r3, r4, r2
 800729a:	2bff      	cmp	r3, #255	; 0xff
{
 800729c:	4607      	mov	r7, r0
 800729e:	4688      	mov	r8, r1
 80072a0:	4615      	mov	r5, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 80072a2:	dc1f      	bgt.n	80072e4 <data_insert+0x54>
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 80072a4:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 80072a6:	1ae4      	subs	r4, r4, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 80072a8:	3338      	adds	r3, #56	; 0x38
 80072aa:	441e      	add	r6, r3
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 80072ac:	b2a4      	uxth	r4, r4
	memmove(curr_pos + len, curr_pos, after);
 80072ae:	4622      	mov	r2, r4
 80072b0:	4631      	mov	r1, r6
 80072b2:	1970      	adds	r0, r6, r5
 80072b4:	f000 feb7 	bl	8008026 <memmove>
	memcpy(curr_pos, data, len);
 80072b8:	462a      	mov	r2, r5
 80072ba:	4641      	mov	r1, r8
 80072bc:	4630      	mov	r0, r6
 80072be:	f000 fec9 	bl	8008054 <memcpy>
	shell->ctx->cmd_buff_len += len;
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 80072c6:	442b      	add	r3, r5
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	8653      	strh	r3, [r2, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 80072cc:	4413      	add	r3, r2
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
 80072d4:	68bb      	ldr	r3, [r7, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80072d6:	f8d3 1258 	ldr.w	r1, [r3, #600]	; 0x258
 80072da:	0749      	lsls	r1, r1, #29
 80072dc:	d404      	bmi.n	80072e8 <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
 80072de:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80072e0:	4415      	add	r5, r2
 80072e2:	869d      	strh	r5, [r3, #52]	; 0x34
}
 80072e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
 80072e8:	4621      	mov	r1, r4
 80072ea:	4638      	mov	r0, r7
}
 80072ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
 80072f0:	f7fa bbca 	b.w	8001a88 <reprint_from_cursor>

080072f4 <shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
 80072f4:	f7ff bfcc 	b.w	8007290 <data_insert>

080072f8 <shell_op_char_delete>:
{
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4605      	mov	r5, r0
	u16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 80072fc:	6880      	ldr	r0, [r0, #8]
 80072fe:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8007300:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 8007302:	1ae4      	subs	r4, r4, r3
 8007304:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
 8007306:	b18c      	cbz	r4, 800732c <shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 8007308:	3338      	adds	r3, #56	; 0x38
 800730a:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
 800730c:	4622      	mov	r2, r4
 800730e:	1c41      	adds	r1, r0, #1
 8007310:	f000 fe89 	bl	8008026 <memmove>
	--shell->ctx->cmd_buff_len;
 8007314:	68aa      	ldr	r2, [r5, #8]
 8007316:	8e53      	ldrh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
 8007318:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
 800731a:	3b01      	subs	r3, #1
 800731c:	8653      	strh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
 800731e:	4628      	mov	r0, r5
 8007320:	2201      	movs	r2, #1
 8007322:	b289      	uxth	r1, r1
}
 8007324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
 8007328:	f7fa bbae 	b.w	8001a88 <reprint_from_cursor>
}
 800732c:	bd38      	pop	{r3, r4, r5, pc}

0800732e <shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
 800732e:	6883      	ldr	r3, [r0, #8]
 8007330:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
 8007332:	b510      	push	{r4, lr}
 8007334:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
 8007336:	b152      	cbz	r2, 800734e <shell_op_char_backspace+0x20>
 8007338:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800733a:	b143      	cbz	r3, 800734e <shell_op_char_backspace+0x20>
	shell_op_cursor_move(shell, -1);
 800733c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007340:	f7ff fe9c 	bl	800707c <shell_op_cursor_move>
	shell_op_char_delete(shell);
 8007344:	4620      	mov	r0, r4
}
 8007346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_op_char_delete(shell);
 800734a:	f7ff bfd5 	b.w	80072f8 <shell_op_char_delete>
}
 800734e:	bd10      	pop	{r4, pc}

08007350 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
 8007350:	6843      	ldr	r3, [r0, #4]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	b103      	cbz	r3, 8007358 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
 8007356:	4718      	bx	r3
}
 8007358:	4770      	bx	lr

0800735a <uninit>:
}
 800735a:	2000      	movs	r0, #0
 800735c:	4770      	bx	lr

0800735e <read>:
{
 800735e:	b510      	push	{r4, lr}
 8007360:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
 8007362:	6843      	ldr	r3, [r0, #4]
 8007364:	68d8      	ldr	r0, [r3, #12]
 8007366:	f7ff fa93 	bl	8006890 <ring_buf_get>
 800736a:	6020      	str	r0, [r4, #0]
}
 800736c:	2000      	movs	r0, #0
 800736e:	bd10      	pop	{r4, pc}

08007370 <write>:
{
 8007370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 8007374:	6845      	ldr	r5, [r0, #4]
{
 8007376:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
 8007378:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
 800737a:	7c1b      	ldrb	r3, [r3, #16]
{
 800737c:	460c      	mov	r4, r1
 800737e:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
 8007380:	b153      	cbz	r3, 8007398 <write+0x28>
 8007382:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
 8007386:	4544      	cmp	r4, r8
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	d120      	bne.n	80073ce <write+0x5e>
		*cnt = length;
 800738c:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 800738e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8007392:	2001      	movs	r0, #1
 8007394:	4790      	blx	r2
 8007396:	e017      	b.n	80073c8 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
 8007398:	68a8      	ldr	r0, [r5, #8]
 800739a:	f7ff fa24 	bl	80067e6 <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800739e:	682b      	ldr	r3, [r5, #0]
 80073a0:	6030      	str	r0, [r6, #0]
 80073a2:	330c      	adds	r3, #12
 80073a4:	2101      	movs	r1, #1
 80073a6:	f3bf 8f5b 	dmb	ish
 80073aa:	e853 2f00 	ldrex	r2, [r3]
 80073ae:	e843 1000 	strex	r0, r1, [r3]
 80073b2:	2800      	cmp	r0, #0
 80073b4:	d1f9      	bne.n	80073aa <write+0x3a>
 80073b6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
 80073ba:	b92a      	cbnz	r2, 80073c8 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable) {
 80073c0:	6843      	ldr	r3, [r0, #4]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	b103      	cbz	r3, 80073c8 <write+0x58>
		api->irq_tx_enable(dev);
 80073c6:	4798      	blx	r3
}
 80073c8:	2000      	movs	r0, #0
 80073ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
 80073ce:	6818      	ldr	r0, [r3, #0]
 80073d0:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
 80073d4:	6843      	ldr	r3, [r0, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	4798      	blx	r3
 80073da:	e7d4      	b.n	8007386 <write+0x16>

080073dc <enable>:
{
 80073dc:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
 80073de:	6843      	ldr	r3, [r0, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
 80073e4:	b111      	cbz	r1, 80073ec <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
 80073e6:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
 80073e8:	f7ff ffb2 	bl	8007350 <z_impl_uart_irq_tx_disable>
}
 80073ec:	2000      	movs	r0, #0
 80073ee:	bd08      	pop	{r3, pc}

080073f0 <uart_callback>:
	struct device *dev = sh_uart->ctrl_blk->dev;
 80073f0:	6803      	ldr	r3, [r0, #0]
{
 80073f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80073f6:	4605      	mov	r5, r0
	struct device *dev = sh_uart->ctrl_blk->dev;
 80073f8:	681e      	ldr	r6, [r3, #0]
	if (api->irq_update) {
 80073fa:	6873      	ldr	r3, [r6, #4]
 80073fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fe:	b10b      	cbz	r3, 8007404 <uart_callback+0x14>
		return api->irq_update(dev);
 8007400:	4630      	mov	r0, r6
 8007402:	4798      	blx	r3
	if (api->irq_rx_ready) {
 8007404:	6873      	ldr	r3, [r6, #4]
 8007406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007408:	b343      	cbz	r3, 800745c <uart_callback+0x6c>
		return api->irq_rx_ready(dev);
 800740a:	4630      	mov	r0, r6
 800740c:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
 800740e:	b328      	cbz	r0, 800745c <uart_callback+0x6c>
	bool new_data = false;
 8007410:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
 8007414:	68e8      	ldr	r0, [r5, #12]
 8007416:	a901      	add	r1, sp, #4
 8007418:	6902      	ldr	r2, [r0, #16]
 800741a:	f7ff f9b5 	bl	8006788 <ring_buf_put_claim>
		if (len > 0) {
 800741e:	682b      	ldr	r3, [r5, #0]
 8007420:	4607      	mov	r7, r0
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
 8007422:	6818      	ldr	r0, [r3, #0]
	if (api->fifo_read) {
 8007424:	6843      	ldr	r3, [r0, #4]
		if (len > 0) {
 8007426:	2f00      	cmp	r7, #0
 8007428:	d03c      	beq.n	80074a4 <uart_callback+0xb4>
 800742a:	699c      	ldr	r4, [r3, #24]
 800742c:	2c00      	cmp	r4, #0
 800742e:	d037      	beq.n	80074a0 <uart_callback+0xb0>
		return api->fifo_read(dev, rx_data, size);
 8007430:	463a      	mov	r2, r7
 8007432:	9901      	ldr	r1, [sp, #4]
 8007434:	47a0      	blx	r4
				new_data = true;
 8007436:	1e04      	subs	r4, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 8007438:	4621      	mov	r1, r4
 800743a:	68e8      	ldr	r0, [r5, #12]
				new_data = true;
 800743c:	bf18      	it	ne
 800743e:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 8007442:	f7ff f9bd 	bl	80067c0 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
 8007446:	b10c      	cbz	r4, 800744c <uart_callback+0x5c>
 8007448:	42a7      	cmp	r7, r4
 800744a:	d0e3      	beq.n	8007414 <uart_callback+0x24>
	if (new_data) {
 800744c:	f1b8 0f00 	cmp.w	r8, #0
 8007450:	d004      	beq.n	800745c <uart_callback+0x6c>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
 8007452:	682b      	ldr	r3, [r5, #0]
 8007454:	2000      	movs	r0, #0
 8007456:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 800745a:	4790      	blx	r2
	if (api->irq_tx_ready) {
 800745c:	6873      	ldr	r3, [r6, #4]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	b1db      	cbz	r3, 800749a <uart_callback+0xaa>
		return api->irq_tx_ready(dev);
 8007462:	4630      	mov	r0, r6
 8007464:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
 8007466:	b1c0      	cbz	r0, 800749a <uart_callback+0xaa>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
 8007468:	68a8      	ldr	r0, [r5, #8]
	struct device *dev = sh_uart->ctrl_blk->dev;
 800746a:	682b      	ldr	r3, [r5, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
 800746c:	6902      	ldr	r2, [r0, #16]
	struct device *dev = sh_uart->ctrl_blk->dev;
 800746e:	681e      	ldr	r6, [r3, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
 8007470:	a901      	add	r1, sp, #4
 8007472:	f7ff f9d7 	bl	8006824 <ring_buf_get_claim>
	if (len) {
 8007476:	4604      	mov	r4, r0
 8007478:	b300      	cbz	r0, 80074bc <uart_callback+0xcc>
	if (api->fifo_fill) {
 800747a:	6873      	ldr	r3, [r6, #4]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	b1db      	cbz	r3, 80074b8 <uart_callback+0xc8>
		return api->fifo_fill(dev, tx_data, size);
 8007480:	4602      	mov	r2, r0
 8007482:	9901      	ldr	r1, [sp, #4]
 8007484:	4630      	mov	r0, r6
 8007486:	4798      	blx	r3
 8007488:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
 800748a:	68a8      	ldr	r0, [r5, #8]
 800748c:	f7ff f9eb 	bl	8006866 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	2001      	movs	r0, #1
 8007494:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8007498:	4790      	blx	r2
}
 800749a:	b002      	add	sp, #8
 800749c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
 80074a0:	4620      	mov	r0, r4
 80074a2:	e7c8      	b.n	8007436 <uart_callback+0x46>
	if (api->fifo_read) {
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	b12b      	cbz	r3, 80074b4 <uart_callback+0xc4>
		return api->fifo_read(dev, rx_data, size);
 80074a8:	2201      	movs	r2, #1
 80074aa:	f10d 0103 	add.w	r1, sp, #3
 80074ae:	4798      	blx	r3
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
 80074b0:	4604      	mov	r4, r0
 80074b2:	e7c8      	b.n	8007446 <uart_callback+0x56>
	return 0;
 80074b4:	4638      	mov	r0, r7
 80074b6:	e7fb      	b.n	80074b0 <uart_callback+0xc0>
	return 0;
 80074b8:	4619      	mov	r1, r3
 80074ba:	e7e6      	b.n	800748a <uart_callback+0x9a>
 80074bc:	4630      	mov	r0, r6
 80074be:	f7ff ff47 	bl	8007350 <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
 80074c2:	682b      	ldr	r3, [r5, #0]
 80074c4:	60dc      	str	r4, [r3, #12]
 80074c6:	e7e3      	b.n	8007490 <uart_callback+0xa0>

080074c8 <shell_raw_fprintf>:
{
 80074c8:	b40e      	push	{r1, r2, r3}
 80074ca:	b503      	push	{r0, r1, lr}
 80074cc:	aa03      	add	r2, sp, #12
 80074ce:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 80074d2:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
 80074d4:	f7fa f98e 	bl	80017f4 <shell_fprintf_fmt>
}
 80074d8:	b002      	add	sp, #8
 80074da:	f85d eb04 	ldr.w	lr, [sp], #4
 80074de:	b003      	add	sp, #12
 80074e0:	4770      	bx	lr

080074e2 <cmd_bacskpace_mode_backspace>:
	flag_mode_delete_set(shell, false);
 80074e2:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
 80074e4:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 80074e8:	f36f 1245 	bfc	r2, #5, #1
 80074ec:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
 80074f0:	2000      	movs	r0, #0
 80074f2:	4770      	bx	lr

080074f4 <cmd_bacskpace_mode_delete>:
	flag_mode_delete_set(shell, true);
 80074f4:	6882      	ldr	r2, [r0, #8]
 80074f6:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 80074fa:	f043 0320 	orr.w	r3, r3, #32
 80074fe:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
 8007502:	2000      	movs	r0, #0
 8007504:	4770      	bx	lr

08007506 <cmd_colors_off>:
	flag_use_colors_set(shell, false);
 8007506:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
 8007508:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 800750c:	f36f 0241 	bfc	r2, #1, #1
 8007510:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
 8007514:	2000      	movs	r0, #0
 8007516:	4770      	bx	lr

08007518 <cmd_colors_on>:
	flag_use_colors_set(shell, true);
 8007518:	6882      	ldr	r2, [r0, #8]
 800751a:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 800751e:	f043 0302 	orr.w	r3, r3, #2
 8007522:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
 8007526:	2000      	movs	r0, #0
 8007528:	4770      	bx	lr

0800752a <cmd_echo_off>:
	flag_echo_set(shell, false);
 800752a:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.echo = val ? 1 : 0;
 800752c:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8007530:	f36f 0282 	bfc	r2, #2, #1
 8007534:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
 8007538:	2000      	movs	r0, #0
 800753a:	4770      	bx	lr

0800753c <cmd_echo_on>:
	flag_echo_set(shell, true);
 800753c:	6882      	ldr	r2, [r0, #8]
 800753e:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 8007542:	f043 0304 	orr.w	r3, r3, #4
 8007546:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
 800754a:	2000      	movs	r0, #0
 800754c:	4770      	bx	lr

0800754e <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
 800754e:	6983      	ldr	r3, [r0, #24]
 8007550:	2000      	movs	r0, #0
 8007552:	6018      	str	r0, [r3, #0]
}
 8007554:	4770      	bx	lr

08007556 <shell_raw_fprintf>:
{
 8007556:	b40e      	push	{r1, r2, r3}
 8007558:	b503      	push	{r0, r1, lr}
 800755a:	aa03      	add	r2, sp, #12
 800755c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8007560:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
 8007562:	f7fa f947 	bl	80017f4 <shell_fprintf_fmt>
}
 8007566:	b002      	add	sp, #8
 8007568:	f85d eb04 	ldr.w	lr, [sp], #4
 800756c:	b003      	add	sp, #12
 800756e:	4770      	bx	lr

08007570 <remove_from_tail.part.4>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
 8007570:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8007572:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
 8007574:	6800      	ldr	r0, [r0, #0]
	node->prev->next = node->next;
 8007576:	e9d3 2100 	ldrd	r2, r1, [r3]
 800757a:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
 800757c:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800757e:	2200      	movs	r2, #0
	node->prev = NULL;
 8007580:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
 8007584:	8919      	ldrh	r1, [r3, #8]
 8007586:	895b      	ldrh	r3, [r3, #10]
 8007588:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
 800758a:	310c      	adds	r1, #12
 800758c:	f7ff f96b 	bl	8006866 <ring_buf_get_finish>

	return true;
}
 8007590:	2001      	movs	r0, #1
 8007592:	bd08      	pop	{r3, pc}

08007594 <shell_history_mode_exit>:
	history->current = NULL;
 8007594:	2300      	movs	r3, #0
 8007596:	60c3      	str	r3, [r0, #12]
}
 8007598:	4770      	bx	lr

0800759a <shell_history_get>:
{
 800759a:	b570      	push	{r4, r5, r6, lr}
 800759c:	4615      	mov	r5, r2
	return list->head == list;
 800759e:	4602      	mov	r2, r0
 80075a0:	461e      	mov	r6, r3
 80075a2:	f852 4f04 	ldr.w	r4, [r2, #4]!
	if (sys_dlist_is_empty(&history->list)) {
 80075a6:	4294      	cmp	r4, r2
 80075a8:	d102      	bne.n	80075b0 <shell_history_get+0x16>
		*len = 0U;
 80075aa:	2000      	movs	r0, #0
 80075ac:	8030      	strh	r0, [r6, #0]
}
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
	if (!up) { /* button down */
 80075b0:	68c2      	ldr	r2, [r0, #12]
 80075b2:	b9b1      	cbnz	r1, 80075e2 <shell_history_get+0x48>
		if (history->current == NULL) {
 80075b4:	2a00      	cmp	r2, #0
 80075b6:	d0f8      	beq.n	80075aa <shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
 80075b8:	4294      	cmp	r4, r2
 80075ba:	d102      	bne.n	80075c2 <shell_history_get+0x28>
	history->current = l_item;
 80075bc:	2300      	movs	r3, #0
 80075be:	60c3      	str	r3, [r0, #12]
	if (l_item) {
 80075c0:	e7f3      	b.n	80075aa <shell_history_get+0x10>
 80075c2:	6854      	ldr	r4, [r2, #4]
	history->current = l_item;
 80075c4:	60c4      	str	r4, [r0, #12]
	if (l_item) {
 80075c6:	2c00      	cmp	r4, #0
 80075c8:	d0ef      	beq.n	80075aa <shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
 80075ca:	8922      	ldrh	r2, [r4, #8]
 80075cc:	f104 010c 	add.w	r1, r4, #12
 80075d0:	4628      	mov	r0, r5
 80075d2:	f000 fd3f 	bl	8008054 <memcpy>
		*len = h_item->len;
 80075d6:	8922      	ldrh	r2, [r4, #8]
 80075d8:	8032      	strh	r2, [r6, #0]
		dst[*len] = '\0';
 80075da:	2300      	movs	r3, #0
 80075dc:	54ab      	strb	r3, [r5, r2]
		return true;
 80075de:	2001      	movs	r0, #1
 80075e0:	e7e5      	b.n	80075ae <shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
 80075e2:	2a00      	cmp	r2, #0
 80075e4:	d0ee      	beq.n	80075c4 <shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
 80075e6:	6883      	ldr	r3, [r0, #8]
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d0e7      	beq.n	80075bc <shell_history_get+0x22>
 80075ec:	6814      	ldr	r4, [r2, #0]
 80075ee:	e7e9      	b.n	80075c4 <shell_history_get+0x2a>

080075f0 <shell_history_purge>:

void shell_history_purge(struct shell_history *history)
{
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
 80075f4:	1d05      	adds	r5, r0, #4
 80075f6:	6863      	ldr	r3, [r4, #4]
 80075f8:	42ab      	cmp	r3, r5
 80075fa:	d004      	beq.n	8007606 <shell_history_purge+0x16>
 80075fc:	4620      	mov	r0, r4
 80075fe:	f7ff ffb7 	bl	8007570 <remove_from_tail.part.4>
	while (remove_from_tail(history)) {
 8007602:	2800      	cmp	r0, #0
 8007604:	d1f7      	bne.n	80075f6 <shell_history_purge+0x6>
	}
}
 8007606:	bd38      	pop	{r3, r4, r5, pc}

08007608 <shell_history_put>:
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 8007608:	6803      	ldr	r3, [r0, #0]
{
 800760a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t total_len = len + offsetof(struct shell_history_item, data);
 800760e:	f102 050c 	add.w	r5, r2, #12
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
 8007612:	426f      	negs	r7, r5
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline u32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	/* One element is used to distinguish between empty and full state. */
	return buf->size - 1;
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f007 0703 	and.w	r7, r7, #3
	total_len += padding;
 800761a:	443d      	add	r5, r7
 800761c:	3b01      	subs	r3, #1
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 800761e:	429d      	cmp	r5, r3
{
 8007620:	4604      	mov	r4, r0
 8007622:	468a      	mov	sl, r1
 8007624:	4690      	mov	r8, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 8007626:	d840      	bhi.n	80076aa <shell_history_put+0xa2>
	history->current = NULL;
 8007628:	2300      	movs	r3, #0
 800762a:	60c3      	str	r3, [r0, #12]
		return;
	}

	shell_history_mode_exit(history);

	if (len == 0) {
 800762c:	2a00      	cmp	r2, #0
 800762e:	d03c      	beq.n	80076aa <shell_history_put+0xa2>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
 8007630:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
 8007634:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007636:	4581      	cmp	r9, r0
 8007638:	d12c      	bne.n	8007694 <shell_history_put+0x8c>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
 800763a:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
 800763c:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
 8007640:	462a      	mov	r2, r5
 8007642:	a901      	add	r1, sp, #4
 8007644:	6820      	ldr	r0, [r4, #0]
 8007646:	f7ff f89f 	bl	8006788 <ring_buf_put_claim>
		if (claim_len < total_len) {
 800764a:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
 800764c:	4606      	mov	r6, r0
		if (claim_len < total_len) {
 800764e:	d92f      	bls.n	80076b0 <shell_history_put+0xa8>
				ring_buf_put_claim(history->ring_buf,
 8007650:	462a      	mov	r2, r5
 8007652:	a901      	add	r1, sp, #4
 8007654:	6820      	ldr	r0, [r4, #0]
 8007656:	f7ff f897 	bl	8006788 <ring_buf_put_claim>
			if (claim2_len == total_len) {
 800765a:	4285      	cmp	r5, r0
 800765c:	d129      	bne.n	80076b2 <shell_history_put+0xaa>
				ring_buf_put_finish(history->ring_buf,
 800765e:	4631      	mov	r1, r6
 8007660:	6820      	ldr	r0, [r4, #0]
 8007662:	f7ff f8ad 	bl	80067c0 <ring_buf_put_finish>
				padding += claim_len;
 8007666:	4437      	add	r7, r6
 8007668:	b2bf      	uxth	r7, r7
 800766a:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
 800766c:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
 800766e:	4651      	mov	r1, sl
	item->len = len;
 8007670:	f8a5 8008 	strh.w	r8, [r5, #8]
	item->padding = padding;
 8007674:	816f      	strh	r7, [r5, #10]
	memcpy(item->data, src, len);
 8007676:	4642      	mov	r2, r8
 8007678:	f105 000c 	add.w	r0, r5, #12
 800767c:	f000 fcea 	bl	8008054 <memcpy>
	node->next = list->head;
 8007680:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
 8007682:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
 8007684:	e9c5 3900 	strd	r3, r9, [r5]
 8007688:	4631      	mov	r1, r6
	list->head->prev = node;
 800768a:	605d      	str	r5, [r3, #4]
	list->head = node;
 800768c:	6065      	str	r5, [r4, #4]
 800768e:	f7ff f897 	bl	80067c0 <ring_buf_put_finish>
			break;
 8007692:	e00a      	b.n	80076aa <shell_history_put+0xa2>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
 8007694:	9001      	str	r0, [sp, #4]
	if (l_item &&
 8007696:	2800      	cmp	r0, #0
 8007698:	d0d0      	beq.n	800763c <shell_history_put+0x34>
	   (h_item->len == len) &&
 800769a:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
 800769c:	4293      	cmp	r3, r2
 800769e:	d1cd      	bne.n	800763c <shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
 80076a0:	300c      	adds	r0, #12
 80076a2:	f000 fcb0 	bl	8008006 <memcmp>
	   (h_item->len == len) &&
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d1c8      	bne.n	800763c <shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
 80076aa:	b003      	add	sp, #12
 80076ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
 80076b0:	d0dc      	beq.n	800766c <shell_history_put+0x64>
		ring_buf_put_finish(history->ring_buf, 0);
 80076b2:	2100      	movs	r1, #0
 80076b4:	6820      	ldr	r0, [r4, #0]
 80076b6:	f7ff f883 	bl	80067c0 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
 80076ba:	6863      	ldr	r3, [r4, #4]
 80076bc:	4599      	cmp	r9, r3
 80076be:	d108      	bne.n	80076d2 <shell_history_put+0xca>
			ring_buf_reset(history->ring_buf);
 80076c0:	6820      	ldr	r0, [r4, #0]
	memset(&buf->misc, 0, sizeof(buf->misc));
 80076c2:	2208      	movs	r2, #8
	buf->tail = 0;
 80076c4:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
 80076c8:	2100      	movs	r1, #0
 80076ca:	4410      	add	r0, r2
 80076cc:	f000 fcec 	bl	80080a8 <memset>
 80076d0:	e7b6      	b.n	8007640 <shell_history_put+0x38>
 80076d2:	4620      	mov	r0, r4
 80076d4:	f7ff ff4c 	bl	8007570 <remove_from_tail.part.4>
		if (remove_from_tail(history) == false) {
 80076d8:	2800      	cmp	r0, #0
 80076da:	d1b1      	bne.n	8007640 <shell_history_put+0x38>
 80076dc:	e7f0      	b.n	80076c0 <shell_history_put+0xb8>

080076de <shell_history_init>:

void shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
 80076de:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
 80076e0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
 80076e4:	2300      	movs	r3, #0
 80076e6:	60c3      	str	r3, [r0, #12]
}
 80076e8:	4770      	bx	lr

080076ea <shell_wildcard_character_exist>:
{
 80076ea:	b510      	push	{r4, lr}
 80076ec:	4604      	mov	r4, r0
 80076ee:	b908      	cbnz	r0, 80076f4 <shell_wildcard_character_exist+0xa>
	return false;
 80076f0:	2000      	movs	r0, #0
}
 80076f2:	bd10      	pop	{r4, pc}
 80076f4:	f000 fc65 	bl	8007fc2 <strlen>
	for (size_t i = 0; i < str_len; i++) {
 80076f8:	2300      	movs	r3, #0
 80076fa:	b280      	uxth	r0, r0
 80076fc:	4283      	cmp	r3, r0
 80076fe:	d2f7      	bcs.n	80076f0 <shell_wildcard_character_exist+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
 8007700:	5ce2      	ldrb	r2, [r4, r3]
 8007702:	2a3f      	cmp	r2, #63	; 0x3f
 8007704:	d003      	beq.n	800770e <shell_wildcard_character_exist+0x24>
 8007706:	2a2a      	cmp	r2, #42	; 0x2a
 8007708:	d001      	beq.n	800770e <shell_wildcard_character_exist+0x24>
	for (size_t i = 0; i < str_len; i++) {
 800770a:	3301      	adds	r3, #1
 800770c:	e7f6      	b.n	80076fc <shell_wildcard_character_exist+0x12>
			return true;
 800770e:	2001      	movs	r0, #1
 8007710:	e7ef      	b.n	80076f2 <shell_wildcard_character_exist+0x8>

08007712 <shell_wildcard_prepare>:
{
 8007712:	b510      	push	{r4, lr}
 8007714:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
 8007716:	6880      	ldr	r0, [r0, #8]
 8007718:	f44f 7280 	mov.w	r2, #256	; 0x100
 800771c:	2100      	movs	r1, #0
 800771e:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8007722:	f000 fcc1 	bl	80080a8 <memset>
	memcpy(shell->ctx->temp_buff,
 8007726:	68a0      	ldr	r0, [r4, #8]
 8007728:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800772a:	f100 0138 	add.w	r1, r0, #56	; 0x38
 800772e:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8007732:	f000 fc8f 	bl	8008054 <memcpy>
	shell_spaces_trim(shell->ctx->temp_buff);
 8007736:	68a0      	ldr	r0, [r4, #8]
 8007738:	f500 709c 	add.w	r0, r0, #312	; 0x138
 800773c:	f7ff fbfd 	bl	8006f3a <shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = shell_strlen(shell->ctx->temp_buff) + 1;
 8007740:	68a0      	ldr	r0, [r4, #8]
 8007742:	f510 709c 	adds.w	r0, r0, #312	; 0x138
 8007746:	d002      	beq.n	800774e <shell_wildcard_prepare+0x3c>
 8007748:	f000 fc3b 	bl	8007fc2 <strlen>
 800774c:	b280      	uxth	r0, r0
 800774e:	68a3      	ldr	r3, [r4, #8]
 8007750:	3001      	adds	r0, #1
 8007752:	86d8      	strh	r0, [r3, #54]	; 0x36
}
 8007754:	bd10      	pop	{r4, pc}

08007756 <shell_wildcard_finalize>:

void shell_wildcard_finalize(const struct shell *shell)
{
 8007756:	b510      	push	{r4, lr}
 8007758:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
 800775a:	6880      	ldr	r0, [r0, #8]
 800775c:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 800775e:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8007762:	3038      	adds	r0, #56	; 0x38
 8007764:	f000 fc76 	bl	8008054 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
 8007768:	68a3      	ldr	r3, [r4, #8]
 800776a:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800776c:	865a      	strh	r2, [r3, #50]	; 0x32
}
 800776e:	bd10      	pop	{r4, pc}

08007770 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 8007770:	4602      	mov	r2, r0
 8007772:	2101      	movs	r1, #1
 8007774:	2000      	movs	r0, #0
 8007776:	f7fa bd37 	b.w	80021e8 <__stm32_exti_isr>

0800777a <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 800777a:	4602      	mov	r2, r0
 800777c:	2102      	movs	r1, #2
 800777e:	2001      	movs	r0, #1
 8007780:	f7fa bd32 	b.w	80021e8 <__stm32_exti_isr>

08007784 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 8007784:	4602      	mov	r2, r0
 8007786:	2103      	movs	r1, #3
 8007788:	2002      	movs	r0, #2
 800778a:	f7fa bd2d 	b.w	80021e8 <__stm32_exti_isr>

0800778e <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 800778e:	4602      	mov	r2, r0
 8007790:	2104      	movs	r1, #4
 8007792:	2003      	movs	r0, #3
 8007794:	f7fa bd28 	b.w	80021e8 <__stm32_exti_isr>

08007798 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8007798:	4602      	mov	r2, r0
 800779a:	2105      	movs	r1, #5
 800779c:	2004      	movs	r0, #4
 800779e:	f7fa bd23 	b.w	80021e8 <__stm32_exti_isr>

080077a2 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 80077a2:	4602      	mov	r2, r0
 80077a4:	210a      	movs	r1, #10
 80077a6:	2005      	movs	r0, #5
 80077a8:	f7fa bd1e 	b.w	80021e8 <__stm32_exti_isr>

080077ac <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 80077ac:	4602      	mov	r2, r0
 80077ae:	2110      	movs	r1, #16
 80077b0:	200a      	movs	r0, #10
 80077b2:	f7fa bd19 	b.w	80021e8 <__stm32_exti_isr>

080077b6 <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 80077b6:	4602      	mov	r2, r0
 80077b8:	2111      	movs	r1, #17
 80077ba:	2010      	movs	r0, #16
 80077bc:	f7fa bd14 	b.w	80021e8 <__stm32_exti_isr>

080077c0 <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 80077c0:	4602      	mov	r2, r0
 80077c2:	2113      	movs	r1, #19
 80077c4:	2012      	movs	r0, #18
 80077c6:	f7fa bd0f 	b.w	80021e8 <__stm32_exti_isr>

080077ca <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 80077ca:	4602      	mov	r2, r0
 80077cc:	2116      	movs	r1, #22
 80077ce:	2015      	movs	r0, #21
 80077d0:	f7fa bd0a 	b.w	80021e8 <__stm32_exti_isr>

080077d4 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 80077d4:	4602      	mov	r2, r0
 80077d6:	2117      	movs	r1, #23
 80077d8:	2016      	movs	r0, #22
 80077da:	f7fa bd05 	b.w	80021e8 <__stm32_exti_isr>

080077de <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 80077de:	2200      	movs	r2, #0
{
 80077e0:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 80077e2:	4611      	mov	r1, r2
 80077e4:	2006      	movs	r0, #6
 80077e6:	f7fb fe21 	bl	800342c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 80077ea:	2200      	movs	r2, #0
 80077ec:	4611      	mov	r1, r2
 80077ee:	2007      	movs	r0, #7
 80077f0:	f7fb fe1c 	bl	800342c <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 80077f4:	2200      	movs	r2, #0
 80077f6:	4611      	mov	r1, r2
 80077f8:	2008      	movs	r0, #8
 80077fa:	f7fb fe17 	bl	800342c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 80077fe:	2200      	movs	r2, #0
 8007800:	4611      	mov	r1, r2
 8007802:	2009      	movs	r0, #9
 8007804:	f7fb fe12 	bl	800342c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8007808:	2200      	movs	r2, #0
 800780a:	4611      	mov	r1, r2
 800780c:	200a      	movs	r0, #10
 800780e:	f7fb fe0d 	bl	800342c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#ifndef CONFIG_SOC_SERIES_STM32MP1X
	IRQ_CONNECT(EXTI9_5_IRQn,
 8007812:	2200      	movs	r2, #0
 8007814:	4611      	mov	r1, r2
 8007816:	2017      	movs	r0, #23
 8007818:	f7fb fe08 	bl	800342c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800781c:	2200      	movs	r2, #0
 800781e:	4611      	mov	r1, r2
 8007820:	2028      	movs	r0, #40	; 0x28
 8007822:	f7fb fe03 	bl	800342c <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8007826:	2200      	movs	r2, #0
 8007828:	4611      	mov	r1, r2
 800782a:	2001      	movs	r0, #1
 800782c:	f7fb fdfe 	bl	800342c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8007830:	2200      	movs	r2, #0
 8007832:	4611      	mov	r1, r2
 8007834:	202a      	movs	r0, #42	; 0x2a
 8007836:	f7fb fdf9 	bl	800342c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 800783a:	2200      	movs	r2, #0
 800783c:	4611      	mov	r1, r2
 800783e:	2002      	movs	r0, #2
 8007840:	f7fb fdf4 	bl	800342c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8007844:	2200      	movs	r2, #0
 8007846:	4611      	mov	r1, r2
 8007848:	2003      	movs	r0, #3
 800784a:	f7fb fdef 	bl	800342c <z_arm_irq_priority_set>
}
 800784e:	2000      	movs	r0, #0
 8007850:	bd08      	pop	{r3, pc}

08007852 <config_pll_init>:
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
 8007852:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007856:	2208      	movs	r2, #8
 8007858:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(CONFIG_CLOCK_STM32_PLL_P_DIVISOR);
 800785c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007860:	6083      	str	r3, [r0, #8]
}
 8007862:	4770      	bx	lr

08007864 <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 8007864:	4770      	bx	lr

08007866 <can_work_handler>:
{
 8007866:	b570      	push	{r4, r5, r6, lr}
 8007868:	4604      	mov	r4, r0
		return &buffer->buf[buffer->tail];
 800786a:	f100 0510 	add.w	r5, r0, #16
 800786e:	260e      	movs	r6, #14
	if (buffer->head == buffer->tail) {
 8007870:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
 8007874:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8007878:	4283      	cmp	r3, r0
 800787a:	d016      	beq.n	80078aa <can_work_handler+0x44>
		can_work->cb(frame, can_work->cb_arg);
 800787c:	e9d4 3113 	ldrd	r3, r1, [r4, #76]	; 0x4c
 8007880:	fb06 5000 	mla	r0, r6, r0, r5
 8007884:	4798      	blx	r3
	u16_t next_tail = WORK_BUF_MOD_SIZE(buffer->tail + 1);
 8007886:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
	if (buffer->head == buffer->tail) {
 800788a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800788e:	4293      	cmp	r3, r2
 8007890:	d0ee      	beq.n	8007870 <can_work_handler+0xa>
	if (buffer->head == WORK_BUF_FULL) {
 8007892:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007896:	428a      	cmp	r2, r1
		buffer->head = buffer->tail;
 8007898:	bf08      	it	eq
 800789a:	f8a4 3048 	strheq.w	r3, [r4, #72]	; 0x48
	u16_t next_tail = WORK_BUF_MOD_SIZE(buffer->tail + 1);
 800789e:	3301      	adds	r3, #1
 80078a0:	f003 0303 	and.w	r3, r3, #3
	buffer->tail = next_tail;
 80078a4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 80078a8:	e7e2      	b.n	8007870 <can_work_handler+0xa>
}
 80078aa:	bd70      	pop	{r4, r5, r6, pc}

080078ac <can_msgq_put>:
{
 80078ac:	460b      	mov	r3, r1
	return z_impl_k_msgq_put(msgq, data, timeout);
 80078ae:	2200      	movs	r2, #0
 80078b0:	4601      	mov	r1, r0
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fd bace 	b.w	8004e54 <z_impl_k_msgq_put>

080078b8 <can_work_isr_put>:
	u16_t next_head = WORK_BUF_MOD_SIZE(buffer->head + 1);
 80078b8:	f8b1 3048 	ldrh.w	r3, [r1, #72]	; 0x48
{
 80078bc:	b430      	push	{r4, r5}
	if (buffer->head == WORK_BUF_FULL) {
 80078be:	f64f 74ff 	movw	r4, #65535	; 0xffff
	u16_t next_head = WORK_BUF_MOD_SIZE(buffer->head + 1);
 80078c2:	1c5a      	adds	r2, r3, #1
	if (buffer->head == WORK_BUF_FULL) {
 80078c4:	42a3      	cmp	r3, r4
	u16_t next_head = WORK_BUF_MOD_SIZE(buffer->head + 1);
 80078c6:	f002 0203 	and.w	r2, r2, #3
	if (buffer->head == WORK_BUF_FULL) {
 80078ca:	d02a      	beq.n	8007922 <can_work_isr_put+0x6a>
	buffer->buf[buffer->head] = *frame;
 80078cc:	240e      	movs	r4, #14
 80078ce:	fb04 1303 	mla	r3, r4, r3, r1
 80078d2:	3310      	adds	r3, #16
 80078d4:	f100 040c 	add.w	r4, r0, #12
 80078d8:	f850 5b04 	ldr.w	r5, [r0], #4
 80078dc:	f843 5b04 	str.w	r5, [r3], #4
 80078e0:	42a0      	cmp	r0, r4
 80078e2:	d1f9      	bne.n	80078d8 <can_work_isr_put+0x20>
 80078e4:	8800      	ldrh	r0, [r0, #0]
 80078e6:	8018      	strh	r0, [r3, #0]
	if (next_head == buffer->tail) {
 80078e8:	f8b1 004a 	ldrh.w	r0, [r1, #74]	; 0x4a
		buffer->head = WORK_BUF_FULL;
 80078ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078f0:	4290      	cmp	r0, r2
 80078f2:	bf08      	it	eq
 80078f4:	461a      	moveq	r2, r3
 80078f6:	f8a1 2048 	strh.w	r2, [r1, #72]	; 0x48
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80078fa:	f101 0308 	add.w	r3, r1, #8
	k_work_submit_to_queue(work->work_queue, &work->work_item);
 80078fe:	68c8      	ldr	r0, [r1, #12]
 8007900:	f3bf 8f5b 	dmb	ish
 8007904:	e853 2f00 	ldrex	r2, [r3]
 8007908:	f042 0401 	orr.w	r4, r2, #1
 800790c:	e843 4500 	strex	r5, r4, [r3]
 8007910:	2d00      	cmp	r5, #0
 8007912:	d1f7      	bne.n	8007904 <can_work_isr_put+0x4c>
 8007914:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8007918:	07d3      	lsls	r3, r2, #31
 800791a:	d402      	bmi.n	8007922 <can_work_isr_put+0x6a>
}
 800791c:	bc30      	pop	{r4, r5}
		k_queue_append(&work_q->queue, work);
 800791e:	f000 bfdc 	b.w	80088da <k_queue_append>
 8007922:	bc30      	pop	{r4, r5}
 8007924:	4770      	bx	lr

08007926 <can_stm32_rx_isr>:
{
 8007926:	b530      	push	{r4, r5, lr}
	cfg = DEV_CFG(dev);
 8007928:	6803      	ldr	r3, [r0, #0]
	data = DEV_DATA(dev);
 800792a:	6885      	ldr	r5, [r0, #8]
	can = cfg->can;
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	681c      	ldr	r4, [r3, #0]
{
 8007930:	b085      	sub	sp, #20
	while (can->RF0R & CAN_RF0R_FMP0) {
 8007932:	68e3      	ldr	r3, [r4, #12]
 8007934:	079b      	lsls	r3, r3, #30
 8007936:	d102      	bne.n	800793e <can_stm32_rx_isr+0x18>
	if (can->RF0R & CAN_RF0R_FOVR0) {
 8007938:	68e3      	ldr	r3, [r4, #12]
}
 800793a:	b005      	add	sp, #20
 800793c:	bd30      	pop	{r4, r5, pc}
		filter_match_index = ((mbox->RDTR & CAN_RDT0R_FMI)
 800793e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 8007942:	f3c2 2207 	ubfx	r2, r2, #8, #8
		if (filter_match_index >= CONFIG_CAN_MAX_FILTER) {
 8007946:	2a04      	cmp	r2, #4
 8007948:	dcf6      	bgt.n	8007938 <can_stm32_rx_isr+0x12>
	if (mbox->RIR & CAN_RI0R_IDE) {
 800794a:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
 800794e:	9b00      	ldr	r3, [sp, #0]
		msg->ext_id = mbox->RIR >> CAN_RI0R_EXID_Pos;
 8007950:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
	if (mbox->RIR & CAN_RI0R_IDE) {
 8007954:	f011 0104 	ands.w	r1, r1, #4
 8007958:	d037      	beq.n	80079ca <can_stm32_rx_isr+0xa4>
		msg->ext_id = mbox->RIR >> CAN_RI0R_EXID_Pos;
 800795a:	f3c0 01d7 	ubfx	r1, r0, #3, #24
 800795e:	b2db      	uxtb	r3, r3
 8007960:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007964:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	f021 011f 	bic.w	r1, r1, #31
 800796e:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
 8007972:	f88d 1004 	strb.w	r1, [sp, #4]
		msg->id_type = CAN_EXTENDED_IDENTIFIER;
 8007976:	f043 0301 	orr.w	r3, r3, #1
		msg->id_type = CAN_STANDARD_IDENTIFIER;
 800797a:	f88d 3000 	strb.w	r3, [sp]
	msg->rtr = mbox->RIR & CAN_RI0R_RTR ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 800797e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8007982:	f89d 1000 	ldrb.w	r1, [sp]
 8007986:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800798a:	f363 0141 	bfi	r1, r3, #1, #1
	msg->dlc = mbox->RDTR & (CAN_RDT0R_DLC >> CAN_RDT0R_DLC_Pos);
 800798e:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
	msg->rtr = mbox->RIR & CAN_RI0R_RTR ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 8007992:	f88d 1000 	strb.w	r1, [sp]
	msg->dlc = mbox->RDTR & (CAN_RDT0R_DLC >> CAN_RDT0R_DLC_Pos);
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	f88d 3005 	strb.w	r3, [sp, #5]
	msg->data_32[0] = mbox->RDLR;
 800799e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 80079a2:	f8cd 3006 	str.w	r3, [sp, #6]
	msg->data_32[1] = mbox->RDHR;
 80079a6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 80079aa:	f8cd 300a 	str.w	r3, [sp, #10]
		callback = data->rx_cb[filter_match_index];
 80079ae:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 80079b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		if (callback) {
 80079b6:	b11a      	cbz	r2, 80079c0 <can_stm32_rx_isr+0x9a>
			callback(&msg, data->cb_arg[filter_match_index]);
 80079b8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80079bc:	4668      	mov	r0, sp
 80079be:	4790      	blx	r2
		can->RF0R |= CAN_RF0R_RFOM0;
 80079c0:	68e3      	ldr	r3, [r4, #12]
 80079c2:	f043 0320 	orr.w	r3, r3, #32
 80079c6:	60e3      	str	r3, [r4, #12]
 80079c8:	e7b3      	b.n	8007932 <can_stm32_rx_isr+0xc>
		msg->std_id =  mbox->RIR >> CAN_RI0R_STID_Pos;
 80079ca:	0d40      	lsrs	r0, r0, #21
 80079cc:	f360 2312 	bfi	r3, r0, #8, #11
 80079d0:	9300      	str	r3, [sp, #0]
		msg->id_type = CAN_STANDARD_IDENTIFIER;
 80079d2:	f361 0300 	bfi	r3, r1, #0, #1
 80079d6:	e7d0      	b.n	800797a <can_stm32_rx_isr+0x54>

080079d8 <can_stm32_register_state_change_isr>:
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 80079d8:	6803      	ldr	r3, [r0, #0]
	data->state_change_isr = isr;
 80079da:	6882      	ldr	r2, [r0, #8]
	CAN_TypeDef *can = cfg->can;
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	681b      	ldr	r3, [r3, #0]
	data->state_change_isr = isr;
 80079e0:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
		can->IER &= ~CAN_IER_EPVIE;
 80079e4:	695a      	ldr	r2, [r3, #20]
	if (isr == NULL) {
 80079e6:	b919      	cbnz	r1, 80079f0 <can_stm32_register_state_change_isr+0x18>
		can->IER &= ~CAN_IER_EPVIE;
 80079e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		can->IER |= CAN_IER_EPVIE;
 80079ec:	615a      	str	r2, [r3, #20]
}
 80079ee:	4770      	bx	lr
		can->IER |= CAN_IER_EPVIE;
 80079f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079f4:	e7fa      	b.n	80079ec <can_stm32_register_state_change_isr+0x14>

080079f6 <can_stm32_get_state>:
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 80079f6:	6803      	ldr	r3, [r0, #0]
	CAN_TypeDef *can = cfg->can;
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	681b      	ldr	r3, [r3, #0]
	if (err_cnt) {
 80079fc:	b129      	cbz	r1, 8007a0a <can_stm32_get_state+0x14>
			((can->ESR & CAN_ESR_TEC) >> CAN_ESR_TEC_Pos);
 80079fe:	699a      	ldr	r2, [r3, #24]
 8007a00:	0c12      	lsrs	r2, r2, #16
		err_cnt->tx_err_cnt =
 8007a02:	700a      	strb	r2, [r1, #0]
			((can->ESR & CAN_ESR_REC) >> CAN_ESR_REC_Pos);
 8007a04:	699a      	ldr	r2, [r3, #24]
 8007a06:	0e12      	lsrs	r2, r2, #24
		err_cnt->rx_err_cnt =
 8007a08:	704a      	strb	r2, [r1, #1]
	if (can->ESR & CAN_ESR_BOFF) {
 8007a0a:	699a      	ldr	r2, [r3, #24]
 8007a0c:	0752      	lsls	r2, r2, #29
	if (can->ESR & CAN_ESR_EPVF) {
 8007a0e:	bf5a      	itte	pl
 8007a10:	6998      	ldrpl	r0, [r3, #24]
		return CAN_BUS_OFF;
 8007a12:	f3c0 0040 	ubfxpl	r0, r0, #1, #1
 8007a16:	2002      	movmi	r0, #2
}
 8007a18:	4770      	bx	lr

08007a1a <can_stm32_set_filter_bank>:
{
 8007a1a:	b510      	push	{r4, lr}
 8007a1c:	9c02      	ldr	r4, [sp, #8]
	switch (filter_type) {
 8007a1e:	2a03      	cmp	r2, #3
 8007a20:	d824      	bhi.n	8007a6c <can_stm32_set_filter_bank+0x52>
 8007a22:	e8df f002 	tbb	[pc, r2]
 8007a26:	021f      	.short	0x021f
 8007a28:	2a30      	.short	0x2a30
		switch (filter_nr & 0x03) {
 8007a2a:	f000 0003 	and.w	r0, r0, #3
 8007a2e:	2802      	cmp	r0, #2
 8007a30:	d00d      	beq.n	8007a4e <can_stm32_set_filter_bank+0x34>
 8007a32:	2803      	cmp	r0, #3
 8007a34:	d011      	beq.n	8007a5a <can_stm32_set_filter_bank+0x40>
			filter_reg->FR1 = (filter_reg->FR1 & 0xFFFF0000) | id;
 8007a36:	680a      	ldr	r2, [r1, #0]
 8007a38:	2801      	cmp	r0, #1
 8007a3a:	bf1b      	ittet	ne
 8007a3c:	0c12      	lsrne	r2, r2, #16
 8007a3e:	0412      	lslne	r2, r2, #16
			filter_reg->FR1 = (filter_reg->FR1 & 0x0000FFFF)
 8007a40:	b292      	uxtheq	r2, r2
			filter_reg->FR1 = (filter_reg->FR1 & 0xFFFF0000) | id;
 8007a42:	4313      	orrne	r3, r2
					  | (id << 16);
 8007a44:	bf08      	it	eq
 8007a46:	ea42 4303 	orreq.w	r3, r2, r3, lsl #16
			filter_reg->FR1 = id;
 8007a4a:	600b      	str	r3, [r1, #0]
			break;
 8007a4c:	e00e      	b.n	8007a6c <can_stm32_set_filter_bank+0x52>
			filter_reg->FR2 = (filter_reg->FR2 & 0xFFFF0000) | id;
 8007a4e:	684a      	ldr	r2, [r1, #4]
 8007a50:	0c12      	lsrs	r2, r2, #16
 8007a52:	0412      	lsls	r2, r2, #16
 8007a54:	4313      	orrs	r3, r2
			filter_reg->FR2 = id;
 8007a56:	604b      	str	r3, [r1, #4]
			break;
 8007a58:	e008      	b.n	8007a6c <can_stm32_set_filter_bank+0x52>
			filter_reg->FR2 = (filter_reg->FR2 & 0x0000FFFF)
 8007a5a:	684a      	ldr	r2, [r1, #4]
 8007a5c:	b292      	uxth	r2, r2
					   | (id << 16);
 8007a5e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8007a62:	e7f8      	b.n	8007a56 <can_stm32_set_filter_bank+0x3c>
		switch (filter_nr & 0x02) {
 8007a64:	f010 0002 	ands.w	r0, r0, #2
 8007a68:	d001      	beq.n	8007a6e <can_stm32_set_filter_bank+0x54>
 8007a6a:	b918      	cbnz	r0, 8007a74 <can_stm32_set_filter_bank+0x5a>
}
 8007a6c:	bd10      	pop	{r4, pc}
			filter_reg->FR1 = id | (mask << 16);
 8007a6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007a72:	e7ea      	b.n	8007a4a <can_stm32_set_filter_bank+0x30>
			filter_reg->FR2 = id | (mask << 16);
 8007a74:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007a78:	e7ed      	b.n	8007a56 <can_stm32_set_filter_bank+0x3c>
		switch (filter_nr & 0x02) {
 8007a7a:	f010 0002 	ands.w	r0, r0, #2
 8007a7e:	d0e4      	beq.n	8007a4a <can_stm32_set_filter_bank+0x30>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d1e8      	bne.n	8007a56 <can_stm32_set_filter_bank+0x3c>
 8007a84:	e7f2      	b.n	8007a6c <can_stm32_set_filter_bank+0x52>
		filter_reg->FR1 = id;
 8007a86:	600b      	str	r3, [r1, #0]
		filter_reg->FR2 = mask;
 8007a88:	604c      	str	r4, [r1, #4]
}
 8007a8a:	e7ef      	b.n	8007a6c <can_stm32_set_filter_bank+0x52>

08007a8c <config_can_1_irq>:
#ifdef CONFIG_SOC_SERIES_STM32F0X
	IRQ_CONNECT(DT_CAN_1_IRQ, DT_CAN_1_IRQ_PRIORITY, can_stm32_isr,
		    DEVICE_GET(can_stm32_1), 0);
	irq_enable(DT_CAN_1_IRQ);
#else
	IRQ_CONNECT(DT_CAN_1_IRQ_RX0, DT_CAN_1_IRQ_PRIORITY,
 8007a8c:	2200      	movs	r2, #0
{
 8007a8e:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_CAN_1_IRQ_RX0, DT_CAN_1_IRQ_PRIORITY,
 8007a90:	4611      	mov	r1, r2
{
 8007a92:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_CAN_1_IRQ_RX0, DT_CAN_1_IRQ_PRIORITY,
 8007a94:	2014      	movs	r0, #20
 8007a96:	f7fb fcc9 	bl	800342c <z_arm_irq_priority_set>
		    can_stm32_rx_isr, DEVICE_GET(can_stm32_1), 0);
	irq_enable(DT_CAN_1_IRQ_RX0);
 8007a9a:	2014      	movs	r0, #20
 8007a9c:	f7fb fcb6 	bl	800340c <arch_irq_enable>

	IRQ_CONNECT(DT_CAN_1_IRQ_TX, DT_CAN_1_IRQ_PRIORITY,
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	4611      	mov	r1, r2
 8007aa4:	2013      	movs	r0, #19
 8007aa6:	f7fb fcc1 	bl	800342c <z_arm_irq_priority_set>
		    can_stm32_tx_isr, DEVICE_GET(can_stm32_1), 0);
	irq_enable(DT_CAN_1_IRQ_TX);
 8007aaa:	2013      	movs	r0, #19
 8007aac:	f7fb fcae 	bl	800340c <arch_irq_enable>

	IRQ_CONNECT(DT_CAN_1_IRQ_SCE, DT_CAN_1_IRQ_PRIORITY,
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	2016      	movs	r0, #22
 8007ab6:	f7fb fcb9 	bl	800342c <z_arm_irq_priority_set>
		    can_stm32_state_change_isr, DEVICE_GET(can_stm32_1), 0);
	irq_enable(DT_CAN_1_IRQ_SCE);
 8007aba:	2016      	movs	r0, #22
 8007abc:	f7fb fca6 	bl	800340c <arch_irq_enable>
#endif
	can->IER |= CAN_IER_TMEIE | CAN_IER_ERRIE | CAN_IER_FMPIE0 |
 8007ac0:	6963      	ldr	r3, [r4, #20]
 8007ac2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8007ac6:	f043 0313 	orr.w	r3, r3, #19
 8007aca:	6163      	str	r3, [r4, #20]
		    CAN_IER_FMPIE1 | CAN_IER_BOFIE;
}
 8007acc:	bd10      	pop	{r4, pc}

08007ace <can_stm32_shift_arr>:
	if (start > CONFIG_CAN_MAX_FILTER) {
 8007ace:	2905      	cmp	r1, #5
{
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	4614      	mov	r4, r2
	void **start_ptr = arr + start;
 8007ad6:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	if (start > CONFIG_CAN_MAX_FILTER) {
 8007ada:	dc31      	bgt.n	8007b40 <can_stm32_shift_arr+0x72>
	if (count > 0) {
 8007adc:	2a00      	cmp	r2, #0
 8007ade:	dd1c      	ble.n	8007b1a <can_stm32_shift_arr+0x4c>
		if (!can_stm32_check_free(arr, CONFIG_CAN_MAX_FILTER - count,
 8007ae0:	f1c2 0305 	rsb	r3, r2, #5
 8007ae4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007ae8:	3514      	adds	r5, #20
		if (arr[i] != NULL) {
 8007aea:	f853 7b04 	ldr.w	r7, [r3], #4
 8007aee:	bb3f      	cbnz	r7, 8007b40 <can_stm32_shift_arr+0x72>
	for (i = start; i <= end; i++) {
 8007af0:	429d      	cmp	r5, r3
 8007af2:	d1fa      	bne.n	8007aea <can_stm32_shift_arr+0x1c>
		if ((start + count) >= CONFIG_CAN_MAX_FILTER) {
 8007af4:	4421      	add	r1, r4
 8007af6:	2904      	cmp	r1, #4
 8007af8:	dc0c      	bgt.n	8007b14 <can_stm32_shift_arr+0x46>
		move_dest = start_ptr + count;
 8007afa:	00a4      	lsls	r4, r4, #2
		cnt = (CONFIG_CAN_MAX_FILTER - start - count) * sizeof(void *);
 8007afc:	f1c1 0105 	rsb	r1, r1, #5
		memmove(move_dest, start_ptr, cnt);
 8007b00:	008a      	lsls	r2, r1, #2
 8007b02:	1930      	adds	r0, r6, r4
 8007b04:	4631      	mov	r1, r6
 8007b06:	f000 fa8e 	bl	8008026 <memmove>
		(void)memset(start_ptr, 0, count * sizeof(void *));
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	4630      	mov	r0, r6
		(void)memset(arr + CONFIG_CAN_MAX_FILTER - count, 0,
 8007b10:	f000 faca 	bl	80080a8 <memset>
	return 0;
 8007b14:	2400      	movs	r4, #0
}
 8007b16:	4620      	mov	r0, r4
 8007b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (count < 0) {
 8007b1a:	d0fc      	beq.n	8007b16 <can_stm32_shift_arr+0x48>
		if (start - count < 0) {
 8007b1c:	42d1      	cmn	r1, r2
 8007b1e:	d40f      	bmi.n	8007b40 <can_stm32_shift_arr+0x72>
		memmove(start_ptr - count, start_ptr, cnt);
 8007b20:	f06f 0703 	mvn.w	r7, #3
 8007b24:	4357      	muls	r7, r2
		cnt = (CONFIG_CAN_MAX_FILTER - start) * sizeof(void *);
 8007b26:	f1c1 0205 	rsb	r2, r1, #5
		memmove(start_ptr - count, start_ptr, cnt);
 8007b2a:	0092      	lsls	r2, r2, #2
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	1bf0      	subs	r0, r6, r7
 8007b30:	f000 fa79 	bl	8008026 <memmove>
		(void)memset(arr + CONFIG_CAN_MAX_FILTER - count, 0,
 8007b34:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8007b38:	463a      	mov	r2, r7
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	3014      	adds	r0, #20
 8007b3e:	e7e7      	b.n	8007b10 <can_stm32_shift_arr+0x42>
		return CAN_NO_FREE_FILTER;
 8007b40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007b44:	e7e7      	b.n	8007b16 <can_stm32_shift_arr+0x48>

08007b46 <k_mutex_lock.constprop.6>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8007b46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007b4a:	f7fd ba33 	b.w	8004fb4 <z_impl_k_mutex_lock>

08007b4e <can_stm32_send>:
{
 8007b4e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b52:	461e      	mov	r6, r3
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 8007b54:	6803      	ldr	r3, [r0, #0]
{
 8007b56:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	CAN_TypeDef *can = cfg->can;
 8007b5a:	689b      	ldr	r3, [r3, #8]
	struct can_stm32_data *data = DEV_DATA(dev);
 8007b5c:	6887      	ldr	r7, [r0, #8]
	CAN_TypeDef *can = cfg->can;
 8007b5e:	f8d3 9000 	ldr.w	r9, [r3]
	if (msg->dlc > CAN_MAX_DLC) {
 8007b62:	794b      	ldrb	r3, [r1, #5]
	u32_t transmit_status_register = can->TSR;
 8007b64:	f8d9 4008 	ldr.w	r4, [r9, #8]
	if (msg->dlc > CAN_MAX_DLC) {
 8007b68:	2b08      	cmp	r3, #8
{
 8007b6a:	460d      	mov	r5, r1
 8007b6c:	4692      	mov	sl, r2
	if (msg->dlc > CAN_MAX_DLC) {
 8007b6e:	d87c      	bhi.n	8007c6a <can_stm32_send+0x11c>
	if (can->ESR & CAN_ESR_BOFF) {
 8007b70:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8007b74:	075b      	lsls	r3, r3, #29
 8007b76:	d47b      	bmi.n	8007c70 <can_stm32_send+0x122>
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7ff ffe4 	bl	8007b46 <k_mutex_lock.constprop.6>
		if (k_sem_take(&data->tx_int_sem, timeout)) {
 8007b7e:	f107 0b14 	add.w	fp, r7, #20
	while (!(transmit_status_register & CAN_TSR_TME)) {
 8007b82:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8007b86:	d042      	beq.n	8007c0e <can_stm32_send+0xc0>
	if (transmit_status_register & CAN_TSR_TME0) {
 8007b88:	0160      	lsls	r0, r4, #5
 8007b8a:	d54e      	bpl.n	8007c2a <can_stm32_send+0xdc>
		mailbox = &can->sTxMailBox[0];
 8007b8c:	f509 73c0 	add.w	r3, r9, #384	; 0x180
		mb = &(data->mb0);
 8007b90:	f107 042c 	add.w	r4, r7, #44	; 0x2c
	mb->callback_arg = callback_arg;
 8007b94:	e9c4 6800 	strd	r6, r8, [r4]
	sem->count = 0U;
 8007b98:	2200      	movs	r2, #0
 8007b9a:	6122      	str	r2, [r4, #16]
	mailbox->TIR &= CAN_TI0R_TXRQ;
 8007b9c:	681a      	ldr	r2, [r3, #0]
	if (msg->id_type == CAN_STANDARD_IDENTIFIER) {
 8007b9e:	7828      	ldrb	r0, [r5, #0]
 8007ba0:	f895 c002 	ldrb.w	ip, [r5, #2]
	mailbox->TIR &= CAN_TI0R_TXRQ;
 8007ba4:	f002 0201 	and.w	r2, r2, #1
 8007ba8:	601a      	str	r2, [r3, #0]
	if (msg->id_type == CAN_STANDARD_IDENTIFIER) {
 8007baa:	f010 0f01 	tst.w	r0, #1
 8007bae:	786a      	ldrb	r2, [r5, #1]
		mailbox->TIR |= (msg->std_id << CAN_TI0R_STID_Pos);
 8007bb0:	6819      	ldr	r1, [r3, #0]
	if (msg->id_type == CAN_STANDARD_IDENTIFIER) {
 8007bb2:	d149      	bne.n	8007c48 <can_stm32_send+0xfa>
		mailbox->TIR |= (msg->std_id << CAN_TI0R_STID_Pos);
 8007bb4:	f00c 0c07 	and.w	ip, ip, #7
 8007bb8:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8007bbc:	ea41 5242 	orr.w	r2, r1, r2, lsl #21
		mailbox->TIR |= (msg->ext_id << CAN_TI0R_EXID_Pos)
 8007bc0:	601a      	str	r2, [r3, #0]
	if (msg->rtr == CAN_REMOTEREQUEST) {
 8007bc2:	0782      	lsls	r2, r0, #30
		mailbox->TIR |= CAN_TI1R_RTR;
 8007bc4:	bf42      	ittt	mi
 8007bc6:	681a      	ldrmi	r2, [r3, #0]
 8007bc8:	f042 0202 	orrmi.w	r2, r2, #2
 8007bcc:	601a      	strmi	r2, [r3, #0]
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 8007bce:	6859      	ldr	r1, [r3, #4]
			((msg->dlc & 0xF) << CAN_TDT1R_DLC_Pos);
 8007bd0:	796a      	ldrb	r2, [r5, #5]
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 8007bd2:	f021 010f 	bic.w	r1, r1, #15
			((msg->dlc & 0xF) << CAN_TDT1R_DLC_Pos);
 8007bd6:	f002 020f 	and.w	r2, r2, #15
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	605a      	str	r2, [r3, #4]
	mailbox->TDLR = msg->data_32[0];
 8007bde:	f8d5 2006 	ldr.w	r2, [r5, #6]
 8007be2:	609a      	str	r2, [r3, #8]
	mailbox->TDHR = msg->data_32[1];
 8007be4:	f8d5 200a 	ldr.w	r2, [r5, #10]
 8007be8:	60da      	str	r2, [r3, #12]
	mailbox->TIR |= CAN_TI0R_TXRQ;
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	f042 0201 	orr.w	r2, r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]
	z_impl_k_mutex_unlock(mutex);
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	f7fd fa50 	bl	8005098 <z_impl_k_mutex_unlock>
	if (callback == NULL) {
 8007bf8:	2e00      	cmp	r6, #0
 8007bfa:	d13f      	bne.n	8007c7c <can_stm32_send+0x12e>
	return z_impl_k_sem_take(sem, timeout);
 8007bfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007c00:	f104 0008 	add.w	r0, r4, #8
 8007c04:	f7fd fd80 	bl	8005708 <z_impl_k_sem_take>
		return mb->error_flags;
 8007c08:	6a20      	ldr	r0, [r4, #32]
}
 8007c0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_impl_k_mutex_unlock(mutex);
 8007c0e:	4638      	mov	r0, r7
 8007c10:	f7fd fa42 	bl	8005098 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
 8007c14:	4651      	mov	r1, sl
 8007c16:	4658      	mov	r0, fp
 8007c18:	f7fd fd76 	bl	8005708 <z_impl_k_sem_take>
		if (k_sem_take(&data->tx_int_sem, timeout)) {
 8007c1c:	bb58      	cbnz	r0, 8007c76 <can_stm32_send+0x128>
		k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f7ff ff91 	bl	8007b46 <k_mutex_lock.constprop.6>
		transmit_status_register = can->TSR;
 8007c24:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8007c28:	e7ab      	b.n	8007b82 <can_stm32_send+0x34>
	} else if (transmit_status_register & CAN_TSR_TME1) {
 8007c2a:	0121      	lsls	r1, r4, #4
 8007c2c:	d504      	bpl.n	8007c38 <can_stm32_send+0xea>
		mailbox = &can->sTxMailBox[1];
 8007c2e:	f509 73c8 	add.w	r3, r9, #400	; 0x190
		mb = &data->mb1;
 8007c32:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8007c36:	e7ad      	b.n	8007b94 <can_stm32_send+0x46>
	} else if (transmit_status_register & CAN_TSR_TME2) {
 8007c38:	f014 5480 	ands.w	r4, r4, #268435456	; 0x10000000
 8007c3c:	d020      	beq.n	8007c80 <can_stm32_send+0x132>
		mailbox = &can->sTxMailBox[2];
 8007c3e:	f509 73d0 	add.w	r3, r9, #416	; 0x1a0
		mb = &data->mb2;
 8007c42:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8007c46:	e7a5      	b.n	8007b94 <can_stm32_send+0x46>
		mailbox->TIR |= (msg->ext_id << CAN_TI0R_EXID_Pos)
 8007c48:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8007c4c:	f895 c003 	ldrb.w	ip, [r5, #3]
 8007c50:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8007c54:	f895 c004 	ldrb.w	ip, [r5, #4]
 8007c58:	f00c 0c1f 	and.w	ip, ip, #31
 8007c5c:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 8007c60:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 8007c64:	f042 0204 	orr.w	r2, r2, #4
 8007c68:	e7aa      	b.n	8007bc0 <can_stm32_send+0x72>
		return CAN_TX_EINVAL;
 8007c6a:	f06f 0015 	mvn.w	r0, #21
 8007c6e:	e7cc      	b.n	8007c0a <can_stm32_send+0xbc>
		return CAN_TX_BUS_OFF;
 8007c70:	f06f 0003 	mvn.w	r0, #3
 8007c74:	e7c9      	b.n	8007c0a <can_stm32_send+0xbc>
			return CAN_TIMEOUT;
 8007c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c7a:	e7c6      	b.n	8007c0a <can_stm32_send+0xbc>
	return 0;
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	e7c4      	b.n	8007c0a <can_stm32_send+0xbc>
	mb->callback_arg = callback_arg;
 8007c80:	e9c4 6800 	strd	r6, r8, [r4]
 8007c84:	6124      	str	r4, [r4, #16]
	mailbox->TIR &= CAN_TI0R_TXRQ;
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	deff      	udf	#255	; 0xff

08007c8a <can_stm32_signal_tx_complete>:
	if (mb->tx_callback) {
 8007c8a:	6803      	ldr	r3, [r0, #0]
 8007c8c:	b113      	cbz	r3, 8007c94 <can_stm32_signal_tx_complete+0xa>
		mb->tx_callback(mb->error_flags, mb->callback_arg);
 8007c8e:	6841      	ldr	r1, [r0, #4]
 8007c90:	6a00      	ldr	r0, [r0, #32]
 8007c92:	4718      	bx	r3
	z_impl_k_sem_give(sem);
 8007c94:	3008      	adds	r0, #8
 8007c96:	f7fd bd0b 	b.w	80056b0 <z_impl_k_sem_give>

08007c9a <can_stm32_tx_isr_handler>:
{
 8007c9a:	b570      	push	{r4, r5, r6, lr}
	bus_off = can->ESR & CAN_ESR_BOFF;
 8007c9c:	6985      	ldr	r5, [r0, #24]
	if ((can->TSR & CAN_TSR_RQCP0) | bus_off) {
 8007c9e:	6883      	ldr	r3, [r0, #8]
	bus_off = can->ESR & CAN_ESR_BOFF;
 8007ca0:	f005 0504 	and.w	r5, r5, #4
	if ((can->TSR & CAN_TSR_RQCP0) | bus_off) {
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	432b      	orrs	r3, r5
{
 8007caa:	4604      	mov	r4, r0
 8007cac:	460e      	mov	r6, r1
	if ((can->TSR & CAN_TSR_RQCP0) | bus_off) {
 8007cae:	d017      	beq.n	8007ce0 <can_stm32_tx_isr_handler+0x46>
				can->TSR & CAN_TSR_TXOK0 ? CAN_TX_OK  :
 8007cb0:	6883      	ldr	r3, [r0, #8]
 8007cb2:	0798      	lsls	r0, r3, #30
 8007cb4:	d459      	bmi.n	8007d6a <can_stm32_tx_isr_handler+0xd0>
				can->TSR & CAN_TSR_TERR0 ? CAN_TX_ERR :
 8007cb6:	68a3      	ldr	r3, [r4, #8]
				can->TSR & CAN_TSR_TXOK0 ? CAN_TX_OK  :
 8007cb8:	0719      	lsls	r1, r3, #28
 8007cba:	d458      	bmi.n	8007d6e <can_stm32_tx_isr_handler+0xd4>
				can->TSR & CAN_TSR_ALST0 ? CAN_TX_ARB_LOST :
 8007cbc:	68a3      	ldr	r3, [r4, #8]
				can->TSR & CAN_TSR_TXOK0 ? CAN_TX_OK  :
 8007cbe:	075a      	lsls	r2, r3, #29
 8007cc0:	d458      	bmi.n	8007d74 <can_stm32_tx_isr_handler+0xda>
 8007cc2:	2d00      	cmp	r5, #0
 8007cc4:	bf14      	ite	ne
 8007cc6:	f06f 0303 	mvnne.w	r3, #3
 8007cca:	f06f 0304 	mvneq.w	r3, #4
		data->mb0.error_flags =
 8007cce:	64f3      	str	r3, [r6, #76]	; 0x4c
		can->TSR |= CAN_TSR_RQCP0;
 8007cd0:	68a3      	ldr	r3, [r4, #8]
 8007cd2:	f043 0301 	orr.w	r3, r3, #1
 8007cd6:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(&data->mb0);
 8007cd8:	f106 002c 	add.w	r0, r6, #44	; 0x2c
 8007cdc:	f7ff ffd5 	bl	8007c8a <can_stm32_signal_tx_complete>
	if ((can->TSR & CAN_TSR_RQCP1) | bus_off) {
 8007ce0:	68a3      	ldr	r3, [r4, #8]
 8007ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce6:	432b      	orrs	r3, r5
 8007ce8:	d017      	beq.n	8007d1a <can_stm32_tx_isr_handler+0x80>
				can->TSR & CAN_TSR_TXOK1 ? CAN_TX_OK  :
 8007cea:	68a3      	ldr	r3, [r4, #8]
 8007cec:	0598      	lsls	r0, r3, #22
 8007cee:	d444      	bmi.n	8007d7a <can_stm32_tx_isr_handler+0xe0>
				can->TSR & CAN_TSR_TERR1 ? CAN_TX_ERR :
 8007cf0:	68a3      	ldr	r3, [r4, #8]
				can->TSR & CAN_TSR_TXOK1 ? CAN_TX_OK  :
 8007cf2:	0519      	lsls	r1, r3, #20
 8007cf4:	d443      	bmi.n	8007d7e <can_stm32_tx_isr_handler+0xe4>
				can->TSR & CAN_TSR_ALST1 ? CAN_TX_ARB_LOST :
 8007cf6:	68a3      	ldr	r3, [r4, #8]
				can->TSR & CAN_TSR_TXOK1 ? CAN_TX_OK  :
 8007cf8:	055a      	lsls	r2, r3, #21
 8007cfa:	d443      	bmi.n	8007d84 <can_stm32_tx_isr_handler+0xea>
 8007cfc:	2d00      	cmp	r5, #0
 8007cfe:	bf14      	ite	ne
 8007d00:	f06f 0303 	mvnne.w	r3, #3
 8007d04:	f06f 0304 	mvneq.w	r3, #4
		data->mb1.error_flags =
 8007d08:	6733      	str	r3, [r6, #112]	; 0x70
		can->TSR |= CAN_TSR_RQCP1;
 8007d0a:	68a3      	ldr	r3, [r4, #8]
 8007d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d10:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(&data->mb1);
 8007d12:	f106 0050 	add.w	r0, r6, #80	; 0x50
 8007d16:	f7ff ffb8 	bl	8007c8a <can_stm32_signal_tx_complete>
	if ((can->TSR & CAN_TSR_RQCP2) | bus_off) {
 8007d1a:	68a3      	ldr	r3, [r4, #8]
 8007d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d20:	432b      	orrs	r3, r5
 8007d22:	d018      	beq.n	8007d56 <can_stm32_tx_isr_handler+0xbc>
				can->TSR & CAN_TSR_TXOK2 ? CAN_TX_OK  :
 8007d24:	68a3      	ldr	r3, [r4, #8]
 8007d26:	0398      	lsls	r0, r3, #14
 8007d28:	d42f      	bmi.n	8007d8a <can_stm32_tx_isr_handler+0xf0>
				can->TSR & CAN_TSR_TERR2 ? CAN_TX_ERR :
 8007d2a:	68a3      	ldr	r3, [r4, #8]
				can->TSR & CAN_TSR_TXOK2 ? CAN_TX_OK  :
 8007d2c:	0319      	lsls	r1, r3, #12
 8007d2e:	d42e      	bmi.n	8007d8e <can_stm32_tx_isr_handler+0xf4>
				can->TSR & CAN_TSR_ALST2 ? CAN_TX_ARB_LOST :
 8007d30:	68a3      	ldr	r3, [r4, #8]
				can->TSR & CAN_TSR_TXOK2 ? CAN_TX_OK  :
 8007d32:	035a      	lsls	r2, r3, #13
 8007d34:	d42e      	bmi.n	8007d94 <can_stm32_tx_isr_handler+0xfa>
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	bf14      	ite	ne
 8007d3a:	f06f 0303 	mvnne.w	r3, #3
 8007d3e:	f06f 0304 	mvneq.w	r3, #4
		data->mb2.error_flags =
 8007d42:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
		can->TSR |= CAN_TSR_RQCP2;
 8007d46:	68a3      	ldr	r3, [r4, #8]
 8007d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d4c:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(&data->mb2);
 8007d4e:	f106 0074 	add.w	r0, r6, #116	; 0x74
 8007d52:	f7ff ff9a 	bl	8007c8a <can_stm32_signal_tx_complete>
	if (can->TSR & CAN_TSR_TME) {
 8007d56:	68a3      	ldr	r3, [r4, #8]
 8007d58:	f013 5fe0 	tst.w	r3, #469762048	; 0x1c000000
 8007d5c:	d01d      	beq.n	8007d9a <can_stm32_tx_isr_handler+0x100>
 8007d5e:	f106 0014 	add.w	r0, r6, #20
}
 8007d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d66:	f7fd bca3 	b.w	80056b0 <z_impl_k_sem_give>
				can->TSR & CAN_TSR_TXOK0 ? CAN_TX_OK  :
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e7af      	b.n	8007cce <can_stm32_tx_isr_handler+0x34>
 8007d6e:	f06f 0301 	mvn.w	r3, #1
 8007d72:	e7ac      	b.n	8007cce <can_stm32_tx_isr_handler+0x34>
 8007d74:	f06f 0302 	mvn.w	r3, #2
 8007d78:	e7a9      	b.n	8007cce <can_stm32_tx_isr_handler+0x34>
				can->TSR & CAN_TSR_TXOK1 ? CAN_TX_OK  :
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e7c4      	b.n	8007d08 <can_stm32_tx_isr_handler+0x6e>
 8007d7e:	f06f 0301 	mvn.w	r3, #1
 8007d82:	e7c1      	b.n	8007d08 <can_stm32_tx_isr_handler+0x6e>
 8007d84:	f06f 0302 	mvn.w	r3, #2
 8007d88:	e7be      	b.n	8007d08 <can_stm32_tx_isr_handler+0x6e>
				can->TSR & CAN_TSR_TXOK2 ? CAN_TX_OK  :
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	e7d9      	b.n	8007d42 <can_stm32_tx_isr_handler+0xa8>
 8007d8e:	f06f 0301 	mvn.w	r3, #1
 8007d92:	e7d6      	b.n	8007d42 <can_stm32_tx_isr_handler+0xa8>
 8007d94:	f06f 0302 	mvn.w	r3, #2
 8007d98:	e7d3      	b.n	8007d42 <can_stm32_tx_isr_handler+0xa8>
}
 8007d9a:	bd70      	pop	{r4, r5, r6, pc}

08007d9c <can_stm32_tx_isr>:
	cfg = DEV_CFG(dev);
 8007d9c:	6803      	ldr	r3, [r0, #0]
	can_stm32_tx_isr_handler(can, data);
 8007d9e:	6881      	ldr	r1, [r0, #8]
	can = cfg->can;
 8007da0:	689b      	ldr	r3, [r3, #8]
	can_stm32_tx_isr_handler(can, data);
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	f7ff bf79 	b.w	8007c9a <can_stm32_tx_isr_handler>

08007da8 <can_stm32_state_change_isr>:
	cfg = DEV_CFG(dev);
 8007da8:	6803      	ldr	r3, [r0, #0]
	can = cfg->can;
 8007daa:	689b      	ldr	r3, [r3, #8]
{
 8007dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	can = cfg->can;
 8007dae:	681c      	ldr	r4, [r3, #0]
	if (can->MSR & CAN_MSR_ERRI) {
 8007db0:	6863      	ldr	r3, [r4, #4]
 8007db2:	075d      	lsls	r5, r3, #29
 8007db4:	d50e      	bpl.n	8007dd4 <can_stm32_state_change_isr+0x2c>
	data = DEV_DATA(dev);
 8007db6:	6885      	ldr	r5, [r0, #8]
		can_stm32_tx_isr_handler(can, data);
 8007db8:	4620      	mov	r0, r4
 8007dba:	4629      	mov	r1, r5
 8007dbc:	f7ff ff6d 	bl	8007c9a <can_stm32_tx_isr_handler>
	if (!(can->ESR & CAN_ESR_EPVF) && !(can->ESR & CAN_ESR_BOFF)) {
 8007dc0:	69a3      	ldr	r3, [r4, #24]
 8007dc2:	0799      	lsls	r1, r3, #30
 8007dc4:	d408      	bmi.n	8007dd8 <can_stm32_state_change_isr+0x30>
 8007dc6:	69a3      	ldr	r3, [r4, #24]
 8007dc8:	075a      	lsls	r2, r3, #29
 8007dca:	d405      	bmi.n	8007dd8 <can_stm32_state_change_isr+0x30>
		can->MSR |= CAN_MSR_ERRI;
 8007dcc:	6863      	ldr	r3, [r4, #4]
 8007dce:	f043 0304 	orr.w	r3, r3, #4
 8007dd2:	6063      	str	r3, [r4, #4]
}
 8007dd4:	b003      	add	sp, #12
 8007dd6:	bd30      	pop	{r4, r5, pc}
	err_cnt.tx_err_cnt = ((can->ESR & CAN_ESR_TEC) >> CAN_ESR_TEC_Pos);
 8007dd8:	69a3      	ldr	r3, [r4, #24]
 8007dda:	0c1b      	lsrs	r3, r3, #16
 8007ddc:	f88d 3004 	strb.w	r3, [sp, #4]
	err_cnt.rx_err_cnt = ((can->ESR & CAN_ESR_REC) >> CAN_ESR_REC_Pos);
 8007de0:	69a3      	ldr	r3, [r4, #24]
 8007de2:	0e1b      	lsrs	r3, r3, #24
 8007de4:	f88d 3005 	strb.w	r3, [sp, #5]
	if (can->ESR & CAN_ESR_BOFF) {
 8007de8:	69a3      	ldr	r3, [r4, #24]
 8007dea:	075b      	lsls	r3, r3, #29
	} else if (can->ESR & CAN_ESR_EPVF) {
 8007dec:	bf58      	it	pl
 8007dee:	69a0      	ldrpl	r0, [r4, #24]
	if (data->state_change_isr) {
 8007df0:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
		state = CAN_BUS_OFF;
 8007df4:	bf54      	ite	pl
 8007df6:	f3c0 0040 	ubfxpl	r0, r0, #1, #1
 8007dfa:	2002      	movmi	r0, #2
	if (data->state_change_isr) {
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0e5      	beq.n	8007dcc <can_stm32_state_change_isr+0x24>
		data->state_change_isr(state, err_cnt);
 8007e00:	9901      	ldr	r1, [sp, #4]
 8007e02:	4798      	blx	r3
 8007e04:	e7e2      	b.n	8007dcc <can_stm32_state_change_isr+0x24>

08007e06 <can_stm32_get_filter_type>:
	u32_t scale_masked = (scale_reg >> bank_nr) & 0x01;
 8007e06:	40c2      	lsrs	r2, r0
	u32_t mode_masked  = (mode_reg  >> bank_nr) & 0x01;
 8007e08:	40c1      	lsrs	r1, r0
	u32_t scale_masked = (scale_reg >> bank_nr) & 0x01;
 8007e0a:	f002 0201 	and.w	r2, r2, #1
	u32_t mode_masked  = (mode_reg  >> bank_nr) & 0x01;
 8007e0e:	f001 0101 	and.w	r1, r1, #1
}
 8007e12:	ea41 0042 	orr.w	r0, r1, r2, lsl #1
 8007e16:	4770      	bx	lr

08007e18 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
 8007e18:	f7fb bb6c 	b.w	80034f4 <z_arm_bus_fault>

08007e1c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8007e1c:	f000 bce3 	b.w	80087e6 <z_fatal_error>

08007e20 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8007e20:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8007e22:	6800      	ldr	r0, [r0, #0]
 8007e24:	f000 bcdf 	b.w	80087e6 <z_fatal_error>

08007e28 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8007e28:	b508      	push	{r3, lr}
	handler();
 8007e2a:	f7fb fb6d 	bl	8003508 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
 8007e2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
 8007e32:	f7fb ba89 	b.w	8003348 <z_arm_exc_exit>

08007e36 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8007e36:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
 8007e38:	2100      	movs	r1, #0
 8007e3a:	a801      	add	r0, sp, #4
 8007e3c:	f7fb fd4c 	bl	80038d8 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
 8007e40:	b003      	add	sp, #12
 8007e42:	f85d fb04 	ldr.w	pc, [sp], #4

08007e46 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
 8007e46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e4a:	4684      	mov	ip, r0
 8007e4c:	460f      	mov	r7, r1
	register const char *s = nptr;
 8007e4e:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
 8007e50:	462c      	mov	r4, r5
 8007e52:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
 8007e56:	2b20      	cmp	r3, #32
 8007e58:	d036      	beq.n	8007ec8 <strtol+0x82>
 8007e5a:	f1a3 0109 	sub.w	r1, r3, #9
 8007e5e:	2904      	cmp	r1, #4
 8007e60:	d932      	bls.n	8007ec8 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
 8007e62:	2b2d      	cmp	r3, #45	; 0x2d
 8007e64:	d132      	bne.n	8007ecc <strtol+0x86>
		neg = 1;
		c = *s++;
 8007e66:	786b      	ldrb	r3, [r5, #1]
 8007e68:	1cac      	adds	r4, r5, #2
		neg = 1;
 8007e6a:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
 8007e6c:	2a00      	cmp	r2, #0
 8007e6e:	d05c      	beq.n	8007f2a <strtol+0xe4>
 8007e70:	2a10      	cmp	r2, #16
 8007e72:	d109      	bne.n	8007e88 <strtol+0x42>
 8007e74:	2b30      	cmp	r3, #48	; 0x30
 8007e76:	d107      	bne.n	8007e88 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
 8007e78:	7823      	ldrb	r3, [r4, #0]
 8007e7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e7e:	2b58      	cmp	r3, #88	; 0x58
 8007e80:	d14e      	bne.n	8007f20 <strtol+0xda>
		c = s[1];
 8007e82:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
 8007e84:	2210      	movs	r2, #16
		s += 2;
 8007e86:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
 8007e88:	2900      	cmp	r1, #0
 8007e8a:	bf14      	ite	ne
 8007e8c:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 8007e90:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
 8007e94:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
 8007e96:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
 8007e9a:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
 8007e9c:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8007ea0:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
 8007ea4:	2d09      	cmp	r5, #9
 8007ea6:	d817      	bhi.n	8007ed8 <strtol+0x92>
			c -= '0';
 8007ea8:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	dd24      	ble.n	8007ef8 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
 8007eae:	1c75      	adds	r5, r6, #1
 8007eb0:	d007      	beq.n	8007ec2 <strtol+0x7c>
 8007eb2:	4570      	cmp	r0, lr
 8007eb4:	d81d      	bhi.n	8007ef2 <strtol+0xac>
 8007eb6:	d101      	bne.n	8007ebc <strtol+0x76>
 8007eb8:	454b      	cmp	r3, r9
 8007eba:	dc1a      	bgt.n	8007ef2 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
 8007ebc:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
 8007ec0:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
 8007ec2:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
 8007ec6:	e7eb      	b.n	8007ea0 <strtol+0x5a>
{
 8007ec8:	4625      	mov	r5, r4
 8007eca:	e7c1      	b.n	8007e50 <strtol+0xa>
	} else if (c == '+') {
 8007ecc:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
 8007ece:	bf04      	itt	eq
 8007ed0:	1cac      	addeq	r4, r5, #2
 8007ed2:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	e7c9      	b.n	8007e6c <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 8007ed8:	f043 0520 	orr.w	r5, r3, #32
 8007edc:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
 8007ede:	2d19      	cmp	r5, #25
 8007ee0:	d80a      	bhi.n	8007ef8 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8007ee2:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
 8007ee6:	2d1a      	cmp	r5, #26
 8007ee8:	bf34      	ite	cc
 8007eea:	2537      	movcc	r5, #55	; 0x37
 8007eec:	2557      	movcs	r5, #87	; 0x57
 8007eee:	1b5b      	subs	r3, r3, r5
 8007ef0:	e7db      	b.n	8007eaa <strtol+0x64>
			any = -1;
 8007ef2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007ef6:	e7e4      	b.n	8007ec2 <strtol+0x7c>
		}
	}

	if (any < 0) {
 8007ef8:	1c73      	adds	r3, r6, #1
 8007efa:	d107      	bne.n	8007f0c <strtol+0xc6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 8007efc:	f7fc fec2 	bl	8004c84 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
 8007f00:	2326      	movs	r3, #38	; 0x26
 8007f02:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
 8007f04:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
 8007f06:	b937      	cbnz	r7, 8007f16 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
 8007f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
 8007f0c:	b101      	cbz	r1, 8007f10 <strtol+0xca>
		acc = -acc;
 8007f0e:	4240      	negs	r0, r0
	if (endptr != NULL) {
 8007f10:	2f00      	cmp	r7, #0
 8007f12:	d0f9      	beq.n	8007f08 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
 8007f14:	b10e      	cbz	r6, 8007f1a <strtol+0xd4>
 8007f16:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8007f1a:	f8c7 c000 	str.w	ip, [r7]
	return acc;
 8007f1e:	e7f3      	b.n	8007f08 <strtol+0xc2>
	if (base == 0) {
 8007f20:	2330      	movs	r3, #48	; 0x30
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	d1b0      	bne.n	8007e88 <strtol+0x42>
		base = c == '0' ? 8 : 10;
 8007f26:	2208      	movs	r2, #8
 8007f28:	e7ae      	b.n	8007e88 <strtol+0x42>
	if ((base == 0 || base == 16) &&
 8007f2a:	2b30      	cmp	r3, #48	; 0x30
 8007f2c:	d0a4      	beq.n	8007e78 <strtol+0x32>
		base = c == '0' ? 8 : 10;
 8007f2e:	220a      	movs	r2, #10
 8007f30:	e7aa      	b.n	8007e88 <strtol+0x42>

08007f32 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
 8007f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
 8007f36:	780f      	ldrb	r7, [r1, #0]
{
 8007f38:	4605      	mov	r5, r0
	if (c != 0) {
 8007f3a:	b187      	cbz	r7, 8007f5e <strstr+0x2c>
	c = *find++;
 8007f3c:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f000 f83f 	bl	8007fc2 <strlen>
 8007f44:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
 8007f46:	462e      	mov	r6, r5
 8007f48:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
 8007f4c:	b163      	cbz	r3, 8007f68 <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
 8007f4e:	429f      	cmp	r7, r3
 8007f50:	d108      	bne.n	8007f64 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
 8007f52:	4642      	mov	r2, r8
 8007f54:	4621      	mov	r1, r4
 8007f56:	4630      	mov	r0, r6
 8007f58:	f000 f846 	bl	8007fe8 <strncmp>
 8007f5c:	b910      	cbnz	r0, 8007f64 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
 8007f5e:	4628      	mov	r0, r5
 8007f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
 8007f64:	4635      	mov	r5, r6
 8007f66:	e7ee      	b.n	8007f46 <strstr+0x14>
					return NULL;
 8007f68:	461d      	mov	r5, r3
 8007f6a:	e7f8      	b.n	8007f5e <strstr+0x2c>

08007f6c <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
 8007f6c:	3901      	subs	r1, #1
 8007f6e:	4603      	mov	r3, r0
 8007f70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007f74:	b90a      	cbnz	r2, 8007f7a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
 8007f76:	701a      	strb	r2, [r3, #0]

	return dest;
}
 8007f78:	4770      	bx	lr
		*d = *s;
 8007f7a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
 8007f7e:	e7f7      	b.n	8007f70 <strcpy+0x4>

08007f80 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
 8007f80:	b570      	push	{r4, r5, r6, lr}
 8007f82:	3901      	subs	r1, #1
 8007f84:	4605      	mov	r5, r0
 8007f86:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
 8007f88:	b142      	cbz	r2, 8007f9c <strncpy+0x1c>
 8007f8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007f8e:	1e56      	subs	r6, r2, #1
 8007f90:	b92b      	cbnz	r3, 8007f9e <strncpy+0x1e>
 8007f92:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
 8007f94:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
 8007f98:	42a2      	cmp	r2, r4
 8007f9a:	d1fb      	bne.n	8007f94 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
 8007f9c:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
 8007f9e:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
 8007fa2:	4632      	mov	r2, r6
 8007fa4:	e7ef      	b.n	8007f86 <strncpy+0x6>

08007fa6 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
 8007fa6:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
 8007fa8:	7802      	ldrb	r2, [r0, #0]
 8007faa:	428a      	cmp	r2, r1
 8007fac:	4603      	mov	r3, r0
 8007fae:	f100 0001 	add.w	r0, r0, #1
 8007fb2:	d004      	beq.n	8007fbe <strchr+0x18>
 8007fb4:	2a00      	cmp	r2, #0
 8007fb6:	d1f7      	bne.n	8007fa8 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
 8007fb8:	2900      	cmp	r1, #0
 8007fba:	bf18      	it	ne
 8007fbc:	2300      	movne	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	4770      	bx	lr

08007fc2 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
 8007fc2:	2300      	movs	r3, #0

	while (*s != '\0') {
 8007fc4:	5cc2      	ldrb	r2, [r0, r3]
 8007fc6:	b90a      	cbnz	r2, 8007fcc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	4770      	bx	lr
		n++;
 8007fcc:	3301      	adds	r3, #1
 8007fce:	e7f9      	b.n	8007fc4 <strlen+0x2>

08007fd0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8007fd0:	3801      	subs	r0, #1
 8007fd2:	3901      	subs	r1, #1
 8007fd4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8007fd8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d101      	bne.n	8007fe4 <strcmp+0x14>
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1f7      	bne.n	8007fd4 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8007fe4:	1a98      	subs	r0, r3, r2
 8007fe6:	4770      	bx	lr

08007fe8 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
 8007fe8:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8007fea:	2400      	movs	r4, #0
 8007fec:	42a2      	cmp	r2, r4
 8007fee:	d008      	beq.n	8008002 <strncmp+0x1a>
 8007ff0:	5d03      	ldrb	r3, [r0, r4]
 8007ff2:	5d0d      	ldrb	r5, [r1, r4]
 8007ff4:	42ab      	cmp	r3, r5
 8007ff6:	d102      	bne.n	8007ffe <strncmp+0x16>
 8007ff8:	3401      	adds	r4, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1f6      	bne.n	8007fec <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
 8007ffe:	1b58      	subs	r0, r3, r5
 8008000:	e000      	b.n	8008004 <strncmp+0x1c>
 8008002:	2000      	movs	r0, #0
}
 8008004:	bd30      	pop	{r4, r5, pc}

08008006 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
 8008006:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
 8008008:	b15a      	cbz	r2, 8008022 <memcmp+0x1c>
 800800a:	3901      	subs	r1, #1
 800800c:	1884      	adds	r4, r0, r2
 800800e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008012:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
 8008016:	42a0      	cmp	r0, r4
 8008018:	d001      	beq.n	800801e <memcmp+0x18>
 800801a:	429a      	cmp	r2, r3
 800801c:	d0f7      	beq.n	800800e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
 800801e:	1ad0      	subs	r0, r2, r3
}
 8008020:	bd10      	pop	{r4, pc}
		return 0;
 8008022:	4610      	mov	r0, r2
 8008024:	e7fc      	b.n	8008020 <memcmp+0x1a>

08008026 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
 8008026:	1a43      	subs	r3, r0, r1
 8008028:	4293      	cmp	r3, r2
{
 800802a:	b510      	push	{r4, lr}
 800802c:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
 8008030:	d308      	bcc.n	8008044 <memmove+0x1e>
 8008032:	3901      	subs	r1, #1
	char *dest = d;
 8008034:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
 8008036:	429a      	cmp	r2, r3
 8008038:	d00b      	beq.n	8008052 <memmove+0x2c>
			*dest = *src;
 800803a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800803e:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
 8008042:	e7f8      	b.n	8008036 <memmove+0x10>
 8008044:	440a      	add	r2, r1
			dest[n] = src[n];
 8008046:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 800804a:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
 800804e:	428a      	cmp	r2, r1
 8008050:	d1f9      	bne.n	8008046 <memmove+0x20>
		}
	}

	return d;
}
 8008052:	bd10      	pop	{r4, pc}

08008054 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 8008054:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 8008056:	ea81 0400 	eor.w	r4, r1, r0
 800805a:	07a5      	lsls	r5, r4, #30
 800805c:	4603      	mov	r3, r0
 800805e:	d00b      	beq.n	8008078 <memcpy+0x24>
 8008060:	3b01      	subs	r3, #1
 8008062:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 8008064:	4291      	cmp	r1, r2
 8008066:	d11a      	bne.n	800809e <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8008068:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
 800806a:	2a00      	cmp	r2, #0
 800806c:	d0fc      	beq.n	8008068 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
 800806e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008072:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
 8008076:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
 8008078:	079c      	lsls	r4, r3, #30
 800807a:	d1f6      	bne.n	800806a <memcpy+0x16>
 800807c:	0895      	lsrs	r5, r2, #2
 800807e:	00ac      	lsls	r4, r5, #2
 8008080:	1f1e      	subs	r6, r3, #4
 8008082:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
 8008084:	42b9      	cmp	r1, r7
 8008086:	d105      	bne.n	8008094 <memcpy+0x40>
 8008088:	f06f 0603 	mvn.w	r6, #3
 800808c:	fb06 2205 	mla	r2, r6, r5, r2
 8008090:	4423      	add	r3, r4
 8008092:	e7e5      	b.n	8008060 <memcpy+0xc>
			*(d_word++) = *(s_word++);
 8008094:	f851 cb04 	ldr.w	ip, [r1], #4
 8008098:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
 800809c:	e7f2      	b.n	8008084 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
 800809e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080a2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 80080a6:	e7dd      	b.n	8008064 <memcpy+0x10>

080080a8 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
 80080a8:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 80080aa:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 80080ac:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 80080ae:	079c      	lsls	r4, r3, #30
 80080b0:	d110      	bne.n	80080d4 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
 80080b2:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 80080b6:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 80080ba:	0894      	lsrs	r4, r2, #2
 80080bc:	eb03 0684 	add.w	r6, r3, r4, lsl #2
 80080c0:	42b3      	cmp	r3, r6
 80080c2:	d10d      	bne.n	80080e0 <memset+0x38>
 80080c4:	f06f 0503 	mvn.w	r5, #3
 80080c8:	fb05 2404 	mla	r4, r5, r4, r2
 80080cc:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 80080ce:	42a3      	cmp	r3, r4
 80080d0:	d109      	bne.n	80080e6 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 80080d4:	2a00      	cmp	r2, #0
 80080d6:	d0fc      	beq.n	80080d2 <memset+0x2a>
		*(d_byte++) = c_byte;
 80080d8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 80080dc:	3a01      	subs	r2, #1
 80080de:	e7e6      	b.n	80080ae <memset+0x6>
		*(d_word++) = c_word;
 80080e0:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
 80080e4:	e7ec      	b.n	80080c0 <memset+0x18>
		*(d_byte++) = c_byte;
 80080e6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 80080ea:	e7f0      	b.n	80080ce <memset+0x26>

080080ec <_to_x>:
{
 80080ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ee:	4603      	mov	r3, r0
		unsigned int d = n % base;
 80080f0:	fbb1 f7f2 	udiv	r7, r1, r2
 80080f4:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 80080f8:	2d09      	cmp	r5, #9
 80080fa:	bf8c      	ite	hi
 80080fc:	2627      	movhi	r6, #39	; 0x27
 80080fe:	2600      	movls	r6, #0
 8008100:	461c      	mov	r4, r3
 8008102:	3530      	adds	r5, #48	; 0x30
 8008104:	4435      	add	r5, r6
	} while (n);
 8008106:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 8008108:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
 800810c:	d206      	bcs.n	800811c <_to_x+0x30>
	*buf = 0;
 800810e:	2200      	movs	r2, #0
 8008110:	7022      	strb	r2, [r4, #0]
	len = buf - start;
 8008112:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
 8008114:	4283      	cmp	r3, r0
 8008116:	d804      	bhi.n	8008122 <_to_x+0x36>
}
 8008118:	4620      	mov	r0, r4
 800811a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
 800811c:	4639      	mov	r1, r7
 800811e:	4623      	mov	r3, r4
 8008120:	e7e6      	b.n	80080f0 <_to_x+0x4>
		char tmp = *buf;
 8008122:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
 8008124:	7801      	ldrb	r1, [r0, #0]
 8008126:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
 800812a:	f800 2b01 	strb.w	r2, [r0], #1
 800812e:	e7f1      	b.n	8008114 <_to_x+0x28>

08008130 <_rlrshift>:
{
 8008130:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
 8008132:	e9d0 6500 	ldrd	r6, r5, [r0]
 8008136:	0872      	lsrs	r2, r6, #1
 8008138:	f006 0301 	and.w	r3, r6, #1
 800813c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8008140:	189b      	adds	r3, r3, r2
 8008142:	f04f 0100 	mov.w	r1, #0
 8008146:	ea4f 0455 	mov.w	r4, r5, lsr #1
 800814a:	eb44 0101 	adc.w	r1, r4, r1
 800814e:	e9c0 3100 	strd	r3, r1, [r0]
}
 8008152:	bd70      	pop	{r4, r5, r6, pc}

08008154 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
 8008154:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8008158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2U;
 800815c:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
 800815e:	f04f 0705 	mov.w	r7, #5
 8008162:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
 8008166:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
 800816a:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
 800816e:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
 8008172:	fb07 f10e 	mul.w	r1, r7, lr
 8008176:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
 800817a:	08f2      	lsrs	r2, r6, #3
 800817c:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
 8008180:	fbb2 f1f7 	udiv	r1, r2, r7
 8008184:	00ca      	lsls	r2, r1, #3
		quot += q;
 8008186:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
 800818a:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
 800818e:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
 8008192:	fba2 2307 	umull	r2, r3, r2, r7
 8008196:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
 8008198:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
 800819c:	eb18 0403 	adds.w	r4, r8, r3
 80081a0:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
 80081a4:	e9c0 4500 	strd	r4, r5, [r0]
}
 80081a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080081ac <_get_digit>:
	if (*digit_count > 0) {
 80081ac:	680b      	ldr	r3, [r1, #0]
 80081ae:	2b00      	cmp	r3, #0
{
 80081b0:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
 80081b2:	dd10      	ble.n	80081d6 <_get_digit+0x2a>
		*digit_count -= 1;
 80081b4:	3b01      	subs	r3, #1
		*fr = *fr * 10U;
 80081b6:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
 80081b8:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
 80081ba:	6844      	ldr	r4, [r0, #4]
 80081bc:	210a      	movs	r1, #10
 80081be:	fba2 5601 	umull	r5, r6, r2, r1
 80081c2:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
 80081c6:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
 80081ca:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
 80081ce:	0f31      	lsrs	r1, r6, #28
 80081d0:	3130      	adds	r1, #48	; 0x30
}
 80081d2:	4608      	mov	r0, r1
 80081d4:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
 80081d6:	2130      	movs	r1, #48	; 0x30
 80081d8:	e7fb      	b.n	80081d2 <_get_digit+0x26>

080081da <_stdout_hook_default>:
}
 80081da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081de:	4770      	bx	lr

080081e0 <gpio_stm32_isr>:
	struct gpio_stm32_data *data = dev->driver_data;
 80081e0:	688a      	ldr	r2, [r1, #8]
	if ((BIT(line) & data->cb_pins) != 0) {
 80081e2:	6813      	ldr	r3, [r2, #0]
 80081e4:	40c3      	lsrs	r3, r0
 80081e6:	07db      	lsls	r3, r3, #31
{
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	460e      	mov	r6, r1
	if ((BIT(line) & data->cb_pins) != 0) {
 80081ec:	d50f      	bpl.n	800820e <gpio_stm32_isr+0x2e>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80081ee:	6851      	ldr	r1, [r2, #4]
 80081f0:	b169      	cbz	r1, 800820e <gpio_stm32_isr+0x2e>
		gpio_fire_callbacks(&data->cb, dev, BIT(line));
 80081f2:	2501      	movs	r5, #1
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 80081f4:	680c      	ldr	r4, [r1, #0]
 80081f6:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 80081f8:	688b      	ldr	r3, [r1, #8]
 80081fa:	421d      	tst	r5, r3
 80081fc:	d003      	beq.n	8008206 <gpio_stm32_isr+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
 80081fe:	684b      	ldr	r3, [r1, #4]
 8008200:	462a      	mov	r2, r5
 8008202:	4630      	mov	r0, r6
 8008204:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8008206:	b114      	cbz	r4, 800820e <gpio_stm32_isr+0x2e>
 8008208:	4621      	mov	r1, r4
 800820a:	6824      	ldr	r4, [r4, #0]
 800820c:	e7f4      	b.n	80081f8 <gpio_stm32_isr+0x18>
}
 800820e:	bd70      	pop	{r4, r5, r6, pc}

08008210 <gpio_stm32_write>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8008210:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008212:	6880      	ldr	r0, [r0, #8]
{
 8008214:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008216:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8008218:	b941      	cbnz	r1, 800822c <gpio_stm32_write+0x1c>
	pinval = 1 << pin;
 800821a:	2401      	movs	r4, #1
 800821c:	fa04 f202 	lsl.w	r2, r4, r2
	if (value != 0U) {
 8008220:	b113      	cbz	r3, 8008228 <gpio_stm32_write+0x18>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008222:	6182      	str	r2, [r0, #24]
}
 8008224:	4608      	mov	r0, r1
 8008226:	bd10      	pop	{r4, pc}
 8008228:	0412      	lsls	r2, r2, #16
 800822a:	e7fa      	b.n	8008222 <gpio_stm32_write+0x12>
		return -ENOTSUP;
 800822c:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8008230:	e7f8      	b.n	8008224 <gpio_stm32_write+0x14>

08008232 <gpio_stm32_read>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8008232:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008234:	6880      	ldr	r0, [r0, #8]
{
 8008236:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008238:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 800823a:	b931      	cbnz	r1, 800824a <gpio_stm32_read+0x18>
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800823c:	6904      	ldr	r4, [r0, #16]
	*value = (LL_GPIO_ReadInputPort(gpio) >> pin) & 0x1;
 800823e:	40d4      	lsrs	r4, r2
 8008240:	f004 0401 	and.w	r4, r4, #1
 8008244:	601c      	str	r4, [r3, #0]
}
 8008246:	4608      	mov	r0, r1
 8008248:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 800824a:	f06f 0122 	mvn.w	r1, #34	; 0x22
 800824e:	e7fa      	b.n	8008246 <gpio_stm32_read+0x14>

08008250 <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8008250:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
 8008252:	6858      	ldr	r0, [r3, #4]
{
 8008254:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8008256:	b158      	cbz	r0, 8008270 <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008258:	2400      	movs	r4, #0
 800825a:	4281      	cmp	r1, r0
 800825c:	d113      	bne.n	8008286 <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 800825e:	6808      	ldr	r0, [r1, #0]
 8008260:	b95c      	cbnz	r4, 800827a <gpio_stm32_manage_callback+0x2a>
 8008262:	689c      	ldr	r4, [r3, #8]
	list->head = node;
 8008264:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8008266:	42a1      	cmp	r1, r4
 8008268:	d100      	bne.n	800826c <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 800826a:	6098      	str	r0, [r3, #8]
	parent->next = child;
 800826c:	2000      	movs	r0, #0
 800826e:	6008      	str	r0, [r1, #0]
	if (set) {
 8008270:	b972      	cbnz	r2, 8008290 <gpio_stm32_manage_callback+0x40>
	return 0;
 8008272:	2000      	movs	r0, #0
}
 8008274:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008276:	4628      	mov	r0, r5
 8008278:	e7ef      	b.n	800825a <gpio_stm32_manage_callback+0xa>
	parent->next = child;
 800827a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 800827c:	6898      	ldr	r0, [r3, #8]
 800827e:	4281      	cmp	r1, r0
	list->tail = node;
 8008280:	bf08      	it	eq
 8008282:	609c      	streq	r4, [r3, #8]
 8008284:	e7f2      	b.n	800826c <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8008286:	6805      	ldr	r5, [r0, #0]
	return node->next;
 8008288:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800828a:	2d00      	cmp	r5, #0
 800828c:	d1f3      	bne.n	8008276 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 800828e:	b13a      	cbz	r2, 80082a0 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 8008290:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 8008292:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8008294:	6898      	ldr	r0, [r3, #8]
	list->head = node;
 8008296:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8008298:	2800      	cmp	r0, #0
 800829a:	d1ea      	bne.n	8008272 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 800829c:	6099      	str	r1, [r3, #8]
 800829e:	e7e9      	b.n	8008274 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 80082a0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 80082a4:	e7e6      	b.n	8008274 <gpio_stm32_manage_callback+0x24>

080082a6 <gpio_stm32_enable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 80082a6:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 80082a8:	b939      	cbnz	r1, 80082ba <gpio_stm32_enable_callback+0x14>
	data->cb_pins |= BIT(pin);
 80082aa:	2301      	movs	r3, #1
 80082ac:	fa03 f202 	lsl.w	r2, r3, r2
 80082b0:	6803      	ldr	r3, [r0, #0]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	6003      	str	r3, [r0, #0]
}
 80082b6:	4608      	mov	r0, r1
 80082b8:	4770      	bx	lr
		return -ENOTSUP;
 80082ba:	f06f 0122 	mvn.w	r1, #34	; 0x22
 80082be:	e7fa      	b.n	80082b6 <gpio_stm32_enable_callback+0x10>

080082c0 <gpio_stm32_disable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 80082c0:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 80082c2:	b941      	cbnz	r1, 80082d6 <gpio_stm32_disable_callback+0x16>
	data->cb_pins &= ~BIT(pin);
 80082c4:	2301      	movs	r3, #1
 80082c6:	fa03 f202 	lsl.w	r2, r3, r2
 80082ca:	6803      	ldr	r3, [r0, #0]
 80082cc:	ea23 0302 	bic.w	r3, r3, r2
 80082d0:	6003      	str	r3, [r0, #0]
}
 80082d2:	4608      	mov	r0, r1
 80082d4:	4770      	bx	lr
		return -ENOTSUP;
 80082d6:	f06f 0122 	mvn.w	r1, #34	; 0x22
 80082da:	e7fa      	b.n	80082d2 <gpio_stm32_disable_callback+0x12>

080082dc <gpio_stm32_flags_to_conf>:
	int direction = flags & GPIO_DIR_MASK;
 80082dc:	f000 0301 	and.w	r3, r0, #1
	if (pincfg == NULL) {
 80082e0:	b1b1      	cbz	r1, 8008310 <gpio_stm32_flags_to_conf+0x34>
	if (direction == GPIO_DIR_OUT) {
 80082e2:	b123      	cbz	r3, 80082ee <gpio_stm32_flags_to_conf+0x12>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80082e4:	2310      	movs	r3, #16
 80082e6:	600b      	str	r3, [r1, #0]
	return 0;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	4770      	bx	lr
	int pud = flags & GPIO_PUD_MASK;
 80082ee:	f400 7040 	and.w	r0, r0, #768	; 0x300
		if (pud == GPIO_PUD_PULL_UP) {
 80082f2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80082f6:	d103      	bne.n	8008300 <gpio_stm32_flags_to_conf+0x24>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80082f8:	f44f 7200 	mov.w	r2, #512	; 0x200
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80082fc:	600a      	str	r2, [r1, #0]
 80082fe:	e7f4      	b.n	80082ea <gpio_stm32_flags_to_conf+0xe>
		} else if (pud == GPIO_PUD_PULL_DOWN) {
 8008300:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008304:	d001      	beq.n	800830a <gpio_stm32_flags_to_conf+0x2e>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 8008306:	600b      	str	r3, [r1, #0]
 8008308:	e7ef      	b.n	80082ea <gpio_stm32_flags_to_conf+0xe>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800830a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800830e:	e7f5      	b.n	80082fc <gpio_stm32_flags_to_conf+0x20>
		return -EINVAL;
 8008310:	f06f 0315 	mvn.w	r3, #21
 8008314:	e7e9      	b.n	80082ea <gpio_stm32_flags_to_conf+0xe>

08008316 <gpio_stm32_configure>:
{
 8008316:	b5f0      	push	{r4, r5, r6, r7, lr}
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8008318:	f002 0530 	and.w	r5, r2, #48	; 0x30
	pinval = 1 << pin;
 800831c:	2401      	movs	r4, #1
 800831e:	408c      	lsls	r4, r1
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8008320:	092e      	lsrs	r6, r5, #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008322:	f8d0 c000 	ldr.w	ip, [r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008326:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 800832a:	fab7 f787 	clz	r7, r7
 800832e:	f04f 0e03 	mov.w	lr, #3
 8008332:	007f      	lsls	r7, r7, #1
 8008334:	fa0e f707 	lsl.w	r7, lr, r7
 8008338:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800833c:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8008340:	fab7 f787 	clz	r7, r7
 8008344:	007f      	lsls	r7, r7, #1
 8008346:	40be      	lsls	r6, r7
 8008348:	ea46 060c 	orr.w	r6, r6, ip
	if (STM32_MODER_ALT_MODE == mode) {
 800834c:	2d20      	cmp	r5, #32
 800834e:	6006      	str	r6, [r0, #0]
 8008350:	d116      	bne.n	8008380 <gpio_stm32_configure+0x6a>
		if (pin < 8) {
 8008352:	2907      	cmp	r1, #7
 8008354:	dc49      	bgt.n	80083ea <gpio_stm32_configure+0xd4>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008356:	6a07      	ldr	r7, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008358:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 800835c:	b10e      	cbz	r6, 8008362 <gpio_stm32_configure+0x4c>
  return __builtin_clz(value);
 800835e:	fab6 f586 	clz	r5, r6
 8008362:	260f      	movs	r6, #15
 8008364:	00ad      	lsls	r5, r5, #2
 8008366:	fa06 f505 	lsl.w	r5, r6, r5
 800836a:	ea27 0605 	bic.w	r6, r7, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800836e:	fa94 f5a4 	rbit	r5, r4
  return __builtin_clz(value);
 8008372:	fab5 f585 	clz	r5, r5
 8008376:	00ad      	lsls	r5, r5, #2
 8008378:	fa03 f505 	lsl.w	r5, r3, r5
 800837c:	4335      	orrs	r5, r6
 800837e:	6205      	str	r5, [r0, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008380:	6845      	ldr	r5, [r0, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8008382:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8008386:	ea25 0504 	bic.w	r5, r5, r4
 800838a:	fa03 f101 	lsl.w	r1, r3, r1
 800838e:	4329      	orrs	r1, r5
 8008390:	6041      	str	r1, [r0, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8008392:	f3c2 13c1 	ubfx	r3, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8008396:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008398:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 800839c:	fab1 f181 	clz	r1, r1
 80083a0:	2603      	movs	r6, #3
 80083a2:	0049      	lsls	r1, r1, #1
 80083a4:	fa06 f101 	lsl.w	r1, r6, r1
 80083a8:	ea25 0501 	bic.w	r5, r5, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ac:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 80083b0:	fab1 f181 	clz	r1, r1
 80083b4:	0049      	lsls	r1, r1, #1
 80083b6:	408b      	lsls	r3, r1
 80083b8:	432b      	orrs	r3, r5
 80083ba:	6083      	str	r3, [r0, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 80083bc:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80083c0:	68c1      	ldr	r1, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083c2:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 80083c6:	fab3 f383 	clz	r3, r3
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	fa06 f303 	lsl.w	r3, r6, r3
 80083d0:	ea21 0303 	bic.w	r3, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083d4:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 80083d8:	fab4 f484 	clz	r4, r4
 80083dc:	0064      	lsls	r4, r4, #1
 80083de:	fa02 f404 	lsl.w	r4, r2, r4
 80083e2:	431c      	orrs	r4, r3
 80083e4:	60c4      	str	r4, [r0, #12]
}
 80083e6:	2000      	movs	r0, #0
 80083e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80083ea:	6a47      	ldr	r7, [r0, #36]	; 0x24
 80083ec:	0a26      	lsrs	r6, r4, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ee:	fa96 fca6 	rbit	ip, r6
  if (value == 0U)
 80083f2:	f1bc 0f00 	cmp.w	ip, #0
 80083f6:	d001      	beq.n	80083fc <gpio_stm32_configure+0xe6>
  return __builtin_clz(value);
 80083f8:	fabc f58c 	clz	r5, ip
 80083fc:	f04f 0c0f 	mov.w	ip, #15
 8008400:	00ad      	lsls	r5, r5, #2
 8008402:	fa0c f505 	lsl.w	r5, ip, r5
 8008406:	ea27 0505 	bic.w	r5, r7, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800840a:	fa96 f6a6 	rbit	r6, r6
  return __builtin_clz(value);
 800840e:	fab6 f686 	clz	r6, r6
 8008412:	00b6      	lsls	r6, r6, #2
 8008414:	40b3      	lsls	r3, r6
 8008416:	432b      	orrs	r3, r5
 8008418:	6243      	str	r3, [r0, #36]	; 0x24
 800841a:	e7b1      	b.n	8008380 <gpio_stm32_configure+0x6a>

0800841c <pwm_stm32_get_cycles_per_sec>:
	const struct pwm_stm32_config *cfg = DEV_CFG(dev);
 800841c:	6803      	ldr	r3, [r0, #0]
{
 800841e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct pwm_stm32_config *cfg = DEV_CFG(dev);
 8008420:	6899      	ldr	r1, [r3, #8]
	struct pwm_stm32_data *data = DEV_DATA(dev);
 8008422:	6885      	ldr	r5, [r0, #8]
	if (cycles == NULL) {
 8008424:	4614      	mov	r4, r2
 8008426:	b192      	cbz	r2, 800844e <pwm_stm32_get_cycles_per_sec+0x32>
	if (clock_control_get_rate(data->clock,
 8008428:	6c68      	ldr	r0, [r5, #68]	; 0x44
	return api->get_rate(dev, sys, rate);
 800842a:	6843      	ldr	r3, [r0, #4]
 800842c:	aa01      	add	r2, sp, #4
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	3104      	adds	r1, #4
 8008432:	4798      	blx	r3
 8008434:	2800      	cmp	r0, #0
 8008436:	db0d      	blt.n	8008454 <pwm_stm32_get_cycles_per_sec+0x38>
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 8008438:	6c2a      	ldr	r2, [r5, #64]	; 0x40
		tim_clk = bus_clk * 2U;
 800843a:	9b01      	ldr	r3, [sp, #4]
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 800843c:	2000      	movs	r0, #0
		tim_clk = bus_clk * 2U;
 800843e:	005b      	lsls	r3, r3, #1
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 8008440:	3201      	adds	r2, #1
 8008442:	fbb3 f3f2 	udiv	r3, r3, r2
 8008446:	e9c4 3000 	strd	r3, r0, [r4]
}
 800844a:	b003      	add	sp, #12
 800844c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
 800844e:	f06f 0015 	mvn.w	r0, #21
 8008452:	e7fa      	b.n	800844a <pwm_stm32_get_cycles_per_sec+0x2e>
		return -EIO;
 8008454:	f06f 0004 	mvn.w	r0, #4
 8008458:	e7f7      	b.n	800844a <pwm_stm32_get_cycles_per_sec+0x2e>

0800845a <LL_USART_ClearFlag_FE>:
{
 800845a:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 800845c:	6803      	ldr	r3, [r0, #0]
 800845e:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8008460:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8008462:	6843      	ldr	r3, [r0, #4]
 8008464:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8008466:	9b01      	ldr	r3, [sp, #4]
}
 8008468:	b002      	add	sp, #8
 800846a:	4770      	bx	lr

0800846c <uart_stm32_poll_in>:
{
 800846c:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800846e:	6803      	ldr	r3, [r0, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8008474:	6813      	ldr	r3, [r2, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8008476:	0718      	lsls	r0, r3, #28
 8008478:	d502      	bpl.n	8008480 <uart_stm32_poll_in+0x14>
		LL_USART_ClearFlag_ORE(UartInstance);
 800847a:	4610      	mov	r0, r2
 800847c:	f7ff ffed 	bl	800845a <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8008480:	6813      	ldr	r3, [r2, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 8008482:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8008484:	bf43      	ittte	mi
 8008486:	6853      	ldrmi	r3, [r2, #4]
 8008488:	700b      	strbmi	r3, [r1, #0]
	return 0;
 800848a:	2000      	movmi	r0, #0
		return -1;
 800848c:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8008490:	bd08      	pop	{r3, pc}

08008492 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008492:	6803      	ldr	r3, [r0, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8008498:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 800849a:	0612      	lsls	r2, r2, #24
 800849c:	d5fc      	bpl.n	8008498 <uart_stm32_poll_out+0x6>
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800849e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084a2:	601a      	str	r2, [r3, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80084a4:	6059      	str	r1, [r3, #4]
}
 80084a6:	4770      	bx	lr

080084a8 <uart_stm32_err_check>:
{
 80084a8:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80084aa:	6803      	ldr	r3, [r0, #0]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	6819      	ldr	r1, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80084b0:	680a      	ldr	r2, [r1, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 80084b2:	680b      	ldr	r3, [r1, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 80084b4:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80084b6:	680b      	ldr	r3, [r1, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 80084b8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 80084bc:	bf48      	it	mi
 80084be:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 80084c2:	0798      	lsls	r0, r3, #30
		err |= UART_ERROR_FRAMING;
 80084c4:	bf48      	it	mi
 80084c6:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 80084ca:	07d3      	lsls	r3, r2, #31
 80084cc:	d502      	bpl.n	80084d4 <uart_stm32_err_check+0x2c>
		LL_USART_ClearFlag_ORE(UartInstance);
 80084ce:	4608      	mov	r0, r1
 80084d0:	f7ff ffc3 	bl	800845a <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 80084d4:	0790      	lsls	r0, r2, #30
 80084d6:	d502      	bpl.n	80084de <uart_stm32_err_check+0x36>
		LL_USART_ClearFlag_PE(UartInstance);
 80084d8:	4608      	mov	r0, r1
 80084da:	f7ff ffbe 	bl	800845a <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 80084de:	0753      	lsls	r3, r2, #29
 80084e0:	d502      	bpl.n	80084e8 <uart_stm32_err_check+0x40>
		LL_USART_ClearFlag_FE(UartInstance);
 80084e2:	4608      	mov	r0, r1
 80084e4:	f7ff ffb9 	bl	800845a <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 80084e8:	4608      	mov	r0, r1
 80084ea:	f7ff ffb6 	bl	800845a <LL_USART_ClearFlag_FE>
}
 80084ee:	4610      	mov	r0, r2
 80084f0:	bd08      	pop	{r3, pc}

080084f2 <uart_stm32_fifo_fill>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80084f2:	6803      	ldr	r3, [r0, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
{
 80084f6:	b530      	push	{r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80084f8:	681c      	ldr	r4, [r3, #0]
	while ((size - num_tx > 0) &&
 80084fa:	2300      	movs	r3, #0
 80084fc:	b2d8      	uxtb	r0, r3
 80084fe:	1a15      	subs	r5, r2, r0
 8008500:	2d00      	cmp	r5, #0
 8008502:	dd04      	ble.n	800850e <uart_stm32_fifo_fill+0x1c>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8008504:	6825      	ldr	r5, [r4, #0]
 8008506:	062d      	lsls	r5, r5, #24
 8008508:	f103 0301 	add.w	r3, r3, #1
 800850c:	d400      	bmi.n	8008510 <uart_stm32_fifo_fill+0x1e>
}
 800850e:	bd30      	pop	{r4, r5, pc}
  USARTx->DR = Value;
 8008510:	5c08      	ldrb	r0, [r1, r0]
 8008512:	6060      	str	r0, [r4, #4]
 8008514:	e7f2      	b.n	80084fc <uart_stm32_fifo_fill+0xa>

08008516 <uart_stm32_fifo_read>:
{
 8008516:	b538      	push	{r3, r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008518:	6803      	ldr	r3, [r0, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	681c      	ldr	r4, [r3, #0]
	while ((size - num_rx > 0) &&
 800851e:	2500      	movs	r5, #0
 8008520:	b2e8      	uxtb	r0, r5
 8008522:	1a13      	subs	r3, r2, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	dd02      	ble.n	800852e <uart_stm32_fifo_read+0x18>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	069b      	lsls	r3, r3, #26
 800852c:	d400      	bmi.n	8008530 <uart_stm32_fifo_read+0x1a>
}
 800852e:	bd38      	pop	{r3, r4, r5, pc}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8008530:	6863      	ldr	r3, [r4, #4]
 8008532:	540b      	strb	r3, [r1, r0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8008534:	6823      	ldr	r3, [r4, #0]
		if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8008536:	0718      	lsls	r0, r3, #28
 8008538:	d502      	bpl.n	8008540 <uart_stm32_fifo_read+0x2a>
			LL_USART_ClearFlag_ORE(UartInstance);
 800853a:	4620      	mov	r0, r4
 800853c:	f7ff ff8d 	bl	800845a <LL_USART_ClearFlag_FE>
 8008540:	3501      	adds	r5, #1
 8008542:	e7ed      	b.n	8008520 <uart_stm32_fifo_read+0xa>

08008544 <uart_stm32_irq_tx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008544:	6803      	ldr	r3, [r0, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800854a:	68d3      	ldr	r3, [r2, #12]
 800854c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008550:	60d3      	str	r3, [r2, #12]
}
 8008552:	4770      	bx	lr

08008554 <uart_stm32_irq_tx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008554:	6803      	ldr	r3, [r0, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800855a:	68d3      	ldr	r3, [r2, #12]
 800855c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008560:	60d3      	str	r3, [r2, #12]
}
 8008562:	4770      	bx	lr

08008564 <uart_stm32_irq_tx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008564:	6803      	ldr	r3, [r0, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800856a:	6818      	ldr	r0, [r3, #0]
}
 800856c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8008570:	4770      	bx	lr

08008572 <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008572:	6803      	ldr	r3, [r0, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8008578:	6818      	ldr	r0, [r3, #0]
}
 800857a:	f3c0 1080 	ubfx	r0, r0, #6, #1
 800857e:	4770      	bx	lr

08008580 <uart_stm32_irq_rx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008580:	6803      	ldr	r3, [r0, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8008586:	68d3      	ldr	r3, [r2, #12]
 8008588:	f043 0320 	orr.w	r3, r3, #32
 800858c:	60d3      	str	r3, [r2, #12]
}
 800858e:	4770      	bx	lr

08008590 <uart_stm32_irq_rx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008590:	6803      	ldr	r3, [r0, #0]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8008596:	68d3      	ldr	r3, [r2, #12]
 8008598:	f023 0320 	bic.w	r3, r3, #32
 800859c:	60d3      	str	r3, [r2, #12]
}
 800859e:	4770      	bx	lr

080085a0 <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80085a0:	6803      	ldr	r3, [r0, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80085a6:	6818      	ldr	r0, [r3, #0]
}
 80085a8:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80085ac:	4770      	bx	lr

080085ae <uart_stm32_irq_is_pending>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80085ae:	6803      	ldr	r3, [r0, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 80085b6:	0691      	lsls	r1, r2, #26
 80085b8:	d502      	bpl.n	80085c0 <uart_stm32_irq_is_pending+0x12>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80085ba:	68da      	ldr	r2, [r3, #12]
	return ((LL_USART_IsActiveFlag_RXNE(UartInstance) &&
 80085bc:	0692      	lsls	r2, r2, #26
 80085be:	d407      	bmi.n	80085d0 <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80085c0:	6818      	ldr	r0, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 80085c2:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80085c6:	d004      	beq.n	80085d2 <uart_stm32_irq_is_pending+0x24>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 80085c8:	68d8      	ldr	r0, [r3, #12]
		(LL_USART_IsActiveFlag_TC(UartInstance) &&
 80085ca:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80085ce:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 80085d0:	2001      	movs	r0, #1
}
 80085d2:	4770      	bx	lr

080085d4 <uart_stm32_irq_update>:
}
 80085d4:	2001      	movs	r0, #1
 80085d6:	4770      	bx	lr

080085d8 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 80085d8:	6883      	ldr	r3, [r0, #8]
	data->user_data = cb_data;
 80085da:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 80085de:	4770      	bx	lr

080085e0 <uart_stm32_isr>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 80085e0:	6882      	ldr	r2, [r0, #8]
	if (data->user_cb) {
 80085e2:	6893      	ldr	r3, [r2, #8]
 80085e4:	b10b      	cbz	r3, 80085ea <uart_stm32_isr+0xa>
		data->user_cb(data->user_data);
 80085e6:	68d0      	ldr	r0, [r2, #12]
 80085e8:	4718      	bx	r3
}
 80085ea:	4770      	bx	lr

080085ec <uart_stm32_irq_config_func_USART_2>:
#ifdef CONFIG_UART_1
STM32_UART_INIT(USART_1)
#endif	/* CONFIG_UART_1 */

#ifdef CONFIG_UART_2
STM32_UART_INIT(USART_2)
 80085ec:	b508      	push	{r3, lr}
 80085ee:	2200      	movs	r2, #0
 80085f0:	2026      	movs	r0, #38	; 0x26
 80085f2:	4611      	mov	r1, r2
 80085f4:	f7fa ff1a 	bl	800342c <z_arm_irq_priority_set>
 80085f8:	2026      	movs	r0, #38	; 0x26
 80085fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80085fe:	f7fa bf05 	b.w	800340c <arch_irq_enable>

08008602 <uart_stm32_set_baudrate>:
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8008602:	6803      	ldr	r3, [r0, #0]
{
 8008604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008606:	460d      	mov	r5, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008608:	6899      	ldr	r1, [r3, #8]
	if (clock_control_get_rate(data->clock,
 800860a:	6883      	ldr	r3, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800860c:	f851 4b0c 	ldr.w	r4, [r1], #12
	if (clock_control_get_rate(data->clock,
 8008610:	6858      	ldr	r0, [r3, #4]
 8008612:	6843      	ldr	r3, [r0, #4]
 8008614:	aa01      	add	r2, sp, #4
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	4798      	blx	r3
 800861a:	2800      	cmp	r0, #0
 800861c:	db12      	blt.n	8008644 <uart_stm32_set_baudrate+0x42>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800861e:	9b01      	ldr	r3, [sp, #4]
 8008620:	2264      	movs	r2, #100	; 0x64
 8008622:	2119      	movs	r1, #25
 8008624:	4359      	muls	r1, r3
 8008626:	00ad      	lsls	r5, r5, #2
 8008628:	fbb1 f1f5 	udiv	r1, r1, r5
 800862c:	fbb1 f0f2 	udiv	r0, r1, r2
 8008630:	fb02 1310 	mls	r3, r2, r0, r1
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	3332      	adds	r3, #50	; 0x32
 8008638:	fbb3 f3f2 	udiv	r3, r3, r2
 800863c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8008640:	b29b      	uxth	r3, r3
 8008642:	60a3      	str	r3, [r4, #8]
}
 8008644:	b003      	add	sp, #12
 8008646:	bd30      	pop	{r4, r5, pc}

08008648 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8008648:	6883      	ldr	r3, [r0, #8]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800864e:	6803      	ldr	r3, [r0, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8008654:	68d3      	ldr	r3, [r2, #12]
 8008656:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800865a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800865e:	d023      	beq.n	80086a8 <uart_stm32_config_get+0x60>
		return UART_CFG_PARITY_NONE;
 8008660:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8008664:	4243      	negs	r3, r0
 8008666:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8008668:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800866a:	6913      	ldr	r3, [r2, #16]
 800866c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8008670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008674:	d01a      	beq.n	80086ac <uart_stm32_config_get+0x64>
 8008676:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800867a:	d019      	beq.n	80086b0 <uart_stm32_config_get+0x68>
 800867c:	2b00      	cmp	r3, #0
		return UART_CFG_STOP_BITS_2;
 800867e:	bf0c      	ite	eq
 8008680:	2301      	moveq	r3, #1
 8008682:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8008684:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8008686:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 8008688:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		return UART_CFG_DATA_BITS_8;
 800868c:	bf14      	ite	ne
 800868e:	2304      	movne	r3, #4
 8008690:	2303      	moveq	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8008692:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8008694:	6953      	ldr	r3, [r2, #20]
 8008696:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800869a:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 800869e:	4253      	negs	r3, r2
 80086a0:	4153      	adcs	r3, r2
 80086a2:	71cb      	strb	r3, [r1, #7]
}
 80086a4:	2000      	movs	r0, #0
 80086a6:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 80086a8:	2302      	movs	r3, #2
 80086aa:	e7dd      	b.n	8008668 <uart_stm32_config_get+0x20>
		return UART_CFG_STOP_BITS_0_5;
 80086ac:	2300      	movs	r3, #0
 80086ae:	e7e9      	b.n	8008684 <uart_stm32_config_get+0x3c>
		return UART_CFG_STOP_BITS_1_5;
 80086b0:	2302      	movs	r3, #2
 80086b2:	e7e7      	b.n	8008684 <uart_stm32_config_get+0x3c>

080086b4 <HAL_TIM_PWM_MspInit>:
 80086b4:	4770      	bx	lr

080086b6 <HAL_TIM_PWM_Init>:
{
 80086b6:	b510      	push	{r4, lr}
  if (htim == NULL)
 80086b8:	4604      	mov	r4, r0
 80086ba:	b1a0      	cbz	r0, 80086e6 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80086bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80086c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80086c4:	b91b      	cbnz	r3, 80086ce <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80086c6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80086ca:	f7ff fff3 	bl	80086b4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80086ce:	2302      	movs	r3, #2
 80086d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086d4:	6820      	ldr	r0, [r4, #0]
 80086d6:	1d21      	adds	r1, r4, #4
 80086d8:	f7fc f8de 	bl	8004898 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80086dc:	2301      	movs	r3, #1
 80086de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80086e2:	2000      	movs	r0, #0
}
 80086e4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80086e6:	2001      	movs	r0, #1
 80086e8:	e7fc      	b.n	80086e4 <HAL_TIM_PWM_Init+0x2e>

080086ea <HAL_TIM_PWM_ConfigChannel>:
{
 80086ea:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80086ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80086f0:	2b01      	cmp	r3, #1
{
 80086f2:	4604      	mov	r4, r0
 80086f4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80086f8:	d025      	beq.n	8008746 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80086fa:	2301      	movs	r3, #1
 80086fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8008700:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8008704:	2a0c      	cmp	r2, #12
 8008706:	d818      	bhi.n	800873a <HAL_TIM_PWM_ConfigChannel+0x50>
 8008708:	e8df f002 	tbb	[pc, r2]
 800870c:	17171707 	.word	0x17171707
 8008710:	1717171e 	.word	0x1717171e
 8008714:	1717172f 	.word	0x1717172f
 8008718:	40          	.byte	0x40
 8008719:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800871a:	6820      	ldr	r0, [r4, #0]
 800871c:	f7fc f82e 	bl	800477c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008720:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008722:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008724:	699a      	ldr	r2, [r3, #24]
 8008726:	f042 0208 	orr.w	r2, r2, #8
 800872a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800872c:	699a      	ldr	r2, [r3, #24]
 800872e:	f022 0204 	bic.w	r2, r2, #4
 8008732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008734:	699a      	ldr	r2, [r3, #24]
 8008736:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008738:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800873a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800873c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800873e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008742:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8008746:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008748:	6820      	ldr	r0, [r4, #0]
 800874a:	f7fc f90b 	bl	8004964 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800874e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008750:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008752:	699a      	ldr	r2, [r3, #24]
 8008754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008758:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800875a:	699a      	ldr	r2, [r3, #24]
 800875c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008760:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008762:	699a      	ldr	r2, [r3, #24]
 8008764:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008768:	e7e6      	b.n	8008738 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800876a:	6820      	ldr	r0, [r4, #0]
 800876c:	f7fc f838 	bl	80047e0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008770:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008772:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008774:	69da      	ldr	r2, [r3, #28]
 8008776:	f042 0208 	orr.w	r2, r2, #8
 800877a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800877c:	69da      	ldr	r2, [r3, #28]
 800877e:	f022 0204 	bic.w	r2, r2, #4
 8008782:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008784:	69da      	ldr	r2, [r3, #28]
 8008786:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008788:	61da      	str	r2, [r3, #28]
      break;
 800878a:	e7d6      	b.n	800873a <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800878c:	6820      	ldr	r0, [r4, #0]
 800878e:	f7fc f85d 	bl	800484c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008792:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008794:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008796:	69da      	ldr	r2, [r3, #28]
 8008798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800879c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800879e:	69da      	ldr	r2, [r3, #28]
 80087a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087a6:	69da      	ldr	r2, [r3, #28]
 80087a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80087ac:	e7ec      	b.n	8008788 <HAL_TIM_PWM_ConfigChannel+0x9e>

080087ae <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087ae:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087b0:	f001 011f 	and.w	r1, r1, #31
{
 80087b4:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087b6:	2401      	movs	r4, #1
 80087b8:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80087ba:	ea23 0304 	bic.w	r3, r3, r4
 80087be:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087c0:	6a03      	ldr	r3, [r0, #32]
 80087c2:	408a      	lsls	r2, r1
 80087c4:	431a      	orrs	r2, r3
 80087c6:	6202      	str	r2, [r0, #32]
}
 80087c8:	bd10      	pop	{r4, pc}

080087ca <HAL_TIM_PWM_Start>:
 80087ca:	f7fc b901 	b.w	80049d0 <HAL_TIM_OC_Start>

080087ce <arch_system_halt>:
	__asm__ volatile(
 80087ce:	f04f 0210 	mov.w	r2, #16
 80087d2:	f3ef 8311 	mrs	r3, BASEPRI
 80087d6:	f382 8811 	msr	BASEPRI, r2
 80087da:	f3bf 8f6f 	isb	sy
	 */

	(void)arch_irq_lock();
	for (;;) {
		/* Spin endlessly */
	}
 80087de:	e7fe      	b.n	80087de <arch_system_halt+0x10>

080087e0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 80087e0:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 80087e2:	f7ff fff4 	bl	80087ce <arch_system_halt>

080087e6 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 80087e6:	b570      	push	{r4, r5, r6, lr}
 80087e8:	4605      	mov	r5, r0
 80087ea:	460e      	mov	r6, r1
	return z_impl_k_current_get();
 80087ec:	f7fc ff5a 	bl	80056a4 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
 80087f0:	4631      	mov	r1, r6
 80087f2:	4604      	mov	r4, r0
 80087f4:	4628      	mov	r0, r5
 80087f6:	f7ff fff3 	bl	80087e0 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
 80087fa:	4620      	mov	r0, r4
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
 80087fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008800:	f7fa bf9a 	b.w	8003738 <z_impl_k_thread_abort>

08008804 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
 8008804:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
 8008806:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800880a:	e9c0 0000 	strd	r0, r0, [r0]
}
 800880e:	4770      	bx	lr

08008810 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
 8008810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008814:	4604      	mov	r4, r0
 8008816:	460f      	mov	r7, r1
 8008818:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 800881a:	f100 0508 	add.w	r5, r0, #8
 800881e:	f04f 0210 	mov.w	r2, #16
 8008822:	f3ef 8611 	mrs	r6, BASEPRI
 8008826:	f382 8811 	msr	BASEPRI, r2
 800882a:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
 800882e:	b1db      	cbz	r3, 8008868 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
 8008830:	2008      	movs	r0, #8
 8008832:	f7fd fadb 	bl	8005dec <z_thread_malloc>
		if (anode == NULL) {
 8008836:	b938      	cbnz	r0, 8008848 <queue_insert+0x38>
	__asm__ volatile(
 8008838:	f386 8811 	msr	BASEPRI, r6
 800883c:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
 8008840:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
 8008844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
 8008848:	2301      	movs	r3, #1
		anode->data = data;
 800884a:	f8c0 8004 	str.w	r8, [r0, #4]
 800884e:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
 8008850:	6803      	ldr	r3, [r0, #0]
 8008852:	f003 0203 	and.w	r2, r3, #3
 8008856:	b95f      	cbnz	r7, 8008870 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	4313      	orrs	r3, r2
 800885c:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 800885e:	6863      	ldr	r3, [r4, #4]
	list->head = node;
 8008860:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 8008862:	b973      	cbnz	r3, 8008882 <queue_insert+0x72>
	list->tail = node;
 8008864:	6060      	str	r0, [r4, #4]
 8008866:	e00c      	b.n	8008882 <queue_insert+0x72>
	node->next_and_flags = flags;
 8008868:	f8c8 3000 	str.w	r3, [r8]
 800886c:	4640      	mov	r0, r8
 800886e:	e7ef      	b.n	8008850 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8008870:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 8008872:	f033 0303 	bics.w	r3, r3, #3
 8008876:	d114      	bne.n	80088a2 <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
 8008878:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
 800887a:	6862      	ldr	r2, [r4, #4]
 800887c:	b95a      	cbnz	r2, 8008896 <queue_insert+0x86>
	list->head = node;
 800887e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
 8008882:	2104      	movs	r1, #4
 8008884:	4628      	mov	r0, r5
 8008886:	f000 faf7 	bl	8008e78 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
 800888a:	4628      	mov	r0, r5
 800888c:	4631      	mov	r1, r6
 800888e:	f000 f8b9 	bl	8008a04 <z_reschedule>
	return 0;
 8008892:	2000      	movs	r0, #0
 8008894:	e7d6      	b.n	8008844 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8008896:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 8008898:	f003 0303 	and.w	r3, r3, #3
 800889c:	4303      	orrs	r3, r0
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	e7e0      	b.n	8008864 <queue_insert+0x54>
 80088a2:	4313      	orrs	r3, r2
 80088a4:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 80088a6:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 80088a8:	f003 0303 	and.w	r3, r3, #3
 80088ac:	4318      	orrs	r0, r3
 80088ae:	6038      	str	r0, [r7, #0]
 80088b0:	e7e7      	b.n	8008882 <queue_insert+0x72>

080088b2 <z_queue_node_peek>:
{
 80088b2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
 80088b4:	4604      	mov	r4, r0
 80088b6:	b130      	cbz	r0, 80088c6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 80088b8:	6802      	ldr	r2, [r0, #0]
 80088ba:	0793      	lsls	r3, r2, #30
 80088bc:	d003      	beq.n	80088c6 <z_queue_node_peek+0x14>
		ret = anode->data;
 80088be:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 80088c0:	b109      	cbz	r1, 80088c6 <z_queue_node_peek+0x14>
			k_free(anode);
 80088c2:	f000 fb19 	bl	8008ef8 <k_free>
}
 80088c6:	4620      	mov	r0, r4
 80088c8:	bd10      	pop	{r4, pc}

080088ca <z_impl_k_queue_init>:
	list->head = NULL;
 80088ca:	2300      	movs	r3, #0
	list->tail = NULL;
 80088cc:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
 80088d0:	f100 0308 	add.w	r3, r0, #8
 80088d4:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 80088d8:	4770      	bx	lr

080088da <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
 80088da:	460a      	mov	r2, r1
 80088dc:	2300      	movs	r3, #0
 80088de:	6841      	ldr	r1, [r0, #4]
 80088e0:	f7ff bf96 	b.w	8008810 <queue_insert>

080088e4 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
 80088e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e8:	4604      	mov	r4, r0
 80088ea:	b086      	sub	sp, #24
 80088ec:	460d      	mov	r5, r1
	__asm__ volatile(
 80088ee:	f04f 0310 	mov.w	r3, #16
 80088f2:	f3ef 8711 	mrs	r7, BASEPRI
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
 80088fe:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 8008900:	b188      	cbz	r0, 8008926 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8008902:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8008904:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8008906:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 800890a:	4290      	cmp	r0, r2
	list->head = node;
 800890c:	6023      	str	r3, [r4, #0]
	list->tail = node;
 800890e:	bf08      	it	eq
 8008910:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 8008912:	2101      	movs	r1, #1
 8008914:	f7ff ffcd 	bl	80088b2 <z_queue_node_peek>
	__asm__ volatile(
 8008918:	f387 8811 	msr	BASEPRI, r7
 800891c:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
 8008920:	b006      	add	sp, #24
 8008922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
 8008926:	2900      	cmp	r1, #0
 8008928:	d0f6      	beq.n	8008918 <z_impl_k_queue_get+0x34>
 800892a:	f387 8811 	msr	BASEPRI, r7
 800892e:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
 8008932:	2104      	movs	r1, #4
 8008934:	4602      	mov	r2, r0
 8008936:	4623      	mov	r3, r4
 8008938:	eb0d 0001 	add.w	r0, sp, r1
 800893c:	f7fd f938 	bl	8005bb0 <k_poll_event_init>
	if (timeout != K_FOREVER) {
 8008940:	1c6a      	adds	r2, r5, #1
 8008942:	d002      	beq.n	800894a <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
 8008944:	f000 f99e 	bl	8008c84 <z_impl_k_uptime_get>
 8008948:	4606      	mov	r6, r0
{
 800894a:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
 800894c:	9b04      	ldr	r3, [sp, #16]
 800894e:	f36f 3310 	bfc	r3, #12, #5
 8008952:	9304      	str	r3, [sp, #16]
	return z_impl_k_poll(events, num_events, timeout);
 8008954:	2101      	movs	r1, #1
 8008956:	1bea      	subs	r2, r5, r7
 8008958:	a801      	add	r0, sp, #4
 800895a:	f7fd f93d 	bl	8005bd8 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
 800895e:	b118      	cbz	r0, 8008968 <z_impl_k_queue_get+0x84>
 8008960:	300b      	adds	r0, #11
 8008962:	d001      	beq.n	8008968 <z_impl_k_queue_get+0x84>
			return NULL;
 8008964:	2000      	movs	r0, #0
 8008966:	e7db      	b.n	8008920 <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
 8008968:	f04f 0310 	mov.w	r3, #16
 800896c:	f3ef 8811 	mrs	r8, BASEPRI
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
 8008978:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
 800897a:	b138      	cbz	r0, 800898c <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 800897c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 800897e:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8008980:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8008984:	4290      	cmp	r0, r2
	list->head = node;
 8008986:	6023      	str	r3, [r4, #0]
	list->tail = node;
 8008988:	bf08      	it	eq
 800898a:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
 800898c:	2101      	movs	r1, #1
 800898e:	f7ff ff90 	bl	80088b2 <z_queue_node_peek>
	__asm__ volatile(
 8008992:	f388 8811 	msr	BASEPRI, r8
 8008996:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
 800899a:	2800      	cmp	r0, #0
 800899c:	d1c0      	bne.n	8008920 <z_impl_k_queue_get+0x3c>
 800899e:	1c6b      	adds	r3, r5, #1
 80089a0:	d0d4      	beq.n	800894c <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
 80089a2:	f000 f96f 	bl	8008c84 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
 80089a6:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
 80089a8:	42bd      	cmp	r5, r7
 80089aa:	dacf      	bge.n	800894c <z_impl_k_queue_get+0x68>
 80089ac:	e7da      	b.n	8008964 <z_impl_k_queue_get+0x80>

080089ae <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80089ae:	7b43      	ldrb	r3, [r0, #13]
 80089b0:	06db      	lsls	r3, r3, #27
 80089b2:	bf03      	ittte	eq
 80089b4:	6980      	ldreq	r0, [r0, #24]
 80089b6:	fab0 f080 	clzeq	r0, r0
 80089ba:	0940      	lsreq	r0, r0, #5
 80089bc:	2000      	movne	r0, #0
}
 80089be:	4770      	bx	lr

080089c0 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
 80089c0:	f990 000e 	ldrsb.w	r0, [r0, #14]
 80089c4:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
 80089c8:	4298      	cmp	r0, r3
 80089ca:	bfac      	ite	ge
 80089cc:	2000      	movge	r0, #0
 80089ce:	2001      	movlt	r0, #1
 80089d0:	4770      	bx	lr

080089d2 <z_unpend_thread_no_timeout>:
{
 80089d2:	b538      	push	{r3, r4, r5, lr}
 80089d4:	4604      	mov	r4, r0
	__asm__ volatile(
 80089d6:	f04f 0310 	mov.w	r3, #16
 80089da:	f3ef 8511 	mrs	r5, BASEPRI
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 80089e6:	4601      	mov	r1, r0
 80089e8:	6880      	ldr	r0, [r0, #8]
 80089ea:	f7fc fbdf 	bl	80051ac <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80089ee:	7b63      	ldrb	r3, [r4, #13]
 80089f0:	f023 0302 	bic.w	r3, r3, #2
 80089f4:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 80089f6:	f385 8811 	msr	BASEPRI, r5
 80089fa:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 80089fe:	2300      	movs	r3, #0
 8008a00:	60a3      	str	r3, [r4, #8]
}
 8008a02:	bd38      	pop	{r3, r4, r5, pc}

08008a04 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8008a04:	b921      	cbnz	r1, 8008a10 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a06:	f3ef 8005 	mrs	r0, IPSR
 8008a0a:	b908      	cbnz	r0, 8008a10 <z_reschedule+0xc>
 8008a0c:	f7fa bcaa 	b.w	8003364 <arch_swap>
 8008a10:	f381 8811 	msr	BASEPRI, r1
 8008a14:	f3bf 8f6f 	isb	sy
}
 8008a18:	4770      	bx	lr

08008a1a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	b920      	cbnz	r0, 8008a28 <z_reschedule_irqlock+0xe>
 8008a1e:	f3ef 8205 	mrs	r2, IPSR
 8008a22:	b90a      	cbnz	r2, 8008a28 <z_reschedule_irqlock+0xe>
 8008a24:	f7fa bc9e 	b.w	8003364 <arch_swap>
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
}
 8008a30:	4770      	bx	lr

08008a32 <z_reschedule_unlocked>:
	__asm__ volatile(
 8008a32:	f04f 0310 	mov.w	r3, #16
 8008a36:	f3ef 8011 	mrs	r0, BASEPRI
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8008a42:	f7ff bfea 	b.w	8008a1a <z_reschedule_irqlock>

08008a46 <z_unpend_thread>:
{
 8008a46:	b538      	push	{r3, r4, r5, lr}
 8008a48:	4604      	mov	r4, r0
 8008a4a:	f04f 0310 	mov.w	r3, #16
 8008a4e:	f3ef 8511 	mrs	r5, BASEPRI
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8008a5a:	4601      	mov	r1, r0
 8008a5c:	6880      	ldr	r0, [r0, #8]
 8008a5e:	f7fc fba5 	bl	80051ac <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8008a62:	7b63      	ldrb	r3, [r4, #13]
 8008a64:	f023 0302 	bic.w	r3, r3, #2
 8008a68:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 8008a6a:	f385 8811 	msr	BASEPRI, r5
 8008a6e:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
 8008a76:	f104 0018 	add.w	r0, r4, #24
}
 8008a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a7e:	f000 b8bd 	b.w	8008bfc <z_abort_timeout>

08008a82 <z_priq_dumb_best>:
	return list->head == list;
 8008a82:	6803      	ldr	r3, [r0, #0]
}
 8008a84:	4298      	cmp	r0, r3
 8008a86:	bf14      	ite	ne
 8008a88:	4618      	movne	r0, r3
 8008a8a:	2000      	moveq	r0, #0
 8008a8c:	4770      	bx	lr

08008a8e <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
 8008a8e:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
 8008a92:	b570      	push	{r4, r5, r6, lr}
 8008a94:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 8008a96:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
 8008a9a:	b1cb      	cbz	r3, 8008ad0 <z_thread_timeout+0x42>
	__asm__ volatile(
 8008a9c:	f04f 0310 	mov.w	r3, #16
 8008aa0:	f3ef 8611 	mrs	r6, BASEPRI
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8008aac:	4629      	mov	r1, r5
 8008aae:	f850 0c10 	ldr.w	r0, [r0, #-16]
 8008ab2:	f7fc fb7b 	bl	80051ac <z_priq_dumb_remove>
 8008ab6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8008aba:	f023 0302 	bic.w	r3, r3, #2
 8008abe:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
 8008ac2:	f386 8811 	msr	BASEPRI, r6
 8008ac6:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8008ad0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8008ad4:	f023 0314 	bic.w	r3, r3, #20
 8008ad8:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
 8008adc:	4628      	mov	r0, r5
 8008ade:	f7ff ff66 	bl	80089ae <z_is_thread_ready>
 8008ae2:	b120      	cbz	r0, 8008aee <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
 8008ae4:	4628      	mov	r0, r5
}
 8008ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008aea:	f7fc bbaf 	b.w	800524c <z_add_thread_to_ready_q>
 8008aee:	bd70      	pop	{r4, r5, r6, pc}

08008af0 <z_unpend_first_thread>:
{
 8008af0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8008af2:	f04f 0310 	mov.w	r3, #16
 8008af6:	f3ef 8211 	mrs	r2, BASEPRI
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
 8008b02:	f7ff ffbe 	bl	8008a82 <z_priq_dumb_best>
 8008b06:	4604      	mov	r4, r0
	__asm__ volatile(
 8008b08:	f382 8811 	msr	BASEPRI, r2
 8008b0c:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
 8008b10:	b1c8      	cbz	r0, 8008b46 <z_unpend_first_thread+0x56>
	__asm__ volatile(
 8008b12:	f04f 0310 	mov.w	r3, #16
 8008b16:	f3ef 8511 	mrs	r5, BASEPRI
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8008b22:	4601      	mov	r1, r0
 8008b24:	6880      	ldr	r0, [r0, #8]
 8008b26:	f7fc fb41 	bl	80051ac <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8008b2a:	7b63      	ldrb	r3, [r4, #13]
 8008b2c:	f023 0302 	bic.w	r3, r3, #2
 8008b30:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 8008b32:	f385 8811 	msr	BASEPRI, r5
 8008b36:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60a3      	str	r3, [r4, #8]
 8008b3e:	f104 0018 	add.w	r0, r4, #24
 8008b42:	f000 f85b 	bl	8008bfc <z_abort_timeout>
}
 8008b46:	4620      	mov	r0, r4
 8008b48:	bd38      	pop	{r3, r4, r5, pc}

08008b4a <z_unpend_all>:
{
 8008b4a:	b570      	push	{r4, r5, r6, lr}
 8008b4c:	4606      	mov	r6, r0
	int need_sched = 0;
 8008b4e:	2500      	movs	r5, #0
 8008b50:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008b52:	42a6      	cmp	r6, r4
 8008b54:	d000      	beq.n	8008b58 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8008b56:	b90c      	cbnz	r4, 8008b5c <z_unpend_all+0x12>
}
 8008b58:	4628      	mov	r0, r5
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f7ff ff72 	bl	8008a46 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
 8008b62:	4620      	mov	r0, r4
 8008b64:	f7ff ff23 	bl	80089ae <z_is_thread_ready>
		need_sched = 1;
 8008b68:	2501      	movs	r5, #1
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d0f0      	beq.n	8008b50 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f7fc fb6c 	bl	800524c <z_add_thread_to_ready_q>
 8008b74:	e7ec      	b.n	8008b50 <z_unpend_all+0x6>

08008b76 <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
 8008b76:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 8008b7a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 8008b7e:	e9c0 0000 	strd	r0, r0, [r0]
 8008b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
 8008b86:	4770      	bx	lr

08008b88 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8008b88:	7b43      	ldrb	r3, [r0, #13]
 8008b8a:	06db      	lsls	r3, r3, #27
 8008b8c:	bf03      	ittte	eq
 8008b8e:	6980      	ldreq	r0, [r0, #24]
 8008b90:	fab0 f080 	clzeq	r0, r0
 8008b94:	0940      	lsreq	r0, r0, #5
 8008b96:	2000      	movne	r0, #0
}
 8008b98:	4770      	bx	lr

08008b9a <z_impl_k_thread_name_set>:
}
 8008b9a:	f06f 0046 	mvn.w	r0, #70	; 0x46
 8008b9e:	4770      	bx	lr

08008ba0 <z_new_thread_init>:
{
 8008ba0:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
 8008ba2:	9c02      	ldr	r4, [sp, #8]
 8008ba4:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
 8008ba6:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
 8008ba8:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
 8008baa:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
 8008bac:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
 8008bae:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
 8008bb0:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
 8008bb4:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
 8008bb8:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
 8008bbc:	bd10      	pop	{r4, pc}

08008bbe <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
 8008bbe:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 8008bc0:	b510      	push	{r4, lr}
 8008bc2:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 8008bc4:	b103      	cbz	r3, 8008bc8 <z_thread_single_abort+0xa>
		thread->fn_abort();
 8008bc6:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f7ff ffdd 	bl	8008b88 <z_is_thread_ready>
 8008bce:	b138      	cbz	r0, 8008be0 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f7fc fbe9 	bl	80053a8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
 8008bd6:	7b63      	ldrb	r3, [r4, #13]
 8008bd8:	f043 0308 	orr.w	r3, r3, #8
 8008bdc:	7363      	strb	r3, [r4, #13]
}
 8008bde:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
 8008be0:	7b63      	ldrb	r3, [r4, #13]
 8008be2:	079b      	lsls	r3, r3, #30
 8008be4:	d502      	bpl.n	8008bec <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
 8008be6:	4620      	mov	r0, r4
 8008be8:	f7ff fef3 	bl	80089d2 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
 8008bec:	69a3      	ldr	r3, [r4, #24]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0f1      	beq.n	8008bd6 <z_thread_single_abort+0x18>
 8008bf2:	f104 0018 	add.w	r0, r4, #24
 8008bf6:	f000 f801 	bl	8008bfc <z_abort_timeout>
 8008bfa:	e7ec      	b.n	8008bd6 <z_thread_single_abort+0x18>

08008bfc <z_abort_timeout>:
{
 8008bfc:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008bfe:	f04f 0210 	mov.w	r2, #16
 8008c02:	f3ef 8411 	mrs	r4, BASEPRI
 8008c06:	f382 8811 	msr	BASEPRI, r2
 8008c0a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8008c0e:	6803      	ldr	r3, [r0, #0]
 8008c10:	b13b      	cbz	r3, 8008c22 <z_abort_timeout+0x26>
			remove_timeout(to);
 8008c12:	f7fc fee7 	bl	80059e4 <remove_timeout>
			ret = 0;
 8008c16:	2000      	movs	r0, #0
	__asm__ volatile(
 8008c18:	f384 8811 	msr	BASEPRI, r4
 8008c1c:	f3bf 8f6f 	isb	sy
}
 8008c20:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8008c22:	f06f 0015 	mvn.w	r0, #21
 8008c26:	e7f7      	b.n	8008c18 <z_abort_timeout+0x1c>

08008c28 <z_get_next_timeout_expiry>:
{
 8008c28:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008c2a:	f04f 0310 	mov.w	r3, #16
 8008c2e:	f3ef 8411 	mrs	r4, BASEPRI
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 8008c3a:	f7fc fee7 	bl	8005a0c <next_timeout>
	__asm__ volatile(
 8008c3e:	f384 8811 	msr	BASEPRI, r4
 8008c42:	f3bf 8f6f 	isb	sy
}
 8008c46:	bd10      	pop	{r4, pc}

08008c48 <z_set_timeout_expiry>:
{
 8008c48:	b570      	push	{r4, r5, r6, lr}
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	460e      	mov	r6, r1
	__asm__ volatile(
 8008c4e:	f04f 0310 	mov.w	r3, #16
 8008c52:	f3ef 8511 	mrs	r5, BASEPRI
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
 8008c5e:	f7fc fed5 	bl	8005a0c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8008c62:	2801      	cmp	r0, #1
 8008c64:	dd05      	ble.n	8008c72 <z_set_timeout_expiry+0x2a>
 8008c66:	42a0      	cmp	r0, r4
 8008c68:	dd03      	ble.n	8008c72 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f7fa fad3 	bl	8003218 <z_clock_set_timeout>
	__asm__ volatile(
 8008c72:	f385 8811 	msr	BASEPRI, r5
 8008c76:	f3bf 8f6f 	isb	sy
}
 8008c7a:	bd70      	pop	{r4, r5, r6, pc}

08008c7c <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
 8008c7c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
 8008c7e:	f7fc ff79 	bl	8005b74 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
 8008c82:	bd08      	pop	{r3, pc}

08008c84 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
 8008c84:	b508      	push	{r3, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
 8008c86:	f7fc ff75 	bl	8005b74 <z_tick_get>
			return t / (from_hz / to_hz);
 8008c8a:	220a      	movs	r2, #10
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f7f7 fa7b 	bl	8000188 <__aeabi_uldivmod>
}
 8008c92:	bd08      	pop	{r3, pc}

08008c94 <clear_event_registrations>:
	while (num_events--) {
 8008c94:	2314      	movs	r3, #20
{
 8008c96:	b570      	push	{r4, r5, r6, lr}
 8008c98:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
 8008c9c:	2400      	movs	r4, #0
 8008c9e:	2601      	movs	r6, #1
	while (num_events--) {
 8008ca0:	4281      	cmp	r1, r0
 8008ca2:	d100      	bne.n	8008ca6 <clear_event_registrations+0x12>
}
 8008ca4:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
 8008ca6:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
 8008caa:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	2b04      	cmp	r3, #4
 8008cb4:	d80d      	bhi.n	8008cd2 <clear_event_registrations+0x3e>
 8008cb6:	fa06 f303 	lsl.w	r3, r6, r3
 8008cba:	f013 0f16 	tst.w	r3, #22
 8008cbe:	d008      	beq.n	8008cd2 <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
 8008cc0:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8008cc4:	b12b      	cbz	r3, 8008cd2 <clear_event_registrations+0x3e>
	node->prev->next = node->next;
 8008cc6:	f851 5c10 	ldr.w	r5, [r1, #-16]
 8008cca:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
 8008ccc:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
 8008cce:	e941 4405 	strd	r4, r4, [r1, #-20]
 8008cd2:	f382 8811 	msr	BASEPRI, r2
 8008cd6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8008cda:	f04f 0310 	mov.w	r3, #16
 8008cde:	f3ef 8211 	mrs	r2, BASEPRI
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	3914      	subs	r1, #20
 8008cec:	e7d8      	b.n	8008ca0 <clear_event_registrations+0xc>

08008cee <signal_poll_event>:
{
 8008cee:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
 8008cf0:	6884      	ldr	r4, [r0, #8]
{
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	460e      	mov	r6, r1
	if (poller) {
 8008cf6:	b19c      	cbz	r4, 8008d20 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
 8008cf8:	68a3      	ldr	r3, [r4, #8]
 8008cfa:	b95b      	cbnz	r3, 8008d14 <signal_poll_event+0x26>
		poller->is_polling = false;
 8008cfc:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
 8008cfe:	4618      	mov	r0, r3
	event->poller = NULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	60ab      	str	r3, [r5, #8]
	event->state |= state;
 8008d04:	68eb      	ldr	r3, [r5, #12]
 8008d06:	f3c3 3204 	ubfx	r2, r3, #12, #5
 8008d0a:	4316      	orrs	r6, r2
 8008d0c:	f366 3310 	bfi	r3, r6, #12, #5
 8008d10:	60eb      	str	r3, [r5, #12]
	return retcode;
 8008d12:	e004      	b.n	8008d1e <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
 8008d14:	4798      	blx	r3
		poller->is_polling = false;
 8008d16:	2300      	movs	r3, #0
		if (retcode < 0) {
 8008d18:	2800      	cmp	r0, #0
		poller->is_polling = false;
 8008d1a:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
 8008d1c:	daf0      	bge.n	8008d00 <signal_poll_event+0x12>
}
 8008d1e:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
 8008d20:	4620      	mov	r0, r4
 8008d22:	e7ed      	b.n	8008d00 <signal_poll_event+0x12>

08008d24 <k_poll_poller_cb>:
{
 8008d24:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
 8008d26:	6883      	ldr	r3, [r0, #8]
 8008d28:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
 8008d2a:	7b63      	ldrb	r3, [r4, #13]
 8008d2c:	079a      	lsls	r2, r3, #30
{
 8008d2e:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
 8008d30:	d401      	bmi.n	8008d36 <k_poll_poller_cb+0x12>
		return 0;
 8008d32:	2000      	movs	r0, #0
}
 8008d34:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
 8008d36:	6a23      	ldr	r3, [r4, #32]
 8008d38:	3302      	adds	r3, #2
 8008d3a:	d012      	beq.n	8008d62 <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f7ff fe82 	bl	8008a46 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 8008d42:	2d08      	cmp	r5, #8
 8008d44:	bf0c      	ite	eq
 8008d46:	f06f 0303 	mvneq.w	r3, #3
 8008d4a:	2300      	movne	r3, #0
 8008d4c:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8008d4e:	7b63      	ldrb	r3, [r4, #13]
 8008d50:	06db      	lsls	r3, r3, #27
 8008d52:	d1ee      	bne.n	8008d32 <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
 8008d54:	69a5      	ldr	r5, [r4, #24]
 8008d56:	2d00      	cmp	r5, #0
 8008d58:	d1eb      	bne.n	8008d32 <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f7fc fa76 	bl	800524c <z_add_thread_to_ready_q>
	return 0;
 8008d60:	e7e7      	b.n	8008d32 <k_poll_poller_cb+0xe>
		return -EAGAIN;
 8008d62:	f06f 000a 	mvn.w	r0, #10
 8008d66:	e7e5      	b.n	8008d34 <k_poll_poller_cb+0x10>

08008d68 <add_event>:
{
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8008d6c:	e9d0 2300 	ldrd	r2, r3, [r0]
 8008d70:	4290      	cmp	r0, r2
 8008d72:	4604      	mov	r4, r0
 8008d74:	460d      	mov	r5, r1
 8008d76:	d106      	bne.n	8008d86 <add_event+0x1e>
	node->prev = list->tail;
 8008d78:	6863      	ldr	r3, [r4, #4]
 8008d7a:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
 8008d7c:	6863      	ldr	r3, [r4, #4]
	node->next = list;
 8008d7e:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
 8008d80:	601d      	str	r5, [r3, #0]
	list->tail = node;
 8008d82:	6065      	str	r5, [r4, #4]
}
 8008d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0f6      	beq.n	8008d78 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	6858      	ldr	r0, [r3, #4]
 8008d90:	f7ff fe16 	bl	80089c0 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
 8008d94:	2800      	cmp	r0, #0
 8008d96:	d1ef      	bne.n	8008d78 <add_event+0x10>
	return list->head == list;
 8008d98:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008d9a:	42b4      	cmp	r4, r6
 8008d9c:	d0ec      	beq.n	8008d78 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8008d9e:	2e00      	cmp	r6, #0
 8008da0:	d0ea      	beq.n	8008d78 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
 8008da2:	68b3      	ldr	r3, [r6, #8]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	6859      	ldr	r1, [r3, #4]
 8008da8:	f7ff fe0a 	bl	80089c0 <z_is_t1_higher_prio_than_t2>
 8008dac:	b128      	cbz	r0, 8008dba <add_event+0x52>
	node->prev = successor->prev;
 8008dae:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
 8008db0:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
 8008db4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8008db6:	6075      	str	r5, [r6, #4]
			return;
 8008db8:	e7e4      	b.n	8008d84 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
 8008dba:	6863      	ldr	r3, [r4, #4]
 8008dbc:	429e      	cmp	r6, r3
 8008dbe:	d0db      	beq.n	8008d78 <add_event+0x10>
 8008dc0:	6836      	ldr	r6, [r6, #0]
 8008dc2:	e7ec      	b.n	8008d9e <add_event+0x36>

08008dc4 <register_events>:
{
 8008dc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
 8008dc8:	f04f 0b00 	mov.w	fp, #0
{
 8008dcc:	4688      	mov	r8, r1
 8008dce:	4615      	mov	r5, r2
 8008dd0:	4699      	mov	r9, r3
 8008dd2:	4604      	mov	r4, r0
	int events_registered = 0;
 8008dd4:	465e      	mov	r6, fp
	event->poller = NULL;
 8008dd6:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
 8008dd8:	45c3      	cmp	fp, r8
 8008dda:	db02      	blt.n	8008de2 <register_events+0x1e>
}
 8008ddc:	4630      	mov	r0, r6
 8008dde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de2:	f04f 0310 	mov.w	r3, #16
 8008de6:	f3ef 8a11 	mrs	sl, BASEPRI
 8008dea:	f383 8811 	msr	BASEPRI, r3
 8008dee:	f3bf 8f6f 	isb	sy
	switch (event->type) {
 8008df2:	7b63      	ldrb	r3, [r4, #13]
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d005      	beq.n	8008e08 <register_events+0x44>
 8008dfc:	2b04      	cmp	r3, #4
 8008dfe:	d006      	beq.n	8008e0e <register_events+0x4a>
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d118      	bne.n	8008e36 <register_events+0x72>
		if (event->signal->signaled != 0U) {
 8008e04:	6922      	ldr	r2, [r4, #16]
 8008e06:	e000      	b.n	8008e0a <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
 8008e08:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
 8008e0a:	6892      	ldr	r2, [r2, #8]
 8008e0c:	e001      	b.n	8008e12 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 8008e0e:	6922      	ldr	r2, [r4, #16]
 8008e10:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
 8008e12:	b182      	cbz	r2, 8008e36 <register_events+0x72>
	event->state |= state;
 8008e14:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
 8008e16:	60a7      	str	r7, [r4, #8]
	event->state |= state;
 8008e18:	f3c2 3104 	ubfx	r1, r2, #12, #5
 8008e1c:	430b      	orrs	r3, r1
 8008e1e:	f363 3210 	bfi	r2, r3, #12, #5
 8008e22:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
 8008e24:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
 8008e26:	f38a 8811 	msr	BASEPRI, sl
 8008e2a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 8008e2e:	f10b 0b01 	add.w	fp, fp, #1
 8008e32:	3414      	adds	r4, #20
 8008e34:	e7d0      	b.n	8008dd8 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
 8008e36:	f1b9 0f00 	cmp.w	r9, #0
 8008e3a:	d1f4      	bne.n	8008e26 <register_events+0x62>
 8008e3c:	782b      	ldrb	r3, [r5, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0f1      	beq.n	8008e26 <register_events+0x62>
	switch (event->type) {
 8008e42:	7b63      	ldrb	r3, [r4, #13]
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d007      	beq.n	8008e5c <register_events+0x98>
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	d00e      	beq.n	8008e6e <register_events+0xaa>
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d109      	bne.n	8008e68 <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
 8008e54:	462a      	mov	r2, r5
 8008e56:	4621      	mov	r1, r4
 8008e58:	6920      	ldr	r0, [r4, #16]
 8008e5a:	e003      	b.n	8008e64 <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
 8008e5c:	6920      	ldr	r0, [r4, #16]
 8008e5e:	462a      	mov	r2, r5
 8008e60:	4621      	mov	r1, r4
 8008e62:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
 8008e64:	f7ff ff80 	bl	8008d68 <add_event>
	event->poller = poller;
 8008e68:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
 8008e6a:	3601      	adds	r6, #1
 8008e6c:	e7db      	b.n	8008e26 <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
 8008e6e:	6920      	ldr	r0, [r4, #16]
 8008e70:	462a      	mov	r2, r5
 8008e72:	4621      	mov	r1, r4
 8008e74:	3008      	adds	r0, #8
 8008e76:	e7f5      	b.n	8008e64 <register_events+0xa0>

08008e78 <z_handle_obj_poll_events>:
	return list->head == list;
 8008e78:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 8008e7a:	4298      	cmp	r0, r3
 8008e7c:	d009      	beq.n	8008e92 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
 8008e7e:	e9d3 2000 	ldrd	r2, r0, [r3]
 8008e82:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
 8008e84:	6050      	str	r0, [r2, #4]
	node->next = NULL;
 8008e86:	2200      	movs	r2, #0
	node->prev = NULL;
 8008e88:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7ff bf2e 	b.w	8008cee <signal_poll_event>
}
 8008e92:	4770      	bx	lr

08008e94 <z_impl_k_poll_signal_init>:
	signal->signaled = 0U;
 8008e94:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
 8008e96:	e9c0 0000 	strd	r0, r0, [r0]
 8008e9a:	6083      	str	r3, [r0, #8]
}
 8008e9c:	4770      	bx	lr

08008e9e <z_impl_k_poll_signal_check>:
	*signaled = signal->signaled;
 8008e9e:	6883      	ldr	r3, [r0, #8]
 8008ea0:	600b      	str	r3, [r1, #0]
	*result = signal->result;
 8008ea2:	68c3      	ldr	r3, [r0, #12]
 8008ea4:	6013      	str	r3, [r2, #0]
}
 8008ea6:	4770      	bx	lr

08008ea8 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8008ea8:	b508      	push	{r3, lr}
	__asm__ volatile(
 8008eaa:	f04f 0210 	mov.w	r2, #16
 8008eae:	f3ef 8311 	mrs	r3, BASEPRI
 8008eb2:	f382 8811 	msr	BASEPRI, r2
 8008eb6:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
 8008eba:	f7ff feb5 	bl	8008c28 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8008ebe:	2101      	movs	r1, #1
 8008ec0:	2802      	cmp	r0, #2
 8008ec2:	bfd8      	it	le
 8008ec4:	4608      	movle	r0, r1
 8008ec6:	f7ff febf 	bl	8008c48 <z_set_timeout_expiry>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8008eca:	f7fa fb0d 	bl	80034e8 <arch_cpu_idle>
 8008ece:	e7ec      	b.n	8008eaa <idle+0x2>

08008ed0 <k_mem_pool_malloc>:
{
 8008ed0:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 8008ed2:	2404      	movs	r4, #4
 8008ed4:	190a      	adds	r2, r1, r4
 8008ed6:	d204      	bcs.n	8008ee2 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
 8008ed8:	2300      	movs	r3, #0
 8008eda:	4669      	mov	r1, sp
 8008edc:	f7fc ff0e 	bl	8005cfc <k_mem_pool_alloc>
 8008ee0:	b110      	cbz	r0, 8008ee8 <k_mem_pool_malloc+0x18>
		return NULL;
 8008ee2:	2000      	movs	r0, #0
}
 8008ee4:	b002      	add	sp, #8
 8008ee6:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
 8008ee8:	4622      	mov	r2, r4
 8008eea:	a901      	add	r1, sp, #4
 8008eec:	9800      	ldr	r0, [sp, #0]
 8008eee:	f7ff f8b1 	bl	8008054 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
 8008ef2:	9800      	ldr	r0, [sp, #0]
 8008ef4:	3004      	adds	r0, #4
 8008ef6:	e7f5      	b.n	8008ee4 <k_mem_pool_malloc+0x14>

08008ef8 <k_free>:
	if (ptr != NULL) {
 8008ef8:	b110      	cbz	r0, 8008f00 <k_free+0x8>
		k_mem_pool_free_id(ptr);
 8008efa:	3804      	subs	r0, #4
 8008efc:	f7fc bf4a 	b.w	8005d94 <k_mem_pool_free_id>
}
 8008f00:	4770      	bx	lr

08008f02 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
 8008f02:	4770      	bx	lr
