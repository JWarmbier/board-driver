
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

08000000 <_vector_table>:
 8000000:	20001978 	.word	0x20001978
 8000004:	080034fd 	.word	0x080034fd
 8000008:	08007d19 	.word	0x08007d19
 800000c:	0800348d 	.word	0x0800348d
 8000010:	0800348d 	.word	0x0800348d
 8000014:	0800348d 	.word	0x0800348d
 8000018:	0800348d 	.word	0x0800348d
 800001c:	0800348d 	.word	0x0800348d
 8000020:	0800348d 	.word	0x0800348d
 8000024:	0800348d 	.word	0x0800348d
 8000028:	0800348d 	.word	0x0800348d
 800002c:	08003385 	.word	0x08003385
 8000030:	0800348d 	.word	0x0800348d
 8000034:	0800348d 	.word	0x0800348d
 8000038:	08003331 	.word	0x08003331
 800003c:	08003135 	.word	0x08003135

08000040 <_irq_vector_table>:
 8000040:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 8000050:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 8000060:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 8000070:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 8000080:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 8000090:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 80000a0:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 80000b0:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 80000c0:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 80000d0:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 80000e0:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 80000f0:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 8000100:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 8000110:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 8000120:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 8000130:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 8000140:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 8000150:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 8000160:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 8000170:	080034d5 080034d5 080034d5 080034d5     .4...4...4...4..
 8000180:	080034d5 080034d5                       .4...4..

Disassembly of section _TEXT_SECTION_NAME_2:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800019c:	f000 b80c 	b.w	80001b8 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f808 	bl	80001bc <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__aeabi_idiv0>:
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <__udivmoddi4>:
 80001bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80001c2:	4615      	mov	r5, r2
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	461e      	mov	r6, r3
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	f040 80cc 	bne.w	8000368 <__udivmoddi4+0x1ac>
 80001d0:	428a      	cmp	r2, r1
 80001d2:	fab2 fc82 	clz	ip, r2
 80001d6:	d94c      	bls.n	8000272 <__udivmoddi4+0xb6>
 80001d8:	f1bc 0f00 	cmp.w	ip, #0
 80001dc:	d00b      	beq.n	80001f6 <__udivmoddi4+0x3a>
 80001de:	f1cc 0820 	rsb	r8, ip, #32
 80001e2:	fa01 fe0c 	lsl.w	lr, r1, ip
 80001e6:	fa20 f808 	lsr.w	r8, r0, r8
 80001ea:	fa02 f50c 	lsl.w	r5, r2, ip
 80001ee:	ea48 0e0e 	orr.w	lr, r8, lr
 80001f2:	fa00 f40c 	lsl.w	r4, r0, ip
 80001f6:	ea4f 4915 	mov.w	r9, r5, lsr #16
 80001fa:	fa1f f885 	uxth.w	r8, r5
 80001fe:	fbbe faf9 	udiv	sl, lr, r9
 8000202:	0c21      	lsrs	r1, r4, #16
 8000204:	fb09 e31a 	mls	r3, r9, sl, lr
 8000208:	fb0a fb08 	mul.w	fp, sl, r8
 800020c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000210:	459b      	cmp	fp, r3
 8000212:	d92a      	bls.n	800026a <__udivmoddi4+0xae>
 8000214:	18eb      	adds	r3, r5, r3
 8000216:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 800021a:	d204      	bcs.n	8000226 <__udivmoddi4+0x6a>
 800021c:	459b      	cmp	fp, r3
 800021e:	d902      	bls.n	8000226 <__udivmoddi4+0x6a>
 8000220:	f1aa 0002 	sub.w	r0, sl, #2
 8000224:	442b      	add	r3, r5
 8000226:	eba3 030b 	sub.w	r3, r3, fp
 800022a:	b2a4      	uxth	r4, r4
 800022c:	fbb3 f2f9 	udiv	r2, r3, r9
 8000230:	fb09 3312 	mls	r3, r9, r2, r3
 8000234:	fb02 f808 	mul.w	r8, r2, r8
 8000238:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800023c:	45a0      	cmp	r8, r4
 800023e:	d916      	bls.n	800026e <__udivmoddi4+0xb2>
 8000240:	192c      	adds	r4, r5, r4
 8000242:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000246:	d203      	bcs.n	8000250 <__udivmoddi4+0x94>
 8000248:	45a0      	cmp	r8, r4
 800024a:	d901      	bls.n	8000250 <__udivmoddi4+0x94>
 800024c:	1e93      	subs	r3, r2, #2
 800024e:	442c      	add	r4, r5
 8000250:	eba4 0408 	sub.w	r4, r4, r8
 8000254:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000258:	b127      	cbz	r7, 8000264 <__udivmoddi4+0xa8>
 800025a:	fa24 f40c 	lsr.w	r4, r4, ip
 800025e:	2300      	movs	r3, #0
 8000260:	603c      	str	r4, [r7, #0]
 8000262:	607b      	str	r3, [r7, #4]
 8000264:	4631      	mov	r1, r6
 8000266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800026a:	4650      	mov	r0, sl
 800026c:	e7db      	b.n	8000226 <__udivmoddi4+0x6a>
 800026e:	4613      	mov	r3, r2
 8000270:	e7ee      	b.n	8000250 <__udivmoddi4+0x94>
 8000272:	b902      	cbnz	r2, 8000276 <__udivmoddi4+0xba>
 8000274:	deff      	udf	#255	; 0xff
 8000276:	f1bc 0f00 	cmp.w	ip, #0
 800027a:	d12e      	bne.n	80002da <__udivmoddi4+0x11e>
 800027c:	1a8b      	subs	r3, r1, r2
 800027e:	2601      	movs	r6, #1
 8000280:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000284:	b2aa      	uxth	r2, r5
 8000286:	fbb3 f8fe 	udiv	r8, r3, lr
 800028a:	0c21      	lsrs	r1, r4, #16
 800028c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000290:	fb08 f902 	mul.w	r9, r8, r2
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	4599      	cmp	r9, r3
 800029a:	d961      	bls.n	8000360 <__udivmoddi4+0x1a4>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80002a2:	d204      	bcs.n	80002ae <__udivmoddi4+0xf2>
 80002a4:	4599      	cmp	r9, r3
 80002a6:	d902      	bls.n	80002ae <__udivmoddi4+0xf2>
 80002a8:	f1a8 0002 	sub.w	r0, r8, #2
 80002ac:	442b      	add	r3, r5
 80002ae:	eba3 0309 	sub.w	r3, r3, r9
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f1fe 	udiv	r1, r3, lr
 80002b8:	fb0e 3311 	mls	r3, lr, r1, r3
 80002bc:	434a      	muls	r2, r1
 80002be:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c2:	42a2      	cmp	r2, r4
 80002c4:	d94e      	bls.n	8000364 <__udivmoddi4+0x1a8>
 80002c6:	192c      	adds	r4, r5, r4
 80002c8:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
 80002cc:	d203      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002ce:	42a2      	cmp	r2, r4
 80002d0:	d901      	bls.n	80002d6 <__udivmoddi4+0x11a>
 80002d2:	1e8b      	subs	r3, r1, #2
 80002d4:	442c      	add	r4, r5
 80002d6:	1aa4      	subs	r4, r4, r2
 80002d8:	e7bc      	b.n	8000254 <__udivmoddi4+0x98>
 80002da:	f1cc 0e20 	rsb	lr, ip, #32
 80002de:	fa02 f50c 	lsl.w	r5, r2, ip
 80002e2:	fa21 f90e 	lsr.w	r9, r1, lr
 80002e6:	fa01 f30c 	lsl.w	r3, r1, ip
 80002ea:	fa20 fe0e 	lsr.w	lr, r0, lr
 80002ee:	ea4e 0303 	orr.w	r3, lr, r3
 80002f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002f6:	fa00 f40c 	lsl.w	r4, r0, ip
 80002fa:	fbb9 f1f8 	udiv	r1, r9, r8
 80002fe:	fa1f fe85 	uxth.w	lr, r5
 8000302:	fb08 9211 	mls	r2, r8, r1, r9
 8000306:	0c18      	lsrs	r0, r3, #16
 8000308:	fb01 f60e 	mul.w	r6, r1, lr
 800030c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8000310:	4296      	cmp	r6, r2
 8000312:	d921      	bls.n	8000358 <__udivmoddi4+0x19c>
 8000314:	18aa      	adds	r2, r5, r2
 8000316:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800031a:	d203      	bcs.n	8000324 <__udivmoddi4+0x168>
 800031c:	4296      	cmp	r6, r2
 800031e:	d901      	bls.n	8000324 <__udivmoddi4+0x168>
 8000320:	1e88      	subs	r0, r1, #2
 8000322:	442a      	add	r2, r5
 8000324:	1b92      	subs	r2, r2, r6
 8000326:	b29b      	uxth	r3, r3
 8000328:	fbb2 f9f8 	udiv	r9, r2, r8
 800032c:	fb08 2219 	mls	r2, r8, r9, r2
 8000330:	fb09 fe0e 	mul.w	lr, r9, lr
 8000334:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000338:	459e      	cmp	lr, r3
 800033a:	d90f      	bls.n	800035c <__udivmoddi4+0x1a0>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8000342:	d204      	bcs.n	800034e <__udivmoddi4+0x192>
 8000344:	459e      	cmp	lr, r3
 8000346:	d902      	bls.n	800034e <__udivmoddi4+0x192>
 8000348:	f1a9 0602 	sub.w	r6, r9, #2
 800034c:	442b      	add	r3, r5
 800034e:	eba3 030e 	sub.w	r3, r3, lr
 8000352:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000356:	e793      	b.n	8000280 <__udivmoddi4+0xc4>
 8000358:	4608      	mov	r0, r1
 800035a:	e7e3      	b.n	8000324 <__udivmoddi4+0x168>
 800035c:	464e      	mov	r6, r9
 800035e:	e7f6      	b.n	800034e <__udivmoddi4+0x192>
 8000360:	4640      	mov	r0, r8
 8000362:	e7a4      	b.n	80002ae <__udivmoddi4+0xf2>
 8000364:	460b      	mov	r3, r1
 8000366:	e7b6      	b.n	80002d6 <__udivmoddi4+0x11a>
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0x1bc>
 800036c:	b10f      	cbz	r7, 8000372 <__udivmoddi4+0x1b6>
 800036e:	e9c7 0100 	strd	r0, r1, [r7]
 8000372:	2600      	movs	r6, #0
 8000374:	4630      	mov	r0, r6
 8000376:	e775      	b.n	8000264 <__udivmoddi4+0xa8>
 8000378:	fab3 fc83 	clz	ip, r3
 800037c:	f1bc 0f00 	cmp.w	ip, #0
 8000380:	d10f      	bne.n	80003a2 <__udivmoddi4+0x1e6>
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__udivmoddi4+0x1ce>
 8000386:	4282      	cmp	r2, r0
 8000388:	d809      	bhi.n	800039e <__udivmoddi4+0x1e2>
 800038a:	1a84      	subs	r4, r0, r2
 800038c:	eb61 0e03 	sbc.w	lr, r1, r3
 8000390:	2001      	movs	r0, #1
 8000392:	2f00      	cmp	r7, #0
 8000394:	d06a      	beq.n	800046c <__udivmoddi4+0x2b0>
 8000396:	e9c7 4e00 	strd	r4, lr, [r7]
 800039a:	2600      	movs	r6, #0
 800039c:	e762      	b.n	8000264 <__udivmoddi4+0xa8>
 800039e:	4660      	mov	r0, ip
 80003a0:	e7f7      	b.n	8000392 <__udivmoddi4+0x1d6>
 80003a2:	f1cc 0e20 	rsb	lr, ip, #32
 80003a6:	fa03 f30c 	lsl.w	r3, r3, ip
 80003aa:	fa22 f50e 	lsr.w	r5, r2, lr
 80003ae:	fa21 f40e 	lsr.w	r4, r1, lr
 80003b2:	431d      	orrs	r5, r3
 80003b4:	fa01 f30c 	lsl.w	r3, r1, ip
 80003b8:	fa20 f10e 	lsr.w	r1, r0, lr
 80003bc:	430b      	orrs	r3, r1
 80003be:	ea4f 4a15 	mov.w	sl, r5, lsr #16
 80003c2:	fa00 f60c 	lsl.w	r6, r0, ip
 80003c6:	fbb4 f9fa 	udiv	r9, r4, sl
 80003ca:	fa1f f885 	uxth.w	r8, r5
 80003ce:	fb0a 4019 	mls	r0, sl, r9, r4
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb09 f108 	mul.w	r1, r9, r8
 80003d8:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 80003dc:	42a1      	cmp	r1, r4
 80003de:	fa02 f20c 	lsl.w	r2, r2, ip
 80003e2:	d93f      	bls.n	8000464 <__udivmoddi4+0x2a8>
 80003e4:	192c      	adds	r4, r5, r4
 80003e6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003ea:	d204      	bcs.n	80003f6 <__udivmoddi4+0x23a>
 80003ec:	42a1      	cmp	r1, r4
 80003ee:	d902      	bls.n	80003f6 <__udivmoddi4+0x23a>
 80003f0:	f1a9 0002 	sub.w	r0, r9, #2
 80003f4:	442c      	add	r4, r5
 80003f6:	1a64      	subs	r4, r4, r1
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	fbb4 f9fa 	udiv	r9, r4, sl
 80003fe:	fb0a 4419 	mls	r4, sl, r9, r4
 8000402:	fb09 f808 	mul.w	r8, r9, r8
 8000406:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
 800040a:	4588      	cmp	r8, r1
 800040c:	d92c      	bls.n	8000468 <__udivmoddi4+0x2ac>
 800040e:	1869      	adds	r1, r5, r1
 8000410:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8000414:	d204      	bcs.n	8000420 <__udivmoddi4+0x264>
 8000416:	4588      	cmp	r8, r1
 8000418:	d902      	bls.n	8000420 <__udivmoddi4+0x264>
 800041a:	f1a9 0302 	sub.w	r3, r9, #2
 800041e:	4429      	add	r1, r5
 8000420:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000424:	eba1 0108 	sub.w	r1, r1, r8
 8000428:	fba0 8902 	umull	r8, r9, r0, r2
 800042c:	4549      	cmp	r1, r9
 800042e:	46c2      	mov	sl, r8
 8000430:	464c      	mov	r4, r9
 8000432:	d302      	bcc.n	800043a <__udivmoddi4+0x27e>
 8000434:	d106      	bne.n	8000444 <__udivmoddi4+0x288>
 8000436:	4546      	cmp	r6, r8
 8000438:	d204      	bcs.n	8000444 <__udivmoddi4+0x288>
 800043a:	ebb8 0a02 	subs.w	sl, r8, r2
 800043e:	eb69 0405 	sbc.w	r4, r9, r5
 8000442:	3801      	subs	r0, #1
 8000444:	b197      	cbz	r7, 800046c <__udivmoddi4+0x2b0>
 8000446:	ebb6 030a 	subs.w	r3, r6, sl
 800044a:	eb61 0604 	sbc.w	r6, r1, r4
 800044e:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000452:	fa23 f30c 	lsr.w	r3, r3, ip
 8000456:	ea4e 0303 	orr.w	r3, lr, r3
 800045a:	fa26 f60c 	lsr.w	r6, r6, ip
 800045e:	e9c7 3600 	strd	r3, r6, [r7]
 8000462:	e79a      	b.n	800039a <__udivmoddi4+0x1de>
 8000464:	4648      	mov	r0, r9
 8000466:	e7c6      	b.n	80003f6 <__udivmoddi4+0x23a>
 8000468:	464b      	mov	r3, r9
 800046a:	e7d9      	b.n	8000420 <__udivmoddi4+0x264>
 800046c:	463e      	mov	r6, r7
 800046e:	e6f9      	b.n	8000264 <__udivmoddi4+0xa8>

08000470 <poll_state_thread>:
		return "unknown";
	}
}

void poll_state_thread(void *unused1, void *unused2, void *unused3)
{
 8000470:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct can_bus_err_cnt err_cnt = {0, 0};
 8000474:	2400      	movs	r4, #0
	struct can_bus_err_cnt err_cnt_prev = {0, 0};
	enum can_state state_prev = CAN_ERROR_ACTIVE;
	enum can_state state;

	while (1) {
		state = can_get_state(can_dev, &err_cnt);
 8000476:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80004b4 <poll_state_thread+0x44>
	struct can_bus_err_cnt err_cnt = {0, 0};
 800047a:	f8ad 4004 	strh.w	r4, [sp, #4]
	struct can_bus_err_cnt err_cnt_prev = {0, 0};
 800047e:	4626      	mov	r6, r4
	enum can_state state_prev = CAN_ERROR_ACTIVE;
 8000480:	4627      	mov	r7, r4
		state = can_get_state(can_dev, &err_cnt);
 8000482:	f8d8 0000 	ldr.w	r0, [r8]
				    struct can_bus_err_cnt *err_cnt)
{
	const struct can_driver_api *api =
		(const struct can_driver_api *)dev->driver_api;

	return api->get_state(dev, err_cnt);
 8000486:	6843      	ldr	r3, [r0, #4]
 8000488:	a901      	add	r1, sp, #4
 800048a:	691b      	ldr	r3, [r3, #16]
 800048c:	4798      	blx	r3
		if (err_cnt.tx_err_cnt != err_cnt_prev.tx_err_cnt ||
 800048e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000492:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000496:	42b3      	cmp	r3, r6
 8000498:	4605      	mov	r5, r0
 800049a:	d103      	bne.n	80004a4 <poll_state_thread+0x34>
 800049c:	42a2      	cmp	r2, r4
 800049e:	d101      	bne.n	80004a4 <poll_state_thread+0x34>
		    err_cnt.rx_err_cnt != err_cnt_prev.rx_err_cnt ||
 80004a0:	4287      	cmp	r7, r0
 80004a2:	d003      	beq.n	80004ac <poll_state_thread+0x3c>
		    state_prev != state) {

			err_cnt_prev.tx_err_cnt = err_cnt.tx_err_cnt;
			err_cnt_prev.rx_err_cnt = err_cnt.rx_err_cnt;
 80004a4:	4614      	mov	r4, r2
		if (err_cnt.tx_err_cnt != err_cnt_prev.tx_err_cnt ||
 80004a6:	461e      	mov	r6, r3
 80004a8:	462f      	mov	r7, r5
 80004aa:	e7ea      	b.n	8000482 <poll_state_thread+0x12>
			//       "rx error count: %d\n"
			//       "tx error count: %d\n",
			//       state_to_str(state),
			 //      err_cnt.rx_err_cnt, err_cnt.tx_err_cnt);
		} else {
			k_sleep(K_MSEC(100));
 80004ac:	2064      	movs	r0, #100	; 0x64
 80004ae:	f005 fc64 	bl	8005d7a <k_sleep>
 80004b2:	e7f9      	b.n	80004a8 <poll_state_thread+0x38>
 80004b4:	200000d8 	.word	0x200000d8

080004b8 <state_change_isr>:
	}
#endif /* CONFIG_CAN_AUTO_BUS_OFF_RECOVERY */
}

void state_change_isr(enum can_state state, struct can_bus_err_cnt err_cnt)
{
 80004b8:	b082      	sub	sp, #8
	current_state = state;
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <state_change_isr+0x40>)
{
 80004bc:	f8ad 1004 	strh.w	r1, [sp, #4]
	current_state = state;
 80004c0:	7018      	strb	r0, [r3, #0]
	current_err_cnt = err_cnt;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <state_change_isr+0x44>)
 80004c4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80004c8:	490d      	ldr	r1, [pc, #52]	; (8000500 <state_change_isr+0x48>)
 80004ca:	801a      	strh	r2, [r3, #0]
 80004cc:	f3bf 8f5b 	dmb	ish
 80004d0:	e851 3f00 	ldrex	r3, [r1]
 80004d4:	f043 0201 	orr.w	r2, r3, #1
 80004d8:	e841 2000 	strex	r0, r2, [r1]
 80004dc:	2800      	cmp	r0, #0
 80004de:	d1f7      	bne.n	80004d0 <state_change_isr+0x18>
 80004e0:	f3bf 8f5b 	dmb	ish
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 80004e4:	07db      	lsls	r3, r3, #31
 80004e6:	d404      	bmi.n	80004f2 <state_change_isr+0x3a>
		k_queue_append(&work_q->queue, work);
 80004e8:	4806      	ldr	r0, [pc, #24]	; (8000504 <state_change_isr+0x4c>)
 80004ea:	3908      	subs	r1, #8
	k_work_submit(&state_change_work);
}
 80004ec:	b002      	add	sp, #8
 80004ee:	f008 b969 	b.w	80087c4 <k_queue_append>
 80004f2:	b002      	add	sp, #8
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	2000090e 	.word	0x2000090e
 80004fc:	2000090c 	.word	0x2000090c
 8000500:	20000220 	.word	0x20000220
 8000504:	2000088c 	.word	0x2000088c

08000508 <rx_thread>:
{
 8000508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct zcan_filter filter = {
 800050c:	2300      	movs	r3, #0
{
 800050e:	b090      	sub	sp, #64	; 0x40
	const struct zcan_filter filter = {
 8000510:	461a      	mov	r2, r3
 8000512:	f240 5182 	movw	r1, #1410	; 0x582
 8000516:	f361 2212 	bfi	r2, r1, #8, #11
	const struct zcan_filter filter_1 = {
 800051a:	f240 5181 	movw	r1, #1409	; 0x581
	const struct zcan_filter filter = {
 800051e:	9302      	str	r3, [sp, #8]
	const struct zcan_filter filter_1 = {
 8000520:	9305      	str	r3, [sp, #20]
	const struct zcan_filter filter = {
 8000522:	9201      	str	r2, [sp, #4]
 8000524:	f8ad 300c 	strh.w	r3, [sp, #12]
 8000528:	2201      	movs	r2, #1
	const struct zcan_filter filter_1 = {
 800052a:	f8ad 3018 	strh.w	r3, [sp, #24]
	filter_id = can_attach_msgq(can_dev, &counter_msgq, &filter);
 800052e:	4c1a      	ldr	r4, [pc, #104]	; (8000598 <rx_thread+0x90>)
	const struct zcan_filter filter = {
 8000530:	f88d 2009 	strb.w	r2, [sp, #9]
	const struct zcan_filter filter_1 = {
 8000534:	f361 2312 	bfi	r3, r1, #8, #11
	const struct zcan_filter filter = {
 8000538:	f240 72ff 	movw	r2, #2047	; 0x7ff
	const struct zcan_filter filter_1 = {
 800053c:	9304      	str	r3, [sp, #16]
 800053e:	2301      	movs	r3, #1
	const struct zcan_filter filter = {
 8000540:	f8ad 200a 	strh.w	r2, [sp, #10]
	const struct zcan_filter filter_1 = {
 8000544:	f88d 3015 	strb.w	r3, [sp, #21]
 8000548:	f8ad 2016 	strh.w	r2, [sp, #22]
	filter_id = can_attach_msgq(can_dev, &counter_msgq, &filter);
 800054c:	6820      	ldr	r0, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&msg_q, *(uintptr_t *)&filter, K_SYSCALL_CAN_ATTACH_MSGQ);
	}
#endif
	compiler_barrier();
	return z_impl_can_attach_msgq(dev, msg_q, filter);
 800054e:	4913      	ldr	r1, [pc, #76]	; (800059c <rx_thread+0x94>)
 8000550:	aa01      	add	r2, sp, #4
 8000552:	f001 ff9f 	bl	8002494 <z_impl_can_attach_msgq>
	filter_id = can_attach_msgq(can_dev, &counter_msgq, &filter_1);
 8000556:	6820      	ldr	r0, [r4, #0]
 8000558:	4910      	ldr	r1, [pc, #64]	; (800059c <rx_thread+0x94>)
	rxWork = true;
 800055a:	4e11      	ldr	r6, [pc, #68]	; (80005a0 <rx_thread+0x98>)
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
 800055c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800059c <rx_thread+0x94>
		k_fifo_put(&can_rx_fifo, &frame);
 8000560:	4f10      	ldr	r7, [pc, #64]	; (80005a4 <rx_thread+0x9c>)
 8000562:	aa04      	add	r2, sp, #16
 8000564:	f001 ff96 	bl	8002494 <z_impl_can_attach_msgq>
	rxWork = true;
 8000568:	2201      	movs	r2, #1
 800056a:	7032      	strb	r2, [r6, #0]
 800056c:	ad07      	add	r5, sp, #28
 800056e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000572:	4629      	mov	r1, r5
 8000574:	4640      	mov	r0, r8
 8000576:	f004 fc7b 	bl	8004e70 <z_impl_k_msgq_get>
		frame.frame = msg;
 800057a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800057e:	ac0c      	add	r4, sp, #48	; 0x30
 8000580:	c407      	stmia	r4!, {r0, r1, r2}
		k_fifo_put(&can_rx_fifo, &frame);
 8000582:	a90b      	add	r1, sp, #44	; 0x2c
 8000584:	4638      	mov	r0, r7
		frame.frame = msg;
 8000586:	8023      	strh	r3, [r4, #0]
		k_fifo_put(&can_rx_fifo, &frame);
 8000588:	f008 f91c 	bl	80087c4 <k_queue_append>
	while (rxWork) {
 800058c:	7833      	ldrb	r3, [r6, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d1ed      	bne.n	800056e <rx_thread+0x66>
}
 8000592:	b010      	add	sp, #64	; 0x40
 8000594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000598:	200000d8 	.word	0x200000d8
 800059c:	20002afc 	.word	0x20002afc
 80005a0:	2000090f 	.word	0x2000090f
 80005a4:	200000dc 	.word	0x200000dc

080005a8 <can_motor_request>:
	array[2] = BYTE(u_val,2);
	array[3] = BYTE(u_val,3);
}


bool can_motor_request(struct device * dev, struct motor_dev * motor, u8_t frame_type, u16_t index, u8_t subindex, u8_t *data){
 80005a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005ac:	461f      	mov	r7, r3
 80005ae:	b089      	sub	sp, #36	; 0x24
	if(!motor->initialized)
 80005b0:	784b      	ldrb	r3, [r1, #1]
bool can_motor_request(struct device * dev, struct motor_dev * motor, u8_t frame_type, u16_t index, u8_t subindex, u8_t *data){
 80005b2:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
 80005b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	if(!motor->initialized)
 80005b8:	9303      	str	r3, [sp, #12]
bool can_motor_request(struct device * dev, struct motor_dev * motor, u8_t frame_type, u16_t index, u8_t subindex, u8_t *data){
 80005ba:	4682      	mov	sl, r0
 80005bc:	4688      	mov	r8, r1
 80005be:	4615      	mov	r5, r2
	if(!motor->initialized)
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d055      	beq.n	8000670 <can_motor_request+0xc8>
		return 0;

	struct fifo_can_frame *msg;

	struct zcan_frame frame = {
 80005c4:	220e      	movs	r2, #14
 80005c6:	2100      	movs	r1, #0
 80005c8:	a804      	add	r0, sp, #16
 80005ca:	f007 fce5 	bl	8007f98 <memset>
		.id_type = CAN_STANDARD_IDENTIFIER,
		.rtr = CAN_DATAFRAME,
		.std_id = SDO_ID_TX + motor->motor_id,
 80005ce:	f898 3000 	ldrb.w	r3, [r8]
		.dlc = 8
	};
	frame.data[0] = frame_type;
 80005d2:	f88d 5016 	strb.w	r5, [sp, #22]
		.std_id = SDO_ID_TX + motor->motor_id,
 80005d6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
	struct zcan_frame frame = {
 80005da:	2200      	movs	r2, #0
 80005dc:	f363 2212 	bfi	r2, r3, #8, #11
 80005e0:	2308      	movs	r3, #8
	frame.data[1] = BYTE(index,0);
	frame.data[2] = BYTE(index,1);
 80005e2:	fa27 f903 	lsr.w	r9, r7, r3
	frame.data[3] = subindex;

	if(frame_type != CS_DOWNLOAD && frame_type != CS_UPLOAD)
 80005e6:	2d40      	cmp	r5, #64	; 0x40
	struct zcan_frame frame = {
 80005e8:	9204      	str	r2, [sp, #16]
 80005ea:	f88d 3015 	strb.w	r3, [sp, #21]
	frame.data[1] = BYTE(index,0);
 80005ee:	f88d 7017 	strb.w	r7, [sp, #23]
	frame.data[2] = BYTE(index,1);
 80005f2:	f88d 9018 	strb.w	r9, [sp, #24]
	frame.data[3] = subindex;
 80005f6:	f88d b019 	strb.w	fp, [sp, #25]
	if(frame_type != CS_DOWNLOAD && frame_type != CS_UPLOAD)
 80005fa:	d00d      	beq.n	8000618 <can_motor_request+0x70>
 80005fc:	2d23      	cmp	r5, #35	; 0x23
 80005fe:	d13b      	bne.n	8000678 <can_motor_request+0xd0>
	if(frame_type == CS_DOWNLOAD)
		zero_data(&frame);

	if(frame_type == CS_UPLOAD)
		for(int i = 0; i < 4; i++)
			frame.data[4+i] = data[i];
 8000600:	7823      	ldrb	r3, [r4, #0]
 8000602:	f88d 301a 	strb.w	r3, [sp, #26]
 8000606:	7863      	ldrb	r3, [r4, #1]
 8000608:	f88d 301b 	strb.w	r3, [sp, #27]
 800060c:	78a3      	ldrb	r3, [r4, #2]
 800060e:	f88d 301c 	strb.w	r3, [sp, #28]
 8000612:	78e3      	ldrb	r3, [r4, #3]
 8000614:	f88d 301d 	strb.w	r3, [sp, #29]
	return api->send(dev, msg, timeout, callback_isr, callback_arg);
 8000618:	2300      	movs	r3, #0
 800061a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	6852      	ldr	r2, [r2, #4]
 8000622:	a904      	add	r1, sp, #16
 8000624:	4616      	mov	r6, r2
 8000626:	4650      	mov	r0, sl
 8000628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800062c:	47b0      	blx	r6
	return z_impl_k_queue_get(queue, timeout);
 800062e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000632:	4813      	ldr	r0, [pc, #76]	; (8000680 <can_motor_request+0xd8>)
 8000634:	f008 f8cb 	bl	80087ce <z_impl_k_queue_get>
	can_send(dev, &frame, K_FOREVER, NULL, NULL);
	msg = k_fifo_get(&can_rx_fifo, K_FOREVER);

	//error handling - when we don't get a response to our request //

	if(SDO_ID_RX + motor->motor_id != msg->frame.std_id)
 8000638:	f898 2000 	ldrb.w	r2, [r8]
 800063c:	6843      	ldr	r3, [r0, #4]
 800063e:	f502 62b0 	add.w	r2, r2, #1408	; 0x580
 8000642:	f3c3 230a 	ubfx	r3, r3, #8, #11
 8000646:	429a      	cmp	r2, r3
 8000648:	d116      	bne.n	8000678 <can_motor_request+0xd0>
		return 0;

	if(msg->frame.data[1] != BYTE(index,0) && msg->frame.data[2] != BYTE(index,1) && msg->frame.data[3] != subindex)
 800064a:	7ac3      	ldrb	r3, [r0, #11]
 800064c:	42bb      	cmp	r3, r7
 800064e:	d005      	beq.n	800065c <can_motor_request+0xb4>
 8000650:	7b03      	ldrb	r3, [r0, #12]
 8000652:	454b      	cmp	r3, r9
 8000654:	d002      	beq.n	800065c <can_motor_request+0xb4>
 8000656:	7b43      	ldrb	r3, [r0, #13]
 8000658:	455b      	cmp	r3, fp
 800065a:	d10d      	bne.n	8000678 <can_motor_request+0xd0>
		return 0;

	if(frame_type == CS_DOWNLOAD)
 800065c:	2d40      	cmp	r5, #64	; 0x40
 800065e:	d107      	bne.n	8000670 <can_motor_request+0xc8>
		for(int i = 0 ; i < 4; i++)
			data[i] = msg->frame.data[4+i];
 8000660:	7b83      	ldrb	r3, [r0, #14]
 8000662:	7023      	strb	r3, [r4, #0]
 8000664:	7bc3      	ldrb	r3, [r0, #15]
 8000666:	7063      	strb	r3, [r4, #1]
 8000668:	7c03      	ldrb	r3, [r0, #16]
 800066a:	70a3      	strb	r3, [r4, #2]
 800066c:	7c43      	ldrb	r3, [r0, #17]
 800066e:	70e3      	strb	r3, [r4, #3]

	return 1;
}
 8000670:	9803      	ldr	r0, [sp, #12]
 8000672:	b009      	add	sp, #36	; 0x24
 8000674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8000678:	2300      	movs	r3, #0
 800067a:	9303      	str	r3, [sp, #12]
 800067c:	e7f8      	b.n	8000670 <can_motor_request+0xc8>
 800067e:	bf00      	nop
 8000680:	200000dc 	.word	0x200000dc

08000684 <motor_init>:

void motor_init(struct motor_dev * motor, u8_t motor_id, struct device * dev){
 8000684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000688:	460e      	mov	r6, r1
 800068a:	b086      	sub	sp, #24
	struct fifo_can_frame *msg;

	motor->initialized = false;
 800068c:	2100      	movs	r1, #0
 800068e:	7041      	strb	r1, [r0, #1]
	motor->error_register = 0;
 8000690:	6141      	str	r1, [r0, #20]
	motor->motor_id = motor_id;
 8000692:	7006      	strb	r6, [r0, #0]
void motor_init(struct motor_dev * motor, u8_t motor_id, struct device * dev){
 8000694:	4604      	mov	r4, r0
 8000696:	4615      	mov	r5, r2

	struct zcan_frame motor_init_frame = {
 8000698:	a802      	add	r0, sp, #8
 800069a:	220e      	movs	r2, #14
 800069c:	f007 fc7c 	bl	8007f98 <memset>
		.id_type = CAN_STANDARD_IDENTIFIER,
		.rtr = CAN_DATAFRAME,
		.std_id = SDO_ID_TX + motor_id,
 80006a0:	f506 62c0 	add.w	r2, r6, #1536	; 0x600
	struct zcan_frame motor_init_frame = {
 80006a4:	2300      	movs	r3, #0
 80006a6:	f362 2312 	bfi	r3, r2, #8, #11
 80006aa:	9302      	str	r3, [sp, #8]
 80006ac:	2308      	movs	r3, #8
 80006ae:	f88d 300d 	strb.w	r3, [sp, #13]
		.dlc = 8
	};
	motor_init_frame.data[0] = CS_DOWNLOAD;
 80006b2:	2340      	movs	r3, #64	; 0x40
 80006b4:	f88d 300e 	strb.w	r3, [sp, #14]
	motor_init_frame.data[1] = BYTE(SDO_DEVICE_TYPE_INDEX,0);
	motor_init_frame.data[2] = BYTE(SDO_DEVICE_TYPE_INDEX,1);
	motor_init_frame.data[3] = SDO_DEVICE_TYPE_SUBINDEX;

	while(!rxWork){ // waiting for can initialization
 80006b8:	4f1a      	ldr	r7, [pc, #104]	; (8000724 <motor_init+0xa0>)
	motor_init_frame.data[2] = BYTE(SDO_DEVICE_TYPE_INDEX,1);
 80006ba:	2310      	movs	r3, #16
 80006bc:	f88d 3010 	strb.w	r3, [sp, #16]
	while(!rxWork){ // waiting for can initialization
 80006c0:	783b      	ldrb	r3, [r7, #0]
 80006c2:	b35b      	cbz	r3, 800071c <motor_init+0x98>
 80006c4:	2700      	movs	r7, #0
 80006c6:	686b      	ldr	r3, [r5, #4]
 80006c8:	9700      	str	r7, [sp, #0]
 80006ca:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80006ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006d2:	463b      	mov	r3, r7
 80006d4:	a902      	add	r1, sp, #8
 80006d6:	4628      	mov	r0, r5
 80006d8:	47c0      	blx	r8
 80006da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006de:	4812      	ldr	r0, [pc, #72]	; (8000728 <motor_init+0xa4>)
 80006e0:	f008 f875 	bl	80087ce <z_impl_k_queue_get>
		k_sleep(100);
	}
	can_send(dev, &motor_init_frame, K_FOREVER, NULL, NULL);
	msg = k_fifo_get(&can_rx_fifo, K_FOREVER);

	if (msg->frame.std_id == SDO_ID_RX + motor_id && msg->frame.data[6] == 0x02){
 80006e4:	6843      	ldr	r3, [r0, #4]
 80006e6:	f506 66b0 	add.w	r6, r6, #1408	; 0x580
 80006ea:	f3c3 230a 	ubfx	r3, r3, #8, #11
 80006ee:	42b3      	cmp	r3, r6
 80006f0:	d105      	bne.n	80006fe <motor_init+0x7a>
 80006f2:	7c03      	ldrb	r3, [r0, #16]
 80006f4:	2b02      	cmp	r3, #2
		motor->initialized = true;
 80006f6:	bf02      	ittt	eq
 80006f8:	2301      	moveq	r3, #1
 80006fa:	7063      	strbeq	r3, [r4, #1]
		motor->init_error = false;
 80006fc:	70a7      	strbeq	r7, [r4, #2]
	}

	get_motor_status(motor, dev);
 80006fe:	4629      	mov	r1, r5
 8000700:	4620      	mov	r0, r4
 8000702:	f005 fb58 	bl	8005db6 <get_motor_status>
	get_motor_mode(motor, dev);
 8000706:	4629      	mov	r1, r5
 8000708:	4620      	mov	r0, r4
 800070a:	f005 fbac 	bl	8005e66 <get_motor_mode>
	get_error_register(motor, dev);
 800070e:	4629      	mov	r1, r5
 8000710:	4620      	mov	r0, r4
 8000712:	f005 fb94 	bl	8005e3e <get_error_register>

}
 8000716:	b006      	add	sp, #24
 8000718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_sleep(100);
 800071c:	2064      	movs	r0, #100	; 0x64
 800071e:	f005 fb2c 	bl	8005d7a <k_sleep>
 8000722:	e7cd      	b.n	80006c0 <motor_init+0x3c>
 8000724:	2000090f 	.word	0x2000090f
 8000728:	200000dc 	.word	0x200000dc

0800072c <main>:

void main(void)
{
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
	z_impl_k_queue_init(queue);
 8000732:	4883      	ldr	r0, [pc, #524]	; (8000940 <main+0x214>)
 8000734:	f008 f83e 	bl	80087b4 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8000738:	4882      	ldr	r0, [pc, #520]	; (8000944 <main+0x218>)
 800073a:	f004 fa43 	bl	8004bc4 <z_impl_device_get_binding>
 800073e:	4605      	mov	r5, r0
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
 8000740:	6843      	ldr	r3, [r0, #4]
//	dev = device_get_binding(LED_PORT);
	dev1 = device_get_binding("GPIOE");
	/* Set LED pin as output */
//	gpio_pin_configure(dev, LED, GPIO_DIR_OUT);
	gpio_pin_configure(dev1, 14, GPIO_DIR_OUT);
	const struct zcan_filter change_led_filter = {
 8000742:	ae07      	add	r6, sp, #28
 8000744:	681c      	ldr	r4, [r3, #0]
 8000746:	220e      	movs	r2, #14
 8000748:	2301      	movs	r3, #1
 800074a:	2100      	movs	r1, #0
 800074c:	47a0      	blx	r4
 800074e:	2300      	movs	r3, #0
 8000750:	2210      	movs	r2, #16
 8000752:	6073      	str	r3, [r6, #4]
 8000754:	8133      	strh	r3, [r6, #8]
 8000756:	f362 2312 	bfi	r3, r2, #8, #11
 800075a:	6033      	str	r3, [r6, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	7173      	strb	r3, [r6, #5]
 8000760:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000764:	80f3      	strh	r3, [r6, #6]
 8000766:	4878      	ldr	r0, [pc, #480]	; (8000948 <main+0x21c>)
		int ret;

		/* Usually the CAN device is either called CAN_0 or CAN_1, depending
		 * on the SOC. Let's check both and take the first valid one.
		 */
		can_dev = device_get_binding("CAN_0");
 8000768:	4c78      	ldr	r4, [pc, #480]	; (800094c <main+0x220>)
 800076a:	f004 fa2b 	bl	8004bc4 <z_impl_device_get_binding>
 800076e:	6020      	str	r0, [r4, #0]
		if (!can_dev) {
 8000770:	2800      	cmp	r0, #0
 8000772:	f040 80df 	bne.w	8000934 <main+0x208>
 8000776:	4876      	ldr	r0, [pc, #472]	; (8000950 <main+0x224>)
 8000778:	f004 fa24 	bl	8004bc4 <z_impl_device_get_binding>
 800077c:	4602      	mov	r2, r0
			can_dev = device_get_binding("CAN_1");
 800077e:	6020      	str	r0, [r4, #0]
		}

		if (!can_dev) {
 8000780:	2800      	cmp	r0, #0
 8000782:	f040 80d7 	bne.w	8000934 <main+0x208>
			//printk("CAN: Device driver not found.\n");
			gpio_pin_write(dev1, 14, 0);
		} else {
			gpio_pin_write(dev1, 14, 1);
 8000786:	210e      	movs	r1, #14
 8000788:	4628      	mov	r0, r5
 800078a:	f005 faf8 	bl	8005d7e <gpio_pin_write>
/*#ifdef CONFIG_LOOPBACK_MODE
	can_configure(can_dev, CAN_LOOPBACK_MODE, 125000);
#endif*/
	u8_t flag ;
#ifdef CONFIG_NORMAL_MODE
	flag = can_configure(can_dev, CAN_NORMAL_MODE, 125000);
 800078e:	6820      	ldr	r0, [r4, #0]
	return api->configure(dev, mode, bitrate);
 8000790:	6843      	ldr	r3, [r0, #4]
 8000792:	4a70      	ldr	r2, [pc, #448]	; (8000954 <main+0x228>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2100      	movs	r1, #0
 8000798:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800079a:	4b6f      	ldr	r3, [pc, #444]	; (8000958 <main+0x22c>)
 800079c:	4a6f      	ldr	r2, [pc, #444]	; (800095c <main+0x230>)
#endif

	k_work_init(&state_change_work, state_change_work_handler);

	ret = can_attach_workq(can_dev, &k_sys_work_q, &rx_work, change_led,
 800079e:	4970      	ldr	r1, [pc, #448]	; (8000960 <main+0x234>)
 80007a0:	2500      	movs	r5, #0
 80007a2:	e9c3 2501 	strd	r2, r5, [r3, #4]
 80007a6:	601d      	str	r5, [r3, #0]
 80007a8:	e9cd 5600 	strd	r5, r6, [sp]
 80007ac:	4b6d      	ldr	r3, [pc, #436]	; (8000964 <main+0x238>)
 80007ae:	4a6e      	ldr	r2, [pc, #440]	; (8000968 <main+0x23c>)
 80007b0:	6820      	ldr	r0, [r4, #0]
 80007b2:	f001 fe7b 	bl	80024ac <can_attach_workq>
			       led_gpio_dev, &change_led_filter);
	if (ret == CAN_NO_FREE_FILTER) {
 80007b6:	3001      	adds	r0, #1
 80007b8:	f000 80be 	beq.w	8000938 <main+0x20c>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80007bc:	2602      	movs	r6, #2
 80007be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80007c2:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80007c6:	e9cd 5500 	strd	r5, r5, [sp]
 80007ca:	4b68      	ldr	r3, [pc, #416]	; (800096c <main+0x240>)
 80007cc:	4968      	ldr	r1, [pc, #416]	; (8000970 <main+0x244>)
 80007ce:	4869      	ldr	r0, [pc, #420]	; (8000974 <main+0x248>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	f004 ffe2 	bl	800579c <z_impl_k_thread_create>
 80007d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007dc:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80007e0:	4b65      	ldr	r3, [pc, #404]	; (8000978 <main+0x24c>)
 80007e2:	4966      	ldr	r1, [pc, #408]	; (800097c <main+0x250>)
 80007e4:	4866      	ldr	r0, [pc, #408]	; (8000980 <main+0x254>)
 80007e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80007ea:	e9cd 5500 	strd	r5, r5, [sp]
 80007ee:	f004 ffd5 	bl	800579c <z_impl_k_thread_create>
					K_NO_WAIT);
	if (!get_state_tid) {
		//printk("ERROR spawning poll_state_thread\n");
	}

	can_register_state_change_isr(can_dev, state_change_isr);
 80007f2:	6820      	ldr	r0, [r4, #0]
				   can_state_change_isr_t isr)
{
	const struct can_driver_api *api =
		(const struct can_driver_api *)dev->driver_api;

	return api->register_state_change_isr(dev, isr);
 80007f4:	4963      	ldr	r1, [pc, #396]	; (8000984 <main+0x258>)
 80007f6:	6843      	ldr	r3, [r0, #4]
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4798      	blx	r3

	/* This sending call is none blocking. */

	int32_t pos[150];

	k_sleep(1000);
 80007fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000800:	f005 fabb 	bl	8005d7a <k_sleep>
	struct motor_dev motor1, motor2;
	motor_init(&motor1, 1, can_dev);
 8000804:	6822      	ldr	r2, [r4, #0]
 8000806:	2101      	movs	r1, #1
 8000808:	a80a      	add	r0, sp, #40	; 0x28
 800080a:	f7ff ff3b 	bl	8000684 <motor_init>
	motor_init(&motor2, 2, can_dev);
 800080e:	4631      	mov	r1, r6
 8000810:	6822      	ldr	r2, [r4, #0]



	while (1) {
		for(int i = 0; i < 100; i++){
			printk("State : %d\n",pos[i]);
 8000812:	4e5d      	ldr	r6, [pc, #372]	; (8000988 <main+0x25c>)
	motor_init(&motor2, 2, can_dev);
 8000814:	a822      	add	r0, sp, #136	; 0x88
 8000816:	f7ff ff35 	bl	8000684 <motor_init>
	motor_mode(&motor1, can_dev, MOTOR_MODE_VEL);
 800081a:	2203      	movs	r2, #3
 800081c:	6821      	ldr	r1, [r4, #0]
 800081e:	a80a      	add	r0, sp, #40	; 0x28
 8000820:	f005 fb65 	bl	8005eee <motor_mode>
	motor_mode(&motor2, can_dev, MOTOR_MODE_VEL);
 8000824:	2203      	movs	r2, #3
 8000826:	6821      	ldr	r1, [r4, #0]
 8000828:	a822      	add	r0, sp, #136	; 0x88
 800082a:	f005 fb60 	bl	8005eee <motor_mode>
	motor_disable(&motor1, can_dev);
 800082e:	6821      	ldr	r1, [r4, #0]
 8000830:	a80a      	add	r0, sp, #40	; 0x28
 8000832:	f005 fb45 	bl	8005ec0 <motor_disable>
	motor_disable(&motor2, can_dev);
 8000836:	6821      	ldr	r1, [r4, #0]
 8000838:	a822      	add	r0, sp, #136	; 0x88
 800083a:	f005 fb41 	bl	8005ec0 <motor_disable>
	motor_set_encoder_resolution(&motor1, can_dev, 128);
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	6821      	ldr	r1, [r4, #0]
 8000842:	a80a      	add	r0, sp, #40	; 0x28
 8000844:	f005 fb85 	bl	8005f52 <motor_set_encoder_resolution>
	motor_set_encoder_resolution(&motor2, can_dev, 128);
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	6821      	ldr	r1, [r4, #0]
 800084c:	a822      	add	r0, sp, #136	; 0x88
 800084e:	f005 fb80 	bl	8005f52 <motor_set_encoder_resolution>
	motor_set_velocity(&motor1, can_dev, 600);
 8000852:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000856:	6821      	ldr	r1, [r4, #0]
 8000858:	a80a      	add	r0, sp, #40	; 0x28
 800085a:	f005 fb63 	bl	8005f24 <motor_set_velocity>
	motor_set_velocity(&motor2, can_dev, 600);
 800085e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000862:	6821      	ldr	r1, [r4, #0]
 8000864:	a822      	add	r0, sp, #136	; 0x88
 8000866:	f005 fb5d 	bl	8005f24 <motor_set_velocity>
	motor_enable(&motor1, can_dev);
 800086a:	6821      	ldr	r1, [r4, #0]
 800086c:	a80a      	add	r0, sp, #40	; 0x28
 800086e:	f005 fb0d 	bl	8005e8c <motor_enable>
	motor_enable(&motor2, can_dev);
 8000872:	6821      	ldr	r1, [r4, #0]
 8000874:	a822      	add	r0, sp, #136	; 0x88
 8000876:	f005 fb09 	bl	8005e8c <motor_enable>
	k_sleep(4550);
 800087a:	f241 10c6 	movw	r0, #4550	; 0x11c6
 800087e:	f005 fa7c 	bl	8005d7a <k_sleep>
	motor_disable(&motor1, can_dev);
 8000882:	6821      	ldr	r1, [r4, #0]
 8000884:	a80a      	add	r0, sp, #40	; 0x28
 8000886:	f005 fb1b 	bl	8005ec0 <motor_disable>
	motor_disable(&motor2, can_dev);
 800088a:	6821      	ldr	r1, [r4, #0]
 800088c:	a822      	add	r0, sp, #136	; 0x88
 800088e:	f005 fb17 	bl	8005ec0 <motor_disable>
	k_sleep(1000);
 8000892:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000896:	f005 fa70 	bl	8005d7a <k_sleep>
	motor_set_velocity(&motor1, can_dev, 659);
 800089a:	f240 2293 	movw	r2, #659	; 0x293
 800089e:	6821      	ldr	r1, [r4, #0]
 80008a0:	a80a      	add	r0, sp, #40	; 0x28
 80008a2:	f005 fb3f 	bl	8005f24 <motor_set_velocity>
	motor_set_velocity(&motor2, can_dev, -2636);
 80008a6:	4a39      	ldr	r2, [pc, #228]	; (800098c <main+0x260>)
 80008a8:	6821      	ldr	r1, [r4, #0]
 80008aa:	a822      	add	r0, sp, #136	; 0x88
 80008ac:	f005 fb3a 	bl	8005f24 <motor_set_velocity>
	motor_enable(&motor1, can_dev);
 80008b0:	6821      	ldr	r1, [r4, #0]
 80008b2:	a80a      	add	r0, sp, #40	; 0x28
 80008b4:	f005 faea 	bl	8005e8c <motor_enable>
	motor_enable(&motor2, can_dev);
 80008b8:	6821      	ldr	r1, [r4, #0]
 80008ba:	a822      	add	r0, sp, #136	; 0x88
 80008bc:	f005 fae6 	bl	8005e8c <motor_enable>
	k_sleep(4100);
 80008c0:	f241 0004 	movw	r0, #4100	; 0x1004
 80008c4:	f005 fa59 	bl	8005d7a <k_sleep>
	motor_disable(&motor1, can_dev);
 80008c8:	6821      	ldr	r1, [r4, #0]
 80008ca:	a80a      	add	r0, sp, #40	; 0x28
 80008cc:	f005 faf8 	bl	8005ec0 <motor_disable>
	motor_disable(&motor2, can_dev);
 80008d0:	6821      	ldr	r1, [r4, #0]
 80008d2:	a822      	add	r0, sp, #136	; 0x88
 80008d4:	f005 faf4 	bl	8005ec0 <motor_disable>
	k_sleep(1000);
 80008d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008dc:	f005 fa4d 	bl	8005d7a <k_sleep>
	motor_set_velocity(&motor1, can_dev, -659);
 80008e0:	4a2b      	ldr	r2, [pc, #172]	; (8000990 <main+0x264>)
 80008e2:	6821      	ldr	r1, [r4, #0]
 80008e4:	a80a      	add	r0, sp, #40	; 0x28
 80008e6:	f005 fb1d 	bl	8005f24 <motor_set_velocity>
	motor_set_velocity(&motor2, can_dev, 2636);
 80008ea:	f640 224c 	movw	r2, #2636	; 0xa4c
 80008ee:	6821      	ldr	r1, [r4, #0]
 80008f0:	a822      	add	r0, sp, #136	; 0x88
 80008f2:	f005 fb17 	bl	8005f24 <motor_set_velocity>
	motor_enable(&motor1, can_dev);
 80008f6:	6821      	ldr	r1, [r4, #0]
 80008f8:	a80a      	add	r0, sp, #40	; 0x28
 80008fa:	f005 fac7 	bl	8005e8c <motor_enable>
	motor_enable(&motor2, can_dev);
 80008fe:	6821      	ldr	r1, [r4, #0]
 8000900:	a822      	add	r0, sp, #136	; 0x88
 8000902:	f005 fac3 	bl	8005e8c <motor_enable>
	k_sleep(4100);
 8000906:	f241 0004 	movw	r0, #4100	; 0x1004
 800090a:	f005 fa36 	bl	8005d7a <k_sleep>
	motor_disable(&motor1, can_dev);
 800090e:	6821      	ldr	r1, [r4, #0]
 8000910:	a80a      	add	r0, sp, #40	; 0x28
 8000912:	f005 fad5 	bl	8005ec0 <motor_disable>
	motor_disable(&motor2, can_dev);
 8000916:	6821      	ldr	r1, [r4, #0]
 8000918:	a822      	add	r0, sp, #136	; 0x88
 800091a:	f005 fad1 	bl	8005ec0 <motor_disable>
		for(int i = 0; i < 100; i++){
 800091e:	ad3a      	add	r5, sp, #232	; 0xe8
 8000920:	2400      	movs	r4, #0
			printk("State : %d\n",pos[i]);
 8000922:	f855 1b04 	ldr.w	r1, [r5], #4
 8000926:	4630      	mov	r0, r6
		for(int i = 0; i < 100; i++){
 8000928:	3401      	adds	r4, #1
			printk("State : %d\n",pos[i]);
 800092a:	f005 fe8c 	bl	8006646 <printk>
		for(int i = 0; i < 100; i++){
 800092e:	2c64      	cmp	r4, #100	; 0x64
 8000930:	d1f7      	bne.n	8000922 <main+0x1f6>
 8000932:	e7f4      	b.n	800091e <main+0x1f2>
			gpio_pin_write(dev1, 14, 1);
 8000934:	2201      	movs	r2, #1
 8000936:	e726      	b.n	8000786 <main+0x5a>
		}
	}
}
 8000938:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 800093c:	bd70      	pop	{r4, r5, r6, pc}
 800093e:	bf00      	nop
 8000940:	200000dc 	.word	0x200000dc
 8000944:	08009712 	.word	0x08009712
 8000948:	080096fa 	.word	0x080096fa
 800094c:	200000d8 	.word	0x200000d8
 8000950:	08009700 	.word	0x08009700
 8000954:	0001e848 	.word	0x0001e848
 8000958:	20000218 	.word	0x20000218
 800095c:	08005d79 	.word	0x08005d79
 8000960:	2000088c 	.word	0x2000088c
 8000964:	08005d91 	.word	0x08005d91
 8000968:	200001c4 	.word	0x200001c4
 800096c:	08000509 	.word	0x08000509
 8000970:	20000978 	.word	0x20000978
 8000974:	20000158 	.word	0x20000158
 8000978:	08000471 	.word	0x08000471
 800097c:	20000b78 	.word	0x20000b78
 8000980:	200000ec 	.word	0x200000ec
 8000984:	080004b9 	.word	0x080004b9
 8000988:	08009706 	.word	0x08009706
 800098c:	fffff5b4 	.word	0xfffff5b4
 8000990:	fffffd6d 	.word	0xfffffd6d

08000994 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8000994:	680b      	ldr	r3, [r1, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 800099a:	4b01      	ldr	r3, [pc, #4]	; (80009a0 <char_out+0xc>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4718      	bx	r3
 80009a0:	20002944 	.word	0x20002944

080009a4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 80009a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009a8:	b085      	sub	sp, #20
 80009aa:	469b      	mov	fp, r3
 80009ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80009ae:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8000a38 <_printk_dec_ulong+0x94>
 80009b2:	2c01      	cmp	r4, #1
 80009b4:	bfb8      	it	lt
 80009b6:	2401      	movlt	r4, #1
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	bf0c      	ite	eq
 80009bc:	2330      	moveq	r3, #48	; 0x30
 80009be:	2320      	movne	r3, #32
 80009c0:	4616      	mov	r6, r2
 80009c2:	4682      	mov	sl, r0
 80009c4:	4688      	mov	r8, r1
 80009c6:	9302      	str	r3, [sp, #8]
 80009c8:	2501      	movs	r5, #1
 80009ca:	270a      	movs	r7, #10
 80009cc:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
 80009ce:	fbb6 f3f9 	udiv	r3, r6, r9
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	b90a      	cbnz	r2, 80009da <_printk_dec_ulong+0x36>
 80009d6:	45b1      	cmp	r9, r6
 80009d8:	d81d      	bhi.n	8000a16 <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
 80009da:	9b01      	ldr	r3, [sp, #4]
 80009dc:	4641      	mov	r1, r8
 80009de:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80009e2:	47d0      	blx	sl
			digits++;
 80009e4:	3501      	adds	r5, #1
			found_largest_digit = 1;
 80009e6:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
 80009e8:	9b01      	ldr	r3, [sp, #4]
		remaining--;
 80009ea:	3f01      	subs	r7, #1
	while (pos >= 10) {
 80009ec:	2f01      	cmp	r7, #1
		remainder %= pos;
 80009ee:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
 80009f2:	f04f 030a 	mov.w	r3, #10
 80009f6:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
 80009fa:	d1e8      	bne.n	80009ce <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
 80009fc:	4641      	mov	r1, r8
 80009fe:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8000a02:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
 8000a04:	f1bb 0f03 	cmp.w	fp, #3
 8000a08:	d102      	bne.n	8000a10 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
 8000a0a:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
 8000a0c:	2c00      	cmp	r4, #0
 8000a0e:	dc0e      	bgt.n	8000a2e <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
 8000a10:	b005      	add	sp, #20
 8000a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 8000a16:	42bc      	cmp	r4, r7
 8000a18:	dbe6      	blt.n	80009e8 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
 8000a1a:	f1bb 0f02 	cmp.w	fp, #2
 8000a1e:	d8e3      	bhi.n	80009e8 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8000a20:	4641      	mov	r1, r8
 8000a22:	9802      	ldr	r0, [sp, #8]
 8000a24:	9203      	str	r2, [sp, #12]
			digits++;
 8000a26:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8000a28:	47d0      	blx	sl
			digits++;
 8000a2a:	9a03      	ldr	r2, [sp, #12]
 8000a2c:	e7dc      	b.n	80009e8 <_printk_dec_ulong+0x44>
			out(' ', ctx);
 8000a2e:	4641      	mov	r1, r8
 8000a30:	2020      	movs	r0, #32
 8000a32:	47d0      	blx	sl
 8000a34:	3c01      	subs	r4, #1
 8000a36:	e7e9      	b.n	8000a0c <_printk_dec_ulong+0x68>
 8000a38:	3b9aca00 	.word	0x3b9aca00

08000a3c <vprintk>:
{
 8000a3c:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
 8000a3e:	2300      	movs	r3, #0
 8000a40:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
 8000a42:	4602      	mov	r2, r0
 8000a44:	460b      	mov	r3, r1
 8000a46:	4803      	ldr	r0, [pc, #12]	; (8000a54 <vprintk+0x18>)
 8000a48:	a901      	add	r1, sp, #4
 8000a4a:	f005 fc8c 	bl	8006366 <z_vprintk>
}
 8000a4e:	b003      	add	sp, #12
 8000a50:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a54:	08000995 	.word	0x08000995

08000a58 <st_stm32f4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000a58:	f04f 0210 	mov.w	r2, #16
 8000a5c:	f3ef 8311 	mrs	r3, BASEPRI
 8000a60:	f382 8811 	msr	BASEPRI, r2
 8000a64:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000a68:	f383 8811 	msr	BASEPRI, r3
 8000a6c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8000a70:	4b02      	ldr	r3, [pc, #8]	; (8000a7c <st_stm32f4_init+0x24>)
 8000a72:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <st_stm32f4_init+0x28>)
 8000a74:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000a76:	2000      	movs	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	200029e0 	.word	0x200029e0
 8000a80:	00f42400 	.word	0x00f42400

08000a84 <cmd_device_list>:
	return 0;
}

static int cmd_device_list(const struct shell *shell,
			      size_t argc, char **argv)
{
 8000a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct device *info;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <cmd_device_list+0x30>)
	for (info = __device_init_start; info != __device_init_end; info++) {
 8000a88:	4c0b      	ldr	r4, [pc, #44]	; (8000ab8 <cmd_device_list+0x34>)
 8000a8a:	4d0c      	ldr	r5, [pc, #48]	; (8000abc <cmd_device_list+0x38>)
		if (info->driver_api != NULL) {
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 8000a8c:	4f0c      	ldr	r7, [pc, #48]	; (8000ac0 <cmd_device_list+0x3c>)
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 8000a8e:	2100      	movs	r1, #0
{
 8000a90:	4606      	mov	r6, r0
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 8000a92:	f005 fffe 	bl	8006a92 <shell_fprintf>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8000a96:	42ac      	cmp	r4, r5
 8000a98:	d101      	bne.n	8000a9e <cmd_device_list+0x1a>
					info->config->name);
		}
	}

	return 0;
}
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (info->driver_api != NULL) {
 8000a9e:	6863      	ldr	r3, [r4, #4]
 8000aa0:	b133      	cbz	r3, 8000ab0 <cmd_device_list+0x2c>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	463a      	mov	r2, r7
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4630      	mov	r0, r6
 8000aac:	f005 fff1 	bl	8006a92 <shell_fprintf>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8000ab0:	340c      	adds	r4, #12
 8000ab2:	e7f0      	b.n	8000a96 <cmd_device_list+0x12>
 8000ab4:	0800975a 	.word	0x0800975a
 8000ab8:	200029ec 	.word	0x200029ec
 8000abc:	20002ae8 	.word	0x20002ae8
 8000ac0:	08009764 	.word	0x08009764

08000ac4 <device_get_config_level>:
{
 8000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <device_get_config_level+0x34>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 8000ac8:	4f0c      	ldr	r7, [pc, #48]	; (8000afc <device_get_config_level+0x38>)
	for (info = config_levels[level]; info < config_levels[level+1];
 8000aca:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8000ace:	3101      	adds	r1, #1
{
 8000ad0:	4606      	mov	r6, r0
	for (info = config_levels[level]; info < config_levels[level+1];
 8000ad2:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	bool devices = false;
 8000ad6:	2000      	movs	r0, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 8000ad8:	42a5      	cmp	r5, r4
 8000ada:	d800      	bhi.n	8000ade <device_get_config_level+0x1a>
}
 8000adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (info->driver_api != NULL) {
 8000ade:	6863      	ldr	r3, [r4, #4]
 8000ae0:	b13b      	cbz	r3, 8000af2 <device_get_config_level+0x2e>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	463a      	mov	r2, r7
 8000aea:	2100      	movs	r1, #0
 8000aec:	f005 ffd1 	bl	8006a92 <shell_fprintf>
			devices = true;
 8000af0:	2001      	movs	r0, #1
								info++) {
 8000af2:	340c      	adds	r4, #12
 8000af4:	e7f0      	b.n	8000ad8 <device_get_config_level+0x14>
 8000af6:	bf00      	nop
 8000af8:	080091d8 	.word	0x080091d8
 8000afc:	08009764 	.word	0x08009764

08000b00 <cmd_device_levels>:
{
 8000b00:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
 8000b02:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <cmd_device_levels+0x80>)
{
 8000b04:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
 8000b06:	2100      	movs	r1, #0
 8000b08:	f005 ffc3 	bl	8006a92 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	4620      	mov	r0, r4
 8000b10:	f7ff ffd8 	bl	8000ac4 <device_get_config_level>
	if (ret == false) {
 8000b14:	4601      	mov	r1, r0
 8000b16:	b918      	cbnz	r0, 8000b20 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8000b18:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <cmd_device_levels+0x84>)
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f005 ffb9 	bl	8006a92 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <cmd_device_levels+0x88>)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4620      	mov	r0, r4
 8000b26:	f005 ffb4 	bl	8006a92 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
 8000b2a:	2103      	movs	r1, #3
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f7ff ffc9 	bl	8000ac4 <device_get_config_level>
	if (ret == false) {
 8000b32:	4601      	mov	r1, r0
 8000b34:	b918      	cbnz	r0, 8000b3e <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8000b36:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <cmd_device_levels+0x84>)
 8000b38:	4620      	mov	r0, r4
 8000b3a:	f005 ffaa 	bl	8006a92 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <cmd_device_levels+0x8c>)
 8000b40:	2100      	movs	r1, #0
 8000b42:	4620      	mov	r0, r4
 8000b44:	f005 ffa5 	bl	8006a92 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f7ff ffba 	bl	8000ac4 <device_get_config_level>
	if (ret == false) {
 8000b50:	4601      	mov	r1, r0
 8000b52:	b918      	cbnz	r0, 8000b5c <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <cmd_device_levels+0x84>)
 8000b56:	4620      	mov	r0, r4
 8000b58:	f005 ff9b 	bl	8006a92 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <cmd_device_levels+0x90>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4620      	mov	r0, r4
 8000b62:	f005 ff96 	bl	8006a92 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
 8000b66:	2101      	movs	r1, #1
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f7ff ffab 	bl	8000ac4 <device_get_config_level>
	if (ret == false) {
 8000b6e:	4601      	mov	r1, r0
 8000b70:	b918      	cbnz	r0, 8000b7a <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <cmd_device_levels+0x84>)
 8000b74:	4620      	mov	r0, r4
 8000b76:	f005 ff8c 	bl	8006a92 <shell_fprintf>
}
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	bd10      	pop	{r4, pc}
 8000b7e:	bf00      	nop
 8000b80:	08009718 	.word	0x08009718
 8000b84:	08009726 	.word	0x08009726
 8000b88:	0800972e 	.word	0x0800972e
 8000b8c:	0800973c 	.word	0x0800973c
 8000b90:	0800974b 	.word	0x0800974b

08000b94 <history_handle>:

	shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
 8000b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (flag_history_exit_get(shell)) {
 8000b96:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
}

static inline bool flag_history_exit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.history_exit == 1 ? true : false;
 8000b98:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8000b9c:	0652      	lsls	r2, r2, #25
{
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	460d      	mov	r5, r1
	if (flag_history_exit_get(shell)) {
 8000ba2:	d508      	bpl.n	8000bb6 <history_handle+0x22>
}

static inline void flag_history_exit_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 8000ba4:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8000ba8:	68c0      	ldr	r0, [r0, #12]
 8000baa:	f36f 1286 	bfc	r2, #6, #1
 8000bae:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
		flag_history_exit_set(shell, false);
		shell_history_mode_exit(shell->history);
 8000bb2:	f006 fc67 	bl	8007484 <shell_history_mode_exit>
	}

	/* Backup command if history is entered */
	if (!shell_history_active(shell->history)) {
 8000bb6:	68e3      	ldr	r3, [r4, #12]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	b963      	cbnz	r3, 8000bd6 <history_handle+0x42>
		if (up) {
 8000bbc:	b39d      	cbz	r5, 8000c26 <history_handle+0x92>
			u16_t cmd_len = shell_strlen(shell->ctx->cmd_buff);
 8000bbe:	68a0      	ldr	r0, [r4, #8]
 8000bc0:	3038      	adds	r0, #56	; 0x38
 8000bc2:	f005 ff32 	bl	8006a2a <shell_strlen>

			if (cmd_len) {
 8000bc6:	68a3      	ldr	r3, [r4, #8]
 8000bc8:	b378      	cbz	r0, 8000c2a <history_handle+0x96>
				strcpy(shell->ctx->temp_buff,
 8000bca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000bce:	f503 709c 	add.w	r0, r3, #312	; 0x138
 8000bd2:	f007 f943 	bl	8007e5c <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = shell_history_get(shell->history, up,
					 shell->ctx->cmd_buff, &len);
 8000bd6:	68a2      	ldr	r2, [r4, #8]
	history_mode = shell_history_get(shell->history, up,
 8000bd8:	68e0      	ldr	r0, [r4, #12]
 8000bda:	f10d 0306 	add.w	r3, sp, #6
 8000bde:	3238      	adds	r2, #56	; 0x38
 8000be0:	4629      	mov	r1, r5
 8000be2:	f006 fc52 	bl	800748a <shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
 8000be6:	b958      	cbnz	r0, 8000c00 <history_handle+0x6c>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
 8000be8:	68a0      	ldr	r0, [r4, #8]
 8000bea:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8000bee:	3038      	adds	r0, #56	; 0x38
 8000bf0:	f007 f934 	bl	8007e5c <strcpy>
		len = shell_strlen(shell->ctx->cmd_buff);
 8000bf4:	68a0      	ldr	r0, [r4, #8]
 8000bf6:	3038      	adds	r0, #56	; 0x38
 8000bf8:	f005 ff17 	bl	8006a2a <shell_strlen>
 8000bfc:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	shell_op_cursor_home_move(shell);
 8000c00:	4620      	mov	r0, r4
 8000c02:	f006 fa11 	bl	8007028 <shell_op_cursor_home_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <history_handle+0x9c>)
 8000c08:	490a      	ldr	r1, [pc, #40]	; (8000c34 <history_handle+0xa0>)
 8000c0a:	6960      	ldr	r0, [r4, #20]
 8000c0c:	f005 ff13 	bl	8006a36 <shell_raw_fprintf>
	clear_eos(shell);
	shell_print_cmd(shell);
 8000c10:	4620      	mov	r0, r4
 8000c12:	f000 fe8d 	bl	8001930 <shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
 8000c16:	68a3      	ldr	r3, [r4, #8]
 8000c18:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000c1c:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = len;
 8000c1e:	865a      	strh	r2, [r3, #50]	; 0x32
	shell_op_cond_next_line(shell);
 8000c20:	4620      	mov	r0, r4
 8000c22:	f000 fe47 	bl	80018b4 <shell_op_cond_next_line>
}
 8000c26:	b003      	add	sp, #12
 8000c28:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
 8000c2a:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
 8000c2e:	e7d2      	b.n	8000bd6 <history_handle+0x42>
 8000c30:	080097c0 	.word	0x080097c0
 8000c34:	0800986a 	.word	0x0800986a

08000c38 <execute>:
/* Function is analyzing the command buffer to find matching commands. Next, it
 * invokes the  last recognized command which has a handler and passes the rest
 * of command buffer as arguments.
 */
static int execute(const struct shell *shell)
{
 8000c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c3c:	b09d      	sub	sp, #116	; 0x74
 8000c3e:	4604      	mov	r4, r0
	struct shell_static_entry d_entry; /* Memory for dynamic commands. */
	char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *p_static_entry = NULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	9303      	str	r3, [sp, #12]
	bool wildcard_found = false;
	size_t cmd_idx = 0;
	size_t argc;
	char quote;

	shell_op_cursor_end_move(shell);
 8000c44:	f006 f9f6 	bl	8007034 <shell_op_cursor_end_move>
	if (!shell_cursor_in_empty_line(shell)) {
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f006 f97b 	bl	8006f44 <shell_cursor_in_empty_line>
 8000c4e:	b918      	cbnz	r0, 8000c58 <execute+0x20>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8000c50:	498c      	ldr	r1, [pc, #560]	; (8000e84 <execute+0x24c>)
 8000c52:	6960      	ldr	r0, [r4, #20]
 8000c54:	f005 feef 	bl	8006a36 <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
 8000c58:	68a0      	ldr	r0, [r4, #8]
 8000c5a:	2214      	movs	r2, #20
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	3008      	adds	r0, #8
 8000c60:	f007 f99a 	bl	8007f98 <memset>

	shell_cmd_trim(shell);
 8000c64:	4620      	mov	r0, r4
 8000c66:	f006 f914 	bl	8006e92 <shell_cmd_trim>

	history_put(shell, shell->ctx->cmd_buff,
 8000c6a:	68a1      	ldr	r1, [r4, #8]
	shell_history_put(shell->history, line, length);
 8000c6c:	68e0      	ldr	r0, [r4, #12]
 8000c6e:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
 8000c70:	3138      	adds	r1, #56	; 0x38
 8000c72:	f006 fc41 	bl	80074f8 <shell_history_put>
		    shell->ctx->cmd_buff_len);

	if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
		shell_wildcard_prepare(shell);
 8000c76:	4620      	mov	r0, r4
 8000c78:	f006 fcc3 	bl	8007602 <shell_wildcard_prepare>
	}

	/* create argument list */
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
 8000c7c:	68a2      	ldr	r2, [r4, #8]
 8000c7e:	230c      	movs	r3, #12
 8000c80:	3238      	adds	r2, #56	; 0x38
 8000c82:	a90f      	add	r1, sp, #60	; 0x3c
 8000c84:	a804      	add	r0, sp, #16
 8000c86:	f005 ff99 	bl	8006bbc <shell_make_argv>
				CONFIG_SHELL_ARGC_MAX);

	if (!argc) {
 8000c8a:	9a04      	ldr	r2, [sp, #16]
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
 8000c8c:	4603      	mov	r3, r0
	if (!argc) {
 8000c8e:	b92a      	cbnz	r2, 8000c9c <execute+0x64>

	if (quote != 0) {
		shell_internal_fprintf(shell, SHELL_ERROR,
				       "not terminated: %c\n",
				       quote);
		return -ENOEXEC;
 8000c90:	f06f 0507 	mvn.w	r5, #7
	}

	/* Executing the deepest found handler. */
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
 8000c94:	4628      	mov	r0, r5
 8000c96:	b01d      	add	sp, #116	; 0x74
 8000c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (quote != 0) {
 8000c9c:	b128      	cbz	r0, 8000caa <execute+0x72>
		shell_internal_fprintf(shell, SHELL_ERROR,
 8000c9e:	4a7a      	ldr	r2, [pc, #488]	; (8000e88 <execute+0x250>)
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f006 fa5f 	bl	8007166 <shell_internal_fprintf>
 8000ca8:	e7f2      	b.n	8000c90 <execute+0x58>
	help_entry.help = NULL;
 8000caa:	4605      	mov	r5, r0
	size_t cmd_idx = 0;
 8000cac:	4607      	mov	r7, r0
	bool wildcard_found = false;
 8000cae:	4681      	mov	r9, r0
	size_t cmd_with_handler_lvl = 0;
 8000cb0:	4682      	mov	sl, r0
	size_t cmd_lvl = SHELL_CMD_ROOT_LVL;
 8000cb2:	4606      	mov	r6, r0
	const struct shell_cmd_entry *p_cmd = NULL;
 8000cb4:	4683      	mov	fp, r0
 8000cb6:	e03e      	b.n	8000d36 <execute+0xfe>
		     !strcmp(argv[cmd_lvl], "--help"))) {
 8000cb8:	4974      	ldr	r1, [pc, #464]	; (8000e8c <execute+0x254>)
 8000cba:	f858 0c34 	ldr.w	r0, [r8, #-52]
 8000cbe:	f007 f8ff 	bl	8007ec0 <strcmp>
		    (!strcmp(argv[cmd_lvl], "-h") ||
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	d045      	beq.n	8000d52 <execute+0x11a>
			status = shell_wildcard_process(shell, p_cmd,
 8000cc6:	f858 2c34 	ldr.w	r2, [r8, #-52]
 8000cca:	4659      	mov	r1, fp
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f001 f9d7 	bl	8002080 <shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
 8000cd2:	2802      	cmp	r0, #2
 8000cd4:	d128      	bne.n	8000d28 <execute+0xf0>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
 8000cd6:	f1b9 0f00 	cmp.w	r9, #0
 8000cda:	d009      	beq.n	8000cf0 <execute+0xb8>
		shell_wildcard_finalize(shell);
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f006 fcb2 	bl	8007646 <shell_wildcard_finalize>
				      shell->ctx->cmd_buff,
 8000ce2:	68a2      	ldr	r2, [r4, #8]
		(void)shell_make_argv(&argc, &argv[0],
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	3238      	adds	r2, #56	; 0x38
 8000ce8:	a90f      	add	r1, sp, #60	; 0x3c
 8000cea:	a804      	add	r0, sp, #16
 8000cec:	f005 ff66 	bl	8006bbc <shell_make_argv>
	if (shell->ctx->active_cmd.handler == NULL) {
 8000cf0:	68a0      	ldr	r0, [r4, #8]
 8000cf2:	6943      	ldr	r3, [r0, #20]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f040 808f 	bne.w	8000e18 <execute+0x1e0>
			if (help_entry->help == NULL) {
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0c8      	beq.n	8000c90 <execute+0x58>
			if (help_entry->help != shell->ctx->active_cmd.help) {
 8000cfe:	68c3      	ldr	r3, [r0, #12]
 8000d00:	429d      	cmp	r5, r3
 8000d02:	d00c      	beq.n	8000d1e <execute+0xe6>
				shell->ctx->active_cmd = *help_entry;
 8000d04:	950b      	str	r5, [sp, #44]	; 0x2c
 8000d06:	f100 0508 	add.w	r5, r0, #8
 8000d0a:	e003      	b.n	8000d14 <execute+0xdc>
				shell->ctx->active_cmd = help_entry;
 8000d0c:	68a3      	ldr	r3, [r4, #8]
 8000d0e:	950b      	str	r5, [sp, #44]	; 0x2c
 8000d10:	f103 0508 	add.w	r5, r3, #8
				shell->ctx->active_cmd = *help_entry;
 8000d14:	ae0a      	add	r6, sp, #40	; 0x28
 8000d16:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d1a:	6833      	ldr	r3, [r6, #0]
 8000d1c:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f005 fe96 	bl	8006a50 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
 8000d24:	2501      	movs	r5, #1
 8000d26:	e7b5      	b.n	8000c94 <execute+0x5c>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
 8000d28:	2803      	cmp	r0, #3
 8000d2a:	d01a      	beq.n	8000d62 <execute+0x12a>
				++cmd_lvl;
 8000d2c:	3601      	adds	r6, #1
				continue;
 8000d2e:	46b8      	mov	r8, r7
				wildcard_found = true;
 8000d30:	f04f 0901 	mov.w	r9, #1
 8000d34:	4647      	mov	r7, r8
		if (cmd_lvl >= argc) {
 8000d36:	9b04      	ldr	r3, [sp, #16]
 8000d38:	42b3      	cmp	r3, r6
 8000d3a:	d9cc      	bls.n	8000cd6 <execute+0x9e>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 8000d3c:	b18e      	cbz	r6, 8000d62 <execute+0x12a>
		    (!strcmp(argv[cmd_lvl], "-h") ||
 8000d3e:	ab1c      	add	r3, sp, #112	; 0x70
 8000d40:	eb03 0886 	add.w	r8, r3, r6, lsl #2
 8000d44:	4952      	ldr	r1, [pc, #328]	; (8000e90 <execute+0x258>)
 8000d46:	f858 0c34 	ldr.w	r0, [r8, #-52]
 8000d4a:	f007 f8b9 	bl	8007ec0 <strcmp>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	d1b2      	bne.n	8000cb8 <execute+0x80>
			if (help_entry.help) {
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d1da      	bne.n	8000d0c <execute+0xd4>
			shell_internal_fprintf(shell, SHELL_ERROR,
 8000d56:	4a4f      	ldr	r2, [pc, #316]	; (8000e94 <execute+0x25c>)
					shell_internal_fprintf(shell,
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f006 fa03 	bl	8007166 <shell_internal_fprintf>
					return -ENOEXEC;
 8000d60:	e796      	b.n	8000c90 <execute+0x58>
		shell_cmd_get(shell, p_cmd, cmd_lvl, cmd_idx++, &p_static_entry,
 8000d62:	ab05      	add	r3, sp, #20
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	ab03      	add	r3, sp, #12
 8000d68:	f107 0801 	add.w	r8, r7, #1
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	4632      	mov	r2, r6
 8000d70:	463b      	mov	r3, r7
 8000d72:	4659      	mov	r1, fp
 8000d74:	4620      	mov	r0, r4
 8000d76:	f000 fd4b 	bl	8001810 <shell_cmd_get>
		if ((cmd_idx == 0) || (p_static_entry == NULL)) {
 8000d7a:	f1b8 0f00 	cmp.w	r8, #0
 8000d7e:	d001      	beq.n	8000d84 <execute+0x14c>
 8000d80:	9b03      	ldr	r3, [sp, #12]
 8000d82:	b983      	cbnz	r3, 8000da6 <execute+0x16e>
			if (cmd_lvl == 0 &&
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d1a6      	bne.n	8000cd6 <execute+0x9e>

void shell_cmd_trim(const struct shell *shell);

static inline bool shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
 8000d88:	68a3      	ldr	r3, [r4, #8]
 8000d8a:	69db      	ldr	r3, [r3, #28]
 8000d8c:	b113      	cbz	r3, 8000d94 <execute+0x15c>
				(!shell_in_select_mode(shell) ||
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1a0      	bne.n	8000cd6 <execute+0x9e>
				shell_internal_fprintf(shell, SHELL_ERROR,
 8000d94:	4b40      	ldr	r3, [pc, #256]	; (8000e98 <execute+0x260>)
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	4a40      	ldr	r2, [pc, #256]	; (8000e9c <execute+0x264>)
 8000d9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f006 f9e1 	bl	8007166 <shell_internal_fprintf>
				return -ENOEXEC;
 8000da4:	e774      	b.n	8000c90 <execute+0x58>
		if (strcmp(argv[cmd_lvl], p_static_entry->syntax) == 0) {
 8000da6:	6819      	ldr	r1, [r3, #0]
 8000da8:	ab1c      	add	r3, sp, #112	; 0x70
 8000daa:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8000dae:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8000db2:	f007 f885 	bl	8007ec0 <strcmp>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	d1bc      	bne.n	8000d34 <execute+0xfc>
			if (p_static_entry->handler != NULL) {
 8000dba:	9f03      	ldr	r7, [sp, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	b1bb      	cbz	r3, 8000df0 <execute+0x1b8>
				if (IS_ENABLED(CONFIG_SHELL_WILDCARD) &&
 8000dc0:	f1b9 0f00 	cmp.w	r9, #0
 8000dc4:	d007      	beq.n	8000dd6 <execute+0x19e>
					shell_op_cursor_end_move(shell);
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f006 f934 	bl	8007034 <shell_op_cursor_end_move>
					shell_op_cond_next_line(shell);
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f000 fd71 	bl	80018b4 <shell_op_cond_next_line>
					shell_internal_fprintf(shell,
 8000dd2:	4a33      	ldr	r2, [pc, #204]	; (8000ea0 <execute+0x268>)
 8000dd4:	e7c0      	b.n	8000d58 <execute+0x120>
				shell->ctx->active_cmd = *p_static_entry;
 8000dd6:	68a3      	ldr	r3, [r4, #8]
 8000dd8:	46be      	mov	lr, r7
 8000dda:	f103 0c08 	add.w	ip, r3, #8
 8000dde:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000de2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000de6:	f8de 3000 	ldr.w	r3, [lr]
 8000dea:	f8cc 3000 	str.w	r3, [ip]
 8000dee:	46b2      	mov	sl, r6
			if (p_static_entry->help != NULL) {
 8000df0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8000df4:	f1bc 0f00 	cmp.w	ip, #0
 8000df8:	d008      	beq.n	8000e0c <execute+0x1d4>
				help_entry = *p_static_entry;
 8000dfa:	46be      	mov	lr, r7
 8000dfc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000e00:	ad0a      	add	r5, sp, #40	; 0x28
 8000e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e04:	f8de 3000 	ldr.w	r3, [lr]
 8000e08:	602b      	str	r3, [r5, #0]
 8000e0a:	4665      	mov	r5, ip
			cmd_lvl++;
 8000e0c:	3601      	adds	r6, #1
			p_cmd = p_static_entry->subcmd;
 8000e0e:	f8d7 b008 	ldr.w	fp, [r7, #8]
			cmd_idx = 0;
 8000e12:	f04f 0800 	mov.w	r8, #0
 8000e16:	e78d      	b.n	8000d34 <execute+0xfc>
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
 8000e18:	9d04      	ldr	r5, [sp, #16]
	if (shell->ctx->active_cmd.args.mandatory) {
 8000e1a:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
 8000e1c:	eba5 050a 	sub.w	r5, r5, sl
	if (shell->ctx->active_cmd.args.mandatory) {
 8000e20:	b18b      	cbz	r3, 8000e46 <execute+0x20e>
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
 8000e22:	429d      	cmp	r5, r3
		u8_t opt = shell->ctx->active_cmd.args.optional;
 8000e24:	7e42      	ldrb	r2, [r0, #25]
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
 8000e26:	d302      	bcc.n	8000e2e <execute+0x1f6>
 8000e28:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
 8000e2a:	429d      	cmp	r5, r3
 8000e2c:	d90b      	bls.n	8000e46 <execute+0x20e>
		shell_internal_fprintf(shell, SHELL_ERROR,
 8000e2e:	6883      	ldr	r3, [r0, #8]
 8000e30:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <execute+0x26c>)
 8000e32:	2102      	movs	r1, #2
 8000e34:	4620      	mov	r0, r4
 8000e36:	f006 f996 	bl	8007166 <shell_internal_fprintf>
			shell_internal_help_print(shell);
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f005 fe08 	bl	8006a50 <shell_internal_help_print>
		return -EINVAL;
 8000e40:	f06f 0515 	mvn.w	r5, #21
 8000e44:	e726      	b.n	8000c94 <execute+0x5c>
	z_impl_k_mutex_unlock(mutex);
 8000e46:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
 8000e4a:	f004 f8e1 	bl	8005010 <z_impl_k_mutex_unlock>
		flag_cmd_ctx_set(shell, 1);
 8000e4e:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
}

static inline void flag_cmd_ctx_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.cmd_ctx = val ? 1 : 0;
 8000e50:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8000e54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e58:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
		ret_val = shell->ctx->active_cmd.handler(shell, argc, argv);
 8000e5c:	aa0f      	add	r2, sp, #60	; 0x3c
 8000e5e:	4629      	mov	r1, r5
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8000e66:	4620      	mov	r0, r4
 8000e68:	4798      	blx	r3
 8000e6a:	4605      	mov	r5, r0
		flag_cmd_ctx_set(shell, 0);
 8000e6c:	68a0      	ldr	r0, [r4, #8]
 8000e6e:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8000e72:	f36f 13c7 	bfc	r3, #7, #1
 8000e76:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8000e7a:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
 8000e7e:	f005 fe04 	bl	8006a8a <k_mutex_lock.constprop.34>
 8000e82:	e707      	b.n	8000c94 <execute+0x5c>
 8000e84:	0800986e 	.word	0x0800986e
 8000e88:	080097cd 	.word	0x080097cd
 8000e8c:	080097e4 	.word	0x080097e4
 8000e90:	080097e1 	.word	0x080097e1
 8000e94:	080097eb 	.word	0x080097eb
 8000e98:	08009809 	.word	0x08009809
 8000e9c:	080098f5 	.word	0x080098f5
 8000ea0:	0800981d 	.word	0x0800981d
 8000ea4:	0800984c 	.word	0x0800984c

08000ea8 <shell_init>:
	}
}

int shell_init(const struct shell *shell, const void *transport_config,
	       bool use_colors, bool log_backend, u32_t init_log_level)
{
 8000ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eac:	4604      	mov	r4, r0
	int err = shell->iface->api->init(shell->iface, p_config,
 8000eae:	6840      	ldr	r0, [r0, #4]
 8000eb0:	4a37      	ldr	r2, [pc, #220]	; (8000f90 <shell_init+0xe8>)
{
 8000eb2:	461f      	mov	r7, r3
	int err = shell->iface->api->init(shell->iface, p_config,
 8000eb4:	6803      	ldr	r3, [r0, #0]
{
 8000eb6:	b086      	sub	sp, #24
	int err = shell->iface->api->init(shell->iface, p_config,
 8000eb8:	681d      	ldr	r5, [r3, #0]
 8000eba:	4623      	mov	r3, r4
 8000ebc:	47a8      	blx	r5
	if (err != 0) {
 8000ebe:	4606      	mov	r6, r0
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d161      	bne.n	8000f88 <shell_init+0xe0>
	memset(shell->ctx, 0, sizeof(*shell->ctx));
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	f44f 7241 	mov.w	r2, #772	; 0x304
 8000eca:	68a0      	ldr	r0, [r4, #8]
 8000ecc:	f007 f864 	bl	8007f98 <memset>
	shell->ctx->prompt = shell->default_prompt;
 8000ed0:	68a3      	ldr	r3, [r4, #8]
 8000ed2:	6822      	ldr	r2, [r4, #0]
	shell_history_init(shell->history);
 8000ed4:	68e0      	ldr	r0, [r4, #12]
	shell->ctx->prompt = shell->default_prompt;
 8000ed6:	601a      	str	r2, [r3, #0]
	shell_history_init(shell->history);
 8000ed8:	f006 fb79 	bl	80075ce <shell_history_init>
	k_mutex_init(&shell->ctx->wr_mtx);
 8000edc:	68a0      	ldr	r0, [r4, #8]
 8000ede:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
	z_impl_k_mutex_init(mutex);
 8000ee2:	f007 fc04 	bl	80086ee <z_impl_k_mutex_init>
 8000ee6:	f44f 7827 	mov.w	r8, #668	; 0x29c
 8000eea:	f44f 7517 	mov.w	r5, #604	; 0x25c
		k_poll_signal_init(&shell->ctx->signals[i]);
 8000eee:	68a0      	ldr	r0, [r4, #8]
 8000ef0:	4428      	add	r0, r5
		arch_syscall_invoke1(*(uintptr_t *)&signal, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(signal);
 8000ef2:	f007 ff44 	bl	8008d7e <z_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
 8000ef6:	68a0      	ldr	r0, [r4, #8]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	1943      	adds	r3, r0, r5
 8000efc:	2101      	movs	r1, #1
 8000efe:	4440      	add	r0, r8
 8000f00:	3510      	adds	r5, #16
 8000f02:	f004 fe11 	bl	8005b28 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 8000f06:	f5b5 7f27 	cmp.w	r5, #668	; 0x29c
 8000f0a:	f108 0814 	add.w	r8, r8, #20
 8000f0e:	d1ee      	bne.n	8000eee <shell_init+0x46>
		shell->stats->log_lost_cnt = 0;
 8000f10:	69a3      	ldr	r3, [r4, #24]
 8000f12:	2500      	movs	r5, #0
 8000f14:	601d      	str	r5, [r3, #0]
	flag_tx_rdy_set(shell, true);
 8000f16:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
 8000f18:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	f042 0210 	orr.w	r2, r2, #16
 8000f22:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->internal.flags.echo = val ? 1 : 0;
 8000f26:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8000f2a:	f042 0204 	orr.w	r2, r2, #4
 8000f2e:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
 8000f32:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8000f36:	f042 0220 	orr.w	r2, r2, #32
 8000f3a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->state = SHELL_STATE_INITIALIZED;
 8000f3e:	2201      	movs	r2, #1
 8000f40:	711a      	strb	r2, [r3, #4]
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
 8000f42:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <shell_init+0xec>)
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
 8000f46:	f005 fd70 	bl	8006a2a <shell_strlen>
 8000f4a:	68a3      	ldr	r3, [r4, #8]
 8000f4c:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS));
 8000f50:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
 8000f52:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 8000f56:	f043 0302 	orr.w	r3, r3, #2
 8000f5a:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258

	if (err != 0) {
		return err;
	}

	k_tid_t tid = k_thread_create(shell->thread,
 8000f5e:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8000f62:	230e      	movs	r3, #14
 8000f64:	9303      	str	r3, [sp, #12]
 8000f66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000f68:	9400      	str	r4, [sp, #0]
 8000f6a:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8000f6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <shell_init+0xf0>)
 8000f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f78:	f004 fc10 	bl	800579c <z_impl_k_thread_create>
			      shell->stack, CONFIG_SHELL_STACK_SIZE,
			      shell_thread, (void *)shell, (void *)log_backend,
			      UINT_TO_POINTER(init_log_level),
			      K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	shell->ctx->tid = tid;
 8000f7c:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
 8000f7e:	6a21      	ldr	r1, [r4, #32]
	shell->ctx->tid = tid;
 8000f80:	f8c3 0300 	str.w	r0, [r3, #768]	; 0x300
	return z_impl_k_thread_name_set(thread_id, value);
 8000f84:	f007 fd7e 	bl	8008a84 <z_impl_k_thread_name_set>

	return 0;
}
 8000f88:	4630      	mov	r0, r6
 8000f8a:	b006      	add	sp, #24
 8000f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f90:	08006a77 	.word	0x08006a77
 8000f94:	00500018 	.word	0x00500018
 8000f98:	08001729 	.word	0x08001729

08000f9c <shell_start>:
int shell_start(const struct shell *shell)
{
	__ASSERT_NO_MSG(shell);
	__ASSERT_NO_MSG(shell->ctx && shell->iface && shell->default_prompt);

	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
 8000f9c:	6883      	ldr	r3, [r0, #8]
 8000f9e:	791b      	ldrb	r3, [r3, #4]
 8000fa0:	2b01      	cmp	r3, #1
{
 8000fa2:	b510      	push	{r4, lr}
 8000fa4:	4604      	mov	r4, r0
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
 8000fa6:	d10b      	bne.n	8000fc0 <shell_start+0x24>
		return -ENOTSUP;
	}

	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		shell_vt100_color_set(shell, SHELL_NORMAL);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	f000 fcc9 	bl	8001940 <shell_vt100_color_set>
	}

	shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
 8000fae:	4906      	ldr	r1, [pc, #24]	; (8000fc8 <shell_start+0x2c>)
 8000fb0:	6960      	ldr	r0, [r4, #20]
 8000fb2:	f005 fd40 	bl	8006a36 <shell_raw_fprintf>

	state_set(shell, SHELL_STATE_ACTIVE);
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f005 fd53 	bl	8006a62 <state_set.constprop.31>

	return 0;
 8000fbc:	2000      	movs	r0, #0
}
 8000fbe:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8000fc0:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000fc4:	e7fb      	b.n	8000fbe <shell_start+0x22>
 8000fc6:	bf00      	nop
 8000fc8:	0800986d 	.word	0x0800986d

08000fcc <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
 8000fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fd0:	6883      	ldr	r3, [r0, #8]
 8000fd2:	f3bf 8f5b 	dmb	ish
 8000fd6:	b0ad      	sub	sp, #180	; 0xb4
 8000fd8:	4604      	mov	r4, r0
 8000fda:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000fde:	e853 2f00 	ldrex	r2, [r3]
 8000fe2:	f042 0208 	orr.w	r2, r2, #8
 8000fe6:	e843 2100 	strex	r1, r2, [r3]
 8000fea:	2900      	cmp	r1, #0
 8000fec:	d1f7      	bne.n	8000fde <shell_process+0x12>
 8000fee:	f3bf 8f5b 	dmb	ish
	internal.flags.processing = 1U;

	(void)atomic_or((atomic_t *)&shell->ctx->internal.value,
			internal.value);

	switch (shell->ctx->state) {
 8000ff2:	68a3      	ldr	r3, [r4, #8]
 8000ff4:	791b      	ldrb	r3, [r3, #4]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	f040 8383 	bne.w	8001702 <shell_process+0x736>
	size_t count = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	930b      	str	r3, [sp, #44]	; 0x2c
		(void)shell->iface->api->read(shell->iface, &data,
 8001000:	6860      	ldr	r0, [r4, #4]
 8001002:	6803      	ldr	r3, [r0, #0]
 8001004:	2201      	movs	r2, #1
 8001006:	691d      	ldr	r5, [r3, #16]
 8001008:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
 800100c:	ab0b      	add	r3, sp, #44	; 0x2c
 800100e:	47a8      	blx	r5
		if (count == 0) {
 8001010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 8375 	beq.w	8001702 <shell_process+0x736>
		if (ascii_filter(data) != 0) {
 8001018:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
	return (u8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 800101c:	0608      	lsls	r0, r1, #24
 800101e:	d4ef      	bmi.n	8001000 <shell_process+0x34>
		switch (shell->ctx->receive_state) {
 8001020:	68a0      	ldr	r0, [r4, #8]
 8001022:	7943      	ldrb	r3, [r0, #5]
 8001024:	2b02      	cmp	r3, #2
 8001026:	f200 836a 	bhi.w	80016fe <shell_process+0x732>
 800102a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800102e:	0003      	.short	0x0003
 8001030:	02ff02da 	.word	0x02ff02da
	if ((data != '\r') && (data != '\n')) {
 8001034:	290d      	cmp	r1, #13
 8001036:	d01b      	beq.n	8001070 <shell_process+0xa4>
 8001038:	290a      	cmp	r1, #10
 800103a:	d019      	beq.n	8001070 <shell_process+0xa4>
	return shell->ctx->internal.flags.last_nl;
}

static inline void flag_last_nl_set(const struct shell *shell, u8_t val)
{
	shell->ctx->internal.flags.last_nl = val;
 800103c:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8001040:	f36f 230f 	bfc	r3, #8, #8
 8001044:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
			switch (data) {
 8001048:	2909      	cmp	r1, #9
 800104a:	d055      	beq.n	80010f8 <shell_process+0x12c>
 800104c:	d83a      	bhi.n	80010c4 <shell_process+0xf8>
 800104e:	2900      	cmp	r1, #0
 8001050:	d0d6      	beq.n	8001000 <shell_process+0x34>
 8001052:	2908      	cmp	r1, #8
 8001054:	f000 8229 	beq.w	80014aa <shell_process+0x4de>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
 8001058:	f1a1 0320 	sub.w	r3, r1, #32
				if (isprint((int) data)) {
 800105c:	2b5e      	cmp	r3, #94	; 0x5e
 800105e:	f200 8233 	bhi.w	80014c8 <shell_process+0x4fc>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 8001062:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8001066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800106a:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
 800106e:	e11f      	b.n	80012b0 <shell_process+0x2e4>
	return shell->ctx->internal.flags.last_nl;
 8001070:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
	if ((flag_last_nl_get(shell) == 0U) ||
 8001074:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001078:	d005      	beq.n	8001086 <shell_process+0xba>
 800107a:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
 800107e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001082:	4299      	cmp	r1, r3
 8001084:	d1e0      	bne.n	8001048 <shell_process+0x7c>
	shell->ctx->internal.flags.last_nl = val;
 8001086:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 800108a:	f361 230f 	bfi	r3, r1, #8, #8
 800108e:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
				if (!shell->ctx->cmd_buff_len &&
 8001092:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001094:	b993      	cbnz	r3, 80010bc <shell_process+0xf0>
 8001096:	69c2      	ldr	r2, [r0, #28]
 8001098:	b982      	cbnz	r2, 80010bc <shell_process+0xf0>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 800109a:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 800109e:	f362 1386 	bfi	r3, r2, #6, #1
 80010a2:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	shell_history_mode_exit(shell->history);
 80010a6:	68e0      	ldr	r0, [r4, #12]
 80010a8:	f006 f9ec 	bl	8007484 <shell_history_mode_exit>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 80010ac:	4985      	ldr	r1, [pc, #532]	; (80012c4 <shell_process+0x2f8>)
 80010ae:	6960      	ldr	r0, [r4, #20]
 80010b0:	f005 fcc1 	bl	8006a36 <shell_raw_fprintf>
		state_set(shell, SHELL_STATE_ACTIVE);
 80010b4:	4620      	mov	r0, r4
 80010b6:	f005 fcd4 	bl	8006a62 <state_set.constprop.31>
		break;
 80010ba:	e7a1      	b.n	8001000 <shell_process+0x34>
					(void)execute(shell);
 80010bc:	4620      	mov	r0, r4
 80010be:	f7ff fdbb 	bl	8000c38 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
 80010c2:	e7f7      	b.n	80010b4 <shell_process+0xe8>
 80010c4:	291b      	cmp	r1, #27
 80010c6:	d014      	beq.n	80010f2 <shell_process+0x126>
 80010c8:	297f      	cmp	r1, #127	; 0x7f
 80010ca:	d1c5      	bne.n	8001058 <shell_process+0x8c>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80010cc:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
 80010d0:	075f      	lsls	r7, r3, #29
 80010d2:	d595      	bpl.n	8001000 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 80010d4:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 80010d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010dc:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	return shell->ctx->internal.flags.mode_delete == 1 ? true : false;
 80010e0:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
					if (flag_mode_delete_get(shell)) {
 80010e4:	069e      	lsls	r6, r3, #26
 80010e6:	f100 81eb 	bmi.w	80014c0 <shell_process+0x4f4>
		shell_op_char_delete(shell);
 80010ea:	4620      	mov	r0, r4
 80010ec:	f006 f87c 	bl	80071e8 <shell_op_char_delete>
		break;
 80010f0:	e786      	b.n	8001000 <shell_process+0x34>
	shell->ctx->receive_state = state;
 80010f2:	2301      	movs	r3, #1
 80010f4:	7143      	strb	r3, [r0, #5]
 80010f6:	e783      	b.n	8001000 <shell_process+0x34>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80010f8:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
 80010fc:	f3c3 0980 	ubfx	r9, r3, #2, #1
				if (flag_echo_get(shell)) {
 8001100:	f1b9 0f00 	cmp.w	r9, #0
 8001104:	f43f af7c 	beq.w	8001000 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 8001108:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 800110c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001110:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	if (compl_space == 0U) {
 8001114:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001116:	2bff      	cmp	r3, #255	; 0xff
 8001118:	f43f af72 	beq.w	8001000 <shell_process+0x34>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
 800111c:	8e82      	ldrh	r2, [r0, #52]	; 0x34
 800111e:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8001122:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8001126:	f006 ff0d 	bl	8007f44 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
 800112a:	68a2      	ldr	r2, [r4, #8]
 800112c:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 800112e:	4413      	add	r3, r2
 8001130:	2100      	movs	r1, #0
 8001132:	f883 1138 	strb.w	r1, [r3, #312]	; 0x138
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
 8001136:	f502 729c 	add.w	r2, r2, #312	; 0x138
 800113a:	230c      	movs	r3, #12
 800113c:	a91f      	add	r1, sp, #124	; 0x7c
 800113e:	a80d      	add	r0, sp, #52	; 0x34
 8001140:	f005 fd3c 	bl	8006bbc <shell_make_argv>
	int space = isspace((int)shell->ctx->cmd_buff[
 8001144:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
 8001146:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
	int space = isspace((int)shell->ctx->cmd_buff[
 8001148:	4413      	add	r3, r2
 800114a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
 800114e:	2b20      	cmp	r3, #32
 8001150:	d054      	beq.n	80011fc <shell_process+0x230>
 8001152:	3b09      	subs	r3, #9
 8001154:	2b04      	cmp	r3, #4
 8001156:	bf8c      	ite	hi
 8001158:	2300      	movhi	r3, #0
 800115a:	2301      	movls	r3, #1
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
 800115c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800115e:	b119      	cbz	r1, 8001168 <shell_process+0x19c>
 8001160:	2b00      	cmp	r3, #0
 8001162:	d14e      	bne.n	8001202 <shell_process+0x236>
 8001164:	2901      	cmp	r1, #1
 8001166:	d14b      	bne.n	8001200 <shell_process+0x234>
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
 8001168:	2500      	movs	r5, #0
 800116a:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 800116c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800116e:	aa2c      	add	r2, sp, #176	; 0xb0
 8001170:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
 8001174:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 8001176:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
 800117a:	4650      	mov	r0, sl
 800117c:	f005 fc55 	bl	8006a2a <shell_strlen>
	size_t idx = 0;
 8001180:	46b0      	mov	r8, r6
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
 8001182:	9004      	str	r0, [sp, #16]
	*longest = 0U;
 8001184:	9605      	str	r6, [sp, #20]
	size_t first = 0;
 8001186:	9603      	str	r6, [sp, #12]
	bool found = false;
 8001188:	46b3      	mov	fp, r6
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 800118a:	af1a      	add	r7, sp, #104	; 0x68
 800118c:	2d00      	cmp	r5, #0
 800118e:	d045      	beq.n	800121c <shell_process+0x250>
 8001190:	68a9      	ldr	r1, [r5, #8]
 8001192:	1c2b      	adds	r3, r5, #0
 8001194:	bf18      	it	ne
 8001196:	2301      	movne	r3, #1
 8001198:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800119c:	ab15      	add	r3, sp, #84	; 0x54
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	9a02      	ldr	r2, [sp, #8]
 80011a2:	4643      	mov	r3, r8
 80011a4:	4620      	mov	r0, r4
 80011a6:	f000 fb33 	bl	8001810 <shell_cmd_get>
		if (!candidate) {
 80011aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d039      	beq.n	8001224 <shell_process+0x258>
	return entry->syntax &&
 80011b0:	6818      	ldr	r0, [r3, #0]
		(entry->handler == NULL) && (entry->subcmd == NULL);
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d034      	beq.n	8001220 <shell_process+0x254>
	return entry->syntax &&
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	d131      	bne.n	8001220 <shell_process+0x254>
		(entry->handler == NULL) && (entry->subcmd == NULL);
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	fab3 f383 	clz	r3, r3
 80011c2:	095b      	lsrs	r3, r3, #5
	return (strncmp(candidate, str, len) == 0) ? true : false;
 80011c4:	9a04      	ldr	r2, [sp, #16]
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	4651      	mov	r1, sl
 80011ca:	f006 fe85 	bl	8007ed8 <strncmp>
		if (!is_empty && is_candidate) {
 80011ce:	9b02      	ldr	r3, [sp, #8]
 80011d0:	4303      	orrs	r3, r0
 80011d2:	d110      	bne.n	80011f6 <shell_process+0x22a>
			size_t slen = strlen(candidate->syntax);
 80011d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	f006 fe6b 	bl	8007eb2 <strlen>
			*longest = (slen > *longest) ? slen : *longest;
 80011dc:	9b05      	ldr	r3, [sp, #20]
 80011de:	4283      	cmp	r3, r0
 80011e0:	bf38      	it	cc
 80011e2:	4603      	movcc	r3, r0
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	9305      	str	r3, [sp, #20]
			(*cnt)++;
 80011e8:	3601      	adds	r6, #1
			if (!found) {
 80011ea:	f1bb 0f00 	cmp.w	fp, #0
 80011ee:	d102      	bne.n	80011f6 <shell_process+0x22a>
				*first_idx = idx;
 80011f0:	f8cd 800c 	str.w	r8, [sp, #12]
			found = true;
 80011f4:	46cb      	mov	fp, r9
		idx++;
 80011f6:	f108 0801 	add.w	r8, r8, #1
 80011fa:	e7c7      	b.n	800118c <shell_process+0x1c0>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e7ad      	b.n	800115c <shell_process+0x190>
	search_argc = space ? *argc : *argc - 1;
 8001200:	3901      	subs	r1, #1
	*cmd = shell_get_last_command(shell, search_argc, *argv,
 8001202:	2300      	movs	r3, #0
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	ab10      	add	r3, sp, #64	; 0x40
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	aa1f      	add	r2, sp, #124	; 0x7c
 800120c:	ab0c      	add	r3, sp, #48	; 0x30
 800120e:	4620      	mov	r0, r4
 8001210:	f005 fdc0 	bl	8006d94 <shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
 8001214:	4605      	mov	r5, r0
 8001216:	2800      	cmp	r0, #0
 8001218:	d1a8      	bne.n	800116c <shell_process+0x1a0>
 800121a:	e6f1      	b.n	8001000 <shell_process+0x34>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 800121c:	4629      	mov	r1, r5
 800121e:	e7b8      	b.n	8001192 <shell_process+0x1c6>
		(entry->handler == NULL) && (entry->subcmd == NULL);
 8001220:	2300      	movs	r3, #0
 8001222:	e7cf      	b.n	80011c4 <shell_process+0x1f8>
	if (cnt == 1) {
 8001224:	2e01      	cmp	r6, #1
 8001226:	d14f      	bne.n	80012c8 <shell_process+0x2fc>
		autocomplete(shell, cmd, argv[arg_idx], first);
 8001228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800122a:	aa2c      	add	r2, sp, #176	; 0xb0
 800122c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
 8001230:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8001234:	f005 fbf9 	bl	8006a2a <shell_strlen>
 8001238:	4606      	mov	r6, r0
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 800123a:	b105      	cbz	r5, 800123e <shell_process+0x272>
 800123c:	68ad      	ldr	r5, [r5, #8]
 800123e:	68a3      	ldr	r3, [r4, #8]
 8001240:	3308      	adds	r3, #8
 8001242:	e9cd 7300 	strd	r7, r3, [sp]
 8001246:	4629      	mov	r1, r5
 8001248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800124c:	4620      	mov	r0, r4
 800124e:	f000 fadf 	bl	8001810 <shell_cmd_get>
	cmd_len = shell_strlen(match->syntax);
 8001252:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	f005 fbe8 	bl	8006a2a <shell_strlen>
	if (cmd_len != arg_len) {
 800125a:	4286      	cmp	r6, r0
 800125c:	d007      	beq.n	800126e <shell_process+0x2a2>
					   match->syntax + arg_len,
 800125e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
		shell_op_completion_insert(shell,
 8001260:	6819      	ldr	r1, [r3, #0]
 8001262:	1b82      	subs	r2, r0, r6
 8001264:	b292      	uxth	r2, r2
 8001266:	4431      	add	r1, r6
 8001268:	4620      	mov	r0, r4
 800126a:	f005 ffbb 	bl	80071e4 <shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
 800126e:	68a3      	ldr	r3, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
 8001270:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
	if (!isspace((int) shell->ctx->cmd_buff[
 8001272:	441a      	add	r2, r3
 8001274:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001278:	2a20      	cmp	r2, #32
 800127a:	d01d      	beq.n	80012b8 <shell_process+0x2ec>
 800127c:	3a09      	subs	r2, #9
 800127e:	2a04      	cmp	r2, #4
 8001280:	d91a      	bls.n	80012b8 <shell_process+0x2ec>
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
 8001282:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
		if (flag_insert_mode_get(shell)) {
 8001286:	07d2      	lsls	r2, r2, #31
 8001288:	d511      	bpl.n	80012ae <shell_process+0x2e2>
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
 800128a:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 800128e:	f36f 0200 	bfc	r2, #0, #1
 8001292:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			shell_op_char_insert(shell, ' ');
 8001296:	2120      	movs	r1, #32
 8001298:	4620      	mov	r0, r4
 800129a:	f000 fc19 	bl	8001ad0 <shell_op_char_insert>
			flag_insert_mode_set(shell, true);
 800129e:	68a2      	ldr	r2, [r4, #8]
 80012a0:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 80012a4:	f043 0301 	orr.w	r3, r3, #1
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 80012a8:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
 80012ac:	e6a8      	b.n	8001000 <shell_process+0x34>
			shell_op_char_insert(shell, ' ');
 80012ae:	2120      	movs	r1, #32
					shell_op_char_insert(shell, data);
 80012b0:	4620      	mov	r0, r4
 80012b2:	f000 fc0d 	bl	8001ad0 <shell_op_char_insert>
 80012b6:	e6a3      	b.n	8001000 <shell_process+0x34>
		shell_op_cursor_move(shell, 1);
 80012b8:	2101      	movs	r1, #1
 80012ba:	4620      	mov	r0, r4
 80012bc:	f005 fe56 	bl	8006f6c <shell_op_cursor_move>
 80012c0:	e69e      	b.n	8001000 <shell_process+0x34>
 80012c2:	bf00      	nop
 80012c4:	0800986e 	.word	0x0800986e
 80012c8:	9306      	str	r3, [sp, #24]
	} else if (cnt > 1) {
 80012ca:	f67f ae99 	bls.w	8001000 <shell_process+0x34>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
 80012ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	longest_option += shell_strlen(tab);
 80012d0:	f8df 8354 	ldr.w	r8, [pc, #852]	; 8001628 <shell_process+0x65c>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
 80012d4:	ab2c      	add	r3, sp, #176	; 0xb0
 80012d6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80012da:	f852 3c34 	ldr.w	r3, [r2, #-52]
 80012de:	9304      	str	r3, [sp, #16]
	size_t str_len = shell_strlen(str);
 80012e0:	4618      	mov	r0, r3
 80012e2:	f005 fba2 	bl	8006a2a <shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 80012e6:	68a2      	ldr	r2, [r4, #8]
 80012e8:	9b06      	ldr	r3, [sp, #24]
 80012ea:	f8dd 900c 	ldr.w	r9, [sp, #12]
	size_t str_len = shell_strlen(str);
 80012ee:	9008      	str	r0, [sp, #32]
		shell->ctx->vt100_ctx.printed_cmd = 0;
 80012f0:	8613      	strh	r3, [r2, #48]	; 0x30
 80012f2:	9606      	str	r6, [sp, #24]
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 80012f4:	2d00      	cmp	r5, #0
 80012f6:	f000 8086 	beq.w	8001406 <shell_process+0x43a>
 80012fa:	68a9      	ldr	r1, [r5, #8]
 80012fc:	68a3      	ldr	r3, [r4, #8]
 80012fe:	9a02      	ldr	r2, [sp, #8]
 8001300:	3308      	adds	r3, #8
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	ab1a      	add	r3, sp, #104	; 0x68
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	4620      	mov	r0, r4
 800130a:	464b      	mov	r3, r9
 800130c:	f000 fa80 	bl	8001810 <shell_cmd_get>
		is_empty = is_empty_cmd(match);
 8001310:	9b1a      	ldr	r3, [sp, #104]	; 0x68
	return entry->syntax &&
 8001312:	6818      	ldr	r0, [r3, #0]
		idx++;
 8001314:	f109 0901 	add.w	r9, r9, #1
		(entry->handler == NULL) && (entry->subcmd == NULL);
 8001318:	2800      	cmp	r0, #0
 800131a:	d176      	bne.n	800140a <shell_process+0x43e>
		tab_item_print(shell, match->syntax, longest);
 800131c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800131e:	f8d3 a000 	ldr.w	sl, [r3]
	if (option == NULL) {
 8001322:	f1ba 0f00 	cmp.w	sl, #0
 8001326:	f040 8082 	bne.w	800142e <shell_process+0x462>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 800132a:	68a3      	ldr	r3, [r4, #8]
 800132c:	f8a3 a030 	strh.w	sl, [r3, #48]	; 0x30
	while (cnt) {
 8001330:	9b06      	ldr	r3, [sp, #24]
 8001332:	3b01      	subs	r3, #1
 8001334:	9306      	str	r3, [sp, #24]
 8001336:	d1dd      	bne.n	80012f4 <shell_process+0x328>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8001338:	49b5      	ldr	r1, [pc, #724]	; (8001610 <shell_process+0x644>)
 800133a:	6960      	ldr	r0, [r4, #20]
 800133c:	f005 fb7b 	bl	8006a36 <shell_raw_fprintf>
	shell_print_prompt_and_cmd(shell);
 8001340:	4620      	mov	r0, r4
 8001342:	f000 fbf7 	bl	8001b34 <shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
 8001346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001348:	aa2c      	add	r2, sp, #176	; 0xb0
 800134a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
 800134e:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8001352:	f005 fb6a 	bl	8006a2a <shell_strlen>
	size_t idx = first + 1;
 8001356:	9b03      	ldr	r3, [sp, #12]
	u16_t arg_len = shell_strlen(arg);
 8001358:	4680      	mov	r8, r0
	size_t idx = first + 1;
 800135a:	f103 0901 	add.w	r9, r3, #1
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 800135e:	2d00      	cmp	r5, #0
 8001360:	f000 809d 	beq.w	800149e <shell_process+0x4d2>
 8001364:	68a9      	ldr	r1, [r5, #8]
 8001366:	ab15      	add	r3, sp, #84	; 0x54
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	ab0e      	add	r3, sp, #56	; 0x38
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	4620      	mov	r0, r4
 8001370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001374:	f000 fa4c 	bl	8001810 <shell_cmd_get>
	strncpy(shell->ctx->temp_buff, match->syntax,
 8001378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800137a:	68a0      	ldr	r0, [r4, #8]
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	22ff      	movs	r2, #255	; 0xff
 8001380:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8001384:	f006 fd74 	bl	8007e70 <strncpy>
	*str = match->syntax;
 8001388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800138a:	f8d3 a000 	ldr.w	sl, [r3]
	u16_t common = UINT16_MAX;
 800138e:	f64f 77ff 	movw	r7, #65535	; 0xffff
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 8001392:	2d00      	cmp	r5, #0
 8001394:	f000 8087 	beq.w	80014a6 <shell_process+0x4da>
 8001398:	68a9      	ldr	r1, [r5, #8]
 800139a:	9a02      	ldr	r2, [sp, #8]
 800139c:	ab1a      	add	r3, sp, #104	; 0x68
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	ab0f      	add	r3, sp, #60	; 0x3c
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	4620      	mov	r0, r4
 80013a6:	464b      	mov	r3, r9
 80013a8:	f000 fa32 	bl	8001810 <shell_cmd_get>
		if (match2 == NULL) {
 80013ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 80013ae:	f109 0b01 	add.w	fp, r9, #1
		if (match2 == NULL) {
 80013b2:	b1e3      	cbz	r3, 80013ee <shell_process+0x422>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
 80013b4:	6818      	ldr	r0, [r3, #0]
static size_t str_common(const char *s1, const char *s2, size_t n)
 80013b6:	68a3      	ldr	r3, [r4, #8]
	size_t common = 0;
 80013b8:	2200      	movs	r2, #0
 80013ba:	f503 739c 	add.w	r3, r3, #312	; 0x138
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 80013be:	f813 cb01 	ldrb.w	ip, [r3], #1
 80013c2:	5c81      	ldrb	r1, [r0, r2]
 80013c4:	4561      	cmp	r1, ip
 80013c6:	d105      	bne.n	80013d4 <shell_process+0x408>
 80013c8:	b121      	cbz	r1, 80013d4 <shell_process+0x408>
		common++;
 80013ca:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 80013cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013d0:	428a      	cmp	r2, r1
 80013d2:	d1f4      	bne.n	80013be <shell_process+0x3f2>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
 80013d4:	f1b8 0f00 	cmp.w	r8, #0
 80013d8:	d001      	beq.n	80013de <shell_process+0x412>
 80013da:	4542      	cmp	r2, r8
 80013dc:	db61      	blt.n	80014a2 <shell_process+0x4d6>
			common = (curr_common < common) ? curr_common : common;
 80013de:	4297      	cmp	r7, r2
			--cnt;
 80013e0:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
 80013e4:	bfa8      	it	ge
 80013e6:	4617      	movge	r7, r2
	while (cnt > 1) {
 80013e8:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
 80013ea:	b2bf      	uxth	r7, r7
	while (cnt > 1) {
 80013ec:	d159      	bne.n	80014a2 <shell_process+0x4d6>
	if (common) {
 80013ee:	2f00      	cmp	r7, #0
 80013f0:	f43f ae06 	beq.w	8001000 <shell_process+0x34>
		shell_op_completion_insert(shell, &completion[arg_len],
 80013f4:	eba7 0208 	sub.w	r2, r7, r8
 80013f8:	b292      	uxth	r2, r2
 80013fa:	eb0a 0108 	add.w	r1, sl, r8
 80013fe:	4620      	mov	r0, r4
 8001400:	f005 fef0 	bl	80071e4 <shell_op_completion_insert>
 8001404:	e5fc      	b.n	8001000 <shell_process+0x34>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 8001406:	4629      	mov	r1, r5
 8001408:	e778      	b.n	80012fc <shell_process+0x330>
	return entry->syntax &&
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	b91a      	cbnz	r2, 8001416 <shell_process+0x44a>
		(entry->handler == NULL) && (entry->subcmd == NULL);
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	f43f af6f 	beq.w	80012f4 <shell_process+0x328>
		if (is_empty || (str && match->syntax &&
 8001416:	9b04      	ldr	r3, [sp, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	f43f af7f 	beq.w	800131c <shell_process+0x350>
	return (strncmp(candidate, str, len) == 0) ? true : false;
 800141e:	9a08      	ldr	r2, [sp, #32]
 8001420:	9904      	ldr	r1, [sp, #16]
 8001422:	f006 fd59 	bl	8007ed8 <strncmp>
		if (is_empty || (str && match->syntax &&
 8001426:	2800      	cmp	r0, #0
 8001428:	f43f af78 	beq.w	800131c <shell_process+0x350>
 800142c:	e762      	b.n	80012f4 <shell_process+0x328>
	longest_option += shell_strlen(tab);
 800142e:	4640      	mov	r0, r8
 8001430:	f005 fafb 	bl	8006a2a <shell_strlen>
 8001434:	9b05      	ldr	r3, [sp, #20]
 8001436:	4418      	add	r0, r3
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 8001438:	68a3      	ldr	r3, [r4, #8]
	longest_option += shell_strlen(tab);
 800143a:	fa1f fb80 	uxth.w	fp, r0
			- shell_strlen(tab)) / longest_option;
 800143e:	4640      	mov	r0, r8
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 8001440:	8d5f      	ldrh	r7, [r3, #42]	; 0x2a
			- shell_strlen(tab)) / longest_option;
 8001442:	f005 faf2 	bl	8006a2a <shell_strlen>
 8001446:	9009      	str	r0, [sp, #36]	; 0x24
	diff = longest_option - shell_strlen(option);
 8001448:	4650      	mov	r0, sl
 800144a:	f005 faee 	bl	8006a2a <shell_strlen>
 800144e:	ebab 0000 	sub.w	r0, fp, r0
 8001452:	b283      	uxth	r3, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8001454:	68a1      	ldr	r1, [r4, #8]
	diff = longest_option - shell_strlen(option);
 8001456:	9307      	str	r3, [sp, #28]
			- shell_strlen(tab)) / longest_option;
 8001458:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 800145a:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
			- shell_strlen(tab)) / longest_option;
 800145c:	1aff      	subs	r7, r7, r3
 800145e:	fb97 fbfb 	sdiv	fp, r7, fp
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8001462:	fa1f fb8b 	uxth.w	fp, fp
 8001466:	1c50      	adds	r0, r2, #1
 8001468:	fbb2 f3fb 	udiv	r3, r2, fp
 800146c:	fb0b 2213 	mls	r2, fp, r3, r2
 8001470:	b292      	uxth	r2, r2
 8001472:	8608      	strh	r0, [r1, #48]	; 0x30
 8001474:	b962      	cbnz	r2, 8001490 <shell_process+0x4c4>
		shell_internal_fprintf(shell, SHELL_OPTION, "\n%s%s", tab,
 8001476:	f8cd a000 	str.w	sl, [sp]
 800147a:	4643      	mov	r3, r8
 800147c:	4a65      	ldr	r2, [pc, #404]	; (8001614 <shell_process+0x648>)
 800147e:	2107      	movs	r1, #7
 8001480:	4620      	mov	r0, r4
 8001482:	f005 fe70 	bl	8007166 <shell_internal_fprintf>
	shell_op_cursor_horiz_move(shell, diff);
 8001486:	9907      	ldr	r1, [sp, #28]
 8001488:	4620      	mov	r0, r4
 800148a:	f000 fa03 	bl	8001894 <shell_op_cursor_horiz_move>
 800148e:	e74f      	b.n	8001330 <shell_process+0x364>
		shell_internal_fprintf(shell, SHELL_OPTION, "%s", option);
 8001490:	4653      	mov	r3, sl
 8001492:	4a61      	ldr	r2, [pc, #388]	; (8001618 <shell_process+0x64c>)
 8001494:	2107      	movs	r1, #7
 8001496:	4620      	mov	r0, r4
 8001498:	f005 fe65 	bl	8007166 <shell_internal_fprintf>
 800149c:	e7f3      	b.n	8001486 <shell_process+0x4ba>
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 800149e:	4629      	mov	r1, r5
 80014a0:	e761      	b.n	8001366 <shell_process+0x39a>
 80014a2:	46d9      	mov	r9, fp
 80014a4:	e775      	b.n	8001392 <shell_process+0x3c6>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 80014a6:	4629      	mov	r1, r5
 80014a8:	e777      	b.n	800139a <shell_process+0x3ce>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80014aa:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
 80014ae:	075b      	lsls	r3, r3, #29
 80014b0:	f57f ada6 	bpl.w	8001000 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 80014b4:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 80014b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014bc:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
						shell_op_char_backspace(shell);
 80014c0:	4620      	mov	r0, r4
 80014c2:	f005 feac 	bl	800721e <shell_op_char_backspace>
 80014c6:	e59b      	b.n	8001000 <shell_process+0x34>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80014c8:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				} else if (flag_echo_get(shell)) {
 80014cc:	075d      	lsls	r5, r3, #29
 80014ce:	f57f ad97 	bpl.w	8001000 <shell_process+0x34>
	switch (data) {
 80014d2:	3901      	subs	r1, #1
 80014d4:	2916      	cmp	r1, #22
 80014d6:	f63f ad93 	bhi.w	8001000 <shell_process+0x34>
 80014da:	a301      	add	r3, pc, #4	; (adr r3, 80014e0 <shell_process+0x514>)
 80014dc:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80014e0:	080016c9 	.word	0x080016c9
 80014e4:	0800153d 	.word	0x0800153d
 80014e8:	08001545 	.word	0x08001545
 80014ec:	080010eb 	.word	0x080010eb
 80014f0:	080016bd 	.word	0x080016bd
 80014f4:	0800156b 	.word	0x0800156b
 80014f8:	08001001 	.word	0x08001001
 80014fc:	08001001 	.word	0x08001001
 8001500:	08001001 	.word	0x08001001
 8001504:	08001001 	.word	0x08001001
 8001508:	08001573 	.word	0x08001573
 800150c:	0800157b 	.word	0x0800157b
 8001510:	08001001 	.word	0x08001001
 8001514:	08001597 	.word	0x08001597
 8001518:	08001001 	.word	0x08001001
 800151c:	080015a1 	.word	0x080015a1
 8001520:	08001001 	.word	0x08001001
 8001524:	08001001 	.word	0x08001001
 8001528:	08001001 	.word	0x08001001
 800152c:	08001001 	.word	0x08001001
 8001530:	080015a5 	.word	0x080015a5
 8001534:	08001001 	.word	0x08001001
 8001538:	080015d1 	.word	0x080015d1
		shell_op_left_arrow(shell);
 800153c:	4620      	mov	r0, r4
 800153e:	f005 fd80 	bl	8007042 <shell_op_left_arrow>
		break;
 8001542:	e55d      	b.n	8001000 <shell_process+0x34>
		shell_op_cursor_end_move(shell);
 8001544:	4620      	mov	r0, r4
 8001546:	f005 fd75 	bl	8007034 <shell_op_cursor_end_move>
		if (!shell_cursor_in_empty_line(shell)) {
 800154a:	4620      	mov	r0, r4
 800154c:	f005 fcfa 	bl	8006f44 <shell_cursor_in_empty_line>
 8001550:	b918      	cbnz	r0, 800155a <shell_process+0x58e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8001552:	492f      	ldr	r1, [pc, #188]	; (8001610 <shell_process+0x644>)
 8001554:	6960      	ldr	r0, [r4, #20]
 8001556:	f005 fa6e 	bl	8006a36 <shell_raw_fprintf>
		flag_history_exit_set(shell, true);
 800155a:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 800155c:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 8001560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001564:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
 8001568:	e5a4      	b.n	80010b4 <shell_process+0xe8>
		shell_op_right_arrow(shell);
 800156a:	4620      	mov	r0, r4
 800156c:	f005 fd71 	bl	8007052 <shell_op_right_arrow>
		break;
 8001570:	e546      	b.n	8001000 <shell_process+0x34>
		shell_op_delete_from_cursor(shell);
 8001572:	4620      	mov	r0, r4
 8001574:	f005 fd76 	bl	8007064 <shell_op_delete_from_cursor>
		break;
 8001578:	e542      	b.n	8001000 <shell_process+0x34>
		SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 800157a:	6960      	ldr	r0, [r4, #20]
 800157c:	4a27      	ldr	r2, [pc, #156]	; (800161c <shell_process+0x650>)
 800157e:	4926      	ldr	r1, [pc, #152]	; (8001618 <shell_process+0x64c>)
 8001580:	f005 fa59 	bl	8006a36 <shell_raw_fprintf>
		SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
 8001584:	6960      	ldr	r0, [r4, #20]
 8001586:	4a26      	ldr	r2, [pc, #152]	; (8001620 <shell_process+0x654>)
 8001588:	4923      	ldr	r1, [pc, #140]	; (8001618 <shell_process+0x64c>)
 800158a:	f005 fa54 	bl	8006a36 <shell_raw_fprintf>
		shell_print_prompt_and_cmd(shell);
 800158e:	4620      	mov	r0, r4
 8001590:	f000 fad0 	bl	8001b34 <shell_print_prompt_and_cmd>
		break;
 8001594:	e534      	b.n	8001000 <shell_process+0x34>
		history_handle(shell, false);
 8001596:	2100      	movs	r1, #0
		history_handle(shell, true);
 8001598:	4620      	mov	r0, r4
 800159a:	f7ff fafb 	bl	8000b94 <history_handle>
		break;
 800159e:	e52f      	b.n	8001000 <shell_process+0x34>
		history_handle(shell, true);
 80015a0:	2101      	movs	r1, #1
 80015a2:	e7f9      	b.n	8001598 <shell_process+0x5cc>
		shell_op_cursor_home_move(shell);
 80015a4:	4620      	mov	r0, r4
 80015a6:	f005 fd3f 	bl	8007028 <shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
 80015aa:	68a3      	ldr	r3, [r4, #8]
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 80015ac:	491a      	ldr	r1, [pc, #104]	; (8001618 <shell_process+0x64c>)
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
 80015b4:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
 80015b6:	865a      	strh	r2, [r3, #50]	; 0x32
		flag_history_exit_set(shell, true);
 80015b8:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 80015ba:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 80015be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c2:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 80015c6:	6960      	ldr	r0, [r4, #20]
 80015c8:	4a16      	ldr	r2, [pc, #88]	; (8001624 <shell_process+0x658>)
 80015ca:	f005 fa34 	bl	8006a36 <shell_raw_fprintf>
 80015ce:	e517      	b.n	8001000 <shell_process+0x34>
		shell_op_word_remove(shell);
 80015d0:	4620      	mov	r0, r4
 80015d2:	f000 f9ff 	bl	80019d4 <shell_op_word_remove>
		flag_history_exit_set(shell, true);
 80015d6:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 80015d8:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 80015dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e0:	e662      	b.n	80012a8 <shell_process+0x2dc>
			if (data == '[') {
 80015e2:	295b      	cmp	r1, #91	; 0x5b
 80015e4:	d101      	bne.n	80015ea <shell_process+0x61e>
	shell->ctx->receive_state = state;
 80015e6:	2302      	movs	r3, #2
 80015e8:	e584      	b.n	80010f4 <shell_process+0x128>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80015ea:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
			} else if (flag_echo_get(shell)) {
 80015ee:	0758      	lsls	r0, r3, #29
 80015f0:	d506      	bpl.n	8001600 <shell_process+0x634>
	if (data == SHELL_VT100_ASCII_ALT_B) {
 80015f2:	2962      	cmp	r1, #98	; 0x62
 80015f4:	d108      	bne.n	8001608 <shell_process+0x63c>
		shell_op_cursor_word_move(shell, -1);
 80015f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		shell_op_cursor_word_move(shell, 1);
 80015fa:	4620      	mov	r0, r4
 80015fc:	f005 fcda 	bl	8006fb4 <shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
 8001600:	68a3      	ldr	r3, [r4, #8]
 8001602:	2200      	movs	r2, #0
 8001604:	715a      	strb	r2, [r3, #5]
 8001606:	e4fb      	b.n	8001000 <shell_process+0x34>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
 8001608:	2966      	cmp	r1, #102	; 0x66
 800160a:	d1f9      	bne.n	8001600 <shell_process+0x634>
		shell_op_cursor_word_move(shell, 1);
 800160c:	2101      	movs	r1, #1
 800160e:	e7f4      	b.n	80015fa <shell_process+0x62e>
 8001610:	0800986e 	.word	0x0800986e
 8001614:	08009867 	.word	0x08009867
 8001618:	0800986a 	.word	0x0800986a
 800161c:	080097c4 	.word	0x080097c4
 8001620:	080097c8 	.word	0x080097c8
 8001624:	080097c0 	.word	0x080097c0
 8001628:	0800a1ab 	.word	0x0800a1ab
	shell->ctx->receive_state = state;
 800162c:	2300      	movs	r3, #0
 800162e:	7143      	strb	r3, [r0, #5]
 8001630:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
			if (!flag_echo_get(shell)) {
 8001634:	075a      	lsls	r2, r3, #29
 8001636:	f57f ace3 	bpl.w	8001000 <shell_process+0x34>
			switch (data) {
 800163a:	3931      	subs	r1, #49	; 0x31
 800163c:	291b      	cmp	r1, #27
 800163e:	f63f acdf 	bhi.w	8001000 <shell_process+0x34>
 8001642:	a301      	add	r3, pc, #4	; (adr r3, 8001648 <shell_process+0x67c>)
 8001644:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001648:	080016c5 	.word	0x080016c5
 800164c:	080016d1 	.word	0x080016d1
 8001650:	080016ef 	.word	0x080016ef
 8001654:	080016b9 	.word	0x080016b9
 8001658:	08001001 	.word	0x08001001
 800165c:	08001001 	.word	0x08001001
 8001660:	08001001 	.word	0x08001001
 8001664:	08001001 	.word	0x08001001
 8001668:	08001001 	.word	0x08001001
 800166c:	08001001 	.word	0x08001001
 8001670:	08001001 	.word	0x08001001
 8001674:	08001001 	.word	0x08001001
 8001678:	08001001 	.word	0x08001001
 800167c:	08001001 	.word	0x08001001
 8001680:	08001001 	.word	0x08001001
 8001684:	08001001 	.word	0x08001001
 8001688:	080015a1 	.word	0x080015a1
 800168c:	08001597 	.word	0x08001597
 8001690:	0800156b 	.word	0x0800156b
 8001694:	0800153d 	.word	0x0800153d
 8001698:	08001001 	.word	0x08001001
 800169c:	080016bd 	.word	0x080016bd
 80016a0:	08001001 	.word	0x08001001
 80016a4:	080016c9 	.word	0x080016c9
 80016a8:	08001001 	.word	0x08001001
 80016ac:	08001001 	.word	0x08001001
 80016b0:	08001001 	.word	0x08001001
 80016b4:	080016d5 	.word	0x080016d5
	shell->ctx->receive_state = state;
 80016b8:	2303      	movs	r3, #3
 80016ba:	7143      	strb	r3, [r0, #5]
		shell_op_cursor_end_move(shell);
 80016bc:	4620      	mov	r0, r4
 80016be:	f005 fcb9 	bl	8007034 <shell_op_cursor_end_move>
		break;
 80016c2:	e49d      	b.n	8001000 <shell_process+0x34>
	shell->ctx->receive_state = state;
 80016c4:	2303      	movs	r3, #3
 80016c6:	7143      	strb	r3, [r0, #5]
		shell_op_cursor_home_move(shell);
 80016c8:	4620      	mov	r0, r4
 80016ca:	f005 fcad 	bl	8007028 <shell_op_cursor_home_move>
		break;
 80016ce:	e497      	b.n	8001000 <shell_process+0x34>
	shell->ctx->receive_state = state;
 80016d0:	2303      	movs	r3, #3
 80016d2:	7143      	strb	r3, [r0, #5]
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
 80016d4:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
 80016d8:	f8b0 2258 	ldrh.w	r2, [r0, #600]	; 0x258
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
 80016dc:	f003 0301 	and.w	r3, r3, #1
				flag_insert_mode_set(shell, !status);
 80016e0:	f083 0301 	eor.w	r3, r3, #1
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
 80016e4:	f363 0200 	bfi	r2, r3, #0, #1
 80016e8:	f8a0 2258 	strh.w	r2, [r0, #600]	; 0x258
 80016ec:	e488      	b.n	8001000 <shell_process+0x34>
	shell->ctx->receive_state = state;
 80016ee:	2303      	movs	r3, #3
 80016f0:	7143      	strb	r3, [r0, #5]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80016f2:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
 80016f6:	075b      	lsls	r3, r3, #29
 80016f8:	f57f ac82 	bpl.w	8001000 <shell_process+0x34>
 80016fc:	e4f5      	b.n	80010ea <shell_process+0x11e>
	shell->ctx->receive_state = state;
 80016fe:	2300      	movs	r3, #0
 8001700:	e4f8      	b.n	80010f4 <shell_process+0x128>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8001702:	68a3      	ldr	r3, [r4, #8]
 8001704:	f3bf 8f5b 	dmb	ish
 8001708:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800170c:	e853 2f00 	ldrex	r2, [r3]
 8001710:	f022 0208 	bic.w	r2, r2, #8
 8001714:	e843 2100 	strex	r1, r2, [r3]
 8001718:	2900      	cmp	r1, #0
 800171a:	d1f7      	bne.n	800170c <shell_process+0x740>
 800171c:	f3bf 8f5b 	dmb	ish

	internal.value = 0xFFFFFFFF;
	internal.flags.processing = 0U;
	(void)atomic_and((atomic_t *)&shell->ctx->internal.value,
			 internal.value);
}
 8001720:	b02d      	add	sp, #180	; 0xb4
 8001722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001726:	bf00      	nop

08001728 <shell_thread>:
{
 8001728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800172a:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
 800172c:	6840      	ldr	r0, [r0, #4]
 800172e:	6803      	ldr	r3, [r0, #0]
 8001730:	2100      	movs	r1, #0
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	4798      	blx	r3
	if (err != 0) {
 8001736:	b9c0      	cbnz	r0, 800176a <shell_thread+0x42>
	err = shell_start(shell);
 8001738:	4620      	mov	r0, r4
 800173a:	f7ff fc2f 	bl	8000f9c <shell_start>
	if (err != 0) {
 800173e:	b9a0      	cbnz	r0, 800176a <shell_thread+0x42>
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
 8001740:	68a0      	ldr	r0, [r4, #8]
 8001742:	f500 7027 	add.w	r0, r0, #668	; 0x29c
	return z_impl_k_poll(events, num_events, timeout);
 8001746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800174a:	2103      	movs	r1, #3
 800174c:	f004 fa00 	bl	8005b50 <z_impl_k_poll>
 8001750:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8001752:	68a0      	ldr	r0, [r4, #8]
 8001754:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
 8001758:	f005 f997 	bl	8006a8a <k_mutex_lock.constprop.34>
		if (err != 0) {
 800175c:	b13d      	cbz	r5, 800176e <shell_thread+0x46>
			shell_internal_fprintf(shell, SHELL_ERROR,
 800175e:	462b      	mov	r3, r5
 8001760:	4a20      	ldr	r2, [pc, #128]	; (80017e4 <shell_thread+0xbc>)
 8001762:	2102      	movs	r1, #2
 8001764:	4620      	mov	r0, r4
 8001766:	f005 fcfe 	bl	8007166 <shell_internal_fprintf>
}
 800176a:	b003      	add	sp, #12
 800176c:	bd30      	pop	{r4, r5, pc}
		if (shell->iface->api->update) {
 800176e:	6860      	ldr	r0, [r4, #4]
 8001770:	6803      	ldr	r3, [r0, #0]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	b103      	cbz	r3, 8001778 <shell_thread+0x50>
			shell->iface->api->update(shell->iface);
 8001776:	4798      	blx	r3
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 8001778:	68a5      	ldr	r5, [r4, #8]
		arch_syscall_invoke3(*(uintptr_t *)&signal, *(uintptr_t *)&signaled, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_CHECK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_check(signal, signaled, result);
 800177a:	aa01      	add	r2, sp, #4
 800177c:	4669      	mov	r1, sp
 800177e:	f505 701f 	add.w	r0, r5, #636	; 0x27c
 8001782:	f007 fb01 	bl	8008d88 <z_impl_k_poll_signal_check>
	if (set) {
 8001786:	9b00      	ldr	r3, [sp, #0]
 8001788:	b1b3      	cbz	r3, 80017b8 <shell_thread+0x90>
 */
__syscall void k_poll_signal_reset(struct k_poll_signal *signal);

static inline void z_impl_k_poll_signal_reset(struct k_poll_signal *signal)
{
	signal->signaled = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c5 3284 	str.w	r3, [r5, #644]	; 0x284
	if (flag_processing_get(shell)) {
 8001790:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.processing == 1 ? true : false;
 8001792:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001796:	071b      	lsls	r3, r3, #28
 8001798:	d40a      	bmi.n	80017b0 <shell_thread+0x88>
	err = shell->iface->api->uninit(shell->iface);
 800179a:	6860      	ldr	r0, [r4, #4]
 800179c:	6803      	ldr	r3, [r0, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4798      	blx	r3
	if (err != 0) {
 80017a2:	4605      	mov	r5, r0
 80017a4:	b920      	cbnz	r0, 80017b0 <shell_thread+0x88>
	shell_history_purge(shell->history);
 80017a6:	68e0      	ldr	r0, [r4, #12]
 80017a8:	f005 fe9a 	bl	80074e0 <shell_history_purge>
	shell->ctx->state = SHELL_STATE_UNINITIALIZED;
 80017ac:	68a3      	ldr	r3, [r4, #8]
 80017ae:	711d      	strb	r5, [r3, #4]
	return z_impl_k_current_get();
 80017b0:	f003 ff34 	bl	800561c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 80017b4:	f001 ff8c 	bl	80036d0 <z_impl_k_thread_abort>
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 80017b8:	68a5      	ldr	r5, [r4, #8]
	z_impl_k_poll_signal_check(signal, signaled, result);
 80017ba:	aa01      	add	r2, sp, #4
 80017bc:	4669      	mov	r1, sp
 80017be:	f505 7017 	add.w	r0, r5, #604	; 0x25c
 80017c2:	f007 fae1 	bl	8008d88 <z_impl_k_poll_signal_check>
	if (set) {
 80017c6:	9b00      	ldr	r3, [sp, #0]
 80017c8:	b12b      	cbz	r3, 80017d6 <shell_thread+0xae>
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c5 3264 	str.w	r3, [r5, #612]	; 0x264
		handler(shell);
 80017d0:	4620      	mov	r0, r4
 80017d2:	f7ff fbfb 	bl	8000fcc <shell_process>
		k_mutex_unlock(&shell->ctx->wr_mtx);
 80017d6:	68a0      	ldr	r0, [r4, #8]
 80017d8:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
	z_impl_k_mutex_unlock(mutex);
 80017dc:	f003 fc18 	bl	8005010 <z_impl_k_mutex_unlock>
 80017e0:	e7ae      	b.n	8001740 <shell_thread+0x18>
 80017e2:	bf00      	nop
 80017e4:	08009870 	.word	0x08009870

080017e8 <shell_fprintf_fmt>:
	return 0;
}

void shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
		       const char *fmt, va_list args)
{
 80017e8:	b510      	push	{r4, lr}
 80017ea:	4604      	mov	r4, r0
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX)
	(void)z_prf(out_func, (void *)sh_fprintf, (char *)fmt, args);
 80017ec:	4613      	mov	r3, r2
 80017ee:	460a      	mov	r2, r1
 80017f0:	4601      	mov	r1, r0
 80017f2:	4806      	ldr	r0, [pc, #24]	; (800180c <shell_fprintf_fmt+0x24>)
 80017f4:	f002 f852 	bl	800389c <z_prf>
#else
	z_vprintk(out_func, (void *)sh_fprintf, fmt, args);
#endif

	if (sh_fprintf->ctrl_blk->autoflush) {
 80017f8:	6923      	ldr	r3, [r4, #16]
 80017fa:	791b      	ldrb	r3, [r3, #4]
 80017fc:	b123      	cbz	r3, 8001808 <shell_fprintf_fmt+0x20>
		shell_fprintf_buffer_flush(sh_fprintf);
 80017fe:	4620      	mov	r0, r4
	}
}
 8001800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_fprintf_buffer_flush(sh_fprintf);
 8001804:	f005 b972 	b.w	8006aec <shell_fprintf_buffer_flush>
}
 8001808:	bd10      	pop	{r4, pc}
 800180a:	bf00      	nop
 800180c:	08006b05 	.word	0x08006b05

08001810 <shell_cmd_get>:

void shell_cmd_get(const struct shell *shell,
		   const struct shell_cmd_entry *command, size_t lvl,
		   size_t idx, const struct shell_static_entry **entry,
		   struct shell_static_entry *d_entry)
{
 8001810:	b570      	push	{r4, r5, r6, lr}
 8001812:	e9dd 4604 	ldrd	r4, r6, [sp, #16]
	__ASSERT_NO_MSG(entry != NULL);
	__ASSERT_NO_MSG(d_entry != NULL);

	*entry = NULL;
 8001816:	2000      	movs	r0, #0
 8001818:	6020      	str	r0, [r4, #0]

	if (lvl == SHELL_CMD_ROOT_LVL) {
 800181a:	b952      	cbnz	r2, 8001832 <shell_cmd_get+0x22>
	return ((u8_t *)__shell_root_cmds_end -
 800181c:	480f      	ldr	r0, [pc, #60]	; (800185c <shell_cmd_get+0x4c>)
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <shell_cmd_get+0x50>)
 8001820:	1a12      	subs	r2, r2, r0
			const struct shell_static_entry *ptr =
						       shell->ctx->selected_cmd;
			if (ptr->subcmd->u.entry[idx].syntax != NULL) {
				*entry = &ptr->subcmd->u.entry[idx];
			}
		} else if (idx < shell_root_cmd_count()) {
 8001822:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8001826:	d203      	bcs.n	8001830 <shell_cmd_get+0x20>
			const struct shell_cmd_entry *cmd;

			cmd = shell_root_cmd_get(idx);
			*entry = cmd->u.entry;
 8001828:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	6023      	str	r3, [r4, #0]
	} else {
		if (command->u.entry[idx].syntax != NULL) {
			*entry = &command->u.entry[idx];
		}
	}
}
 8001830:	bd70      	pop	{r4, r5, r6, pc}
	if (command == NULL) {
 8001832:	2900      	cmp	r1, #0
 8001834:	d0fc      	beq.n	8001830 <shell_cmd_get+0x20>
	if (command->is_dynamic) {
 8001836:	780a      	ldrb	r2, [r1, #0]
 8001838:	684d      	ldr	r5, [r1, #4]
 800183a:	b13a      	cbz	r2, 800184c <shell_cmd_get+0x3c>
		command->u.dynamic_get(idx, d_entry);
 800183c:	4618      	mov	r0, r3
 800183e:	4631      	mov	r1, r6
 8001840:	47a8      	blx	r5
		if (d_entry->syntax != NULL) {
 8001842:	6833      	ldr	r3, [r6, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f3      	beq.n	8001830 <shell_cmd_get+0x20>
			*entry = d_entry;
 8001848:	6026      	str	r6, [r4, #0]
 800184a:	e7f1      	b.n	8001830 <shell_cmd_get+0x20>
		if (command->u.entry[idx].syntax != NULL) {
 800184c:	2214      	movs	r2, #20
 800184e:	4353      	muls	r3, r2
 8001850:	18ea      	adds	r2, r5, r3
 8001852:	58eb      	ldr	r3, [r5, r3]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0eb      	beq.n	8001830 <shell_cmd_get+0x20>
			*entry = &command->u.entry[idx];
 8001858:	6022      	str	r2, [r4, #0]
 800185a:	e7e9      	b.n	8001830 <shell_cmd_get+0x20>
 800185c:	08009184 	.word	0x08009184
 8001860:	080091bc 	.word	0x080091bc

08001864 <clear_eos.isra.6>:
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 8001864:	4a01      	ldr	r2, [pc, #4]	; (800186c <clear_eos.isra.6+0x8>)
 8001866:	4902      	ldr	r1, [pc, #8]	; (8001870 <clear_eos.isra.6+0xc>)
 8001868:	f005 bb4b 	b.w	8006f02 <shell_raw_fprintf>
 800186c:	08009887 	.word	0x08009887
 8001870:	0800986a 	.word	0x0800986a

08001874 <shell_op_cursor_vert_move>:
#include <ctype.h>
#include "shell_ops.h"

void shell_op_cursor_vert_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
 8001874:	b159      	cbz	r1, 800188e <shell_op_cursor_vert_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
 8001876:	2900      	cmp	r1, #0
 8001878:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 800187c:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8001880:	bfcc      	ite	gt
 8001882:	2341      	movgt	r3, #65	; 0x41
 8001884:	2342      	movle	r3, #66	; 0x42
 8001886:	4902      	ldr	r1, [pc, #8]	; (8001890 <shell_op_cursor_vert_move+0x1c>)
 8001888:	6940      	ldr	r0, [r0, #20]
 800188a:	f005 bb3a 	b.w	8006f02 <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'A' : 'B');
	}
}
 800188e:	4770      	bx	lr
 8001890:	08009895 	.word	0x08009895

08001894 <shell_op_cursor_horiz_move>:

void shell_op_cursor_horiz_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
 8001894:	b159      	cbz	r1, 80018ae <shell_op_cursor_horiz_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
 8001896:	2900      	cmp	r1, #0
 8001898:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 800189c:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 80018a0:	bfcc      	ite	gt
 80018a2:	2343      	movgt	r3, #67	; 0x43
 80018a4:	2344      	movle	r3, #68	; 0x44
 80018a6:	4902      	ldr	r1, [pc, #8]	; (80018b0 <shell_op_cursor_horiz_move+0x1c>)
 80018a8:	6940      	ldr	r0, [r0, #20]
 80018aa:	f005 bb2a 	b.w	8006f02 <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'C' : 'D');
	}
}
 80018ae:	4770      	bx	lr
 80018b0:	08009895 	.word	0x08009895

080018b4 <shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void shell_op_cond_next_line(const struct shell *shell)
{
 80018b4:	b510      	push	{r4, lr}
 80018b6:	4604      	mov	r4, r0
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
 80018b8:	f005 fb44 	bl	8006f44 <shell_cursor_in_empty_line>
 80018bc:	b128      	cbz	r0, 80018ca <shell_op_cond_next_line+0x16>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 80018be:	6960      	ldr	r0, [r4, #20]
 80018c0:	4905      	ldr	r1, [pc, #20]	; (80018d8 <shell_op_cond_next_line+0x24>)
		cursor_next_line_move(shell);
	}
}
 80018c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018c6:	f005 bb1c 	b.w	8006f02 <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
 80018ca:	f104 0008 	add.w	r0, r4, #8
 80018ce:	f005 fb25 	bl	8006f1c <full_line_cmd.isra.8>
 80018d2:	2800      	cmp	r0, #0
 80018d4:	d1f3      	bne.n	80018be <shell_op_cond_next_line+0xa>
}
 80018d6:	bd10      	pop	{r4, pc}
 80018d8:	0800986e 	.word	0x0800986e

080018dc <shell_op_cursor_position_synchronize>:

void shell_op_cursor_position_synchronize(const struct shell *shell)
{
 80018dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 80018e0:	4606      	mov	r6, r0
{
 80018e2:	4605      	mov	r5, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 80018e4:	f856 4f08 	ldr.w	r4, [r6, #8]!
	bool last_line;

	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 80018e8:	f104 0020 	add.w	r0, r4, #32
 80018ec:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80018ee:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80018f0:	f005 f94e 	bl	8006b90 <shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
 80018f4:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
 80018f6:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
 80018fa:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
 80018fc:	f005 fb0e 	bl	8006f1c <full_line_cmd.isra.8>
 8001900:	b118      	cbz	r0, 800190a <shell_op_cursor_position_synchronize+0x2e>
 8001902:	490a      	ldr	r1, [pc, #40]	; (800192c <shell_op_cursor_position_synchronize+0x50>)
 8001904:	6968      	ldr	r0, [r5, #20]
 8001906:	f005 fafc 	bl	8006f02 <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	if (last_line) {
 800190a:	45b8      	cmp	r8, r7
 800190c:	d107      	bne.n	800191e <shell_op_cursor_position_synchronize+0x42>
		shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		shell_op_cursor_horiz_move(shell, cons->cur_x -
 800190e:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
 8001910:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		shell_op_cursor_horiz_move(shell, cons->cur_x -
 8001912:	4628      	mov	r0, r5
 8001914:	1ac9      	subs	r1, r1, r3
	}
}
 8001916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		shell_op_cursor_horiz_move(shell, cons->cur_x -
 800191a:	f7ff bfbb 	b.w	8001894 <shell_op_cursor_horiz_move>
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
 800191e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001920:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8001922:	4628      	mov	r0, r5
 8001924:	1ac9      	subs	r1, r1, r3
 8001926:	f7ff ffa5 	bl	8001874 <shell_op_cursor_vert_move>
 800192a:	e7f0      	b.n	800190e <shell_op_cursor_position_synchronize+0x32>
 800192c:	0800986e 	.word	0x0800986e

08001930 <shell_print_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void shell_print_cmd(const struct shell *shell)
{
	shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
 8001930:	6882      	ldr	r2, [r0, #8]
 8001932:	4902      	ldr	r1, [pc, #8]	; (800193c <shell_print_cmd+0xc>)
 8001934:	6940      	ldr	r0, [r0, #20]
 8001936:	3238      	adds	r2, #56	; 0x38
 8001938:	f005 bae3 	b.w	8006f02 <shell_raw_fprintf>
 800193c:	0800986a 	.word	0x0800986a

08001940 <shell_vt100_color_set>:

void shell_vt100_color_set(const struct shell *shell,
			   enum shell_vt100_color color)
{

	if (shell->ctx->vt100_ctx.col.col == color) {
 8001940:	6883      	ldr	r3, [r0, #8]
{
 8001942:	b507      	push	{r0, r1, r2, lr}
	if (shell->ctx->vt100_ctx.col.col == color) {
 8001944:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001948:	428a      	cmp	r2, r1
 800194a:	d012      	beq.n	8001972 <shell_vt100_color_set+0x32>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
 800194c:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
 8001950:	6940      	ldr	r0, [r0, #20]
 8001952:	b189      	cbz	r1, 8001978 <shell_vt100_color_set+0x38>

		u8_t cmd[] = SHELL_VT100_COLOR(color - 1);
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <shell_vt100_color_set+0x3c>)
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2333      	movs	r3, #51	; 0x33
 800195a:	f88d 3004 	strb.w	r3, [sp, #4]
 800195e:	312f      	adds	r1, #47	; 0x2f
 8001960:	236d      	movs	r3, #109	; 0x6d
 8001962:	f88d 1005 	strb.w	r1, [sp, #5]
 8001966:	f8ad 3006 	strh.w	r3, [sp, #6]

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 800196a:	466a      	mov	r2, sp
	} else {
		static const u8_t cmd[] = SHELL_VT100_MODESOFF;

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 800196c:	4904      	ldr	r1, [pc, #16]	; (8001980 <shell_vt100_color_set+0x40>)
 800196e:	f005 fac8 	bl	8006f02 <shell_raw_fprintf>
	}
}
 8001972:	b003      	add	sp, #12
 8001974:	f85d fb04 	ldr.w	pc, [sp], #4
		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8001978:	4a02      	ldr	r2, [pc, #8]	; (8001984 <shell_vt100_color_set+0x44>)
 800197a:	e7f7      	b.n	800196c <shell_vt100_color_set+0x2c>
 800197c:	3b315b1b 	.word	0x3b315b1b
 8001980:	0800986a 	.word	0x0800986a
 8001984:	08009891 	.word	0x08009891

08001988 <shell_vt100_colors_restore>:

void shell_vt100_colors_restore(const struct shell *shell,
				       const struct shell_vt100_colors *color)
{
 8001988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800198a:	460d      	mov	r5, r1
	shell_vt100_color_set(shell, color->col);
 800198c:	7809      	ldrb	r1, [r1, #0]
{
 800198e:	4604      	mov	r4, r0
	shell_vt100_color_set(shell, color->col);
 8001990:	f7ff ffd6 	bl	8001940 <shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
 8001994:	786b      	ldrb	r3, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
 8001996:	b1cb      	cbz	r3, 80019cc <shell_vt100_colors_restore+0x44>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
 8001998:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
 800199a:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 800199e:	4299      	cmp	r1, r3
 80019a0:	d014      	beq.n	80019cc <shell_vt100_colors_restore+0x44>
	u8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
 80019a2:	f645 311b 	movw	r1, #23323	; 0x5b1b
 80019a6:	f8ad 1000 	strh.w	r1, [sp]
 80019aa:	2134      	movs	r1, #52	; 0x34
 80019ac:	f88d 1002 	strb.w	r1, [sp, #2]
 80019b0:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 80019b4:	f88d 1003 	strb.w	r1, [sp, #3]
 80019b8:	216d      	movs	r1, #109	; 0x6d
 80019ba:	f8ad 1004 	strh.w	r1, [sp, #4]
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
 80019be:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 80019c2:	4903      	ldr	r1, [pc, #12]	; (80019d0 <shell_vt100_colors_restore+0x48>)
 80019c4:	6960      	ldr	r0, [r4, #20]
 80019c6:	466a      	mov	r2, sp
 80019c8:	f005 fa9b 	bl	8006f02 <shell_raw_fprintf>
}
 80019cc:	b003      	add	sp, #12
 80019ce:	bd30      	pop	{r4, r5, pc}
 80019d0:	0800986a 	.word	0x0800986a

080019d4 <shell_op_word_remove>:
{
 80019d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 80019d6:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
 80019d8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
 80019da:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
 80019dc:	2a00      	cmp	r2, #0
 80019de:	d046      	beq.n	8001a6e <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 80019e0:	8e98      	ldrh	r0, [r3, #52]	; 0x34
	if ((shell->ctx->cmd_buff_len == 0) ||
 80019e2:	2800      	cmp	r0, #0
 80019e4:	d043      	beq.n	8001a6e <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 80019e6:	3037      	adds	r0, #55	; 0x37
 80019e8:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
 80019ea:	f103 0638 	add.w	r6, r3, #56	; 0x38
 80019ee:	4603      	mov	r3, r0
 80019f0:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
 80019f2:	42b3      	cmp	r3, r6
 80019f4:	b2a4      	uxth	r4, r4
 80019f6:	4619      	mov	r1, r3
 80019f8:	d30d      	bcc.n	8001a16 <shell_op_word_remove+0x42>
 80019fa:	f811 7901 	ldrb.w	r7, [r1], #-1
 80019fe:	2f20      	cmp	r7, #32
 8001a00:	d033      	beq.n	8001a6a <shell_op_word_remove+0x96>
 8001a02:	4619      	mov	r1, r3
 8001a04:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
 8001a06:	7808      	ldrb	r0, [r1, #0]
 8001a08:	2820      	cmp	r0, #32
 8001a0a:	d004      	beq.n	8001a16 <shell_op_word_remove+0x42>
		++chars_to_delete;
 8001a0c:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
 8001a0e:	429e      	cmp	r6, r3
		++chars_to_delete;
 8001a10:	b2a4      	uxth	r4, r4
		--str;
 8001a12:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
 8001a14:	d9f5      	bls.n	8001a02 <shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
 8001a16:	1c63      	adds	r3, r4, #1
 8001a18:	1c4e      	adds	r6, r1, #1
 8001a1a:	1b12      	subs	r2, r2, r4
 8001a1c:	4419      	add	r1, r3
 8001a1e:	4630      	mov	r0, r6
 8001a20:	f006 fa79 	bl	8007f16 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
 8001a24:	68a9      	ldr	r1, [r5, #8]
 8001a26:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
 8001a28:	1b12      	subs	r2, r2, r4
 8001a2a:	b292      	uxth	r2, r2
 8001a2c:	864a      	strh	r2, [r1, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 8001a2e:	440a      	add	r2, r1
 8001a30:	2700      	movs	r7, #0
	shell_op_cursor_move(shell, -chars_to_delete);
 8001a32:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 8001a34:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
	shell_op_cursor_move(shell, -chars_to_delete);
 8001a38:	4628      	mov	r0, r5
 8001a3a:	b209      	sxth	r1, r1
 8001a3c:	f005 fa96 	bl	8006f6c <shell_op_cursor_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
 8001a40:	6968      	ldr	r0, [r5, #20]
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <shell_op_word_remove+0x9c>)
 8001a44:	490b      	ldr	r1, [pc, #44]	; (8001a74 <shell_op_word_remove+0xa0>)
 8001a46:	f005 fa5c 	bl	8006f02 <shell_raw_fprintf>
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
 8001a4a:	4639      	mov	r1, r7
 8001a4c:	4633      	mov	r3, r6
 8001a4e:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <shell_op_word_remove+0xa0>)
 8001a50:	4628      	mov	r0, r5
 8001a52:	f005 fb88 	bl	8007166 <shell_internal_fprintf>
	clear_eos(shell);
 8001a56:	6968      	ldr	r0, [r5, #20]
 8001a58:	f7ff ff04 	bl	8001864 <clear_eos.isra.6>
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
 8001a5c:	6968      	ldr	r0, [r5, #20]
 8001a5e:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <shell_op_word_remove+0xa4>)
 8001a60:	4904      	ldr	r1, [pc, #16]	; (8001a74 <shell_op_word_remove+0xa0>)
}
 8001a62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001a66:	f005 ba4c 	b.w	8006f02 <shell_raw_fprintf>
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	e7c0      	b.n	80019f0 <shell_op_word_remove+0x1c>
 8001a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a70:	0800988b 	.word	0x0800988b
 8001a74:	0800986a 	.word	0x0800986a
 8001a78:	0800988e 	.word	0x0800988e

08001a7c <reprint_from_cursor>:
{
 8001a7c:	b570      	push	{r4, r5, r6, lr}
 8001a7e:	4604      	mov	r4, r0
 8001a80:	460d      	mov	r5, r1
	if (data_removed) {
 8001a82:	4616      	mov	r6, r2
 8001a84:	b112      	cbz	r2, 8001a8c <reprint_from_cursor+0x10>
		clear_eos(shell);
 8001a86:	6940      	ldr	r0, [r0, #20]
 8001a88:	f7ff feec 	bl	8001864 <clear_eos.isra.6>
		      &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8001a8c:	68a2      	ldr	r2, [r4, #8]
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s",
 8001a8e:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 8001a90:	3338      	adds	r3, #56	; 0x38
 8001a92:	4413      	add	r3, r2
 8001a94:	4620      	mov	r0, r4
 8001a96:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <reprint_from_cursor+0x4c>)
 8001a98:	2100      	movs	r1, #0
 8001a9a:	f005 fb64 	bl	8007166 <shell_internal_fprintf>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f850 3f08 	ldr.w	r3, [r0, #8]!
 8001aa4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8001aa6:	869a      	strh	r2, [r3, #52]	; 0x34
	if (full_line_cmd(shell)) {
 8001aa8:	f005 fa38 	bl	8006f1c <full_line_cmd.isra.8>
 8001aac:	b128      	cbz	r0, 8001aba <reprint_from_cursor+0x3e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
 8001aae:	b106      	cbz	r6, 8001ab2 <reprint_from_cursor+0x36>
 8001ab0:	b11d      	cbz	r5, 8001aba <reprint_from_cursor+0x3e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8001ab2:	4906      	ldr	r1, [pc, #24]	; (8001acc <reprint_from_cursor+0x50>)
 8001ab4:	6960      	ldr	r0, [r4, #20]
 8001ab6:	f005 fa24 	bl	8006f02 <shell_raw_fprintf>
	shell_op_cursor_move(shell, -diff);
 8001aba:	4269      	negs	r1, r5
 8001abc:	4620      	mov	r0, r4
 8001abe:	b209      	sxth	r1, r1
}
 8001ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_op_cursor_move(shell, -diff);
 8001ac4:	f005 ba52 	b.w	8006f6c <shell_op_cursor_move>
 8001ac8:	0800986a 	.word	0x0800986a
 8001acc:	0800986e 	.word	0x0800986e

08001ad0 <shell_op_char_insert>:
{
 8001ad0:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
 8001ad2:	6883      	ldr	r3, [r0, #8]
{
 8001ad4:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
 8001ad8:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8001adc:	07d2      	lsls	r2, r2, #31
{
 8001ade:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
 8001ae0:	d51d      	bpl.n	8001b1e <shell_op_char_insert+0x4e>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
 8001ae2:	8e99      	ldrh	r1, [r3, #52]	; 0x34
	if (shell->ctx->internal.flags.insert_mode &&
 8001ae4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8001ae6:	428a      	cmp	r2, r1
 8001ae8:	d019      	beq.n	8001b1e <shell_op_char_insert+0x4e>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
 8001aea:	1c48      	adds	r0, r1, #1
 8001aec:	8698      	strh	r0, [r3, #52]	; 0x34
 8001aee:	440b      	add	r3, r1
		char_replace(shell, data);
 8001af0:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
 8001af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
 8001af8:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 8001afa:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001afe:	075b      	lsls	r3, r3, #29
 8001b00:	d50b      	bpl.n	8001b1a <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
 8001b02:	6960      	ldr	r0, [r4, #20]
 8001b04:	4909      	ldr	r1, [pc, #36]	; (8001b2c <shell_op_char_insert+0x5c>)
 8001b06:	f005 f9fc 	bl	8006f02 <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell)) {
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f005 fa1a 	bl	8006f44 <shell_cursor_in_empty_line>
 8001b10:	b118      	cbz	r0, 8001b1a <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8001b12:	4907      	ldr	r1, [pc, #28]	; (8001b30 <shell_op_char_insert+0x60>)
 8001b14:	6960      	ldr	r0, [r4, #20]
 8001b16:	f005 f9f4 	bl	8006f02 <shell_raw_fprintf>
}
 8001b1a:	b002      	add	sp, #8
 8001b1c:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f10d 0107 	add.w	r1, sp, #7
 8001b24:	4620      	mov	r0, r4
 8001b26:	f005 fb2b 	bl	8007180 <data_insert>
}
 8001b2a:	e7f6      	b.n	8001b1a <shell_op_char_insert+0x4a>
 8001b2c:	08009899 	.word	0x08009899
 8001b30:	0800986e 	.word	0x0800986e

08001b34 <shell_print_prompt_and_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
 8001b34:	6883      	ldr	r3, [r0, #8]
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <shell_print_prompt_and_cmd+0x2c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
{
 8001b3a:	b510      	push	{r4, lr}
 8001b3c:	4604      	mov	r4, r0
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
 8001b3e:	2103      	movs	r1, #3
 8001b40:	f005 fb11 	bl	8007166 <shell_internal_fprintf>
	if (flag_echo_get(shell)) {
 8001b44:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 8001b46:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001b4a:	075b      	lsls	r3, r3, #29
 8001b4c:	d507      	bpl.n	8001b5e <shell_print_prompt_and_cmd+0x2a>
		shell_print_cmd(shell);
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7ff feee 	bl	8001930 <shell_print_cmd>
		shell_op_cursor_position_synchronize(shell);
 8001b54:	4620      	mov	r0, r4
}
 8001b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_op_cursor_position_synchronize(shell);
 8001b5a:	f7ff bebf 	b.w	80018dc <shell_op_cursor_position_synchronize>
}
 8001b5e:	bd10      	pop	{r4, pc}
 8001b60:	0800986a 	.word	0x0800986a

08001b64 <init>:
static int init(const struct shell_transport *transport,
		const void *config,
		shell_transport_handler_t evt_handler,
		void *context)
{
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 8001b64:	6840      	ldr	r0, [r0, #4]
{
 8001b66:	b510      	push	{r4, lr}
 8001b68:	460c      	mov	r4, r1

	sh_uart->ctrl_blk->dev = (struct device *)config;
 8001b6a:	6801      	ldr	r1, [r0, #0]
	sh_uart->ctrl_blk->handler = evt_handler;
	sh_uart->ctrl_blk->context = context;
 8001b6c:	608b      	str	r3, [r1, #8]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
 8001b6e:	6863      	ldr	r3, [r4, #4]
	sh_uart->ctrl_blk->handler = evt_handler;
 8001b70:	e9c1 4200 	strd	r4, r2, [r1]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 8001b74:	b12b      	cbz	r3, 8001b82 <init+0x1e>
 8001b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b78:	b11b      	cbz	r3, 8001b82 <init+0x1e>
		api->irq_callback_set(dev, cb, user_data);
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4904      	ldr	r1, [pc, #16]	; (8001b90 <init+0x2c>)
 8001b7e:	4620      	mov	r0, r4
 8001b80:	4798      	blx	r3
	if (api->irq_rx_enable) {
 8001b82:	6863      	ldr	r3, [r4, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	b10b      	cbz	r3, 8001b8c <init+0x28>
		api->irq_rx_enable(dev);
 8001b88:	4620      	mov	r0, r4
 8001b8a:	4798      	blx	r3
		k_timer_user_data_set(sh_uart->timer, (void *)sh_uart);
		k_timer_start(sh_uart->timer, RX_POLL_PERIOD, RX_POLL_PERIOD);
	}

	return 0;
}
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	bd10      	pop	{r4, pc}
 8001b90:	080072e1 	.word	0x080072e1

08001b94 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(struct device *arg)
{
 8001b94:	b513      	push	{r0, r1, r4, lr}
 8001b96:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <enable_shell_uart+0x20>)
 8001b98:	f003 f814 	bl	8004bc4 <z_impl_device_get_binding>
	bool log_backend = CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > 0;
	u32_t level =
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;

	shell_init(&shell_uart, dev, true, log_backend, level);
 8001b9c:	2400      	movs	r4, #0
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	4601      	mov	r1, r0
 8001ba2:	9400      	str	r4, [sp, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <enable_shell_uart+0x24>)
 8001ba8:	f7ff f97e 	bl	8000ea8 <shell_init>

	return 0;
}
 8001bac:	4620      	mov	r0, r4
 8001bae:	b002      	add	sp, #8
 8001bb0:	bd10      	pop	{r4, pc}
 8001bb2:	bf00      	nop
 8001bb4:	0800989c 	.word	0x0800989c
 8001bb8:	08009240 	.word	0x08009240

08001bbc <formatted_text_print.constprop.2>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
 8001bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bc0:	4605      	mov	r5, r0
 8001bc2:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
 8001bc4:	460f      	mov	r7, r1
 8001bc6:	2900      	cmp	r1, #0
 8001bc8:	d06e      	beq.n	8001ca8 <formatted_text_print.constprop.2+0xec>
 8001bca:	2400      	movs	r4, #0
		shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
 8001bcc:	5d3b      	ldrb	r3, [r7, r4]
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	d025      	beq.n	8001c1e <formatted_text_print.constprop.2+0x62>
 8001bd2:	3b09      	subs	r3, #9
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d922      	bls.n	8001c1e <formatted_text_print.constprop.2+0x62>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8001bd8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001cac <formatted_text_print.constprop.2+0xf0>
	return str == NULL ? 0U : (u16_t)strlen(str);
 8001bdc:	4638      	mov	r0, r7
 8001bde:	f006 f968 	bl	8007eb2 <strlen>
		size_t idx = 0;

		length = shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 8001be2:	68ab      	ldr	r3, [r5, #8]
 8001be4:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = shell_strlen(str) - offset;
 8001be6:	b280      	uxth	r0, r0
 8001be8:	1b00      	subs	r0, r0, r4
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 8001bea:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
 8001bee:	4298      	cmp	r0, r3
 8001bf0:	eb07 0a04 	add.w	sl, r7, r4
 8001bf4:	d915      	bls.n	8001c22 <formatted_text_print.constprop.2+0x66>
 8001bf6:	4650      	mov	r0, sl
		size_t idx = 0;
 8001bf8:	2600      	movs	r6, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
 8001bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001bfe:	2a20      	cmp	r2, #32
 8001c00:	d006      	beq.n	8001c10 <formatted_text_print.constprop.2+0x54>
 8001c02:	f1a2 0c09 	sub.w	ip, r2, #9
 8001c06:	f1bc 0f04 	cmp.w	ip, #4
 8001c0a:	d802      	bhi.n	8001c12 <formatted_text_print.constprop.2+0x56>
				length = idx;
				if (*(str + offset + idx) == '\n') {
 8001c0c:	2a0a      	cmp	r2, #10
 8001c0e:	d031      	beq.n	8001c74 <formatted_text_print.constprop.2+0xb8>
 8001c10:	4633      	mov	r3, r6
					break;
				}
			}

			if ((idx + terminal_offset) >=
 8001c12:	eb08 0206 	add.w	r2, r8, r6
 8001c16:	4291      	cmp	r1, r2
 8001c18:	d92b      	bls.n	8001c72 <formatted_text_print.constprop.2+0xb6>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
 8001c1a:	3601      	adds	r6, #1
 8001c1c:	e7ed      	b.n	8001bfa <formatted_text_print.constprop.2+0x3e>
		++offset;
 8001c1e:	3401      	adds	r4, #1
 8001c20:	e7d4      	b.n	8001bcc <formatted_text_print.constprop.2+0x10>
 8001c22:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
 8001c24:	2600      	movs	r6, #0
 8001c26:	42b0      	cmp	r0, r6
 8001c28:	d017      	beq.n	8001c5a <formatted_text_print.constprop.2+0x9e>
				if (*(str + offset + idx) == '\n') {
 8001c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c2e:	2a0a      	cmp	r2, #10
 8001c30:	eb04 0906 	add.w	r9, r4, r6
 8001c34:	d11b      	bne.n	8001c6e <formatted_text_print.constprop.2+0xb2>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
 8001c36:	6968      	ldr	r0, [r5, #20]
 8001c38:	f004 ff58 	bl	8006aec <shell_fprintf_buffer_flush>
					shell_write(shell, str + offset, idx);
 8001c3c:	4632      	mov	r2, r6
 8001c3e:	4651      	mov	r1, sl
 8001c40:	4628      	mov	r0, r5
 8001c42:	f005 fa33 	bl	80070ac <shell_write>
 8001c46:	4919      	ldr	r1, [pc, #100]	; (8001cac <formatted_text_print.constprop.2+0xf0>)
 8001c48:	6968      	ldr	r0, [r5, #20]
 8001c4a:	f005 fbb5 	bl	80073b8 <shell_raw_fprintf>
					shell_op_cursor_horiz_move(shell,
 8001c4e:	4641      	mov	r1, r8
 8001c50:	4628      	mov	r0, r5
					offset += idx + 1;
 8001c52:	f109 0401 	add.w	r4, r9, #1
					shell_op_cursor_horiz_move(shell,
 8001c56:	f7ff fe1d 	bl	8001894 <shell_op_cursor_horiz_move>
			shell_raw_fprintf(shell->fprintf_ctx, str + offset);
 8001c5a:	1939      	adds	r1, r7, r4
 8001c5c:	6968      	ldr	r0, [r5, #20]
 8001c5e:	f005 fbab 	bl	80073b8 <shell_raw_fprintf>
 8001c62:	6968      	ldr	r0, [r5, #20]
 8001c64:	4911      	ldr	r1, [pc, #68]	; (8001cac <formatted_text_print.constprop.2+0xf0>)
		cursor_next_line_move(shell);
		shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	cursor_next_line_move(shell);
}
 8001c66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c6a:	f005 bba5 	b.w	80073b8 <shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
 8001c6e:	3601      	adds	r6, #1
 8001c70:	e7d9      	b.n	8001c26 <formatted_text_print.constprop.2+0x6a>
			if ((idx + terminal_offset) >=
 8001c72:	461e      	mov	r6, r3
 8001c74:	6968      	ldr	r0, [r5, #20]
 8001c76:	f004 ff39 	bl	8006aec <shell_fprintf_buffer_flush>
		shell_write(shell, str + offset, length);
 8001c7a:	4632      	mov	r2, r6
 8001c7c:	4651      	mov	r1, sl
 8001c7e:	4628      	mov	r0, r5
 8001c80:	f005 fa14 	bl	80070ac <shell_write>
		offset += length;
 8001c84:	4434      	add	r4, r6
		while (isspace((int) (*(str + offset)))) {
 8001c86:	5d3b      	ldrb	r3, [r7, r4]
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d00b      	beq.n	8001ca4 <formatted_text_print.constprop.2+0xe8>
 8001c8c:	3b09      	subs	r3, #9
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d908      	bls.n	8001ca4 <formatted_text_print.constprop.2+0xe8>
 8001c92:	4649      	mov	r1, r9
 8001c94:	6968      	ldr	r0, [r5, #20]
 8001c96:	f005 fb8f 	bl	80073b8 <shell_raw_fprintf>
		shell_op_cursor_horiz_move(shell, terminal_offset);
 8001c9a:	4641      	mov	r1, r8
 8001c9c:	4628      	mov	r0, r5
 8001c9e:	f7ff fdf9 	bl	8001894 <shell_op_cursor_horiz_move>
 8001ca2:	e79b      	b.n	8001bdc <formatted_text_print.constprop.2+0x20>
			++offset;
 8001ca4:	3401      	adds	r4, #1
 8001ca6:	e7ee      	b.n	8001c86 <formatted_text_print.constprop.2+0xca>
}
 8001ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cac:	0800986e 	.word	0x0800986e

08001cb0 <shell_help_subcmd_print>:

/* Function is printing command help, its subcommands name and subcommands
 * help string.
 */
void shell_help_subcmd_print(const struct shell *shell)
{
 8001cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry static_entry;
	u16_t longest_syntax = 0U;
	size_t cmd_idx = 0;

	/* Checking if there are any subcommands available. */
	if (!shell->ctx->active_cmd.subcmd) {
 8001cb4:	6882      	ldr	r2, [r0, #8]
{
 8001cb6:	b08d      	sub	sp, #52	; 0x34
	if (!shell->ctx->active_cmd.subcmd) {
 8001cb8:	6912      	ldr	r2, [r2, #16]
	const struct shell_static_entry *entry = NULL;
 8001cba:	2300      	movs	r3, #0
{
 8001cbc:	4604      	mov	r4, r0
	const struct shell_static_entry *entry = NULL;
 8001cbe:	9306      	str	r3, [sp, #24]
	if (!shell->ctx->active_cmd.subcmd) {
 8001cc0:	2a00      	cmp	r2, #0
 8001cc2:	d051      	beq.n	8001d68 <shell_help_subcmd_print+0xb8>
	size_t cmd_idx = 0;
 8001cc4:	4698      	mov	r8, r3
	u16_t longest_syntax = 0U;
 8001cc6:	461d      	mov	r5, r3
		return;
	}

	/* Searching for the longest subcommand to print. */
	do {
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
 8001cc8:	ae07      	add	r6, sp, #28
 8001cca:	af06      	add	r7, sp, #24
 8001ccc:	e9cd 7600 	strd	r7, r6, [sp]
 8001cd0:	68a1      	ldr	r1, [r4, #8]
 8001cd2:	4643      	mov	r3, r8
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	6909      	ldr	r1, [r1, #16]
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7ff fd99 	bl	8001810 <shell_cmd_get>
			      !SHELL_CMD_ROOT_LVL,
			      cmd_idx++, &entry, &static_entry);

		if (!entry) {
 8001cde:	9b06      	ldr	r3, [sp, #24]
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
 8001ce0:	f108 0901 	add.w	r9, r8, #1
		if (!entry) {
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d03c      	beq.n	8001d62 <shell_help_subcmd_print+0xb2>
			break;
		}

		u16_t len = shell_strlen(entry->syntax);
 8001ce8:	6818      	ldr	r0, [r3, #0]
	return str == NULL ? 0U : (u16_t)strlen(str);
 8001cea:	b110      	cbz	r0, 8001cf2 <shell_help_subcmd_print+0x42>
 8001cec:	f006 f8e1 	bl	8007eb2 <strlen>
 8001cf0:	b280      	uxth	r0, r0

		longest_syntax = longest_syntax > len ? longest_syntax : len;
 8001cf2:	4285      	cmp	r5, r0
 8001cf4:	bf38      	it	cc
 8001cf6:	4605      	movcc	r5, r0
	} while (cmd_idx != 0); /* too many commands */
 8001cf8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001cfc:	d12f      	bne.n	8001d5e <shell_help_subcmd_print+0xae>

	if (cmd_idx == 1) {
		return;
	}

	shell_internal_fprintf(shell, SHELL_NORMAL, "Subcommands:\n");
 8001cfe:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <shell_help_subcmd_print+0xd0>)
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8001d00:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8001d84 <shell_help_subcmd_print+0xd4>
	shell_internal_fprintf(shell, SHELL_NORMAL, "Subcommands:\n");
 8001d04:	2100      	movs	r1, #0
 8001d06:	4620      	mov	r0, r4
 8001d08:	f005 fa2d 	bl	8007166 <shell_internal_fprintf>

	/* Printing subcommands and help string (if exists). */
	cmd_idx = 0;
 8001d0c:	2300      	movs	r3, #0

	while (true) {
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
 8001d0e:	e9cd 7600 	strd	r7, r6, [sp]
 8001d12:	68a1      	ldr	r1, [r4, #8]
 8001d14:	2201      	movs	r2, #1
 8001d16:	6909      	ldr	r1, [r1, #16]
 8001d18:	4620      	mov	r0, r4
 8001d1a:	f103 0b01 	add.w	fp, r3, #1
 8001d1e:	f7ff fd77 	bl	8001810 <shell_cmd_get>
			      !SHELL_CMD_ROOT_LVL,
			      cmd_idx++, &entry, &static_entry);

		if (entry == NULL) {
 8001d22:	9b06      	ldr	r3, [sp, #24]
 8001d24:	b303      	cbz	r3, 8001d68 <shell_help_subcmd_print+0xb8>
			break;
		}

		help_item_print(shell, entry->syntax, longest_syntax,
 8001d26:	681a      	ldr	r2, [r3, #0]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8001d28:	4816      	ldr	r0, [pc, #88]	; (8001d84 <shell_help_subcmd_print+0xd4>)
		help_item_print(shell, entry->syntax, longest_syntax,
 8001d2a:	9205      	str	r2, [sp, #20]
 8001d2c:	f8d3 8004 	ldr.w	r8, [r3, #4]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8001d30:	f006 f8bf 	bl	8007eb2 <strlen>
	if (item_name == NULL) {
 8001d34:	9a05      	ldr	r2, [sp, #20]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8001d36:	4682      	mov	sl, r0
	if (item_name == NULL) {
 8001d38:	b17a      	cbz	r2, 8001d5a <shell_help_subcmd_print+0xaa>
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:",
 8001d3a:	e9cd 2901 	strd	r2, r9, [sp, #4]
 8001d3e:	9500      	str	r5, [sp, #0]
 8001d40:	464b      	mov	r3, r9
 8001d42:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <shell_help_subcmd_print+0xd8>)
 8001d44:	2100      	movs	r1, #0
 8001d46:	4620      	mov	r0, r4
 8001d48:	f005 fa0d 	bl	8007166 <shell_internal_fprintf>
	if (item_help == NULL) {
 8001d4c:	f1b8 0f00 	cmp.w	r8, #0
 8001d50:	d10d      	bne.n	8001d6e <shell_help_subcmd_print+0xbe>
 8001d52:	490e      	ldr	r1, [pc, #56]	; (8001d8c <shell_help_subcmd_print+0xdc>)
 8001d54:	6960      	ldr	r0, [r4, #20]
 8001d56:	f005 fb2f 	bl	80073b8 <shell_raw_fprintf>
 8001d5a:	465b      	mov	r3, fp
 8001d5c:	e7d7      	b.n	8001d0e <shell_help_subcmd_print+0x5e>
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
 8001d5e:	46c8      	mov	r8, r9
 8001d60:	e7b4      	b.n	8001ccc <shell_help_subcmd_print+0x1c>
	if (cmd_idx == 1) {
 8001d62:	f1b9 0f01 	cmp.w	r9, #1
 8001d66:	d1ca      	bne.n	8001cfe <shell_help_subcmd_print+0x4e>
				entry->help);
	}
}
 8001d68:	b00d      	add	sp, #52	; 0x34
 8001d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8001d6e:	1c6a      	adds	r2, r5, #1
 8001d70:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	formatted_text_print(shell, item_help, offset, false);
 8001d74:	b292      	uxth	r2, r2
 8001d76:	4641      	mov	r1, r8
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f7ff ff1f 	bl	8001bbc <formatted_text_print.constprop.2>
 8001d7e:	e7ec      	b.n	8001d5a <shell_help_subcmd_print+0xaa>
 8001d80:	080098bb 	.word	0x080098bb
 8001d84:	080098d3 	.word	0x080098d3
 8001d88:	080098c9 	.word	0x080098c9
 8001d8c:	0800986e 	.word	0x0800986e

08001d90 <shell_help_cmd_print>:

void shell_help_cmd_print(const struct shell *shell)
{
	static const char cmd_sep[] = " - ";	/* commands separator */

	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
 8001d90:	6883      	ldr	r3, [r0, #8]
{
 8001d92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d94:	4605      	mov	r5, r0
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
 8001d96:	6898      	ldr	r0, [r3, #8]
 8001d98:	b1c8      	cbz	r0, 8001dce <shell_help_cmd_print+0x3e>
 8001d9a:	f006 f88a 	bl	8007eb2 <strlen>
 8001d9e:	b284      	uxth	r4, r0
 8001da0:	4e0c      	ldr	r6, [pc, #48]	; (8001dd4 <shell_help_cmd_print+0x44>)
 8001da2:	4630      	mov	r0, r6
 8001da4:	f006 f885 	bl	8007eb2 <strlen>
							  shell_strlen(cmd_sep);

	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
 8001da8:	68ab      	ldr	r3, [r5, #8]
 8001daa:	9600      	str	r6, [sp, #0]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
 8001dac:	4404      	add	r4, r0
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <shell_help_cmd_print+0x48>)
 8001db2:	4628      	mov	r0, r5
 8001db4:	2100      	movs	r1, #0
 8001db6:	f005 f9d6 	bl	8007166 <shell_internal_fprintf>
			       shell->ctx->active_cmd.syntax, cmd_sep);

	formatted_text_print(shell, shell->ctx->active_cmd.help,
 8001dba:	68ab      	ldr	r3, [r5, #8]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
 8001dbc:	b2a4      	uxth	r4, r4
	formatted_text_print(shell, shell->ctx->active_cmd.help,
 8001dbe:	68d9      	ldr	r1, [r3, #12]
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	4628      	mov	r0, r5
			     field_width, false);
}
 8001dc4:	b002      	add	sp, #8
 8001dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	formatted_text_print(shell, shell->ctx->active_cmd.help,
 8001dca:	f7ff bef7 	b.w	8001bbc <formatted_text_print.constprop.2>
 8001dce:	4604      	mov	r4, r0
 8001dd0:	e7e6      	b.n	8001da0 <shell_help_cmd_print+0x10>
 8001dd2:	bf00      	nop
 8001dd4:	080098b7 	.word	0x080098b7
 8001dd8:	08009868 	.word	0x08009868

08001ddc <cmd_clear>:
	cursor_restore(shell);
	return ret_val;
}

static int cmd_clear(const struct shell *shell, size_t argc, char **argv)
{
 8001ddc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 8001dde:	4d07      	ldr	r5, [pc, #28]	; (8001dfc <cmd_clear+0x20>)
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <cmd_clear+0x24>)
{
 8001de2:	4604      	mov	r4, r0
	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 8001de4:	4629      	mov	r1, r5
 8001de6:	6940      	ldr	r0, [r0, #20]
 8001de8:	f005 fb2d 	bl	8007446 <shell_raw_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
 8001dec:	6960      	ldr	r0, [r4, #20]
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <cmd_clear+0x28>)
 8001df0:	4629      	mov	r1, r5
 8001df2:	f005 fb28 	bl	8007446 <shell_raw_fprintf>

	return 0;
}
 8001df6:	2000      	movs	r0, #0
 8001df8:	bd38      	pop	{r3, r4, r5, pc}
 8001dfa:	bf00      	nop
 8001dfc:	0800986a 	.word	0x0800986a
 8001e00:	080098dc 	.word	0x080098dc
 8001e04:	080098e0 	.word	0x080098e0

08001e08 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
 8001e08:	b510      	push	{r4, lr}
 8001e0a:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <cmd_resize_default+0x18>)
 8001e0e:	4905      	ldr	r1, [pc, #20]	; (8001e24 <cmd_resize_default+0x1c>)
 8001e10:	6940      	ldr	r0, [r0, #20]
 8001e12:	f005 fb18 	bl	8007446 <shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid =  SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
 8001e16:	68a3      	ldr	r3, [r4, #8]
 8001e18:	4a03      	ldr	r2, [pc, #12]	; (8001e28 <cmd_resize_default+0x20>)
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	bd10      	pop	{r4, pc}
 8001e20:	080098e5 	.word	0x080098e5
 8001e24:	0800986a 	.word	0x0800986a
 8001e28:	00500018 	.word	0x00500018

08001e2c <cmd_shell_stats_show>:
{
 8001e2c:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %u", shell->stats->log_lost_cnt);
 8001e2e:	6983      	ldr	r3, [r0, #24]
 8001e30:	4a03      	ldr	r2, [pc, #12]	; (8001e40 <cmd_shell_stats_show+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2100      	movs	r1, #0
 8001e36:	f004 fe2c 	bl	8006a92 <shell_fprintf>
}
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	bd08      	pop	{r3, pc}
 8001e3e:	bf00      	nop
 8001e40:	08009b21 	.word	0x08009b21

08001e44 <cmd_help>:
{
 8001e44:	b510      	push	{r4, lr}
	shell_print(shell,
 8001e46:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <cmd_help+0x1c>)
{
 8001e48:	4604      	mov	r4, r0
	shell_print(shell,
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	f004 fe21 	bl	8006a92 <shell_fprintf>
	shell_print(shell,
 8001e50:	4620      	mov	r0, r4
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <cmd_help+0x20>)
 8001e54:	2100      	movs	r1, #0
 8001e56:	f004 fe1c 	bl	8006a92 <shell_fprintf>
}
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	bd10      	pop	{r4, pc}
 8001e5e:	bf00      	nop
 8001e60:	08009926 	.word	0x08009926
 8001e64:	08009a15 	.word	0x08009a15

08001e68 <cmd_history>:
{
 8001e68:	b5f0      	push	{r4, r5, r6, r7, lr}
			shell_print(shell, "[%3d] %s",
 8001e6a:	4f10      	ldr	r7, [pc, #64]	; (8001eac <cmd_history+0x44>)
{
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	4604      	mov	r4, r0
	size_t i = 0;
 8001e70:	2500      	movs	r5, #0
				  shell->ctx->temp_buff, &len);
 8001e72:	68a2      	ldr	r2, [r4, #8]
		shell_history_get(shell->history, true,
 8001e74:	68e0      	ldr	r0, [r4, #12]
 8001e76:	f10d 030e 	add.w	r3, sp, #14
 8001e7a:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8001e7e:	2101      	movs	r1, #1
 8001e80:	f005 fb03 	bl	800748a <shell_history_get>
		if (len) {
 8001e84:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8001e88:	68a3      	ldr	r3, [r4, #8]
 8001e8a:	b158      	cbz	r0, 8001ea4 <cmd_history+0x3c>
			shell_print(shell, "[%3d] %s",
 8001e8c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	1c6e      	adds	r6, r5, #1
 8001e94:	462b      	mov	r3, r5
 8001e96:	463a      	mov	r2, r7
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f004 fdf9 	bl	8006a92 <shell_fprintf>
 8001ea0:	4635      	mov	r5, r6
		shell_history_get(shell->history, true,
 8001ea2:	e7e6      	b.n	8001e72 <cmd_history+0xa>
	shell->ctx->temp_buff[0] = '\0';
 8001ea4:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
}
 8001ea8:	b005      	add	sp, #20
 8001eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eac:	08009add 	.word	0x08009add

08001eb0 <cmd_echo>:
	if (argc == 2) {
 8001eb0:	2902      	cmp	r1, #2
{
 8001eb2:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
 8001eb4:	d10c      	bne.n	8001ed0 <cmd_echo+0x20>
		shell_error(shell, "%s:%s%s", argv[0],
 8001eb6:	6853      	ldr	r3, [r2, #4]
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <cmd_echo+0x40>)
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	6813      	ldr	r3, [r2, #0]
 8001ec0:	4a0c      	ldr	r2, [pc, #48]	; (8001ef4 <cmd_echo+0x44>)
 8001ec2:	f004 fde6 	bl	8006a92 <shell_fprintf>
 8001ec6:	f06f 0015 	mvn.w	r0, #21
}
 8001eca:	b003      	add	sp, #12
 8001ecc:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
 8001ed0:	6883      	ldr	r3, [r0, #8]
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <cmd_echo+0x48>)
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 8001ed4:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001ed8:	f013 0f04 	tst.w	r3, #4
 8001edc:	f04f 0100 	mov.w	r1, #0
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <cmd_echo+0x4c>)
 8001ee2:	bf18      	it	ne
 8001ee4:	4613      	movne	r3, r2
 8001ee6:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <cmd_echo+0x50>)
 8001ee8:	f004 fdd3 	bl	8006a92 <shell_fprintf>
	return 0;
 8001eec:	2000      	movs	r0, #0
 8001eee:	e7ec      	b.n	8001eca <cmd_echo+0x1a>
 8001ef0:	080098fb 	.word	0x080098fb
 8001ef4:	080098f2 	.word	0x080098f2
 8001ef8:	080098eb 	.word	0x080098eb
 8001efc:	080098ee 	.word	0x080098ee
 8001f00:	08009910 	.word	0x08009910

08001f04 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
 8001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
 8001f06:	2901      	cmp	r1, #1
{
 8001f08:	b085      	sub	sp, #20
 8001f0a:	4605      	mov	r5, r0
	if (argc != 1) {
 8001f0c:	d00d      	beq.n	8001f2a <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
 8001f0e:	6853      	ldr	r3, [r2, #4]
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	4b53      	ldr	r3, [pc, #332]	; (8002060 <cmd_resize+0x15c>)
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	6813      	ldr	r3, [r2, #0]
 8001f18:	4a52      	ldr	r2, [pc, #328]	; (8002064 <cmd_resize+0x160>)
 8001f1a:	2102      	movs	r1, #2
 8001f1c:	f004 fdb9 	bl	8006a92 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
 8001f20:	f06f 0415 	mvn.w	r4, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
 8001f24:	4620      	mov	r0, r4
 8001f26:	b005      	add	sp, #20
 8001f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
 8001f2a:	4a4f      	ldr	r2, [pc, #316]	; (8002068 <cmd_resize+0x164>)
 8001f2c:	494f      	ldr	r1, [pc, #316]	; (800206c <cmd_resize+0x168>)
 8001f2e:	6940      	ldr	r0, [r0, #20]
 8001f30:	f005 fa89 	bl	8007446 <shell_raw_fprintf>
	shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
 8001f34:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
 8001f38:	4628      	mov	r0, r5
 8001f3a:	f7ff fc9b 	bl	8001874 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
 8001f3e:	21fa      	movs	r1, #250	; 0xfa
 8001f40:	4628      	mov	r0, r5
 8001f42:	f7ff fca7 	bl	8001894 <shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
 8001f46:	68a8      	ldr	r0, [r5, #8]
	char c = 0;
 8001f48:	2400      	movs	r4, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
 8001f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f4e:	4621      	mov	r1, r4
 8001f50:	f500 709c 	add.w	r0, r0, #312	; 0x138
	char c = 0;
 8001f54:	f88d 400b 	strb.w	r4, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
 8001f58:	f006 f81e 	bl	8007f98 <memset>
	shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
 8001f5c:	4944      	ldr	r1, [pc, #272]	; (8002070 <cmd_resize+0x16c>)
 8001f5e:	6968      	ldr	r0, [r5, #20]
 8001f60:	f005 fa71 	bl	8007446 <shell_raw_fprintf>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
 8001f64:	6968      	ldr	r0, [r5, #20]
 8001f66:	f004 fdc1 	bl	8006aec <shell_fprintf_buffer_flush>
 8001f6a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
 8001f6e:	6868      	ldr	r0, [r5, #4]
 8001f70:	6803      	ldr	r3, [r0, #0]
 8001f72:	2201      	movs	r2, #1
 8001f74:	691f      	ldr	r7, [r3, #16]
 8001f76:	f10d 010b 	add.w	r1, sp, #11
 8001f7a:	ab03      	add	r3, sp, #12
 8001f7c:	47b8      	blx	r7
			if (cnt == 0) {
 8001f7e:	9b03      	ldr	r3, [sp, #12]
 8001f80:	b953      	cbnz	r3, 8001f98 <cmd_resize+0x94>
	z_impl_k_busy_wait(usec_to_wait);
 8001f82:	3e01      	subs	r6, #1
 8001f84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f88:	b2b6      	uxth	r6, r6
 8001f8a:	f003 fbb5 	bl	80056f8 <z_impl_k_busy_wait>
	for (u16_t i = 0; i < 1000; i++) {
 8001f8e:	2e00      	cmp	r6, #0
 8001f90:	d1ed      	bne.n	8001f6e <cmd_resize+0x6a>
		ret_val = -ENOTSUP;
 8001f92:	f06f 0422 	mvn.w	r4, #34	; 0x22
 8001f96:	e031      	b.n	8001ffc <cmd_resize+0xf8>
			if ((c != SHELL_VT100_ASCII_ESC) &&
 8001f98:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001f9c:	68aa      	ldr	r2, [r5, #8]
 8001f9e:	2b1b      	cmp	r3, #27
 8001fa0:	d053      	beq.n	800204a <cmd_resize+0x146>
 8001fa2:	f892 1138 	ldrb.w	r1, [r2, #312]	; 0x138
 8001fa6:	291b      	cmp	r1, #27
 8001fa8:	d1e1      	bne.n	8001f6e <cmd_resize+0x6a>
			if (c == 'R') { /* End of response from the terminal. */
 8001faa:	2b52      	cmp	r3, #82	; 0x52
 8001fac:	d14d      	bne.n	800204a <cmd_resize+0x146>
				shell->ctx->temp_buff[buff_idx] = '\0';
 8001fae:	4414      	add	r4, r2
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
				if (shell->ctx->temp_buff[1] != '[') {
 8001fb6:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
 8001fba:	295b      	cmp	r1, #91	; 0x5b
 8001fbc:	d14d      	bne.n	800205a <cmd_resize+0x156>
 8001fbe:	f502 709d 	add.w	r0, r2, #314	; 0x13a
	*y = 0U;
 8001fc2:	461f      	mov	r7, r3
				buff_idx = 2U;
 8001fc4:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
 8001fc6:	f810 1b01 	ldrb.w	r1, [r0], #1
 8001fca:	3601      	adds	r6, #1
 8001fcc:	293b      	cmp	r1, #59	; 0x3b
 8001fce:	b2b6      	uxth	r6, r6
 8001fd0:	d126      	bne.n	8002020 <cmd_resize+0x11c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 8001fd2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8001fd6:	d0dc      	beq.n	8001f92 <cmd_resize+0x8e>
 8001fd8:	f506 709c 	add.w	r0, r6, #312	; 0x138
 8001fdc:	4410      	add	r0, r2
	*x = 0U;
 8001fde:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
 8001fe0:	f810 4b01 	ldrb.w	r4, [r0], #1
 8001fe4:	bb34      	cbnz	r4, 8002034 <cmd_resize+0x130>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 8001fe6:	2bfa      	cmp	r3, #250	; 0xfa
 8001fe8:	bf28      	it	cs
 8001fea:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 8001fec:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 8001fee:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	bf28      	it	cs
 8001ff4:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
 8001ff6:	f882 4138 	strb.w	r4, [r2, #312]	; 0x138
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 8001ffa:	8513      	strh	r3, [r2, #40]	; 0x28
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
 8001ffc:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <cmd_resize+0x170>)
 8001ffe:	491b      	ldr	r1, [pc, #108]	; (800206c <cmd_resize+0x168>)
 8002000:	6968      	ldr	r0, [r5, #20]
 8002002:	f005 fa20 	bl	8007446 <shell_raw_fprintf>
	if (err != 0) {
 8002006:	2c00      	cmp	r4, #0
 8002008:	d08c      	beq.n	8001f24 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
 800200a:	68ab      	ldr	r3, [r5, #8]
 800200c:	4a1a      	ldr	r2, [pc, #104]	; (8002078 <cmd_resize+0x174>)
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
 8002010:	2104      	movs	r1, #4
 8002012:	4a1a      	ldr	r2, [pc, #104]	; (800207c <cmd_resize+0x178>)
 8002014:	4628      	mov	r0, r5
 8002016:	f004 fd3c 	bl	8006a92 <shell_fprintf>
 800201a:	f06f 0407 	mvn.w	r4, #7
 800201e:	e781      	b.n	8001f24 <cmd_resize+0x20>
					*y = *y * 10U +
 8002020:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8002024:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8002028:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
 800202a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
 800202e:	b29f      	uxth	r7, r3
					if (buff_idx >=
 8002030:	d1c9      	bne.n	8001fc6 <cmd_resize+0xc2>
 8002032:	e7ae      	b.n	8001f92 <cmd_resize+0x8e>
					*x = *x * 10U +
 8002034:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
 8002038:	3601      	adds	r6, #1
					*x = *x * 10U +
 800203a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
 800203e:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
 8002040:	3c30      	subs	r4, #48	; 0x30
					if (buff_idx >=
 8002042:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
 8002044:	b2a3      	uxth	r3, r4
					if (buff_idx >=
 8002046:	d9cb      	bls.n	8001fe0 <cmd_resize+0xdc>
 8002048:	e7a3      	b.n	8001f92 <cmd_resize+0x8e>
			shell->ctx->temp_buff[buff_idx] = c;
 800204a:	1911      	adds	r1, r2, r4
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 800204c:	3401      	adds	r4, #1
 800204e:	b2a4      	uxth	r4, r4
 8002050:	2c09      	cmp	r4, #9
			shell->ctx->temp_buff[buff_idx] = c;
 8002052:	f881 3138 	strb.w	r3, [r1, #312]	; 0x138
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 8002056:	d98a      	bls.n	8001f6e <cmd_resize+0x6a>
				shell->ctx->temp_buff[0] = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	f882 3138 	strb.w	r3, [r2, #312]	; 0x138
				return -ENOMEM;
 800205e:	e798      	b.n	8001f92 <cmd_resize+0x8e>
 8002060:	080098fb 	.word	0x080098fb
 8002064:	080098f2 	.word	0x080098f2
 8002068:	080098d6 	.word	0x080098d6
 800206c:	0800986a 	.word	0x0800986a
 8002070:	08009921 	.word	0x08009921
 8002074:	080098d9 	.word	0x080098d9
 8002078:	00500018 	.word	0x00500018
 800207c:	08009ae7 	.word	0x08009ae7

08002080 <shell_wildcard_process>:


enum shell_wildcard_status shell_wildcard_process(const struct shell *shell,
					      const struct shell_cmd_entry *cmd,
					      const char *pattern)
{
 8002080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002084:	4682      	mov	sl, r0
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	4616      	mov	r6, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
 800208a:	468b      	mov	fp, r1
 800208c:	b921      	cbnz	r1, 8002098 <shell_wildcard_process+0x18>
		return ret_val;
 800208e:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
 8002090:	4620      	mov	r0, r4
 8002092:	b009      	add	sp, #36	; 0x24
 8002094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!shell_wildcard_character_exist(pattern)) {
 8002098:	4610      	mov	r0, r2
 800209a:	f005 fa9e 	bl	80075da <shell_wildcard_character_exist>
 800209e:	2800      	cmp	r0, #0
 80020a0:	d0f5      	beq.n	800208e <shell_wildcard_process+0xe>
 80020a2:	2500      	movs	r5, #0
	size_t cnt = 0;
 80020a4:	9501      	str	r5, [sp, #4]
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 80020a6:	2402      	movs	r4, #2
	if (cmd->is_dynamic) {
 80020a8:	f89b 2000 	ldrb.w	r2, [fp]
 80020ac:	f8db 3004 	ldr.w	r3, [fp, #4]
 80020b0:	4268      	negs	r0, r5
 80020b2:	b18a      	cbz	r2, 80020d8 <shell_wildcard_process+0x58>
		cmd->u.dynamic_get(idx, d_entry);
 80020b4:	a903      	add	r1, sp, #12
 80020b6:	4798      	blx	r3
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
 80020b8:	9b03      	ldr	r3, [sp, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d15b      	bne.n	8002176 <shell_wildcard_process+0xf6>
	if (cnt > 0) {
 80020be:	9b01      	ldr	r3, [sp, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0e5      	beq.n	8002090 <shell_wildcard_process+0x10>
		shell_pattern_remove(shell->ctx->temp_buff,
 80020c4:	f8da 0008 	ldr.w	r0, [sl, #8]
 80020c8:	4632      	mov	r2, r6
 80020ca:	f100 0136 	add.w	r1, r0, #54	; 0x36
 80020ce:	f500 709c 	add.w	r0, r0, #312	; 0x138
 80020d2:	f004 fe38 	bl	8006d46 <shell_pattern_remove>
	return ret_val;
 80020d6:	e7db      	b.n	8002090 <shell_wildcard_process+0x10>
		*entry = (cmd->u.entry[idx].syntax != NULL) ?
 80020d8:	f06f 0213 	mvn.w	r2, #19
 80020dc:	436a      	muls	r2, r5
 80020de:	eb03 0802 	add.w	r8, r3, r2
				&cmd->u.entry[idx] : NULL;
 80020e2:	589b      	ldr	r3, [r3, r2]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ea      	beq.n	80020be <shell_wildcard_process+0x3e>
		if (fnmatch(pattern, p_static_entry->syntax, 0) == 0) {
 80020e8:	2200      	movs	r2, #0
 80020ea:	f8d8 1000 	ldr.w	r1, [r8]
 80020ee:	4630      	mov	r0, r6
 80020f0:	f004 fc98 	bl	8006a24 <fnmatch>
 80020f4:	bb80      	cbnz	r0, 8002158 <shell_wildcard_process+0xd8>
			ret_val = command_add(shell->ctx->temp_buff,
 80020f6:	f8d8 9000 	ldr.w	r9, [r8]
 80020fa:	f8da 7008 	ldr.w	r7, [sl, #8]
	return str == NULL ? 0U : (u16_t)strlen(str);
 80020fe:	f1b9 0f00 	cmp.w	r9, #0
 8002102:	d02c      	beq.n	800215e <shell_wildcard_process+0xde>
 8002104:	4648      	mov	r0, r9
 8002106:	f005 fed4 	bl	8007eb2 <strlen>
 800210a:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
 800210c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800210e:	3301      	adds	r3, #1
 8002110:	4423      	add	r3, r4
 8002112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002116:	dc24      	bgt.n	8002162 <shell_wildcard_process+0xe2>
	completion_addr = strstr(buff, pattern);
 8002118:	4631      	mov	r1, r6
 800211a:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800211e:	f005 fe80 	bl	8007e22 <strstr>
	if (!completion_addr) {
 8002122:	4680      	mov	r8, r0
 8002124:	b328      	cbz	r0, 8002172 <shell_wildcard_process+0xf2>
 8002126:	f005 fec4 	bl	8007eb2 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
 800212a:	b282      	uxth	r2, r0
 800212c:	1c60      	adds	r0, r4, #1
 800212e:	3201      	adds	r2, #1
 8002130:	4641      	mov	r1, r8
 8002132:	4440      	add	r0, r8
 8002134:	f005 feef 	bl	8007f16 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
 8002138:	4622      	mov	r2, r4
 800213a:	4649      	mov	r1, r9
 800213c:	4640      	mov	r0, r8
 800213e:	f005 ff01 	bl	8007f44 <memcpy>
	completion_addr[cmd_len] = ' ';
 8002142:	2320      	movs	r3, #32
 8002144:	f808 3004 	strb.w	r3, [r8, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
 8002148:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800214a:	441c      	add	r4, r3
			cnt++;
 800214c:	9b01      	ldr	r3, [sp, #4]
	*buff_len += cmd_len + 1; /* + 1 for space */
 800214e:	3401      	adds	r4, #1
			cnt++;
 8002150:	3301      	adds	r3, #1
	*buff_len += cmd_len + 1; /* + 1 for space */
 8002152:	86fc      	strh	r4, [r7, #54]	; 0x36
			cnt++;
 8002154:	9301      	str	r3, [sp, #4]
			ret_val = command_add(shell->ctx->temp_buff,
 8002156:	2400      	movs	r4, #0
	} while (cmd_idx);
 8002158:	3d01      	subs	r5, #1
 800215a:	d1a5      	bne.n	80020a8 <shell_wildcard_process+0x28>
 800215c:	e7af      	b.n	80020be <shell_wildcard_process+0x3e>
 800215e:	464c      	mov	r4, r9
 8002160:	e7d4      	b.n	800210c <shell_wildcard_process+0x8c>
				shell_internal_fprintf(shell,
 8002162:	4633      	mov	r3, r6
 8002164:	4a05      	ldr	r2, [pc, #20]	; (800217c <shell_wildcard_process+0xfc>)
 8002166:	2104      	movs	r1, #4
 8002168:	4650      	mov	r0, sl
 800216a:	f004 fffc 	bl	8007166 <shell_internal_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
 800216e:	2401      	movs	r4, #1
 8002170:	e7a5      	b.n	80020be <shell_wildcard_process+0x3e>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 8002172:	2402      	movs	r4, #2
 8002174:	e7a3      	b.n	80020be <shell_wildcard_process+0x3e>
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
 8002176:	f10d 080c 	add.w	r8, sp, #12
 800217a:	e7b5      	b.n	80020e8 <shell_wildcard_process+0x68>
 800217c:	08009f04 	.word	0x08009f04

08002180 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, void *arg)
{
 8002180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct device *dev = arg;
	struct stm32_exti_data *data = dev->driver_data;
 8002184:	6895      	ldr	r5, [r2, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002186:	4e0d      	ldr	r6, [pc, #52]	; (80021bc <__stm32_exti_isr+0x3c>)
{
 8002188:	4604      	mov	r4, r0
 800218a:	460f      	mov	r7, r1
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800218c:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8002190:	f105 0904 	add.w	r9, r5, #4
	for (line = min; line < max; line++) {
 8002194:	42bc      	cmp	r4, r7
 8002196:	db01      	blt.n	800219c <__stm32_exti_isr+0x1c>
		}
	}
}
 8002198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800219c:	6972      	ldr	r2, [r6, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800219e:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 80021a2:	ea33 0202 	bics.w	r2, r3, r2
 80021a6:	d107      	bne.n	80021b8 <__stm32_exti_isr+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80021a8:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 80021aa:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 80021ae:	b11b      	cbz	r3, 80021b8 <__stm32_exti_isr+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 80021b0:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 80021b4:	4620      	mov	r0, r4
 80021b6:	4798      	blx	r3
	for (line = min; line < max; line++) {
 80021b8:	3401      	adds	r4, #1
 80021ba:	e7eb      	b.n	8002194 <__stm32_exti_isr+0x14>
 80021bc:	40013c00 	.word	0x40013c00

080021c0 <stm32_exti_enable>:
	if (line < 32) {
 80021c0:	281f      	cmp	r0, #31
{
 80021c2:	b508      	push	{r3, lr}
	if (line < 32) {
 80021c4:	dd02      	ble.n	80021cc <stm32_exti_enable+0xc>
		return -ENOTSUP;
 80021c6:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 80021ca:	bd08      	pop	{r3, pc}
  SET_BIT(EXTI->IMR, ExtiLine);
 80021cc:	4a06      	ldr	r2, [pc, #24]	; (80021e8 <stm32_exti_enable+0x28>)
		LL_EXTI_EnableIT_0_31(1 << line);
 80021ce:	2301      	movs	r3, #1
 80021d0:	6811      	ldr	r1, [r2, #0]
 80021d2:	4083      	lsls	r3, r0
 80021d4:	430b      	orrs	r3, r1
	if (line < ARRAY_SIZE(exti_irq_table)) {
 80021d6:	2816      	cmp	r0, #22
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	dcf4      	bgt.n	80021c6 <stm32_exti_enable+0x6>
	irq_enable(irqnum);
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <stm32_exti_enable+0x2c>)
 80021de:	5618      	ldrsb	r0, [r3, r0]
 80021e0:	f001 f8e0 	bl	80033a4 <arch_irq_enable>
	return 0;
 80021e4:	2000      	movs	r0, #0
 80021e6:	e7f0      	b.n	80021ca <stm32_exti_enable+0xa>
 80021e8:	40013c00 	.word	0x40013c00
 80021ec:	08009f56 	.word	0x08009f56

080021f0 <stm32_exti_disable>:
	if (line < 32) {
 80021f0:	281f      	cmp	r0, #31
 80021f2:	dc06      	bgt.n	8002202 <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80021f4:	4903      	ldr	r1, [pc, #12]	; (8002204 <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 80021f6:	2201      	movs	r2, #1
 80021f8:	680b      	ldr	r3, [r1, #0]
 80021fa:	4082      	lsls	r2, r0
 80021fc:	ea23 0302 	bic.w	r3, r3, r2
 8002200:	600b      	str	r3, [r1, #0]
}
 8002202:	4770      	bx	lr
 8002204:	40013c00 	.word	0x40013c00

08002208 <stm32_exti_trigger>:
	if (trigger & STM32_EXTI_TRIG_RISING) {
 8002208:	07ca      	lsls	r2, r1, #31
{
 800220a:	b510      	push	{r4, lr}
	if (trigger & STM32_EXTI_TRIG_RISING) {
 800220c:	d507      	bpl.n	800221e <stm32_exti_trigger+0x16>
		if (line < 32) {
 800220e:	281f      	cmp	r0, #31
 8002210:	dc05      	bgt.n	800221e <stm32_exti_trigger+0x16>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8002214:	2201      	movs	r2, #1
 8002216:	689c      	ldr	r4, [r3, #8]
 8002218:	4082      	lsls	r2, r0
 800221a:	4322      	orrs	r2, r4
 800221c:	609a      	str	r2, [r3, #8]
	if (trigger & STM32_EXTI_TRIG_FALLING) {
 800221e:	078b      	lsls	r3, r1, #30
 8002220:	d507      	bpl.n	8002232 <stm32_exti_trigger+0x2a>
		if (line < 32) {
 8002222:	281f      	cmp	r0, #31
 8002224:	dc05      	bgt.n	8002232 <stm32_exti_trigger+0x2a>
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002226:	4a03      	ldr	r2, [pc, #12]	; (8002234 <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8002228:	2301      	movs	r3, #1
 800222a:	68d1      	ldr	r1, [r2, #12]
 800222c:	4083      	lsls	r3, r0
 800222e:	430b      	orrs	r3, r1
 8002230:	60d3      	str	r3, [r2, #12]
}
 8002232:	bd10      	pop	{r4, pc}
 8002234:	40013c00 	.word	0x40013c00

08002238 <stm32_exti_set_callback>:
				void *arg)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	if (data->cb[line].cb) {
 8002238:	4907      	ldr	r1, [pc, #28]	; (8002258 <stm32_exti_set_callback+0x20>)
{
 800223a:	b530      	push	{r4, r5, lr}
 800223c:	688c      	ldr	r4, [r1, #8]
	if (data->cb[line].cb) {
 800223e:	f854 1030 	ldr.w	r1, [r4, r0, lsl #3]
 8002242:	eb04 05c0 	add.w	r5, r4, r0, lsl #3
 8002246:	b921      	cbnz	r1, 8002252 <stm32_exti_set_callback+0x1a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8002248:	f844 2030 	str.w	r2, [r4, r0, lsl #3]
	data->cb[line].data = arg;
 800224c:	606b      	str	r3, [r5, #4]

	return 0;
 800224e:	4608      	mov	r0, r1
}
 8002250:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 8002252:	f06f 000f 	mvn.w	r0, #15
 8002256:	e7fb      	b.n	8002250 <stm32_exti_set_callback+0x18>
 8002258:	20002a28 	.word	0x20002a28

0800225c <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	data->cb[line].cb = NULL;
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <stm32_exti_unset_callback+0x14>)
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8002264:	2300      	movs	r3, #0
 8002266:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	data->cb[line].data = NULL;
 800226a:	604b      	str	r3, [r1, #4]
}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20002a28 	.word	0x20002a28

08002274 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8002274:	680b      	ldr	r3, [r1, #0]
{
 8002276:	b084      	sub	sp, #16
	switch (pclken->bus) {
 8002278:	2b03      	cmp	r3, #3
 800227a:	d82d      	bhi.n	80022d8 <stm32_clock_control_on+0x64>
 800227c:	e8df f003 	tbb	[pc, r3]
 8002280:	22180e02 	.word	0x22180e02
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002284:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <stm32_clock_control_on+0x6c>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8002286:	684b      	ldr	r3, [r1, #4]
 8002288:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800228a:	4319      	orrs	r1, r3
 800228c:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800228e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002290:	4013      	ands	r3, r2
 8002292:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002294:	9b00      	ldr	r3, [sp, #0]
#endif /* CONFIG_SOC_SERIES_STM32L0X || CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8002296:	2000      	movs	r0, #0
}
 8002298:	b004      	add	sp, #16
 800229a:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800229c:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <stm32_clock_control_on+0x6c>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 800229e:	684b      	ldr	r3, [r1, #4]
 80022a0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80022a2:	4319      	orrs	r1, r3
 80022a4:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022a8:	4013      	ands	r3, r2
 80022aa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80022ac:	9b01      	ldr	r3, [sp, #4]
 80022ae:	e7f2      	b.n	8002296 <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80022b0:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <stm32_clock_control_on+0x6c>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 80022b2:	684b      	ldr	r3, [r1, #4]
 80022b4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80022b6:	4319      	orrs	r1, r3
 80022b8:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80022ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022bc:	4013      	ands	r3, r2
 80022be:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80022c0:	9b02      	ldr	r3, [sp, #8]
 80022c2:	e7e8      	b.n	8002296 <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80022c4:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <stm32_clock_control_on+0x6c>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 80022c6:	684b      	ldr	r3, [r1, #4]
 80022c8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80022ca:	4319      	orrs	r1, r3
 80022cc:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022d0:	4013      	ands	r3, r2
 80022d2:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80022d4:	9b03      	ldr	r3, [sp, #12]
 80022d6:	e7de      	b.n	8002296 <stm32_clock_control_on+0x22>
		return -ENOTSUP;
 80022d8:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80022dc:	e7dc      	b.n	8002298 <stm32_clock_control_on+0x24>
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800

080022e4 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80022e4:	680b      	ldr	r3, [r1, #0]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d820      	bhi.n	800232c <stm32_clock_control_off+0x48>
 80022ea:	e8df f003 	tbb	[pc, r3]
 80022ee:	0a02      	.short	0x0a02
 80022f0:	1811      	.short	0x1811
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80022f2:	4a10      	ldr	r2, [pc, #64]	; (8002334 <stm32_clock_control_off+0x50>)
 80022f4:	6849      	ldr	r1, [r1, #4]
 80022f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022f8:	ea23 0301 	bic.w	r3, r3, r1
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 80022fe:	2000      	movs	r0, #0
 8002300:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8002302:	4a0c      	ldr	r2, [pc, #48]	; (8002334 <stm32_clock_control_off+0x50>)
 8002304:	6849      	ldr	r1, [r1, #4]
 8002306:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002308:	ea23 0301 	bic.w	r3, r3, r1
 800230c:	6353      	str	r3, [r2, #52]	; 0x34
 800230e:	e7f6      	b.n	80022fe <stm32_clock_control_off+0x1a>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8002310:	4a08      	ldr	r2, [pc, #32]	; (8002334 <stm32_clock_control_off+0x50>)
 8002312:	6849      	ldr	r1, [r1, #4]
 8002314:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002316:	ea23 0301 	bic.w	r3, r3, r1
 800231a:	6413      	str	r3, [r2, #64]	; 0x40
 800231c:	e7ef      	b.n	80022fe <stm32_clock_control_off+0x1a>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <stm32_clock_control_off+0x50>)
 8002320:	6849      	ldr	r1, [r1, #4]
 8002322:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002324:	ea23 0301 	bic.w	r3, r3, r1
 8002328:	6453      	str	r3, [r2, #68]	; 0x44
 800232a:	e7e8      	b.n	80022fe <stm32_clock_control_off+0x1a>
		return -ENOTSUP;
 800232c:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800

08002338 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	u32_t ahb_clock = SystemCoreClock;
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <stm32_clock_control_get_subsys_rate+0x24>)
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800233a:	6809      	ldr	r1, [r1, #0]
	u32_t ahb_clock = SystemCoreClock;
 800233c:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 800233e:	2903      	cmp	r1, #3
 8002340:	d809      	bhi.n	8002356 <stm32_clock_control_get_subsys_rate+0x1e>
 8002342:	e8df f001 	tbb	[pc, r1]
 8002346:	0303      	.short	0x0303
 8002348:	0602      	.short	0x0602
	return clock / prescaler;
 800234a:	089b      	lsrs	r3, r3, #2
		/*
		 * STM32G0x only has one APB, but two reset/clock enable
		 * registers for peripherals, so return the APB1 clock rate here
		 */
#endif /* CONFIG_SOC_SERIES_STM32G0X */
		*rate = apb1_clock;
 800234c:	6013      	str	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 800234e:	2000      	movs	r0, #0
		break;
 8002350:	4770      	bx	lr
	return clock / prescaler;
 8002352:	085b      	lsrs	r3, r3, #1
 8002354:	e7fa      	b.n	800234c <stm32_clock_control_get_subsys_rate+0x14>
		return -ENOTSUP;
 8002356:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 800235a:	4770      	bx	lr
 800235c:	200029e0 	.word	0x200029e0

08002360 <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(struct device *dev)
{
 8002360:	b530      	push	{r4, r5, lr}
	clk_init->APB1CLKDivider = apb1_prescaler(
 8002362:	2100      	movs	r1, #0
{
 8002364:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(
 8002366:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800236a:	e9cd 1300 	strd	r1, r3, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(
 800236e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002372:	9302      	str	r3, [sp, #8]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8002374:	f000 f838 	bl	80023e8 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8002378:	a803      	add	r0, sp, #12
 800237a:	f005 f9e2 	bl	8007742 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <stm32_clock_control_init+0x80>)
 8002380:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8002382:	0790      	lsls	r0, r2, #30
 8002384:	d406      	bmi.n	8002394 <stm32_clock_control_init+0x34>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800238e:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8002390:	0792      	lsls	r2, r2, #30
 8002392:	d5fc      	bpl.n	800238e <stm32_clock_control_init+0x2e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002394:	4c12      	ldr	r4, [pc, #72]	; (80023e0 <stm32_clock_control_init+0x80>)
 8002396:	68a3      	ldr	r3, [r4, #8]
 8002398:	f023 0303 	bic.w	r3, r3, #3
 800239c:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800239e:	68a3      	ldr	r3, [r4, #8]
 80023a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023a4:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023a6:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80023a8:	f015 050c 	ands.w	r5, r5, #12
 80023ac:	d1fb      	bne.n	80023a6 <stm32_clock_control_init+0x46>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80023ae:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_CLOCK_STM32_HSE_BYPASS
	hse_bypass = LL_UTILS_HSEBYPASS_ON;
#endif /* CONFIG_CLOCK_STM32_HSE_BYPASS */

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 80023b0:	480c      	ldr	r0, [pc, #48]	; (80023e4 <stm32_clock_control_init+0x84>)
 80023b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b6:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 80023b8:	6863      	ldr	r3, [r4, #4]
 80023ba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80023be:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80023c2:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 80023c4:	aa03      	add	r2, sp, #12
 80023c6:	466b      	mov	r3, sp
 80023c8:	4629      	mov	r1, r5
 80023ca:	f002 fb97 	bl	8004afc <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 80023d6:	f005 f9bd 	bl	8007754 <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80023da:	4628      	mov	r0, r5
 80023dc:	b007      	add	sp, #28
 80023de:	bd30      	pop	{r4, r5, pc}
 80023e0:	40023800 	.word	0x40023800
 80023e4:	00f42400 	.word	0x00f42400

080023e8 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <config_enable_default_clocks+0x1c>)
 80023ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80023f4:	b082      	sub	sp, #8
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80023fc:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 80023fe:	b002      	add	sp, #8
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800

08002408 <z_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int z_pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 8002408:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800240a:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 800240c:	0906      	lsrs	r6, r0, #4
{
 800240e:	460d      	mov	r5, r1
	if (!clk) {
 8002410:	4610      	mov	r0, r2
 8002412:	b912      	cbnz	r2, 800241a <z_pinmux_stm32_set+0x12>
 8002414:	4811      	ldr	r0, [pc, #68]	; (800245c <z_pinmux_stm32_set+0x54>)
 8002416:	f002 fbd5 	bl	8004bc4 <z_impl_device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 800241a:	2300      	movs	r3, #0
 800241c:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <z_pinmux_stm32_set+0x58>)
 8002420:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8002424:	9301      	str	r3, [sp, #4]
	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8002426:	3301      	adds	r3, #1
 8002428:	d102      	bne.n	8002430 <z_pinmux_stm32_set+0x28>
		return -EIO;
 800242a:	f06f 0004 	mvn.w	r0, #4
 800242e:	e012      	b.n	8002456 <z_pinmux_stm32_set+0x4e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
 8002430:	6843      	ldr	r3, [r0, #4]
 8002432:	4669      	mov	r1, sp
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 8002438:	2800      	cmp	r0, #0
 800243a:	d1f6      	bne.n	800242a <z_pinmux_stm32_set+0x22>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 800243c:	1120      	asrs	r0, r4, #4
 800243e:	0280      	lsls	r0, r0, #10
	return gpio_stm32_configure((u32_t *)port_base,
 8002440:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002444:	f005 030f 	and.w	r3, r5, #15
 8002448:	462a      	mov	r2, r5
 800244a:	f004 010f 	and.w	r1, r4, #15
 800244e:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 8002452:	f005 fed5 	bl	8008200 <gpio_stm32_configure>
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 8002456:	b002      	add	sp, #8
 8002458:	bd70      	pop	{r4, r5, r6, pc}
 800245a:	bf00      	nop
 800245c:	08009f78 	.word	0x08009f78
 8002460:	080094a8 	.word	0x080094a8

08002464 <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	4604      	mov	r4, r0
 8002468:	460e      	mov	r6, r1
 800246a:	4809      	ldr	r0, [pc, #36]	; (8002490 <stm32_setup_pins+0x2c>)
 800246c:	f002 fbaa 	bl	8004bc4 <z_impl_device_get_binding>
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8002470:	2500      	movs	r5, #0
 8002472:	4607      	mov	r7, r0
 8002474:	42b5      	cmp	r5, r6
 8002476:	f104 0408 	add.w	r4, r4, #8
 800247a:	d100      	bne.n	800247e <stm32_setup_pins+0x1a>
		z_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 800247c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_pinmux_stm32_set(pinconf[i].pin_num,
 800247e:	463a      	mov	r2, r7
 8002480:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8002484:	f814 0c08 	ldrb.w	r0, [r4, #-8]
 8002488:	f7ff ffbe 	bl	8002408 <z_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 800248c:	3501      	adds	r5, #1
 800248e:	e7f1      	b.n	8002474 <stm32_setup_pins+0x10>
 8002490:	08009f78 	.word	0x08009f78

08002494 <z_impl_can_attach_msgq>:
int z_impl_can_attach_msgq(struct device *dev, struct k_msgq *msg_q,
			   const struct zcan_filter *filter)
{
	const struct can_driver_api *api = dev->driver_api;

	return api->attach_isr(dev, can_msgq_put, msg_q, filter);
 8002494:	6843      	ldr	r3, [r0, #4]
{
 8002496:	b410      	push	{r4}
	return api->attach_isr(dev, can_msgq_put, msg_q, filter);
 8002498:	689c      	ldr	r4, [r3, #8]
 800249a:	4613      	mov	r3, r2
 800249c:	46a4      	mov	ip, r4
 800249e:	460a      	mov	r2, r1
}
 80024a0:	bc10      	pop	{r4}
	return api->attach_isr(dev, can_msgq_put, msg_q, filter);
 80024a2:	4901      	ldr	r1, [pc, #4]	; (80024a8 <z_impl_can_attach_msgq+0x14>)
 80024a4:	4760      	bx	ip
 80024a6:	bf00      	nop
 80024a8:	0800779d 	.word	0x0800779d

080024ac <can_attach_workq>:

int can_attach_workq(struct device *dev, struct k_work_q *work_q,
			    struct zcan_work *work,
			    can_rx_callback_t callback, void *callback_arg,
			    const struct zcan_filter *filter)
{
 80024ac:	b4f0      	push	{r4, r5, r6, r7}
	const struct can_driver_api *api = dev->driver_api;
 80024ae:	6846      	ldr	r6, [r0, #4]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 80024b0:	4f09      	ldr	r7, [pc, #36]	; (80024d8 <can_attach_workq+0x2c>)
	work->work_queue = work_q;
	work->cb = callback;
	work->cb_arg = callback_arg;
	can_work_buffer_init(&work->buf);

	return api->attach_isr(dev, can_work_isr_put, work, filter);
 80024b2:	68b4      	ldr	r4, [r6, #8]
	work->cb = callback;
 80024b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b6:	2500      	movs	r5, #0
	work->cb_arg = callback_arg;
 80024b8:	9b04      	ldr	r3, [sp, #16]
 80024ba:	6015      	str	r5, [r2, #0]
 80024bc:	e9c2 7501 	strd	r7, r5, [r2, #4]
	work->work_queue = work_q;
 80024c0:	60d1      	str	r1, [r2, #12]
	work->cb_arg = callback_arg;
 80024c2:	6513      	str	r3, [r2, #80]	; 0x50
	buffer->head = 0;
 80024c4:	f8a2 5048 	strh.w	r5, [r2, #72]	; 0x48
	buffer->tail = 0;
 80024c8:	f8a2 504a 	strh.w	r5, [r2, #74]	; 0x4a
	return api->attach_isr(dev, can_work_isr_put, work, filter);
 80024cc:	9b05      	ldr	r3, [sp, #20]
 80024ce:	4903      	ldr	r1, [pc, #12]	; (80024dc <can_attach_workq+0x30>)
 80024d0:	46a4      	mov	ip, r4
}
 80024d2:	bcf0      	pop	{r4, r5, r6, r7}
	return api->attach_isr(dev, can_work_isr_put, work, filter);
 80024d4:	4760      	bx	ip
 80024d6:	bf00      	nop
 80024d8:	08007757 	.word	0x08007757
 80024dc:	080077a9 	.word	0x080077a9

080024e0 <can_enter_init_mode>:

static int can_enter_init_mode(CAN_TypeDef *can)
{
	u32_t start_time;

	can->MCR |= CAN_MCR_INRQ;
 80024e0:	6803      	ldr	r3, [r0, #0]
 80024e2:	f043 0301 	orr.w	r3, r3, #1
{
 80024e6:	b570      	push	{r4, r5, r6, lr}
	can->MCR |= CAN_MCR_INRQ;
 80024e8:	6003      	str	r3, [r0, #0]
{
 80024ea:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
 80024ec:	f000 fee2 	bl	80032b4 <z_timer_cycle_get_32>
	start_time = k_cycle_get_32();

	while ((can->MSR & CAN_MSR_INAK) == 0U) {
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 80024f0:	4e09      	ldr	r6, [pc, #36]	; (8002518 <can_enter_init_mode+0x38>)
 80024f2:	4605      	mov	r5, r0
	while ((can->MSR & CAN_MSR_INAK) == 0U) {
 80024f4:	6863      	ldr	r3, [r4, #4]
 80024f6:	07db      	lsls	r3, r3, #31
 80024f8:	d501      	bpl.n	80024fe <can_enter_init_mode+0x1e>
			can->MCR &= ~CAN_MCR_INRQ;
			return CAN_TIMEOUT;
		}
	}

	return 0;
 80024fa:	2000      	movs	r0, #0
 80024fc:	e00a      	b.n	8002514 <can_enter_init_mode+0x34>
 80024fe:	f000 fed9 	bl	80032b4 <z_timer_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 8002502:	1b40      	subs	r0, r0, r5
 8002504:	42b0      	cmp	r0, r6
 8002506:	d9f5      	bls.n	80024f4 <can_enter_init_mode+0x14>
			can->MCR &= ~CAN_MCR_INRQ;
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	6023      	str	r3, [r4, #0]
			return CAN_TIMEOUT;
 8002510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002514:	bd70      	pop	{r4, r5, r6, pc}
 8002516:	bf00      	nop
 8002518:	0019a280 	.word	0x0019a280

0800251c <can_stm32_runtime_configure>:

int can_stm32_runtime_configure(struct device *dev, enum can_mode mode,
				u32_t bitrate)
{
	CAN_HandleTypeDef hcan;
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 800251c:	6803      	ldr	r3, [r0, #0]
{
 800251e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 8002522:	f8d3 a008 	ldr.w	sl, [r3, #8]
	CAN_TypeDef *can = cfg->can;
	struct can_stm32_data *data = DEV_DATA(dev);
 8002526:	6886      	ldr	r6, [r0, #8]
	CAN_TypeDef *can = cfg->can;
 8002528:	4654      	mov	r4, sl
{
 800252a:	4688      	mov	r8, r1
 800252c:	4617      	mov	r7, r2
	CAN_TypeDef *can = cfg->can;
 800252e:	f854 5b0c 	ldr.w	r5, [r4], #12
 8002532:	4836      	ldr	r0, [pc, #216]	; (800260c <can_stm32_runtime_configure+0xf0>)
 8002534:	f002 fb46 	bl	8004bc4 <z_impl_device_get_binding>
		(const struct clock_control_driver_api *)dev->driver_api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 8002538:	6843      	ldr	r3, [r0, #4]
 800253a:	aa01      	add	r2, sp, #4
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4621      	mov	r1, r4
 8002540:	4798      	blx	r3
	clock = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	__ASSERT_NO_MSG(clock);
	hcan.Instance = can;
	ret = clock_control_get_rate(clock, (clock_control_subsys_t *) &cfg->pclken,
				     &clock_rate);
	if (ret != 0) {
 8002542:	2800      	cmp	r0, #0
 8002544:	d15c      	bne.n	8002600 <can_stm32_runtime_configure+0xe4>
		LOG_ERR("Failed call clock_control_get_rate: return [%d]", ret);
		return -EIO;
	}

	if (!bitrate) {
 8002546:	b90f      	cbnz	r7, 800254c <can_stm32_runtime_configure+0x30>
		bitrate = cfg->bus_speed;
 8002548:	f8da 7004 	ldr.w	r7, [sl, #4]
	}

	prescaler = clock_rate / (BIT_SEG_LENGTH(cfg) * bitrate);
 800254c:	f89a b009 	ldrb.w	fp, [sl, #9]
 8002550:	f89a 400a 	ldrb.w	r4, [sl, #10]
 8002554:	9b01      	ldr	r3, [sp, #4]
 8002556:	eb0b 0904 	add.w	r9, fp, r4
 800255a:	fb09 7707 	mla	r7, r9, r7, r7
 800255e:	fbb3 f7f7 	udiv	r7, r3, r7
	if (prescaler == 0U || prescaler > 1024) {
 8002562:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
 8002566:	f5b9 6f80 	cmp.w	r9, #1024	; 0x400
 800256a:	d24c      	bcs.n	8002606 <can_stm32_runtime_configure+0xea>
	__ASSERT(cfg->prop_ts1 <= 0x0F, "PROP_BS1 maximum is 15");
	__ASSERT(cfg->ts2 <= 0x07,      "BS2 maximum is 7");

	ts1 = ((cfg->prop_ts1 & 0x0F) - 1) << CAN_BTR_TS1_Pos;
	ts2 = ((cfg->ts2      & 0x07) - 1) << CAN_BTR_TS2_Pos;
	sjw = ((cfg->sjw      & 0x07) - 1) << CAN_BTR_SJW_Pos;
 800256c:	f89a a008 	ldrb.w	sl, [sl, #8]

	reg_mode =  (mode == CAN_NORMAL_MODE)   ? 0U   :
 8002570:	f1b8 0f00 	cmp.w	r8, #0
 8002574:	d009      	beq.n	800258a <can_stm32_runtime_configure+0x6e>
 8002576:	f1b8 0f02 	cmp.w	r8, #2
 800257a:	d036      	beq.n	80025ea <can_stm32_runtime_configure+0xce>
 800257c:	f1b8 0f01 	cmp.w	r8, #1
 8002580:	bf0c      	ite	eq
 8002582:	f04f 4800 	moveq.w	r8, #2147483648	; 0x80000000
 8002586:	f04f 4840 	movne.w	r8, #3221225472	; 0xc0000000
		    (mode == CAN_LOOPBACK_MODE) ? CAN_BTR_LBKM :
		    (mode == CAN_SILENT_MODE)   ? CAN_BTR_SILM :
						CAN_BTR_LBKM | CAN_BTR_SILM;

	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 800258a:	4630      	mov	r0, r6
 800258c:	f005 fa53 	bl	8007a36 <k_mutex_lock.constprop.6>
	ret = can_enter_init_mode(can);
 8002590:	4628      	mov	r0, r5
 8002592:	f7ff ffa5 	bl	80024e0 <can_enter_init_mode>
	if (ret) {
 8002596:	4607      	mov	r7, r0
 8002598:	bb00      	cbnz	r0, 80025dc <can_stm32_runtime_configure+0xc0>
	ts2 = ((cfg->ts2      & 0x07) - 1) << CAN_BTR_TS2_Pos;
 800259a:	f004 0307 	and.w	r3, r4, #7
	ts1 = ((cfg->prop_ts1 & 0x0F) - 1) << CAN_BTR_TS1_Pos;
 800259e:	f00b 0b0f 	and.w	fp, fp, #15
	ts2 = ((cfg->ts2      & 0x07) - 1) << CAN_BTR_TS2_Pos;
 80025a2:	3b01      	subs	r3, #1
	ts1 = ((cfg->prop_ts1 & 0x0F) - 1) << CAN_BTR_TS1_Pos;
 80025a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	ts2 = ((cfg->ts2      & 0x07) - 1) << CAN_BTR_TS2_Pos;
 80025a8:	051b      	lsls	r3, r3, #20
	sjw = ((cfg->sjw      & 0x07) - 1) << CAN_BTR_SJW_Pos;
 80025aa:	f00a 0a07 	and.w	sl, sl, #7
 80025ae:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
		LOG_ERR("Failed to enter init mode");
		goto done;
	}

	can->BTR = reg_mode | sjw | ts1 | ts2 | (prescaler - 1U);
 80025b2:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
 80025b6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80025ba:	ea43 0309 	orr.w	r3, r3, r9
 80025be:	ea43 0308 	orr.w	r3, r3, r8
 80025c2:	61eb      	str	r3, [r5, #28]
	can->MCR &= ~CAN_MCR_INRQ;
 80025c4:	682b      	ldr	r3, [r5, #0]
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 80025c6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8002610 <can_stm32_runtime_configure+0xf4>
	can->MCR &= ~CAN_MCR_INRQ;
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	602b      	str	r3, [r5, #0]
 80025d0:	f000 fe70 	bl	80032b4 <z_timer_cycle_get_32>
 80025d4:	4604      	mov	r4, r0
	while ((can->MSR & CAN_MSR_INAK) != 0U) {
 80025d6:	686b      	ldr	r3, [r5, #4]
 80025d8:	07db      	lsls	r3, r3, #31
 80025da:	d409      	bmi.n	80025f0 <can_stm32_runtime_configure+0xd4>
	z_impl_k_mutex_unlock(mutex);
 80025dc:	4630      	mov	r0, r6
 80025de:	f002 fd17 	bl	8005010 <z_impl_k_mutex_unlock>
	LOG_DBG("Runtime configure of %s done", dev->config->name);
	ret = 0;
done:
	k_mutex_unlock(&data->inst_mutex);
	return ret;
}
 80025e2:	4638      	mov	r0, r7
 80025e4:	b003      	add	sp, #12
 80025e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	reg_mode =  (mode == CAN_NORMAL_MODE)   ? 0U   :
 80025ea:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80025ee:	e7cc      	b.n	800258a <can_stm32_runtime_configure+0x6e>
 80025f0:	f000 fe60 	bl	80032b4 <z_timer_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 80025f4:	1b00      	subs	r0, r0, r4
 80025f6:	4540      	cmp	r0, r8
 80025f8:	d9ed      	bls.n	80025d6 <can_stm32_runtime_configure+0xba>
 80025fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80025fe:	e7ed      	b.n	80025dc <can_stm32_runtime_configure+0xc0>
		return -EIO;
 8002600:	f06f 0704 	mvn.w	r7, #4
 8002604:	e7ed      	b.n	80025e2 <can_stm32_runtime_configure+0xc6>
		return -EINVAL;
 8002606:	f06f 0715 	mvn.w	r7, #21
 800260a:	e7ea      	b.n	80025e2 <can_stm32_runtime_configure+0xc6>
 800260c:	08009f78 	.word	0x08009f78
 8002610:	0019a280 	.word	0x0019a280

08002614 <can_stm32_init>:

static int can_stm32_init(struct device *dev)
{
 8002614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 8002618:	6803      	ldr	r3, [r0, #0]
	struct can_stm32_data *data = DEV_DATA(dev);
 800261a:	6885      	ldr	r5, [r0, #8]
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 800261c:	f8d3 8008 	ldr.w	r8, [r3, #8]
	CAN_TypeDef *can = cfg->can;
 8002620:	46c1      	mov	r9, r8
{
 8002622:	4607      	mov	r7, r0
	CAN_TypeDef *can = cfg->can;
 8002624:	f859 4b0c 	ldr.w	r4, [r9], #12
	z_impl_k_mutex_init(mutex);
 8002628:	4628      	mov	r0, r5
 800262a:	f006 f860 	bl	80086ee <z_impl_k_mutex_init>
	z_impl_k_sem_init(sem, initial_count, limit);
 800262e:	2201      	movs	r2, #1
 8002630:	2100      	movs	r1, #0
 8002632:	f105 0014 	add.w	r0, r5, #20
 8002636:	f006 fa13 	bl	8008a60 <z_impl_k_sem_init>
 800263a:	2201      	movs	r2, #1
 800263c:	2100      	movs	r1, #0
 800263e:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8002642:	f006 fa0d 	bl	8008a60 <z_impl_k_sem_init>
 8002646:	2201      	movs	r2, #1
 8002648:	2100      	movs	r1, #0
 800264a:	f105 0058 	add.w	r0, r5, #88	; 0x58
 800264e:	f006 fa07 	bl	8008a60 <z_impl_k_sem_init>
 8002652:	2201      	movs	r2, #1
 8002654:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 8002658:	2100      	movs	r1, #0
 800265a:	f006 fa01 	bl	8008a60 <z_impl_k_sem_init>
	k_mutex_init(&data->inst_mutex);
	k_sem_init(&data->tx_int_sem, 0, 1);
	k_sem_init(&data->mb0.tx_int_sem, 0, 1);
	k_sem_init(&data->mb1.tx_int_sem, 0, 1);
	k_sem_init(&data->mb2.tx_int_sem, 0, 1);
	data->mb0.tx_callback = NULL;
 800265e:	2600      	movs	r6, #0
	data->mb1.tx_callback = NULL;
	data->mb2.tx_callback = NULL;
	data->state_change_isr = NULL;

	data->filter_usage = (1ULL << CAN_MAX_NUMBER_OF_FILTERS) - 1ULL;
 8002660:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002668:	e9c5 2326 	strd	r2, r3, [r5, #152]	; 0x98
	(void)memset(data->rx_cb, 0, sizeof(data->rx_cb));
 800266c:	4631      	mov	r1, r6
	data->mb0.tx_callback = NULL;
 800266e:	62ee      	str	r6, [r5, #44]	; 0x2c
	data->mb1.tx_callback = NULL;
 8002670:	652e      	str	r6, [r5, #80]	; 0x50
	data->mb2.tx_callback = NULL;
 8002672:	676e      	str	r6, [r5, #116]	; 0x74
	data->state_change_isr = NULL;
 8002674:	f8c5 60c8 	str.w	r6, [r5, #200]	; 0xc8
	(void)memset(data->rx_cb, 0, sizeof(data->rx_cb));
 8002678:	2214      	movs	r2, #20
 800267a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800267e:	f005 fc8b 	bl	8007f98 <memset>
	(void)memset(data->cb_arg, 0, sizeof(data->cb_arg));
 8002682:	2214      	movs	r2, #20
 8002684:	4631      	mov	r1, r6
 8002686:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
 800268a:	f005 fc85 	bl	8007f98 <memset>
 800268e:	4823      	ldr	r0, [pc, #140]	; (800271c <can_stm32_init+0x108>)
 8002690:	f002 fa98 	bl	8004bc4 <z_impl_device_get_binding>
	return api->on(dev, sys);
 8002694:	6843      	ldr	r3, [r0, #4]
 8002696:	4649      	mov	r1, r9
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4798      	blx	r3

	clock = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	__ASSERT_NO_MSG(clock);

	ret = clock_control_on(clock, (clock_control_subsys_t *) &cfg->pclken);
	if (ret != 0) {
 800269c:	2800      	cmp	r0, #0
 800269e:	d139      	bne.n	8002714 <can_stm32_init+0x100>
	can->MCR &= ~CAN_MCR_SLEEP;
 80026a0:	6823      	ldr	r3, [r4, #0]
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 80026a2:	4e1f      	ldr	r6, [pc, #124]	; (8002720 <can_stm32_init+0x10c>)
	can->MCR &= ~CAN_MCR_SLEEP;
 80026a4:	f023 0302 	bic.w	r3, r3, #2
 80026a8:	6023      	str	r3, [r4, #0]
 80026aa:	f000 fe03 	bl	80032b4 <z_timer_cycle_get_32>
 80026ae:	4605      	mov	r5, r0
	while ((can->MSR & CAN_MSR_SLAK) != 0) {
 80026b0:	6863      	ldr	r3, [r4, #4]
 80026b2:	079b      	lsls	r3, r3, #30
 80026b4:	d426      	bmi.n	8002704 <can_stm32_init+0xf0>
	if (ret) {
		LOG_ERR("Failed to exit sleep mode");
		return ret;
	}

	ret = can_enter_init_mode(can);
 80026b6:	4620      	mov	r0, r4
 80026b8:	f7ff ff12 	bl	80024e0 <can_enter_init_mode>
	if (ret) {
 80026bc:	4605      	mov	r5, r0
 80026be:	b9f0      	cbnz	r0, 80026fe <can_stm32_init+0xea>
		LOG_ERR("Failed to enter init mode");
		return ret;
	}

	/* Set TX priority to chronological order */
	can->MCR |= CAN_MCR_TXFP;
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	6023      	str	r3, [r4, #0]
	can->MCR &= ~CAN_MCR_TTCM & ~CAN_MCR_TTCM & ~CAN_MCR_ABOM &
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80026ce:	6023      	str	r3, [r4, #0]
		    ~CAN_MCR_AWUM & ~CAN_MCR_NART & ~CAN_MCR_RFLM;
#ifdef CONFIG_CAN_RX_TIMESTAMP
	can->MCR |= CAN_MCR_TTCM;
#endif
#ifdef CONFIG_CAN_AUTO_BUS_OFF_RECOVERY
	can->MCR |= CAN_MCR_ABOM;
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
#endif

	ret = can_stm32_runtime_configure(dev, CAN_NORMAL_MODE, 0);
 80026d6:	462a      	mov	r2, r5
 80026d8:	4629      	mov	r1, r5
	can->MCR |= CAN_MCR_ABOM;
 80026da:	6023      	str	r3, [r4, #0]
	ret = can_stm32_runtime_configure(dev, CAN_NORMAL_MODE, 0);
 80026dc:	4638      	mov	r0, r7
 80026de:	f7ff ff1d 	bl	800251c <can_stm32_runtime_configure>
	if (ret) {
 80026e2:	4605      	mov	r5, r0
 80026e4:	b958      	cbnz	r0, 80026fe <can_stm32_init+0xea>
		return ret;
	}

	/* Leave sleep mode after reset*/
	can->MCR &= ~CAN_MCR_SLEEP;
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	f023 0302 	bic.w	r3, r3, #2
 80026ec:	6023      	str	r3, [r4, #0]

	cfg->config_irq(can);
 80026ee:	4620      	mov	r0, r4
 80026f0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80026f4:	4798      	blx	r3
	can->IER |= CAN_IER_TMEIE;
 80026f6:	6963      	ldr	r3, [r4, #20]
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6163      	str	r3, [r4, #20]
	LOG_INF("Init of %s done", dev->config->name);
	return 0;
}
 80026fe:	4628      	mov	r0, r5
 8002700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002704:	f000 fdd6 	bl	80032b4 <z_timer_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 8002708:	1b40      	subs	r0, r0, r5
 800270a:	42b0      	cmp	r0, r6
 800270c:	d9d0      	bls.n	80026b0 <can_stm32_init+0x9c>
 800270e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002712:	e7f4      	b.n	80026fe <can_stm32_init+0xea>
		return -EIO;
 8002714:	f06f 0504 	mvn.w	r5, #4
 8002718:	e7f1      	b.n	80026fe <can_stm32_init+0xea>
 800271a:	bf00      	nop
 800271c:	08009f78 	.word	0x08009f78
 8002720:	0019a280 	.word	0x0019a280

08002724 <can_calc_filter_index>:
	return type;
}

static int can_calc_filter_index(int filter_nr, u32_t mode_reg, u32_t scale_reg)
{
	int filter_bank = filter_nr / 4;
 8002724:	2800      	cmp	r0, #0
{
 8002726:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int filter_bank = filter_nr / 4;
 800272a:	4604      	mov	r4, r0
	int cnt = 0;
	u32_t mode_masked, scale_masked;
	enum can_filter_type filter_type;
	/*count filters in the banks before */
	for (int i = 0; i < filter_bank; i++) {
 800272c:	f04f 0500 	mov.w	r5, #0
	int filter_bank = filter_nr / 4;
 8002730:	bfb8      	it	lt
 8002732:	1cc4      	addlt	r4, r0, #3
		filter_type = can_stm32_get_filter_type(i, mode_reg, scale_reg);
		cnt += filter_in_bank[filter_type];
 8002734:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800277c <can_calc_filter_index+0x58>
{
 8002738:	4603      	mov	r3, r0
 800273a:	460f      	mov	r7, r1
 800273c:	4690      	mov	r8, r2
	int filter_bank = filter_nr / 4;
 800273e:	10a4      	asrs	r4, r4, #2
	int cnt = 0;
 8002740:	462e      	mov	r6, r5
	for (int i = 0; i < filter_bank; i++) {
 8002742:	42a5      	cmp	r5, r4
 8002744:	db0c      	blt.n	8002760 <can_calc_filter_index+0x3c>
	}

	/* plus the filters in the same bank */
	mode_masked  = mode_reg & (1U << filter_bank);
 8002746:	2201      	movs	r2, #1
 8002748:	fa02 f404 	lsl.w	r4, r2, r4
	scale_masked = scale_reg & (1U << filter_bank);
	cnt += (!scale_masked && mode_masked) ? filter_nr & 0x03 :
 800274c:	ea14 0f08 	tst.w	r4, r8
 8002750:	d110      	bne.n	8002774 <can_calc_filter_index+0x50>
 8002752:	423c      	tst	r4, r7
 8002754:	d00e      	beq.n	8002774 <can_calc_filter_index+0x50>
 8002756:	f003 0303 	and.w	r3, r3, #3
					       (filter_nr & 0x03) >> 1;
	return cnt;
}
 800275a:	18f0      	adds	r0, r6, r3
 800275c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		filter_type = can_stm32_get_filter_type(i, mode_reg, scale_reg);
 8002760:	4642      	mov	r2, r8
 8002762:	4628      	mov	r0, r5
 8002764:	4639      	mov	r1, r7
 8002766:	f005 fac6 	bl	8007cf6 <can_stm32_get_filter_type>
		cnt += filter_in_bank[filter_type];
 800276a:	f819 2000 	ldrb.w	r2, [r9, r0]
	for (int i = 0; i < filter_bank; i++) {
 800276e:	3501      	adds	r5, #1
		cnt += filter_in_bank[filter_type];
 8002770:	4416      	add	r6, r2
 8002772:	e7e6      	b.n	8002742 <can_calc_filter_index+0x1e>
	cnt += (!scale_masked && mode_masked) ? filter_nr & 0x03 :
 8002774:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002778:	e7ef      	b.n	800275a <can_calc_filter_index+0x36>
 800277a:	bf00      	nop
 800277c:	08009f81 	.word	0x08009f81

08002780 <can_stm32_detach>:
	k_mutex_unlock(&data->inst_mutex);
	return filter_nr;
}

void can_stm32_detach(struct device *dev, int filter_nr)
{
 8002780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 8002784:	6803      	ldr	r3, [r0, #0]
	struct can_stm32_data *data = DEV_DATA(dev);
 8002786:	6887      	ldr	r7, [r0, #8]
	CAN_TypeDef *can = cfg->can;
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	681c      	ldr	r4, [r3, #0]
{
 800278c:	b085      	sub	sp, #20
	enum can_filter_type type;
	u32_t reset_mask;

	__ASSERT_NO_MSG(filter_nr >= 0 && filter_nr < CAN_MAX_NUMBER_OF_FILTERS);

	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 800278e:	4638      	mov	r0, r7
{
 8002790:	4688      	mov	r8, r1
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8002792:	f005 f950 	bl	8007a36 <k_mutex_lock.constprop.6>

	bank_nr = filter_nr / 4;
	bank_bit = (1U << bank_nr);
	mode_reg  = can->FM1R;
 8002796:	f8d4 b204 	ldr.w	fp, [r4, #516]	; 0x204
	scale_reg = can->FS1R;
 800279a:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c

	filter_index = can_calc_filter_index(filter_nr, mode_reg, scale_reg);
 800279e:	9303      	str	r3, [sp, #12]
	bank_nr = filter_nr / 4;
 80027a0:	f1b8 0f00 	cmp.w	r8, #0
	filter_index = can_calc_filter_index(filter_nr, mode_reg, scale_reg);
 80027a4:	461a      	mov	r2, r3
 80027a6:	4659      	mov	r1, fp
 80027a8:	4640      	mov	r0, r8
	bank_nr = filter_nr / 4;
 80027aa:	4645      	mov	r5, r8
 80027ac:	bfb8      	it	lt
 80027ae:	f108 0503 	addlt.w	r5, r8, #3
	filter_index = can_calc_filter_index(filter_nr, mode_reg, scale_reg);
 80027b2:	f7ff ffb7 	bl	8002724 <can_calc_filter_index>
	type = can_stm32_get_filter_type(bank_nr, mode_reg, scale_reg);
 80027b6:	9b03      	ldr	r3, [sp, #12]
	bank_nr = filter_nr / 4;
 80027b8:	10ad      	asrs	r5, r5, #2
	type = can_stm32_get_filter_type(bank_nr, mode_reg, scale_reg);
 80027ba:	461a      	mov	r2, r3
 80027bc:	4659      	mov	r1, fp
	filter_index = can_calc_filter_index(filter_nr, mode_reg, scale_reg);
 80027be:	4681      	mov	r9, r0
	type = can_stm32_get_filter_type(bank_nr, mode_reg, scale_reg);
 80027c0:	4628      	mov	r0, r5
 80027c2:	f005 fa98 	bl	8007cf6 <can_stm32_get_filter_type>

	LOG_DBG("Detatch filter number %d (index %d), type %d", filter_nr,
		    filter_index,
		    type);

	reset_mask = ((1 << (reg_demand[type])) - 1) << filter_nr;
 80027c6:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <can_stm32_detach+0xf4>)
 80027c8:	5c1b      	ldrb	r3, [r3, r0]
	bank_bit = (1U << bank_nr);
 80027ca:	2601      	movs	r6, #1
 80027cc:	fa06 fa05 	lsl.w	sl, r6, r5
	reset_mask = ((1 << (reg_demand[type])) - 1) << filter_nr;
 80027d0:	409e      	lsls	r6, r3
 80027d2:	3e01      	subs	r6, #1
	data->filter_usage |= reset_mask;
 80027d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	reset_mask = ((1 << (reg_demand[type])) - 1) << filter_nr;
 80027d8:	fa06 f608 	lsl.w	r6, r6, r8
	data->filter_usage |= reset_mask;
 80027dc:	431e      	orrs	r6, r3
	can->FMR |= CAN_FMR_FINIT;
 80027de:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	data->filter_usage |= reset_mask;
 80027e2:	f8c7 6098 	str.w	r6, [r7, #152]	; 0x98
	can->FMR |= CAN_FMR_FINIT;
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	can->FA1R &= ~bank_bit;
 80027ee:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80027f2:	ea23 030a 	bic.w	r3, r3, sl
 80027f6:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
	data->filter_usage |= reset_mask;
 80027fa:	f04f 0b00 	mov.w	fp, #0

	can_stm32_set_filter_bank(filter_nr, &can->sFilterRegister[bank_nr],
 80027fe:	f105 0148 	add.w	r1, r5, #72	; 0x48
 8002802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	type = can_stm32_get_filter_type(bank_nr, mode_reg, scale_reg);
 8002806:	4602      	mov	r2, r0
	can_stm32_set_filter_bank(filter_nr, &can->sFilterRegister[bank_nr],
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800280e:	465b      	mov	r3, fp
 8002810:	4640      	mov	r0, r8
 8002812:	f005 f87a 	bl	800790a <can_stm32_set_filter_bank>
				  type, 0, 0xFFFFFFFF);

	if (!CAN_BANK_IS_EMPTY(data->filter_usage, bank_nr)) {
 8002816:	e9d7 3026 	ldrd	r3, r0, [r7, #152]	; 0x98
 800281a:	00ad      	lsls	r5, r5, #2
 800281c:	f1c5 0120 	rsb	r1, r5, #32
 8002820:	f1a5 0220 	sub.w	r2, r5, #32
 8002824:	fa00 f101 	lsl.w	r1, r0, r1
 8002828:	fa23 f505 	lsr.w	r5, r3, r5
 800282c:	fa20 f202 	lsr.w	r2, r0, r2
 8002830:	430d      	orrs	r5, r1
 8002832:	465b      	mov	r3, fp
 8002834:	4315      	orrs	r5, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	f005 020f 	and.w	r2, r5, #15
 800283c:	bf0f      	iteee	eq
 800283e:	2a0f      	cmpeq	r2, #15
		can->FA1R |= bank_bit;
 8002840:	f8d4 321c 	ldrne.w	r3, [r4, #540]	; 0x21c
 8002844:	ea4a 0303 	orrne.w	r3, sl, r3
 8002848:	f8c4 321c 	strne.w	r3, [r4, #540]	; 0x21c
	} else {
		LOG_DBG("Bank number %d is empty -> deakivate", bank_nr);
	}

	can->FMR &= ~(CAN_FMR_FINIT);
 800284c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8002850:	eb07 0989 	add.w	r9, r7, r9, lsl #2
 8002854:	f023 0301 	bic.w	r3, r3, #1
 8002858:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	data->rx_cb[filter_index] = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c9 30a0 	str.w	r3, [r9, #160]	; 0xa0
	data->cb_arg[filter_index] = NULL;
 8002862:	f8c9 30b4 	str.w	r3, [r9, #180]	; 0xb4
	z_impl_k_mutex_unlock(mutex);
 8002866:	4638      	mov	r0, r7

	k_mutex_unlock(&data->inst_mutex);
}
 8002868:	b005      	add	sp, #20
 800286a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800286e:	f002 bbcf 	b.w	8005010 <z_impl_k_mutex_unlock>
 8002872:	bf00      	nop
 8002874:	08009f85 	.word	0x08009f85

08002878 <can_stm32_attach_isr>:
{
 8002878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800287c:	461f      	mov	r7, r3
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 800287e:	6883      	ldr	r3, [r0, #8]
{
 8002880:	b091      	sub	sp, #68	; 0x44
 8002882:	4604      	mov	r4, r0
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8002884:	4618      	mov	r0, r3
{
 8002886:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 800288a:	9307      	str	r3, [sp, #28]
 800288c:	f005 f8d3 	bl	8007a36 <k_mutex_lock.constprop.6>
	struct can_stm32_data *data = DEV_DATA(dev);
 8002890:	68a3      	ldr	r3, [r4, #8]
 8002892:	9303      	str	r3, [sp, #12]
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	7878      	ldrb	r0, [r7, #1]
	CAN_TypeDef *can = cfg->can;
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	78bc      	ldrb	r4, [r7, #2]
 800289c:	681d      	ldr	r5, [r3, #0]
	if (filter->id_type == CAN_STANDARD_IDENTIFIER) {
 800289e:	783b      	ldrb	r3, [r7, #0]
 80028a0:	79ba      	ldrb	r2, [r7, #6]
 80028a2:	79f9      	ldrb	r1, [r7, #7]
 80028a4:	f013 0601 	ands.w	r6, r3, #1
 80028a8:	d11c      	bne.n	80028e4 <can_stm32_attach_isr+0x6c>
	return  (filter->std_id << CAN_FIRX_STD_ID_POS) |
 80028aa:	f004 0407 	and.w	r4, r4, #7
		(filter->rtr    << CAN_FIRX_STD_RTR_POS);
 80028ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
	return  (filter->std_id << CAN_FIRX_STD_ID_POS) |
 80028b2:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
		(filter->rtr    << CAN_FIRX_STD_RTR_POS);
 80028b6:	011b      	lsls	r3, r3, #4
	return  (filter->std_id << CAN_FIRX_STD_ID_POS) |
 80028b8:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
		if (filter->std_id_mask != CAN_STD_ID_MASK) {
 80028bc:	f001 0107 	and.w	r1, r1, #7
	return  (filter->std_id << CAN_FIRX_STD_ID_POS) |
 80028c0:	930c      	str	r3, [sp, #48]	; 0x30
		if (filter->std_id_mask != CAN_STD_ID_MASK) {
 80028c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80028ca:	429a      	cmp	r2, r3
 80028cc:	f000 808f 	beq.w	80029ee <can_stm32_attach_isr+0x176>
		(filter->rtr_mask    << CAN_FIRX_STD_RTR_POS) |
 80028d0:	7979      	ldrb	r1, [r7, #5]
	return  (filter->std_id_mask << CAN_FIRX_STD_ID_POS) |
 80028d2:	0152      	lsls	r2, r2, #5
		(filter->rtr_mask    << CAN_FIRX_STD_RTR_POS) |
 80028d4:	f001 0101 	and.w	r1, r1, #1
	return  (filter->std_id_mask << CAN_FIRX_STD_ID_POS) |
 80028d8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		(filter->rtr_mask    << CAN_FIRX_STD_RTR_POS) |
 80028dc:	f042 0308 	orr.w	r3, r2, #8
	u32_t mask = 0U;
 80028e0:	9305      	str	r3, [sp, #20]
 80028e2:	e028      	b.n	8002936 <can_stm32_attach_isr+0xbe>
	return  (filter->ext_id << CAN_FIRX_EXT_EXT_ID_POS) |
 80028e4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80028e8:	78fc      	ldrb	r4, [r7, #3]
 80028ea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80028ee:	793c      	ldrb	r4, [r7, #4]
 80028f0:	f004 041f 	and.w	r4, r4, #31
 80028f4:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
		(filter->rtr    << CAN_FIRX_EXT_RTR_POS) |
 80028f8:	f003 0302 	and.w	r3, r3, #2
	return  (filter->ext_id << CAN_FIRX_EXT_EXT_ID_POS) |
 80028fc:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
		(filter->rtr    << CAN_FIRX_EXT_RTR_POS) |
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	930c      	str	r3, [sp, #48]	; 0x30
		if (filter->ext_id_mask != CAN_EXT_ID_MASK) {
 8002906:	7a3b      	ldrb	r3, [r7, #8]
 8002908:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800290c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002910:	7a7b      	ldrb	r3, [r7, #9]
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800291a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800291e:	429a      	cmp	r2, r3
 8002920:	d068      	beq.n	80029f4 <can_stm32_attach_isr+0x17c>
		(filter->rtr_mask    << CAN_FIRX_EXT_RTR_POS) |
 8002922:	797b      	ldrb	r3, [r7, #5]
	return  (filter->ext_id_mask << CAN_FIRX_EXT_EXT_ID_POS) |
 8002924:	00d2      	lsls	r2, r2, #3
		(filter->rtr_mask    << CAN_FIRX_EXT_RTR_POS) |
 8002926:	f003 0301 	and.w	r3, r3, #1
	return  (filter->ext_id_mask << CAN_FIRX_EXT_EXT_ID_POS) |
 800292a:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
		(filter->rtr_mask    << CAN_FIRX_EXT_RTR_POS) |
 800292e:	f042 0304 	orr.w	r3, r2, #4
 8002932:	9305      	str	r3, [sp, #20]
			filter_type = CAN_FILTER_EXTENDED_MASKED;
 8002934:	2602      	movs	r6, #2
	register_demand = reg_demand[filter_type];
 8002936:	4b86      	ldr	r3, [pc, #536]	; (8002b50 <can_stm32_attach_isr+0x2d8>)
 8002938:	f813 9006 	ldrb.w	r9, [r3, r6]
		u64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 800293c:	9b03      	ldr	r3, [sp, #12]
 800293e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002942:	9306      	str	r3, [sp, #24]
 8002944:	9b03      	ldr	r3, [sp, #12]
		u64_t usage_demand_mask = (1ULL << register_demand) - 1;
 8002946:	2201      	movs	r2, #1
 8002948:	f1a9 0020 	sub.w	r0, r9, #32
 800294c:	f1c9 0120 	rsb	r1, r9, #32
		u64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 8002950:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
		u64_t usage_demand_mask = (1ULL << register_demand) - 1;
 8002954:	fa22 f101 	lsr.w	r1, r2, r1
 8002958:	fa02 f300 	lsl.w	r3, r2, r0
 800295c:	fa02 f709 	lsl.w	r7, r2, r9
 8002960:	430b      	orrs	r3, r1
 8002962:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
 8002966:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800296a:	2400      	movs	r4, #0
 800296c:	930d      	str	r3, [sp, #52]	; 0x34
		u64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 800296e:	9b06      	ldr	r3, [sp, #24]
 8002970:	f1c4 0120 	rsb	r1, r4, #32
 8002974:	fa23 fa04 	lsr.w	sl, r3, r4
 8002978:	fa08 f101 	lsl.w	r1, r8, r1
 800297c:	f1a4 0220 	sub.w	r2, r4, #32
		bank_nr = filter_nr / 4;
 8002980:	10a3      	asrs	r3, r4, #2
		u64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 8002982:	ea4a 0a01 	orr.w	sl, sl, r1
 8002986:	fa28 f202 	lsr.w	r2, r8, r2
		bank_mode = can_stm32_get_filter_type(bank_nr, can->FM1R,
 800298a:	f8d5 1204 	ldr.w	r1, [r5, #516]	; 0x204
		bank_nr = filter_nr / 4;
 800298e:	9304      	str	r3, [sp, #16]
		bank_mode = can_stm32_get_filter_type(bank_nr, can->FM1R,
 8002990:	4618      	mov	r0, r3
		u64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 8002992:	ea4a 0a02 	orr.w	sl, sl, r2
		bank_mode = can_stm32_get_filter_type(bank_nr, can->FM1R,
 8002996:	f8d5 220c 	ldr.w	r2, [r5, #524]	; 0x20c
 800299a:	f005 f9ac 	bl	8007cf6 <can_stm32_get_filter_type>
		bank_is_empty = CAN_BANK_IS_EMPTY(device_data->filter_usage,
 800299e:	10a3      	asrs	r3, r4, #2
 80029a0:	0099      	lsls	r1, r3, #2
 80029a2:	9b06      	ldr	r3, [sp, #24]
 80029a4:	f1c1 0e20 	rsb	lr, r1, #32
 80029a8:	fa23 f201 	lsr.w	r2, r3, r1
 80029ac:	f1a1 0c20 	sub.w	ip, r1, #32
 80029b0:	fa08 fe0e 	lsl.w	lr, r8, lr
 80029b4:	ea42 020e 	orr.w	r2, r2, lr
 80029b8:	fa28 fc0c 	lsr.w	ip, r8, ip
 80029bc:	ea42 020c 	orr.w	r2, r2, ip
 80029c0:	f002 030f 	and.w	r3, r2, #15
 80029c4:	9308      	str	r3, [sp, #32]
 80029c6:	2300      	movs	r3, #0
 80029c8:	9309      	str	r3, [sp, #36]	; 0x24
		if (!bank_is_empty && bank_mode != filter_type) {
 80029ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bf08      	it	eq
 80029d2:	2a0f      	cmpeq	r2, #15
		u64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 80029d4:	fa28 fb04 	lsr.w	fp, r8, r4
		if (!bank_is_empty && bank_mode != filter_type) {
 80029d8:	d00e      	beq.n	80029f8 <can_stm32_attach_isr+0x180>
 80029da:	4286      	cmp	r6, r0
 80029dc:	d00c      	beq.n	80029f8 <can_stm32_attach_isr+0x180>
			filter_nr = (bank_nr + 1) * 4;
 80029de:	1d0c      	adds	r4, r1, #4
		if (!usage_shifted) {
 80029e0:	ea5a 030b 	orrs.w	r3, sl, fp
 80029e4:	f000 80b1 	beq.w	8002b4a <can_stm32_attach_isr+0x2d2>
	} while (filter_nr < CAN_MAX_NUMBER_OF_FILTERS);
 80029e8:	2c37      	cmp	r4, #55	; 0x37
 80029ea:	ddc0      	ble.n	800296e <can_stm32_attach_isr+0xf6>
 80029ec:	e024      	b.n	8002a38 <can_stm32_attach_isr+0x1c0>
		filter_type = CAN_FILTER_STANDARD;
 80029ee:	2601      	movs	r6, #1
	u32_t mask = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e775      	b.n	80028e0 <can_stm32_attach_isr+0x68>
		filter_type = CAN_FILTER_EXTENDED;
 80029f4:	2603      	movs	r6, #3
 80029f6:	e7fb      	b.n	80029f0 <can_stm32_attach_isr+0x178>
		} else if (usage_shifted & usage_demand_mask) {
 80029f8:	ea0a 0307 	and.w	r3, sl, r7
 80029fc:	930a      	str	r3, [sp, #40]	; 0x28
 80029fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a00:	ea0b 0303 	and.w	r3, fp, r3
 8002a04:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a06:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	d076      	beq.n	8002afc <can_stm32_attach_isr+0x284>
				~(usage_demand_mask << filter_nr);
 8002a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a10:	f1a4 0120 	sub.w	r1, r4, #32
 8002a14:	fa07 f101 	lsl.w	r1, r7, r1
 8002a18:	f1c4 0220 	rsb	r2, r4, #32
 8002a1c:	40a3      	lsls	r3, r4
 8002a1e:	fa27 f202 	lsr.w	r2, r7, r2
 8002a22:	430b      	orrs	r3, r1
 8002a24:	4313      	orrs	r3, r2
			device_data->filter_usage &=
 8002a26:	9a06      	ldr	r2, [sp, #24]
				~(usage_demand_mask << filter_nr);
 8002a28:	40a7      	lsls	r7, r4
			device_data->filter_usage &=
 8002a2a:	ea22 0707 	bic.w	r7, r2, r7
 8002a2e:	9a03      	ldr	r2, [sp, #12]
 8002a30:	ea28 0303 	bic.w	r3, r8, r3
 8002a34:	e9c2 7326 	strd	r7, r3, [r2, #152]	; 0x98
		bank_bit = (1U << bank_nr);
 8002a38:	9a04      	ldr	r2, [sp, #16]
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	4093      	lsls	r3, r2
 8002a3e:	9306      	str	r3, [sp, #24]
	can->FMR |= CAN_FMR_FINIT;
 8002a40:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	can->FA1R &= ~bank_bit;
 8002a44:	9a06      	ldr	r2, [sp, #24]
	can->FMR |= CAN_FMR_FINIT;
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
	can->FA1R &= ~bank_bit;
 8002a4e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002a52:	43d2      	mvns	r2, r2
 8002a54:	4013      	ands	r3, r2
 8002a56:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
	if (filter_type != bank_mode) {
 8002a5a:	4286      	cmp	r6, r0
		u32_t mode_reg  = can->FM1R;
 8002a5c:	f8d5 1204 	ldr.w	r1, [r5, #516]	; 0x204
	if (filter_type != bank_mode) {
 8002a60:	d06a      	beq.n	8002b38 <can_stm32_attach_isr+0x2c0>
	u32_t mode_reg_bit  = (filter_type & 0x01) << bank_nr;
 8002a62:	9b04      	ldr	r3, [sp, #16]
		u32_t scale_reg = can->FS1R;
 8002a64:	f8d5 c20c 	ldr.w	ip, [r5, #524]	; 0x20c
	u32_t mode_reg_bit  = (filter_type & 0x01) << bank_nr;
 8002a68:	f006 0701 	and.w	r7, r6, #1
	u32_t scale_reg_bit = (filter_type >>   1) << bank_nr;
 8002a6c:	ea4f 0856 	mov.w	r8, r6, lsr #1
	u32_t mode_reg_bit  = (filter_type & 0x01) << bank_nr;
 8002a70:	409f      	lsls	r7, r3
	u32_t scale_reg_bit = (filter_type >>   1) << bank_nr;
 8002a72:	fa08 f803 	lsl.w	r8, r8, r3
	*scale_reg &= ~(1 << bank_nr);
 8002a76:	ea0c 0302 	and.w	r3, ip, r2
	*mode_reg &= ~(1 << bank_nr);
 8002a7a:	4011      	ands	r1, r2
	*scale_reg |= scale_reg_bit;
 8002a7c:	ea48 0803 	orr.w	r8, r8, r3
		shift_width = filter_in_bank[filter_type] - filter_in_bank[bank_mode];
 8002a80:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <can_stm32_attach_isr+0x2dc>)
	*mode_reg |= mode_reg_bit;
 8002a82:	430f      	orrs	r7, r1
		shift_width = filter_in_bank[filter_type] - filter_in_bank[bank_mode];
 8002a84:	f813 9000 	ldrb.w	r9, [r3, r0]
 8002a88:	f813 b006 	ldrb.w	fp, [r3, r6]
		filter_index_new = can_calc_filter_index(filter_nr, mode_reg,
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	4639      	mov	r1, r7
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7ff fe47 	bl	8002724 <can_calc_filter_index>
		shift_width = filter_in_bank[filter_type] - filter_in_bank[bank_mode];
 8002a96:	ebab 0b09 	sub.w	fp, fp, r9
		filter_index_new = can_calc_filter_index(filter_nr, mode_reg,
 8002a9a:	4682      	mov	sl, r0
		if (shift_width && start_index <= CAN_MAX_NUMBER_OF_FILTERS) {
 8002a9c:	f1bb 0f00 	cmp.w	fp, #0
 8002aa0:	d12e      	bne.n	8002b00 <can_stm32_attach_isr+0x288>
		can->FM1R = mode_reg;
 8002aa2:	f8c5 7204 	str.w	r7, [r5, #516]	; 0x204
		can->FS1R = scale_reg;
 8002aa6:	f8c5 820c 	str.w	r8, [r5, #524]	; 0x20c
	can_stm32_set_filter_bank(filter_nr, &can->sFilterRegister[bank_nr],
 8002aaa:	9904      	ldr	r1, [sp, #16]
 8002aac:	9b05      	ldr	r3, [sp, #20]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	3148      	adds	r1, #72	; 0x48
 8002ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ab4:	4632      	mov	r2, r6
 8002ab6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002aba:	4620      	mov	r0, r4
 8002abc:	f004 ff25 	bl	800790a <can_stm32_set_filter_bank>
	can->FA1R |= bank_bit;
 8002ac0:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002ac4:	9a06      	ldr	r2, [sp, #24]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
	can->FMR &= ~(CAN_FMR_FINIT);
 8002acc:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
	if (filter_nr != CAN_NO_FREE_FILTER) {
 8002ad8:	1c63      	adds	r3, r4, #1
 8002ada:	d008      	beq.n	8002aee <can_stm32_attach_isr+0x276>
		data->rx_cb[filter_index] = cb;
 8002adc:	9b03      	ldr	r3, [sp, #12]
 8002ade:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 8002ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ae4:	f8ca 30a0 	str.w	r3, [sl, #160]	; 0xa0
		data->cb_arg[filter_index] = cb_arg;
 8002ae8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002aea:	f8ca 30b4 	str.w	r3, [sl, #180]	; 0xb4
 8002aee:	9807      	ldr	r0, [sp, #28]
 8002af0:	f002 fa8e 	bl	8005010 <z_impl_k_mutex_unlock>
}
 8002af4:	4620      	mov	r0, r4
 8002af6:	b011      	add	sp, #68	; 0x44
 8002af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			filter_nr += register_demand;
 8002afc:	444c      	add	r4, r9
 8002afe:	e76f      	b.n	80029e0 <can_stm32_attach_isr+0x168>
		start_index = filter_index_new + filter_in_bank[bank_mode];
 8002b00:	4481      	add	r9, r0
		if (shift_width && start_index <= CAN_MAX_NUMBER_OF_FILTERS) {
 8002b02:	f1b9 0f38 	cmp.w	r9, #56	; 0x38
 8002b06:	dccc      	bgt.n	8002aa2 <can_stm32_attach_isr+0x22a>
			res = can_stm32_shift_arr((void **)device_data->rx_cb,
 8002b08:	9b03      	ldr	r3, [sp, #12]
 8002b0a:	465a      	mov	r2, fp
 8002b0c:	4649      	mov	r1, r9
 8002b0e:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8002b12:	f004 ff54 	bl	80079be <can_stm32_shift_arr>
			res |= can_stm32_shift_arr(device_data->cb_arg,
 8002b16:	9b03      	ldr	r3, [sp, #12]
			res = can_stm32_shift_arr((void **)device_data->rx_cb,
 8002b18:	9008      	str	r0, [sp, #32]
			res |= can_stm32_shift_arr(device_data->cb_arg,
 8002b1a:	465a      	mov	r2, fp
 8002b1c:	4649      	mov	r1, r9
 8002b1e:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8002b22:	f004 ff4c 	bl	80079be <can_stm32_shift_arr>
			if (filter_index_new >= CONFIG_CAN_MAX_FILTER || res) {
 8002b26:	f1ba 0f04 	cmp.w	sl, #4
 8002b2a:	dc02      	bgt.n	8002b32 <can_stm32_attach_isr+0x2ba>
 8002b2c:	9b08      	ldr	r3, [sp, #32]
 8002b2e:	4303      	orrs	r3, r0
 8002b30:	d0b7      	beq.n	8002aa2 <can_stm32_attach_isr+0x22a>
			filter_nr = CAN_NO_FREE_FILTER;
 8002b32:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002b36:	e7c3      	b.n	8002ac0 <can_stm32_attach_isr+0x248>
		filter_index_new = can_calc_filter_index(filter_nr, can->FM1R,
 8002b38:	f8d5 220c 	ldr.w	r2, [r5, #524]	; 0x20c
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f7ff fdf1 	bl	8002724 <can_calc_filter_index>
		if (filter_index_new >= CAN_MAX_NUMBER_OF_FILTERS) {
 8002b42:	2837      	cmp	r0, #55	; 0x37
		filter_index_new = can_calc_filter_index(filter_nr, can->FM1R,
 8002b44:	4682      	mov	sl, r0
		if (filter_index_new >= CAN_MAX_NUMBER_OF_FILTERS) {
 8002b46:	ddb0      	ble.n	8002aaa <can_stm32_attach_isr+0x232>
 8002b48:	e7f3      	b.n	8002b32 <can_stm32_attach_isr+0x2ba>
			return CAN_NO_FREE_FILTER;
 8002b4a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002b4e:	e7ce      	b.n	8002aee <can_stm32_attach_isr+0x276>
 8002b50:	08009f85 	.word	0x08009f85
 8002b54:	08009f81 	.word	0x08009f81

08002b58 <print_frame>:

	return i;
}

static void print_frame(struct zcan_frame *frame, void *arg)
{
 8002b58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002b5c:	4604      	mov	r4, r0
	const struct shell *shell = (const struct shell *)arg;

	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
		      frame->id_type == CAN_STANDARD_IDENTIFIER ?
 8002b5e:	7800      	ldrb	r0, [r0, #0]
 8002b60:	7863      	ldrb	r3, [r4, #1]
 8002b62:	78a2      	ldrb	r2, [r4, #2]
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 8002b64:	f010 0f01 	tst.w	r0, #1
{
 8002b68:	460e      	mov	r6, r1
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 8002b6a:	d12c      	bne.n	8002bc6 <print_frame+0x6e>
				frame->std_id : frame->ext_id,
 8002b6c:	f002 0207 	and.w	r2, r2, #7
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 8002b70:	491e      	ldr	r1, [pc, #120]	; (8002bec <print_frame+0x94>)
 8002b72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b76:	f010 0f02 	tst.w	r0, #2
 8002b7a:	481d      	ldr	r0, [pc, #116]	; (8002bf0 <print_frame+0x98>)
 8002b7c:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <print_frame+0x9c>)
 8002b7e:	9100      	str	r1, [sp, #0]
 8002b80:	bf08      	it	eq
 8002b82:	4602      	moveq	r2, r0
 8002b84:	7960      	ldrb	r0, [r4, #5]
	for (int i = 0; i < CAN_MAX_DLEN; i++) {
		if (i < frame->dlc) {
			shell_fprintf(shell, SHELL_NORMAL, " 0x%02x",
				      frame->data[i]);
		} else {
			shell_fprintf(shell, SHELL_NORMAL, "     ");
 8002b86:	4f1c      	ldr	r7, [pc, #112]	; (8002bf8 <print_frame+0xa0>)
			shell_fprintf(shell, SHELL_NORMAL, " 0x%02x",
 8002b88:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8002c08 <print_frame+0xb0>
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 8002b8c:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8002b90:	2100      	movs	r1, #0
 8002b92:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <print_frame+0xa4>)
 8002b94:	4630      	mov	r0, r6
 8002b96:	f003 ff7c 	bl	8006a92 <shell_fprintf>
	for (int i = 0; i < CAN_MAX_DLEN; i++) {
 8002b9a:	2500      	movs	r5, #0
		if (i < frame->dlc) {
 8002b9c:	7963      	ldrb	r3, [r4, #5]
 8002b9e:	42ab      	cmp	r3, r5
 8002ba0:	dd1d      	ble.n	8002bde <print_frame+0x86>
				      frame->data[i]);
 8002ba2:	1da3      	adds	r3, r4, #6
			shell_fprintf(shell, SHELL_NORMAL, " 0x%02x",
 8002ba4:	4642      	mov	r2, r8
 8002ba6:	5d5b      	ldrb	r3, [r3, r5]
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4630      	mov	r0, r6
 8002bac:	f003 ff71 	bl	8006a92 <shell_fprintf>
	for (int i = 0; i < CAN_MAX_DLEN; i++) {
 8002bb0:	3501      	adds	r5, #1
 8002bb2:	2d08      	cmp	r5, #8
 8002bb4:	d1f2      	bne.n	8002b9c <print_frame+0x44>
		}
	}

	shell_fprintf(shell, SHELL_NORMAL, "|\n");
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <print_frame+0xa8>)
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4630      	mov	r0, r6
}
 8002bbc:	b004      	add	sp, #16
 8002bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	shell_fprintf(shell, SHELL_NORMAL, "|\n");
 8002bc2:	f003 bf66 	b.w	8006a92 <shell_fprintf>
				frame->std_id : frame->ext_id,
 8002bc6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002bca:	78e2      	ldrb	r2, [r4, #3]
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 8002bcc:	490d      	ldr	r1, [pc, #52]	; (8002c04 <print_frame+0xac>)
				frame->std_id : frame->ext_id,
 8002bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002bd2:	7922      	ldrb	r2, [r4, #4]
 8002bd4:	f002 021f 	and.w	r2, r2, #31
 8002bd8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002bdc:	e7cb      	b.n	8002b76 <print_frame+0x1e>
			shell_fprintf(shell, SHELL_NORMAL, "     ");
 8002bde:	463a      	mov	r2, r7
 8002be0:	2100      	movs	r1, #0
 8002be2:	4630      	mov	r0, r6
 8002be4:	f003 ff55 	bl	8006a92 <shell_fprintf>
 8002be8:	e7e2      	b.n	8002bb0 <print_frame+0x58>
 8002bea:	bf00      	nop
 8002bec:	0800a186 	.word	0x0800a186
 8002bf0:	0800a1aa 	.word	0x0800a1aa
 8002bf4:	0800a18a 	.word	0x0800a18a
 8002bf8:	0800a1a8 	.word	0x0800a1a8
 8002bfc:	0800a18e 	.word	0x0800a18e
 8002c00:	0800a1ae 	.word	0x0800a1ae
 8002c04:	0800a182 	.word	0x0800a182
 8002c08:	0800a1a0 	.word	0x0800a1a0

08002c0c <read_options>:
{
 8002c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char *arg = argv[pos];
 8002c10:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
{
 8002c14:	9f08      	ldr	r7, [sp, #32]
 8002c16:	4699      	mov	r9, r3
	if (arg[0] != '-') {
 8002c18:	782b      	ldrb	r3, [r5, #0]
 8002c1a:	2b2d      	cmp	r3, #45	; 0x2d
{
 8002c1c:	4606      	mov	r6, r0
 8002c1e:	460c      	mov	r4, r1
	if (arg[0] != '-') {
 8002c20:	d120      	bne.n	8002c64 <read_options+0x58>
				shell_error(shell, "unknown option %c", *arg);
 8002c22:	f8df a048 	ldr.w	sl, [pc, #72]	; 8002c6c <read_options+0x60>
				*ext = true;
 8002c26:	f04f 0801 	mov.w	r8, #1
	for (arg = &arg[1]; *arg; arg++) {
 8002c2a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002c2e:	b90b      	cbnz	r3, 8002c34 <read_options+0x28>
	return ++pos;
 8002c30:	3401      	adds	r4, #1
 8002c32:	e017      	b.n	8002c64 <read_options+0x58>
		switch (*arg) {
 8002c34:	2b65      	cmp	r3, #101	; 0x65
 8002c36:	d004      	beq.n	8002c42 <read_options+0x36>
 8002c38:	2b72      	cmp	r3, #114	; 0x72
 8002c3a:	d10c      	bne.n	8002c56 <read_options+0x4a>
				*rtr = true;
 8002c3c:	f889 8000 	strb.w	r8, [r9]
 8002c40:	e7f3      	b.n	8002c2a <read_options+0x1e>
			if (ext == NULL) {
 8002c42:	b92f      	cbnz	r7, 8002c50 <read_options+0x44>
				shell_error(shell, "unknown option %c", *arg);
 8002c44:	4652      	mov	r2, sl
 8002c46:	2102      	movs	r1, #2
 8002c48:	4630      	mov	r0, r6
 8002c4a:	f003 ff22 	bl	8006a92 <shell_fprintf>
 8002c4e:	e7ec      	b.n	8002c2a <read_options+0x1e>
				*ext = true;
 8002c50:	f887 8000 	strb.w	r8, [r7]
 8002c54:	e7e9      	b.n	8002c2a <read_options+0x1e>
			shell_error(shell, "unknown option %c", *arg);
 8002c56:	4a05      	ldr	r2, [pc, #20]	; (8002c6c <read_options+0x60>)
 8002c58:	2102      	movs	r1, #2
 8002c5a:	4630      	mov	r0, r6
 8002c5c:	f003 ff19 	bl	8006a92 <shell_fprintf>
			return -EINVAL;
 8002c60:	f06f 0415 	mvn.w	r4, #21
}
 8002c64:	4620      	mov	r0, r4
 8002c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c6a:	bf00      	nop
 8002c6c:	0800a1f1 	.word	0x0800a1f1

08002c70 <read_id>:
{
 8002c70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002c72:	460c      	mov	r4, r1
 8002c74:	4605      	mov	r5, r0
 8002c76:	4610      	mov	r0, r2
	val = strtol(argv[pos], &end_ptr, 0);
 8002c78:	a903      	add	r1, sp, #12
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 8002c80:	461e      	mov	r6, r3
	val = strtol(argv[pos], &end_ptr, 0);
 8002c82:	f005 f858 	bl	8007d36 <strtol>
	if (*end_ptr != '\0') {
 8002c86:	9b03      	ldr	r3, [sp, #12]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	b143      	cbz	r3, 8002c9e <read_id+0x2e>
		shell_error(shell, "id is not a number");
 8002c8c:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <read_id+0x70>)
 8002c8e:	2102      	movs	r1, #2
 8002c90:	4628      	mov	r0, r5
 8002c92:	f003 fefe 	bl	8006a92 <shell_fprintf>
		return -EINVAL;
 8002c96:	f06f 0015 	mvn.w	r0, #21
}
 8002c9a:	b004      	add	sp, #16
 8002c9c:	bd70      	pop	{r4, r5, r6, pc}
	if (val < 0 || val > CAN_EXT_ID_MASK ||
 8002c9e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8002ca2:	d207      	bcs.n	8002cb4 <read_id+0x44>
 8002ca4:	b9be      	cbnz	r6, 8002cd6 <read_id+0x66>
	   (!ext && val > CAN_MAX_STD_ID)) {
 8002ca6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8002caa:	db14      	blt.n	8002cd6 <read_id+0x66>
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <read_id+0x74>)
		shell_error(shell, "Id invalid. %sid must not be negative or "
 8002cae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002cb2:	e009      	b.n	8002cc8 <read_id+0x58>
 8002cb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <read_id+0x78>)
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <read_id+0x74>)
 8002cb8:	2e00      	cmp	r6, #0
 8002cba:	bf18      	it	ne
 8002cbc:	4613      	movne	r3, r2
 8002cbe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002cc2:	bf18      	it	ne
 8002cc4:	f06f 4260 	mvnne.w	r2, #3758096384	; 0xe0000000
 8002cc8:	9200      	str	r2, [sp, #0]
 8002cca:	2102      	movs	r1, #2
 8002ccc:	4a07      	ldr	r2, [pc, #28]	; (8002cec <read_id+0x7c>)
 8002cce:	4628      	mov	r0, r5
 8002cd0:	f003 fedf 	bl	8006a92 <shell_fprintf>
 8002cd4:	e7df      	b.n	8002c96 <read_id+0x26>
	*id = (u32_t)val;
 8002cd6:	9b08      	ldr	r3, [sp, #32]
 8002cd8:	6018      	str	r0, [r3, #0]
	return ++pos;
 8002cda:	1c60      	adds	r0, r4, #1
 8002cdc:	e7dd      	b.n	8002c9a <read_id+0x2a>
 8002cde:	bf00      	nop
 8002ce0:	0800a0a4 	.word	0x0800a0a4
 8002ce4:	0800986f 	.word	0x0800986f
 8002ce8:	0800a1b1 	.word	0x0800a1b1
 8002cec:	0800a1b6 	.word	0x0800a1b6

08002cf0 <cmd_attach>:

	return 0;
}

static int cmd_attach(const struct shell *shell, size_t argc, char **argv)
{
 8002cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cf4:	b08a      	sub	sp, #40	; 0x28
	struct device *can_dev;
	int pos = 1;
	bool rtr = false, ext = false, rtr_mask = false;
 8002cf6:	f04f 0900 	mov.w	r9, #0
{
 8002cfa:	4604      	mov	r4, r0
 8002cfc:	4688      	mov	r8, r1
 8002cfe:	4616      	mov	r6, r2
	bool rtr = false, ext = false, rtr_mask = false;
 8002d00:	f88d 9011 	strb.w	r9, [sp, #17]
 8002d04:	f88d 9012 	strb.w	r9, [sp, #18]
 8002d08:	f88d 9013 	strb.w	r9, [sp, #19]
	struct zcan_filter filter;
	int ret;
	u32_t id, mask;

	can_dev = device_get_binding(argv[pos]);
 8002d0c:	6850      	ldr	r0, [r2, #4]
 8002d0e:	f001 ff59 	bl	8004bc4 <z_impl_device_get_binding>
	if (!can_dev) {
 8002d12:	4607      	mov	r7, r0
 8002d14:	b950      	cbnz	r0, 8002d2c <cmd_attach+0x3c>
		shell_error(shell, "Can't get binding to device \"%s\"",
 8002d16:	6873      	ldr	r3, [r6, #4]
 8002d18:	4a74      	ldr	r2, [pc, #464]	; (8002eec <cmd_attach+0x1fc>)
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f003 feb8 	bl	8006a92 <shell_fprintf>
	filter.ext_id = id;

	if (pos != argc) {
		pos = read_mask(shell, pos, argv, ext, &mask);
		if (pos < 0) {
			return -EINVAL;
 8002d22:	f06f 0015 	mvn.w	r0, #21
	}

	shell_print(shell, "Filter ID: %d", ret);

	return 0;
}
 8002d26:	b00a      	add	sp, #40	; 0x28
 8002d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	pos = read_options(shell, pos, argv, &rtr, &ext);
 8002d2c:	f10d 0312 	add.w	r3, sp, #18
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	2102      	movs	r1, #2
 8002d34:	f10d 0311 	add.w	r3, sp, #17
 8002d38:	4632      	mov	r2, r6
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f7ff ff66 	bl	8002c0c <read_options>
	if (pos < 0) {
 8002d40:	1e01      	subs	r1, r0, #0
 8002d42:	dbee      	blt.n	8002d22 <cmd_attach+0x32>
	filter.id_type = ext ? CAN_EXTENDED_IDENTIFIER : CAN_STANDARD_IDENTIFIER;
 8002d44:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8002d48:	f89d 3012 	ldrb.w	r3, [sp, #18]
	filter.rtr = rtr ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 8002d4c:	f89d 0011 	ldrb.w	r0, [sp, #17]
	filter.id_type = ext ? CAN_EXTENDED_IDENTIFIER : CAN_STANDARD_IDENTIFIER;
 8002d50:	f363 0200 	bfi	r2, r3, #0, #1
	filter.rtr = rtr ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 8002d54:	f360 0241 	bfi	r2, r0, #1, #1
 8002d58:	f88d 201c 	strb.w	r2, [sp, #28]
	pos = read_id(shell, pos, argv, ext, &id);
 8002d5c:	aa05      	add	r2, sp, #20
 8002d5e:	9200      	str	r2, [sp, #0]
 8002d60:	4620      	mov	r0, r4
 8002d62:	4632      	mov	r2, r6
 8002d64:	f7ff ff84 	bl	8002c70 <read_id>
	if (pos < 0) {
 8002d68:	1e05      	subs	r5, r0, #0
 8002d6a:	dbda      	blt.n	8002d22 <cmd_attach+0x32>
	filter.ext_id = id;
 8002d6c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002d70:	9a05      	ldr	r2, [sp, #20]
 8002d72:	f89d a012 	ldrb.w	sl, [sp, #18]
 8002d76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d7a:	9307      	str	r3, [sp, #28]
 8002d7c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002d88:	f023 031f 	bic.w	r3, r3, #31
 8002d8c:	4313      	orrs	r3, r2
	if (pos != argc) {
 8002d8e:	4545      	cmp	r5, r8
	filter.ext_id = id;
 8002d90:	f88d 3020 	strb.w	r3, [sp, #32]
	if (pos != argc) {
 8002d94:	d076      	beq.n	8002e84 <cmd_attach+0x194>
	val = strtol(argv[pos], &end_ptr, 0);
 8002d96:	464a      	mov	r2, r9
 8002d98:	a906      	add	r1, sp, #24
 8002d9a:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8002d9e:	f004 ffca 	bl	8007d36 <strtol>
	if (*end_ptr != '\0') {
 8002da2:	9b06      	ldr	r3, [sp, #24]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	b12b      	cbz	r3, 8002db4 <cmd_attach+0xc4>
		shell_error(shell, "Mask is not a number");
 8002da8:	4a51      	ldr	r2, [pc, #324]	; (8002ef0 <cmd_attach+0x200>)
 8002daa:	2102      	movs	r1, #2
 8002dac:	4620      	mov	r0, r4
 8002dae:	f003 fe70 	bl	8006a92 <shell_fprintf>
		if (pos < 0) {
 8002db2:	e7b6      	b.n	8002d22 <cmd_attach+0x32>
	if (val < 0 || val > CAN_EXT_ID_MASK ||
 8002db4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8002db8:	d209      	bcs.n	8002dce <cmd_attach+0xde>
 8002dba:	f1ba 0f00 	cmp.w	sl, #0
 8002dbe:	d118      	bne.n	8002df2 <cmd_attach+0x102>
	   (!ext && val > CAN_MAX_STD_ID)) {
 8002dc0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8002dc4:	db15      	blt.n	8002df2 <cmd_attach+0x102>
 8002dc6:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <cmd_attach+0x204>)
		shell_error(shell, "Mask invalid. %smask must not be negative "
 8002dc8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002dcc:	e00a      	b.n	8002de4 <cmd_attach+0xf4>
 8002dce:	4a4a      	ldr	r2, [pc, #296]	; (8002ef8 <cmd_attach+0x208>)
 8002dd0:	4b48      	ldr	r3, [pc, #288]	; (8002ef4 <cmd_attach+0x204>)
 8002dd2:	f1ba 0f00 	cmp.w	sl, #0
 8002dd6:	bf18      	it	ne
 8002dd8:	4613      	movne	r3, r2
 8002dda:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002dde:	bf18      	it	ne
 8002de0:	f06f 4260 	mvnne.w	r2, #3758096384	; 0xe0000000
 8002de4:	9200      	str	r2, [sp, #0]
 8002de6:	2102      	movs	r1, #2
 8002de8:	4a44      	ldr	r2, [pc, #272]	; (8002efc <cmd_attach+0x20c>)
 8002dea:	4620      	mov	r0, r4
 8002dec:	f003 fe51 	bl	8006a92 <shell_fprintf>
 8002df0:	e797      	b.n	8002d22 <cmd_attach+0x32>
		if (pos < 0) {
 8002df2:	1c69      	adds	r1, r5, #1
 8002df4:	d495      	bmi.n	8002d22 <cmd_attach+0x32>
		filter.ext_id_mask = mask;
 8002df6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8002dfa:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8002dfe:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002e02:	f3c0 400c 	ubfx	r0, r0, #16, #13
 8002e06:	4318      	orrs	r0, r3
	if (pos != argc) {
 8002e08:	4541      	cmp	r1, r8
		filter.ext_id_mask = mask;
 8002e0a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
	if (pos != argc) {
 8002e0e:	d14d      	bne.n	8002eac <cmd_attach+0x1bc>
	filter.rtr_mask = rtr_mask;
 8002e10:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8002e14:	f89d 0013 	ldrb.w	r0, [sp, #19]
	shell_print(shell, "Attach filter with ID 0x%x (%s id) and mask 0x%x "
 8002e18:	f89d 2012 	ldrb.w	r2, [sp, #18]
	filter.rtr_mask = rtr_mask;
 8002e1c:	f360 0300 	bfi	r3, r0, #0, #1
 8002e20:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	shell_print(shell, "Attach filter with ID 0x%x (%s id) and mask 0x%x "
 8002e24:	9b07      	ldr	r3, [sp, #28]
 8002e26:	2a00      	cmp	r2, #0
 8002e28:	d04b      	beq.n	8002ec2 <cmd_attach+0x1d2>
 8002e2a:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8002e2e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8002e32:	f002 021f 	and.w	r2, r2, #31
 8002e36:	0612      	lsls	r2, r2, #24
 8002e38:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
 8002e3c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8002e40:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8002e44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e48:	492d      	ldr	r1, [pc, #180]	; (8002f00 <cmd_attach+0x210>)
 8002e4a:	9100      	str	r1, [sp, #0]
 8002e4c:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8002e50:	2100      	movs	r1, #0
 8002e52:	4a2c      	ldr	r2, [pc, #176]	; (8002f04 <cmd_attach+0x214>)
 8002e54:	4620      	mov	r0, r4
 8002e56:	f003 fe1c 	bl	8006a92 <shell_fprintf>
	ret = can_attach_workq(can_dev, &k_sys_work_q, &work, print_frame,
 8002e5a:	ab07      	add	r3, sp, #28
 8002e5c:	e9cd 4300 	strd	r4, r3, [sp]
 8002e60:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <cmd_attach+0x218>)
 8002e62:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <cmd_attach+0x21c>)
 8002e64:	492a      	ldr	r1, [pc, #168]	; (8002f10 <cmd_attach+0x220>)
 8002e66:	4638      	mov	r0, r7
 8002e68:	f7ff fb20 	bl	80024ac <can_attach_workq>
	if (ret < 0) {
 8002e6c:	1e03      	subs	r3, r0, #0
 8002e6e:	da36      	bge.n	8002ede <cmd_attach+0x1ee>
		if (ret == CAN_NO_FREE_FILTER) {
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	d12e      	bne.n	8002ed2 <cmd_attach+0x1e2>
			shell_error(shell, "Can't attach, no free filter left");
 8002e74:	4a27      	ldr	r2, [pc, #156]	; (8002f14 <cmd_attach+0x224>)
 8002e76:	2102      	movs	r1, #2
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f003 fe0a 	bl	8006a92 <shell_fprintf>
		return -EIO;
 8002e7e:	f06f 0004 	mvn.w	r0, #4
 8002e82:	e750      	b.n	8002d26 <cmd_attach+0x36>
		filter.ext_id_mask = ext ? CAN_EXT_ID_MASK : CAN_STD_ID_MASK;
 8002e84:	f1ba 0f00 	cmp.w	sl, #0
 8002e88:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002e8c:	bf08      	it	eq
 8002e8e:	461a      	moveq	r2, r3
 8002e90:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8002e94:	bf18      	it	ne
 8002e96:	f06f 4260 	mvnne.w	r2, #3758096384	; 0xe0000000
 8002e9a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002e9e:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8002ea2:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8002ea6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	if (pos != argc) {
 8002eaa:	e7b1      	b.n	8002e10 <cmd_attach+0x120>
		pos = read_options(shell, pos, argv, &rtr_mask, NULL);
 8002eac:	2300      	movs	r3, #0
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4632      	mov	r2, r6
 8002eb2:	f10d 0313 	add.w	r3, sp, #19
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f7ff fea8 	bl	8002c0c <read_options>
		if (pos < 0) {
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	daa7      	bge.n	8002e10 <cmd_attach+0x120>
 8002ec0:	e72f      	b.n	8002d22 <cmd_attach+0x32>
	shell_print(shell, "Attach filter with ID 0x%x (%s id) and mask 0x%x "
 8002ec2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8002ec6:	4914      	ldr	r1, [pc, #80]	; (8002f18 <cmd_attach+0x228>)
 8002ec8:	f3c3 230a 	ubfx	r3, r3, #8, #11
 8002ecc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002ed0:	e7bb      	b.n	8002e4a <cmd_attach+0x15a>
			shell_error(shell, "Failed to attach filter [%d]", ret);
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <cmd_attach+0x22c>)
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f003 fddb 	bl	8006a92 <shell_fprintf>
 8002edc:	e7cf      	b.n	8002e7e <cmd_attach+0x18e>
	shell_print(shell, "Filter ID: %d", ret);
 8002ede:	4620      	mov	r0, r4
 8002ee0:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <cmd_attach+0x230>)
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	f003 fdd5 	bl	8006a92 <shell_fprintf>
	return 0;
 8002ee8:	2000      	movs	r0, #0
 8002eea:	e71c      	b.n	8002d26 <cmd_attach+0x36>
 8002eec:	08009f9b 	.word	0x08009f9b
 8002ef0:	08009fbd 	.word	0x08009fbd
 8002ef4:	0800986f 	.word	0x0800986f
 8002ef8:	0800a1b1 	.word	0x0800a1b1
 8002efc:	08009fd3 	.word	0x08009fd3
 8002f00:	08009f89 	.word	0x08009f89
 8002f04:	0800a012 	.word	0x0800a012
 8002f08:	20000664 	.word	0x20000664
 8002f0c:	08002b59 	.word	0x08002b59
 8002f10:	2000088c 	.word	0x2000088c
 8002f14:	0800a04d 	.word	0x0800a04d
 8002f18:	08009f92 	.word	0x08009f92
 8002f1c:	0800a070 	.word	0x0800a070
 8002f20:	0800a08e 	.word	0x0800a08e

08002f24 <cmd_detach>:

static int cmd_detach(const struct shell *shell, size_t argc, char **argv)
{
 8002f24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f26:	4605      	mov	r5, r0
 8002f28:	4616      	mov	r6, r2
	struct device *can_dev;
	char *end_ptr;
	long id;

	can_dev = device_get_binding(argv[1]);
 8002f2a:	6850      	ldr	r0, [r2, #4]
 8002f2c:	f001 fe4a 	bl	8004bc4 <z_impl_device_get_binding>
	if (!can_dev) {
 8002f30:	4604      	mov	r4, r0
 8002f32:	b948      	cbnz	r0, 8002f48 <cmd_detach+0x24>
		shell_error(shell, "Can't get binding to device \"%s\"",
 8002f34:	6873      	ldr	r3, [r6, #4]
 8002f36:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <cmd_detach+0x60>)
 8002f38:	2102      	movs	r1, #2
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	f003 fda9 	bl	8006a92 <shell_fprintf>


	id = strtol(argv[2], &end_ptr, 0);
	if (*end_ptr != '\0') {
		shell_error(shell, "filter_id is not a number");
		return -EINVAL;
 8002f40:	f06f 0015 	mvn.w	r0, #21
	}

	can_detach(can_dev, (int)id);

	return 0;
}
 8002f44:	b002      	add	sp, #8
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
	id = strtol(argv[2], &end_ptr, 0);
 8002f48:	68b0      	ldr	r0, [r6, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	a901      	add	r1, sp, #4
 8002f4e:	f004 fef2 	bl	8007d36 <strtol>
	if (*end_ptr != '\0') {
 8002f52:	9b01      	ldr	r3, [sp, #4]
 8002f54:	781b      	ldrb	r3, [r3, #0]
	id = strtol(argv[2], &end_ptr, 0);
 8002f56:	4606      	mov	r6, r0
	if (*end_ptr != '\0') {
 8002f58:	b12b      	cbz	r3, 8002f66 <cmd_detach+0x42>
		shell_error(shell, "filter_id is not a number");
 8002f5a:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <cmd_detach+0x64>)
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	4628      	mov	r0, r5
 8002f60:	f003 fd97 	bl	8006a92 <shell_fprintf>
 8002f64:	e7ec      	b.n	8002f40 <cmd_detach+0x1c>
	if (id < 0) {
 8002f66:	2800      	cmp	r0, #0
 8002f68:	da04      	bge.n	8002f74 <cmd_detach+0x50>
		shell_error(shell, "filter_id must not be negative");
 8002f6a:	4a08      	ldr	r2, [pc, #32]	; (8002f8c <cmd_detach+0x68>)
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f003 fd8f 	bl	8006a92 <shell_fprintf>
	return api->detach(dev, filter_id);
 8002f74:	6863      	ldr	r3, [r4, #4]
 8002f76:	4620      	mov	r0, r4
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	4631      	mov	r1, r6
 8002f7c:	4798      	blx	r3
	return 0;
 8002f7e:	2000      	movs	r0, #0
 8002f80:	e7e0      	b.n	8002f44 <cmd_detach+0x20>
 8002f82:	bf00      	nop
 8002f84:	08009f9b 	.word	0x08009f9b
 8002f88:	0800a09d 	.word	0x0800a09d
 8002f8c:	0800a0b8 	.word	0x0800a0b8

08002f90 <cmd_send>:
{
 8002f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f94:	b08a      	sub	sp, #40	; 0x28
	bool rtr = false, ext = false;
 8002f96:	2300      	movs	r3, #0
{
 8002f98:	4604      	mov	r4, r0
 8002f9a:	4689      	mov	r9, r1
 8002f9c:	4690      	mov	r8, r2
	bool rtr = false, ext = false;
 8002f9e:	f88d 300e 	strb.w	r3, [sp, #14]
 8002fa2:	f88d 300f 	strb.w	r3, [sp, #15]
	can_dev = device_get_binding(argv[pos]);
 8002fa6:	6850      	ldr	r0, [r2, #4]
 8002fa8:	f001 fe0c 	bl	8004bc4 <z_impl_device_get_binding>
	if (!can_dev) {
 8002fac:	4607      	mov	r7, r0
 8002fae:	b938      	cbnz	r0, 8002fc0 <cmd_send+0x30>
		shell_error(shell, "Can't get binding to device \"%s\"",
 8002fb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002fb4:	4a48      	ldr	r2, [pc, #288]	; (80030d8 <cmd_send+0x148>)
		shell_error(shell, "Too many databytes. Max is %d",
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f003 fd6a 	bl	8006a92 <shell_fprintf>
	if (pos < 0) {
 8002fbe:	e00b      	b.n	8002fd8 <cmd_send+0x48>
	pos = read_options(shell, pos, argv, &rtr, &ext);
 8002fc0:	f10d 030f 	add.w	r3, sp, #15
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	f10d 030e 	add.w	r3, sp, #14
 8002fcc:	4642      	mov	r2, r8
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f7ff fe1c 	bl	8002c0c <read_options>
	if (pos < 0) {
 8002fd4:	1e01      	subs	r1, r0, #0
 8002fd6:	da04      	bge.n	8002fe2 <cmd_send+0x52>
		return -EINVAL;
 8002fd8:	f06f 0015 	mvn.w	r0, #21
}
 8002fdc:	b00a      	add	sp, #40	; 0x28
 8002fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	frame.id_type = ext ? CAN_EXTENDED_IDENTIFIER : CAN_STANDARD_IDENTIFIER;
 8002fe2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002fe6:	f89d 300f 	ldrb.w	r3, [sp, #15]
	frame.rtr = rtr ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 8002fea:	f89d 000e 	ldrb.w	r0, [sp, #14]
	frame.id_type = ext ? CAN_EXTENDED_IDENTIFIER : CAN_STANDARD_IDENTIFIER;
 8002fee:	f363 0200 	bfi	r2, r3, #0, #1
	frame.rtr = rtr ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 8002ff2:	f360 0241 	bfi	r2, r0, #1, #1
 8002ff6:	f88d 2018 	strb.w	r2, [sp, #24]
	pos = read_id(shell, pos, argv, ext, &id);
 8002ffa:	aa04      	add	r2, sp, #16
 8002ffc:	9200      	str	r2, [sp, #0]
 8002ffe:	4620      	mov	r0, r4
 8003000:	4642      	mov	r2, r8
 8003002:	f7ff fe35 	bl	8002c70 <read_id>
	if (pos < 0) {
 8003006:	1e05      	subs	r5, r0, #0
 8003008:	dbe6      	blt.n	8002fd8 <cmd_send+0x48>
	frame.ext_id = id;
 800300a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800300e:	9a04      	ldr	r2, [sp, #16]
 8003010:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003014:	9306      	str	r3, [sp, #24]
 8003016:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800301a:	f003 021f 	and.w	r2, r3, #31
 800301e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8003022:	f023 031f 	bic.w	r3, r3, #31
 8003026:	4313      	orrs	r3, r2
 8003028:	f88d 301c 	strb.w	r3, [sp, #28]
	if (argc - pos > CAN_MAX_DLC) {
 800302c:	eba9 0305 	sub.w	r3, r9, r5
 8003030:	2b08      	cmp	r3, #8
 8003032:	d948      	bls.n	80030c6 <cmd_send+0x136>
		shell_error(shell, "Too many databytes. Max is %d",
 8003034:	2308      	movs	r3, #8
 8003036:	4a29      	ldr	r2, [pc, #164]	; (80030dc <cmd_send+0x14c>)
 8003038:	e7bd      	b.n	8002fb6 <cmd_send+0x26>
		val = strtol(argv[i], &end_ptr, 0);
 800303a:	2200      	movs	r2, #0
 800303c:	a905      	add	r1, sp, #20
 800303e:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
 8003042:	f004 fe78 	bl	8007d36 <strtol>
		if (*end_ptr != '\0') {
 8003046:	9b05      	ldr	r3, [sp, #20]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b12b      	cbz	r3, 8003058 <cmd_send+0xc8>
			shell_error(shell, "Data bytes must be numbers");
 800304c:	4a24      	ldr	r2, [pc, #144]	; (80030e0 <cmd_send+0x150>)
			shell_error(shell, "A data bytes must not be > 0xFF");
 800304e:	2102      	movs	r1, #2
 8003050:	4620      	mov	r0, r4
 8003052:	f003 fd1e 	bl	8006a92 <shell_fprintf>
			return -EINVAL;
 8003056:	e7bf      	b.n	8002fd8 <cmd_send+0x48>
		if (val & ~0xFFL) {
 8003058:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800305c:	d001      	beq.n	8003062 <cmd_send+0xd2>
			shell_error(shell, "A data bytes must not be > 0xFF");
 800305e:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <cmd_send+0x154>)
 8003060:	e7f5      	b.n	800304e <cmd_send+0xbe>
		*data_ptr = val;
 8003062:	f80a 0b01 	strb.w	r0, [sl], #1
	for (i = pos; i < argc; i++) {
 8003066:	3601      	adds	r6, #1
 8003068:	45b1      	cmp	r9, r6
 800306a:	d8e6      	bhi.n	800303a <cmd_send+0xaa>
	*dlc = i - pos;
 800306c:	1b75      	subs	r5, r6, r5
 800306e:	b2ed      	uxtb	r5, r5
	if (pos < 0) {
 8003070:	2e00      	cmp	r6, #0
	*dlc = i - pos;
 8003072:	f88d 501d 	strb.w	r5, [sp, #29]
	if (pos < 0) {
 8003076:	dbaf      	blt.n	8002fd8 <cmd_send+0x48>
	shell_print(shell, "Send frame with ID 0x%x (%s id) and %d data bytes",
 8003078:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800307c:	9b06      	ldr	r3, [sp, #24]
 800307e:	b332      	cbz	r2, 80030ce <cmd_send+0x13e>
 8003080:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8003084:	f002 021f 	and.w	r2, r2, #31
 8003088:	0612      	lsls	r2, r2, #24
 800308a:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
 800308e:	4a16      	ldr	r2, [pc, #88]	; (80030e8 <cmd_send+0x158>)
 8003090:	e9cd 2500 	strd	r2, r5, [sp]
 8003094:	2100      	movs	r1, #0
 8003096:	4a15      	ldr	r2, [pc, #84]	; (80030ec <cmd_send+0x15c>)
 8003098:	4620      	mov	r0, r4
 800309a:	f003 fcfa 	bl	8006a92 <shell_fprintf>
	return api->send(dev, msg, timeout, callback_isr, callback_arg);
 800309e:	2300      	movs	r3, #0
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	6855      	ldr	r5, [r2, #4]
 80030a6:	a906      	add	r1, sp, #24
 80030a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030ac:	4638      	mov	r0, r7
 80030ae:	47a8      	blx	r5
	if (ret) {
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d093      	beq.n	8002fdc <cmd_send+0x4c>
		shell_error(shell, "Failed to send frame [%d]", ret);
 80030b4:	4603      	mov	r3, r0
 80030b6:	4a0e      	ldr	r2, [pc, #56]	; (80030f0 <cmd_send+0x160>)
 80030b8:	4620      	mov	r0, r4
 80030ba:	2102      	movs	r1, #2
 80030bc:	f003 fce9 	bl	8006a92 <shell_fprintf>
		return -EIO;
 80030c0:	f06f 0004 	mvn.w	r0, #4
 80030c4:	e78a      	b.n	8002fdc <cmd_send+0x4c>
	if (argc - pos > CAN_MAX_DLC) {
 80030c6:	462e      	mov	r6, r5
	u8_t *data_ptr = data;
 80030c8:	f10d 0a1e 	add.w	sl, sp, #30
 80030cc:	e7cc      	b.n	8003068 <cmd_send+0xd8>
	shell_print(shell, "Send frame with ID 0x%x (%s id) and %d data bytes",
 80030ce:	f3c3 230a 	ubfx	r3, r3, #8, #11
 80030d2:	4a08      	ldr	r2, [pc, #32]	; (80030f4 <cmd_send+0x164>)
 80030d4:	e7dc      	b.n	8003090 <cmd_send+0x100>
 80030d6:	bf00      	nop
 80030d8:	08009f9b 	.word	0x08009f9b
 80030dc:	0800a0d8 	.word	0x0800a0d8
 80030e0:	0800a0f7 	.word	0x0800a0f7
 80030e4:	0800a113 	.word	0x0800a113
 80030e8:	08009f89 	.word	0x08009f89
 80030ec:	0800a134 	.word	0x0800a134
 80030f0:	0800a167 	.word	0x0800a167
 80030f4:	08009f92 	.word	0x08009f92

080030f8 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static u32_t elapsed(void)
{
	u32_t val1 = SysTick->VAL;	/* A */
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <elapsed+0x30>)
 80030fa:	689a      	ldr	r2, [r3, #8]
	u32_t ctrl = SysTick->CTRL;	/* B */
 80030fc:	6819      	ldr	r1, [r3, #0]
	u32_t val2 = SysTick->VAL;	/* C */
 80030fe:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <elapsed+0x34>)
 8003102:	f411 3f80 	tst.w	r1, #65536	; 0x10000
{
 8003106:	b510      	push	{r4, lr}
 8003108:	4909      	ldr	r1, [pc, #36]	; (8003130 <elapsed+0x38>)
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800310a:	d101      	bne.n	8003110 <elapsed+0x18>
	    || (val1 < val2)) {
 800310c:	4282      	cmp	r2, r0
 800310e:	d205      	bcs.n	800311c <elapsed+0x24>
		overflow_cyc += last_load;
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	680c      	ldr	r4, [r1, #0]
 8003114:	4422      	add	r2, r4
 8003116:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8003118:	4a03      	ldr	r2, [pc, #12]	; (8003128 <elapsed+0x30>)
 800311a:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	680a      	ldr	r2, [r1, #0]
 8003120:	4413      	add	r3, r2
}
 8003122:	1a18      	subs	r0, r3, r0
 8003124:	bd10      	pop	{r4, pc}
 8003126:	bf00      	nop
 8003128:	e000e010 	.word	0xe000e010
 800312c:	200006c4 	.word	0x200006c4
 8003130:	200006c0 	.word	0x200006c0

08003134 <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 8003134:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	u32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8003136:	f7ff ffdf 	bl	80030f8 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 800313a:	4b0c      	ldr	r3, [pc, #48]	; (800316c <z_clock_isr+0x38>)
 800313c:	4a0c      	ldr	r2, [pc, #48]	; (8003170 <z_clock_isr+0x3c>)
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	6811      	ldr	r1, [r2, #0]
 8003142:	4408      	add	r0, r1
 8003144:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <z_clock_isr+0x40>)
 800314c:	6811      	ldr	r1, [r2, #0]
 800314e:	f244 13a0 	movw	r3, #16800	; 0x41a0
 8003152:	1a40      	subs	r0, r0, r1
 8003154:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 8003158:	fb03 1300 	mla	r3, r3, r0, r1
 800315c:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
 800315e:	f002 fc6f 	bl	8005a40 <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_exc_exit();
}
 8003162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
 8003166:	f000 b8bb 	b.w	80032e0 <z_arm_exc_exit>
 800316a:	bf00      	nop
 800316c:	200006c4 	.word	0x200006c4
 8003170:	200006bc 	.word	0x200006bc
 8003174:	200006b8 	.word	0x200006b8

08003178 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <z_clock_driver_init+0x28>)
 800317a:	2210      	movs	r2, #16
 800317c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

int z_clock_driver_init(struct device *device)
{
	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <z_clock_driver_init+0x2c>)
 8003182:	f244 129f 	movw	r2, #16799	; 0x419f
 8003186:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8003188:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <z_clock_driver_init+0x30>)
 800318a:	2000      	movs	r0, #0
 800318c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800318e:	4b07      	ldr	r3, [pc, #28]	; (80031ac <z_clock_driver_init+0x34>)
 8003190:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8003192:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	f042 0207 	orr.w	r2, r2, #7
 800319a:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000ed00 	.word	0xe000ed00
 80031a4:	200006c0 	.word	0x200006c0
 80031a8:	200006c4 	.word	0x200006c4
 80031ac:	e000e010 	.word	0xe000e010

080031b0 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	4604      	mov	r4, r0
 80031b4:	4d2a      	ldr	r5, [pc, #168]	; (8003260 <z_clock_set_timeout+0xb0>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle && ticks == K_FOREVER) {
 80031b6:	b151      	cbz	r1, 80031ce <z_clock_set_timeout+0x1e>
 80031b8:	1c43      	adds	r3, r0, #1
 80031ba:	d10e      	bne.n	80031da <z_clock_set_timeout+0x2a>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80031bc:	4a29      	ldr	r2, [pc, #164]	; (8003264 <z_clock_set_timeout+0xb4>)
 80031be:	6813      	ldr	r3, [r2, #0]
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 80031c6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80031ca:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 80031cc:	bd70      	pop	{r4, r5, r6, pc}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
 80031ce:	f240 33e5 	movw	r3, #997	; 0x3e5
 80031d2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80031d6:	bf08      	it	eq
 80031d8:	461c      	moveq	r4, r3
	__asm__ volatile(
 80031da:	f04f 0310 	mov.w	r3, #16
 80031de:	f3ef 8611 	mrs	r6, BASEPRI
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
	u32_t pending = elapsed();
 80031ea:	f7ff ff85 	bl	80030f8 <elapsed>
	cycle_count += pending;
 80031ee:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <z_clock_set_timeout+0xb8>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4410      	add	r0, r2
 80031f4:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <z_clock_set_timeout+0xbc>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
	u32_t unannounced = cycle_count - announced_cycles;
 80031fc:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <z_clock_set_timeout+0xc0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
	if ((s32_t)unannounced < 0) {
 8003200:	1ac2      	subs	r2, r0, r3
 8003202:	d50d      	bpl.n	8003220 <z_clock_set_timeout+0x70>
		last_load = MIN_DELAY;
 8003204:	f240 431a 	movw	r3, #1050	; 0x41a
			last_load = MAX_CYCLES;
 8003208:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
 800320a:	682b      	ldr	r3, [r5, #0]
 800320c:	4a15      	ldr	r2, [pc, #84]	; (8003264 <z_clock_set_timeout+0xb4>)
 800320e:	3b01      	subs	r3, #1
 8003210:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8003212:	2300      	movs	r3, #0
 8003214:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
 8003216:	f386 8811 	msr	BASEPRI, r6
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	e7d5      	b.n	80031cc <z_clock_set_timeout+0x1c>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
 8003220:	3c01      	subs	r4, #1
		delay = ticks * CYC_PER_TICK;
 8003222:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003226:	f240 31e5 	movw	r1, #997	; 0x3e5
 800322a:	428c      	cmp	r4, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800322c:	f502 4283 	add.w	r2, r2, #16768	; 0x4180
		delay = ticks * CYC_PER_TICK;
 8003230:	bfa8      	it	ge
 8003232:	460c      	movge	r4, r1
		delay -= unannounced;
 8003234:	1a18      	subs	r0, r3, r0
		delay = ticks * CYC_PER_TICK;
 8003236:	f244 11a0 	movw	r1, #16800	; 0x41a0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800323a:	321f      	adds	r2, #31
 800323c:	fb01 2404 	mla	r4, r1, r4, r2
		delay = MAX(delay, MIN_DELAY);
 8003240:	f240 431a 	movw	r3, #1050	; 0x41a
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8003244:	fbb4 f4f1 	udiv	r4, r4, r1
		delay -= unannounced;
 8003248:	fb01 0404 	mla	r4, r1, r4, r0
		delay = MAX(delay, MIN_DELAY);
 800324c:	429c      	cmp	r4, r3
 800324e:	d904      	bls.n	800325a <z_clock_set_timeout+0xaa>
		if (delay > MAX_CYCLES) {
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <z_clock_set_timeout+0xc4>)
 8003252:	429c      	cmp	r4, r3
 8003254:	d8d8      	bhi.n	8003208 <z_clock_set_timeout+0x58>
			last_load = delay;
 8003256:	602c      	str	r4, [r5, #0]
 8003258:	e7d7      	b.n	800320a <z_clock_set_timeout+0x5a>
		delay = MAX(delay, MIN_DELAY);
 800325a:	461c      	mov	r4, r3
 800325c:	e7fb      	b.n	8003256 <z_clock_set_timeout+0xa6>
 800325e:	bf00      	nop
 8003260:	200006c0 	.word	0x200006c0
 8003264:	e000e010 	.word	0xe000e010
 8003268:	200006bc 	.word	0x200006bc
 800326c:	200006c4 	.word	0x200006c4
 8003270:	200006b8 	.word	0x200006b8
 8003274:	00ff9420 	.word	0x00ff9420

08003278 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
 8003278:	b510      	push	{r4, lr}
	__asm__ volatile(
 800327a:	f04f 0310 	mov.w	r3, #16
 800327e:	f3ef 8411 	mrs	r4, BASEPRI
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc = elapsed() + cycle_count - announced_cycles;
 800328a:	f7ff ff35 	bl	80030f8 <elapsed>
 800328e:	4b07      	ldr	r3, [pc, #28]	; (80032ac <z_clock_elapsed+0x34>)
 8003290:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <z_clock_elapsed+0x38>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	4418      	add	r0, r3
	__asm__ volatile(
 800329a:	f384 8811 	msr	BASEPRI, r4
 800329e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 80032a2:	f244 13a0 	movw	r3, #16800	; 0x41a0
 80032a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80032aa:	bd10      	pop	{r4, pc}
 80032ac:	200006bc 	.word	0x200006bc
 80032b0:	200006b8 	.word	0x200006b8

080032b4 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
 80032b4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80032b6:	f04f 0310 	mov.w	r3, #16
 80032ba:	f3ef 8411 	mrs	r4, BASEPRI
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = elapsed() + cycle_count;
 80032c6:	f7ff ff17 	bl	80030f8 <elapsed>
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <z_timer_cycle_get_32+0x28>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4418      	add	r0, r3
	__asm__ volatile(
 80032d0:	f384 8811 	msr	BASEPRI, r4
 80032d4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 80032d8:	bd10      	pop	{r4, pc}
 80032da:	bf00      	nop
 80032dc:	200006bc 	.word	0x200006bc

080032e0 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
 80032e0:	4804      	ldr	r0, [pc, #16]	; (80032f4 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
 80032e2:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
 80032e4:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
 80032e6:	4288      	cmp	r0, r1
    beq _EXIT_EXC
 80032e8:	d003      	beq.n	80032f2 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
 80032ea:	4903      	ldr	r1, [pc, #12]	; (80032f8 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
 80032ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
 80032f0:	600a      	str	r2, [r1, #0]

080032f2 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
 80032f2:	4770      	bx	lr
    ldr r0, =_kernel
 80032f4:	20000854 	.word	0x20000854
    ldr r1, =_SCS_ICSR
 80032f8:	e000ed04 	.word	0xe000ed04

080032fc <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
 80032fc:	4a09      	ldr	r2, [pc, #36]	; (8003324 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 80032fe:	490a      	ldr	r1, [pc, #40]	; (8003328 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8003300:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8003302:	6809      	ldr	r1, [r1, #0]
 8003304:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003306:	4909      	ldr	r1, [pc, #36]	; (800332c <arch_swap+0x30>)
	_current->arch.basepri = key;
 8003308:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800330a:	684b      	ldr	r3, [r1, #4]
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003310:	604b      	str	r3, [r1, #4]
 8003312:	2300      	movs	r3, #0
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 800331c:	6893      	ldr	r3, [r2, #8]
}
 800331e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	20000854 	.word	0x20000854
 8003328:	080096f0 	.word	0x080096f0
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003330:	4912      	ldr	r1, [pc, #72]	; (800337c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003332:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003334:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
 8003338:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800333a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 800333e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003342:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8003344:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8003348:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 800334c:	4f0c      	ldr	r7, [pc, #48]	; (8003380 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 800334e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8003352:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 8003354:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8003356:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8003358:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
 800335a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 800335c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 800335e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8003362:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8003364:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8003366:	f004 fcde 	bl	8007d26 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 800336a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 800336e:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
 8003372:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8003376:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 800337a:	4770      	bx	lr
    ldr r1, =_kernel
 800337c:	20000854 	.word	0x20000854
    ldr v4, =_SCS_ICSR
 8003380:	e000ed04 	.word	0xe000ed04

08003384 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 8003384:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8003388:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 800338a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 800338e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8003392:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8003394:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8003398:	2902      	cmp	r1, #2
    beq _oops
 800339a:	d0ff      	beq.n	800339c <_oops>

0800339c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 800339c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 800339e:	f004 fcb7 	bl	8007d10 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 80033a2:	bd01      	pop	{r0, pc}

080033a4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80033a4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	db08      	blt.n	80033bc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033aa:	2201      	movs	r2, #1
 80033ac:	f000 001f 	and.w	r0, r0, #31
 80033b0:	fa02 f000 	lsl.w	r0, r2, r0
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	4a02      	ldr	r2, [pc, #8]	; (80033c0 <arch_irq_enable+0x1c>)
 80033b8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000e100 	.word	0xe000e100

080033c4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80033c4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80033c6:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	bfa8      	it	ge
 80033ca:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 80033ce:	f101 0101 	add.w	r1, r1, #1
 80033d2:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80033d6:	bfae      	itee	ge
 80033d8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033dc:	f000 000f 	andlt.w	r0, r0, #15
 80033e0:	4b03      	ldrlt	r3, [pc, #12]	; (80033f0 <z_arm_irq_priority_set+0x2c>)
 80033e2:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e4:	bfac      	ite	ge
 80033e6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	5419      	strblt	r1, [r3, r0]
}
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000ed14 	.word	0xe000ed14

080033f4 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
 80033f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033f6:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
 80033f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033fa:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
 80033fc:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
 80033fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
 8003400:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
 8003402:	f005 fb42 	bl	8008a8a <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 8003406:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 800340c:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
 8003416:	9a06      	ldr	r2, [sp, #24]
 8003418:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
 800341a:	9a07      	ldr	r2, [sp, #28]
 800341c:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
 800341e:	9a08      	ldr	r2, [sp, #32]
 8003420:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
 8003422:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
 8003426:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
 8003428:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
 800342a:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8003430:	b002      	add	sp, #8
 8003432:	bd70      	pop	{r4, r5, r6, pc}
 8003434:	080062f5 	.word	0x080062f5

08003438 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	4605      	mov	r5, r0
 800343c:	460c      	mov	r4, r1
 800343e:	4617      	mov	r7, r2
 8003440:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8003442:	f000 f96b 	bl	800371c <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
 8003448:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 800344a:	4628      	mov	r0, r5
	_current = main_thread;
 800344c:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
 800344e:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8003452:	f004 fc68 	bl	8007d26 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8003456:	4630      	mov	r0, r6
 8003458:	f384 8809 	msr	PSP, r4
 800345c:	2100      	movs	r1, #0
 800345e:	b663      	cpsie	if
 8003460:	f381 8811 	msr	BASEPRI, r1
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	2200      	movs	r2, #0
 800346a:	2300      	movs	r3, #0
 800346c:	f002 ff42 	bl	80062f4 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8003470:	20000854 	.word	0x20000854

08003474 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
 8003474:	4901      	ldr	r1, [pc, #4]	; (800347c <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
 8003476:	2210      	movs	r2, #16
	str r2, [r1]
 8003478:	600a      	str	r2, [r1, #0]
#endif
	bx lr
 800347a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
 800347c:	e000ed10 	.word	0xe000ed10

08003480 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
 8003480:	4040      	eors	r0, r0
	msr BASEPRI, r0
 8003482:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
 8003486:	bf30      	wfi

	bx lr
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop

0800348c <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
 800348c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8003490:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
 8003494:	4672      	mov	r2, lr

	push {r0, lr}
 8003496:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
 8003498:	f000 f892 	bl	80035c0 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
 800349c:	bd01      	pop	{r0, pc}
 800349e:	bf00      	nop

080034a0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 80034a0:	bf30      	wfi
    b z_SysNmiOnReset
 80034a2:	f7ff bffd 	b.w	80034a0 <z_SysNmiOnReset>
 80034a6:	bf00      	nop

080034a8 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 80034a8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <z_arm_prep_c+0x24>)
 80034ac:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <z_arm_prep_c+0x28>)
 80034ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80034b2:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034b8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
 80034bc:	f001 fbae 	bl	8004c1c <z_bss_zero>
	z_data_copy();
 80034c0:	f001 fbc4 	bl	8004c4c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
 80034c4:	f000 f8f8 	bl	80036b8 <z_arm_int_lib_init>
	z_cstart();
 80034c8:	f001 fbfa 	bl	8004cc0 <z_cstart>
 80034cc:	08000000 	.word	0x08000000
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80034d4:	b501      	push	{r0, lr}

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80034d6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80034da:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80034de:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
 80034e2:	4904      	ldr	r1, [pc, #16]	; (80034f4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80034e4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80034e6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
 80034e8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80034ea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80034ee:	4902      	ldr	r1, [pc, #8]	; (80034f8 <_isr_wrapper+0x24>)
	bx r1
 80034f0:	4708      	bx	r1
 80034f2:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80034f4:	08008df8 	.word	0x08008df8
	ldr r1, =z_arm_int_exit
 80034f8:	080032e1 	.word	0x080032e1

080034fc <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80034fc:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80034fe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
 8003502:	4808      	ldr	r0, [pc, #32]	; (8003524 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 8003504:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 8003508:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800350a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800350e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8003512:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8003514:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8003516:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800351a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800351e:	f7ff ffc3 	bl	80034a8 <z_arm_prep_c>
 8003522:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
 8003524:	20001ab8 	.word	0x20001ab8

08003528 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <mem_manage_fault.isra.2+0x34>)
 800352a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 800352c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800352e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003530:	0792      	lsls	r2, r2, #30
 8003532:	d508      	bpl.n	8003546 <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
 8003534:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8003536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003538:	0612      	lsls	r2, r2, #24
 800353a:	d504      	bpl.n	8003546 <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
 800353c:	b118      	cbz	r0, 8003546 <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 800353e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003544:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <mem_manage_fault.isra.2+0x34>)
 8003548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800354a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 800354c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800354e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
 8003550:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8003552:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8003556:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 8003558:	7008      	strb	r0, [r1, #0]

	return reason;
}
 800355a:	4770      	bx	lr
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003560:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <bus_fault.isra.3+0x38>)
 8003562:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8003564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8003566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003568:	0592      	lsls	r2, r2, #22
 800356a:	d508      	bpl.n	800357e <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 800356c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800356e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003570:	0412      	lsls	r2, r2, #16
 8003572:	d504      	bpl.n	800357e <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
 8003574:	b118      	cbz	r0, 800357e <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8003576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003578:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800357c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <bus_fault.isra.3+0x38>)
 8003580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8003582:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003584:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8003586:	bf58      	it	pl
 8003588:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800358a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
 800358c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800358e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 8003594:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8003596:	4770      	bx	lr
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800359c:	4b07      	ldr	r3, [pc, #28]	; (80035bc <usage_fault.isra.4+0x20>)
 800359e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80035a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80035a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 80035a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 80035a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80035a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80035aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ac:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80035b0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80035b4:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 80035b6:	2000      	movs	r0, #0
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
 80035c0:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <z_arm_fault+0xdc>)
 80035c4:	685b      	ldr	r3, [r3, #4]
{
 80035c6:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80035c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035cc:	2500      	movs	r5, #0
 80035ce:	f385 8811 	msr	BASEPRI, r5
 80035d2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80035d6:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
 80035da:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
 80035de:	d112      	bne.n	8003606 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80035e0:	f002 040c 	and.w	r4, r2, #12
 80035e4:	2c08      	cmp	r4, #8
 80035e6:	d00e      	beq.n	8003606 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80035e8:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 80035ea:	bf4e      	itee	mi
 80035ec:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
 80035ee:	4606      	movpl	r6, r0
			*nested_exc = true;
 80035f0:	2501      	movpl	r5, #1
	*recoverable = false;
 80035f2:	2200      	movs	r2, #0
	switch (fault) {
 80035f4:	3b03      	subs	r3, #3
	*recoverable = false;
 80035f6:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d847      	bhi.n	800368e <z_arm_fault+0xce>
 80035fe:	e8df f003 	tbb	[pc, r3]
 8003602:	3e04      	.short	0x3e04
 8003604:	3b42      	.short	0x3b42
		return NULL;
 8003606:	462e      	mov	r6, r5
 8003608:	e7f3      	b.n	80035f2 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800360a:	4b24      	ldr	r3, [pc, #144]	; (800369c <z_arm_fault+0xdc>)
 800360c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360e:	0792      	lsls	r2, r2, #30
 8003610:	d43d      	bmi.n	800368e <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8003612:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003614:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8003618:	d008      	beq.n	800362c <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
 800361a:	3328      	adds	r3, #40	; 0x28
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	b1eb      	cbz	r3, 800365c <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
 8003620:	f10d 0107 	add.w	r1, sp, #7
 8003624:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8003626:	f7ff ff7f 	bl	8003528 <mem_manage_fault.isra.2>
		reason = usage_fault(esf);
 800362a:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 800362c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003630:	b993      	cbnz	r3, 8003658 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8003632:	2220      	movs	r2, #32
 8003634:	4631      	mov	r1, r6
 8003636:	a802      	add	r0, sp, #8
 8003638:	f004 fc84 	bl	8007f44 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 800363c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800363e:	b345      	cbz	r5, 8003692 <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8003640:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003644:	b922      	cbnz	r2, 8003650 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8003646:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800364a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800364e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8003650:	a902      	add	r1, sp, #8
 8003652:	4620      	mov	r0, r4
 8003654:	f004 fb5a 	bl	8007d0c <z_arm_fatal_error>
}
 8003658:	b00a      	add	sp, #40	; 0x28
 800365a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
 800365c:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <z_arm_fault+0xe0>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	b12b      	cbz	r3, 800366e <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
 8003662:	f10d 0107 	add.w	r1, sp, #7
 8003666:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8003668:	f7ff ff7a 	bl	8003560 <bus_fault.isra.3>
 800366c:	e7dd      	b.n	800362a <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <z_arm_fault+0xe4>)
 8003670:	881c      	ldrh	r4, [r3, #0]
 8003672:	b2a4      	uxth	r4, r4
 8003674:	2c00      	cmp	r4, #0
 8003676:	d0d9      	beq.n	800362c <z_arm_fault+0x6c>
		reason = usage_fault(esf);
 8003678:	f7ff ff90 	bl	800359c <usage_fault.isra.4>
 800367c:	e7d5      	b.n	800362a <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
 800367e:	f10d 0107 	add.w	r1, sp, #7
 8003682:	2000      	movs	r0, #0
 8003684:	e7cf      	b.n	8003626 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
 8003686:	f10d 0107 	add.w	r1, sp, #7
 800368a:	2000      	movs	r0, #0
 800368c:	e7ec      	b.n	8003668 <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
 800368e:	2400      	movs	r4, #0
 8003690:	e7cc      	b.n	800362c <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8003692:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	e7d8      	b.n	800364e <z_arm_fault+0x8e>
 800369c:	e000ed00 	.word	0xe000ed00
 80036a0:	e000ed29 	.word	0xe000ed29
 80036a4:	e000ed2a 	.word	0xe000ed2a

080036a8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80036a8:	4a02      	ldr	r2, [pc, #8]	; (80036b4 <z_arm_fault_init+0xc>)
 80036aa:	6953      	ldr	r3, [r2, #20]
 80036ac:	f043 0310 	orr.w	r3, r3, #16
 80036b0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80036b2:	4770      	bx	lr
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b8:	4804      	ldr	r0, [pc, #16]	; (80036cc <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	2110      	movs	r1, #16
 80036be:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80036c0:	3301      	adds	r3, #1
 80036c2:	2b52      	cmp	r3, #82	; 0x52
 80036c4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80036c8:	d1f9      	bne.n	80036be <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80036ca:	4770      	bx	lr
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	4605      	mov	r5, r0
	__asm__ volatile(
 80036d4:	f04f 0310 	mov.w	r3, #16
 80036d8:	f3ef 8411 	mrs	r4, BASEPRI
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
 80036e4:	f005 f9e0 	bl	8008aa8 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
 80036e8:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <z_impl_k_thread_abort+0x44>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	42ab      	cmp	r3, r5
 80036ee:	d10b      	bne.n	8003708 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <z_impl_k_thread_abort+0x48>)
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f8:	b912      	cbnz	r2, 8003700 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
 80036fa:	4620      	mov	r0, r4
 80036fc:	f7ff fdfe 	bl	80032fc <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003706:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
 8003708:	4620      	mov	r0, r4
}
 800370a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
 800370e:	f005 b8f9 	b.w	8008904 <z_reschedule_irqlock>
 8003712:	bf00      	nop
 8003714:	20000854 	.word	0x20000854
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 800371c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
 800371e:	4b08      	ldr	r3, [pc, #32]	; (8003740 <z_arm_configure_static_mpu_regions+0x24>)
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <z_arm_configure_static_mpu_regions+0x28>)
 8003724:	9302      	str	r3, [sp, #8]
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <z_arm_configure_static_mpu_regions+0x2c>)
 8003728:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
 800372a:	ab01      	add	r3, sp, #4
 800372c:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 800372e:	4a07      	ldr	r2, [pc, #28]	; (800374c <z_arm_configure_static_mpu_regions+0x30>)
 8003730:	4b07      	ldr	r3, [pc, #28]	; (8003750 <z_arm_configure_static_mpu_regions+0x34>)
 8003732:	2101      	movs	r1, #1
 8003734:	4668      	mov	r0, sp
 8003736:	f000 f891 	bl	800385c <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 800373a:	b005      	add	sp, #20
 800373c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003740:	20000000 	.word	0x20000000
 8003744:	00000000 	.word	0x00000000
 8003748:	060b0000 	.word	0x060b0000
 800374c:	20000000 	.word	0x20000000
 8003750:	20020000 	.word	0x20020000

08003754 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
 8003754:	b5f0      	push	{r4, r5, r6, r7, lr}
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
		const struct arm_mpu_region *region_conf) {
	/* Select the region you want to access */
	MPU->RNR = index;
 8003756:	4f20      	ldr	r7, [pc, #128]	; (80037d8 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8003758:	2600      	movs	r6, #0
 800375a:	428e      	cmp	r6, r1
 800375c:	db01      	blt.n	8003762 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 800375e:	4610      	mov	r0, r2
 8003760:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
 8003762:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
 8003766:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800376a:	b394      	cbz	r4, 80037d2 <mpu_configure_regions+0x7e>
		if (do_sanity_check &&
 800376c:	b15b      	cbz	r3, 8003786 <mpu_configure_regions+0x32>
	/* Partition size must be power-of-two,
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid = ((part->size & (part->size - 1)) == 0U)
 800376e:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
			&& (part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
			&& ((part->start & (part->size - 1)) == 0U);
 8003772:	ea14 0f0e 	tst.w	r4, lr
 8003776:	d11a      	bne.n	80037ae <mpu_configure_regions+0x5a>
			&& (part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
 8003778:	2c1f      	cmp	r4, #31
 800377a:	d918      	bls.n	80037ae <mpu_configure_regions+0x5a>
			&& ((part->start & (part->size - 1)) == 0U);
 800377c:	f8dc 5000 	ldr.w	r5, [ip]
 8003780:	ea1e 0f05 	tst.w	lr, r5
 8003784:	d113      	bne.n	80037ae <mpu_configure_regions+0x5a>
 * power-of-two value, and the returned SIZE field value corresponds
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size) {
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8003786:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8003788:	f8dc 5000 	ldr.w	r5, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
 800378c:	f8dc c008 	ldr.w	ip, [ip, #8]
		reg_index = mpu_configure_region(reg_index, regions[i]);
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	d90f      	bls.n	80037b4 <mpu_configure_regions+0x60>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
 8003794:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003798:	d80e      	bhi.n	80037b8 <mpu_configure_regions+0x64>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos)
 800379a:	3c01      	subs	r4, #1
 800379c:	fab4 f484 	clz	r4, r4
 80037a0:	f1c4 041f 	rsb	r4, r4, #31
 80037a4:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
 80037a6:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80037a8:	ea4c 0404 	orr.w	r4, ip, r4
 80037ac:	d906      	bls.n	80037bc <mpu_configure_regions+0x68>
			return -EINVAL;
 80037ae:	f06f 0215 	mvn.w	r2, #21
 80037b2:	e7d4      	b.n	800375e <mpu_configure_regions+0xa>
		return REGION_32B;
 80037b4:	2408      	movs	r4, #8
 80037b6:	e7f6      	b.n	80037a6 <mpu_configure_regions+0x52>
		return REGION_4G;
 80037b8:	243e      	movs	r4, #62	; 0x3e
 80037ba:	e7f4      	b.n	80037a6 <mpu_configure_regions+0x52>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk) | MPU_RBAR_VALID_Msk
 80037bc:	f025 051f 	bic.w	r5, r5, #31
			| index;
 80037c0:	4315      	orrs	r5, r2
 80037c2:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80037c6:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 80037ca:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk) | MPU_RBAR_VALID_Msk
 80037cc:	60fd      	str	r5, [r7, #12]
		reg_index++;
 80037ce:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80037d0:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
 80037d2:	3601      	adds	r6, #1
 80037d4:	e7c1      	b.n	800375a <mpu_configure_regions+0x6>
 80037d6:	bf00      	nop
 80037d8:	e000ed90 	.word	0xe000ed90

080037dc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <arm_core_mpu_enable+0x10>)
 80037de:	2205      	movs	r2, #5
 80037e0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80037e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80037e6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 80037ea:	4770      	bx	lr
 80037ec:	e000ed90 	.word	0xe000ed90

080037f0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80037f0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 80037f4:	4b01      	ldr	r3, [pc, #4]	; (80037fc <arm_core_mpu_disable+0xc>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	605a      	str	r2, [r3, #4]
}
 80037fa:	4770      	bx	lr
 80037fc:	e000ed90 	.word	0xe000ed90

08003800 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8003800:	4913      	ldr	r1, [pc, #76]	; (8003850 <arm_mpu_init+0x50>)
 8003802:	6808      	ldr	r0, [r1, #0]
 8003804:	2808      	cmp	r0, #8
{
 8003806:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8003808:	d81e      	bhi.n	8003848 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 800380a:	f7ff fff1 	bl	80037f0 <arm_core_mpu_disable>
	MPU->RNR = index;
 800380e:	4c11      	ldr	r4, [pc, #68]	; (8003854 <arm_mpu_init+0x54>)
 8003810:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8003812:	2200      	movs	r2, #0
 8003814:	4290      	cmp	r0, r2
 8003816:	f101 010c 	add.w	r1, r1, #12
 800381a:	d105      	bne.n	8003828 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 800381c:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <arm_mpu_init+0x58>)
 800381e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8003820:	f7ff ffdc 	bl	80037dc <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
 8003824:	2000      	movs	r0, #0
}
 8003826:	bd10      	pop	{r4, pc}
 8003828:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk) | MPU_RBAR_VALID_Msk
 800382a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 800382e:	f023 031f 	bic.w	r3, r3, #31
			| index;
 8003832:	4313      	orrs	r3, r2
 8003834:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk) | MPU_RBAR_VALID_Msk
 8003838:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800383a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8003844:	3201      	adds	r2, #1
 8003846:	e7e5      	b.n	8003814 <arm_mpu_init+0x14>
		return -1;
 8003848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800384c:	e7eb      	b.n	8003826 <arm_mpu_init+0x26>
 800384e:	bf00      	nop
 8003850:	08009570 	.word	0x08009570
 8003854:	e000ed90 	.word	0xe000ed90
 8003858:	20000976 	.word	0x20000976

0800385c <arm_core_mpu_configure_static_mpu_regions>:
{
 800385c:	b510      	push	{r4, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_static_mpu_regions(
		const struct k_mem_partition *static_regions[], const u8_t regions_num,
		const u32_t background_area_base, const u32_t background_area_end) {
	int mpu_reg_index = static_regions_num;
 800385e:	4c03      	ldr	r4, [pc, #12]	; (800386c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions, regions_num,
 8003860:	2301      	movs	r3, #1
 8003862:	7822      	ldrb	r2, [r4, #0]
 8003864:	f7ff ff76 	bl	8003754 <mpu_configure_regions>
			mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8003868:	7020      	strb	r0, [r4, #0]
}
 800386a:	bd10      	pop	{r4, pc}
 800386c:	20000976 	.word	0x20000976

08003870 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 8003870:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions, regions_num,
 8003872:	4a08      	ldr	r2, [pc, #32]	; (8003894 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
 8003874:	2300      	movs	r3, #0
 8003876:	7812      	ldrb	r2, [r2, #0]
 8003878:	f7ff ff6c 	bl	8003754 <mpu_configure_regions>
			mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 800387c:	f110 0f16 	cmn.w	r0, #22
 8003880:	d003      	beq.n	800388a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8003882:	4b05      	ldr	r3, [pc, #20]	; (8003898 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
 8003884:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8003886:	2807      	cmp	r0, #7
 8003888:	dd00      	ble.n	800388c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
 800388a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 800388c:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
 800388e:	611a      	str	r2, [r3, #16]
 8003890:	3001      	adds	r0, #1
 8003892:	e7f8      	b.n	8003886 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 8003894:	20000976 	.word	0x20000976
 8003898:	e000ed90 	.word	0xe000ed90

0800389c <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
 800389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a0:	b09f      	sub	sp, #124	; 0x7c
 80038a2:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
 80038a4:	2300      	movs	r3, #0
{
 80038a6:	9001      	str	r0, [sp, #4]
 80038a8:	9104      	str	r1, [sp, #16]
	count = 0;
 80038aa:	9300      	str	r3, [sp, #0]

	while ((c = *format++)) {
 80038ac:	4613      	mov	r3, r2
 80038ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 80038b2:	9305      	str	r3, [sp, #20]
 80038b4:	b158      	cbz	r0, 80038ce <z_prf+0x32>
		if (c != '%') {
 80038b6:	2825      	cmp	r0, #37	; 0x25
 80038b8:	f000 8085 	beq.w	80039c6 <z_prf+0x12a>
			PUTC(c);
 80038bc:	9904      	ldr	r1, [sp, #16]
 80038be:	9b01      	ldr	r3, [sp, #4]
 80038c0:	4798      	blx	r3
 80038c2:	3001      	adds	r0, #1
 80038c4:	f040 840d 	bne.w	80040e2 <z_prf+0x846>
 80038c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038cc:	9300      	str	r3, [sp, #0]
		}
	}
	return count;

#undef PUTC
}
 80038ce:	9800      	ldr	r0, [sp, #0]
 80038d0:	b01f      	add	sp, #124	; 0x7c
 80038d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
 80038d6:	2c23      	cmp	r4, #35	; 0x23
 80038d8:	d06c      	beq.n	80039b4 <z_prf+0x118>
 80038da:	d861      	bhi.n	80039a0 <z_prf+0x104>
 80038dc:	2c00      	cmp	r4, #0
 80038de:	d0f6      	beq.n	80038ce <z_prf+0x32>
					fspace = true;
 80038e0:	2c20      	cmp	r4, #32
 80038e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038e4:	bf08      	it	eq
 80038e6:	2301      	moveq	r3, #1
 80038e8:	930a      	str	r3, [sp, #40]	; 0x28
					fminus = true;
 80038ea:	f8cd 8014 	str.w	r8, [sp, #20]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
 80038ee:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80038f2:	48b9      	ldr	r0, [pc, #740]	; (8003bd8 <z_prf+0x33c>)
 80038f4:	f818 4b01 	ldrb.w	r4, [r8], #1
 80038f8:	4621      	mov	r1, r4
 80038fa:	f004 facc 	bl	8007e96 <strchr>
 80038fe:	2800      	cmp	r0, #0
 8003900:	d1e9      	bne.n	80038d6 <z_prf+0x3a>
			if (c == '*') {
 8003902:	2c2a      	cmp	r4, #42	; 0x2a
 8003904:	d166      	bne.n	80039d4 <z_prf+0x138>
				width = va_arg(vargs, int);
 8003906:	f856 3b04 	ldr.w	r3, [r6], #4
 800390a:	9307      	str	r3, [sp, #28]
				if (width < 0) {
 800390c:	2b00      	cmp	r3, #0
					width = -width;
 800390e:	bfbf      	itttt	lt
 8003910:	425b      	neglt	r3, r3
 8003912:	9307      	strlt	r3, [sp, #28]
					fminus = true;
 8003914:	2301      	movlt	r3, #1
 8003916:	930b      	strlt	r3, [sp, #44]	; 0x2c
				c = *format++;
 8003918:	9b05      	ldr	r3, [sp, #20]
 800391a:	f898 4000 	ldrb.w	r4, [r8]
 800391e:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
 8003922:	2c2e      	cmp	r4, #46	; 0x2e
 8003924:	d17c      	bne.n	8003a20 <z_prf+0x184>
				if (c == '*') {
 8003926:	f898 3000 	ldrb.w	r3, [r8]
 800392a:	2b2a      	cmp	r3, #42	; 0x2a
 800392c:	d175      	bne.n	8003a1a <z_prf+0x17e>
					precision = va_arg(vargs, int);
 800392e:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
 8003932:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
 8003936:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
 800393a:	48a8      	ldr	r0, [pc, #672]	; (8003bdc <z_prf+0x340>)
 800393c:	4621      	mov	r1, r4
 800393e:	4627      	mov	r7, r4
 8003940:	f004 faa9 	bl	8007e96 <strchr>
 8003944:	2800      	cmp	r0, #0
 8003946:	d06e      	beq.n	8003a26 <z_prf+0x18a>
				c = *format++;
 8003948:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
 800394a:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
 800394c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8003950:	9305      	str	r3, [sp, #20]
				} else if (i == 'h' && c == 'h') {
 8003952:	d107      	bne.n	8003964 <z_prf+0xc8>
 8003954:	2c68      	cmp	r4, #104	; 0x68
 8003956:	d105      	bne.n	8003964 <z_prf+0xc8>
					c = *format++;
 8003958:	f108 0302 	add.w	r3, r8, #2
 800395c:	f898 4001 	ldrb.w	r4, [r8, #1]
 8003960:	9305      	str	r3, [sp, #20]
					i = 'H';
 8003962:	2748      	movs	r7, #72	; 0x48
			switch (c) {
 8003964:	2c67      	cmp	r4, #103	; 0x67
 8003966:	d87c      	bhi.n	8003a62 <z_prf+0x1c6>
 8003968:	2c65      	cmp	r4, #101	; 0x65
 800396a:	f080 8139 	bcs.w	8003be0 <z_prf+0x344>
 800396e:	2c47      	cmp	r4, #71	; 0x47
 8003970:	d85d      	bhi.n	8003a2e <z_prf+0x192>
 8003972:	2c45      	cmp	r4, #69	; 0x45
 8003974:	f080 8134 	bcs.w	8003be0 <z_prf+0x344>
 8003978:	2c00      	cmp	r4, #0
 800397a:	d0a8      	beq.n	80038ce <z_prf+0x32>
 800397c:	2c25      	cmp	r4, #37	; 0x25
 800397e:	f000 83ac 	beq.w	80040da <z_prf+0x83e>
				PUTC('%');
 8003982:	9904      	ldr	r1, [sp, #16]
 8003984:	9b01      	ldr	r3, [sp, #4]
 8003986:	2025      	movs	r0, #37	; 0x25
 8003988:	4798      	blx	r3
 800398a:	3001      	adds	r0, #1
 800398c:	d09c      	beq.n	80038c8 <z_prf+0x2c>
				PUTC(c);
 800398e:	9904      	ldr	r1, [sp, #16]
 8003990:	9b01      	ldr	r3, [sp, #4]
 8003992:	4620      	mov	r0, r4
 8003994:	4798      	blx	r3
 8003996:	3001      	adds	r0, #1
 8003998:	d096      	beq.n	80038c8 <z_prf+0x2c>
				count += 2;
 800399a:	9b00      	ldr	r3, [sp, #0]
 800399c:	3302      	adds	r3, #2
 800399e:	e3a2      	b.n	80040e6 <z_prf+0x84a>
				switch (c) {
 80039a0:	2c2d      	cmp	r4, #45	; 0x2d
 80039a2:	d00a      	beq.n	80039ba <z_prf+0x11e>
 80039a4:	2c30      	cmp	r4, #48	; 0x30
 80039a6:	d00b      	beq.n	80039c0 <z_prf+0x124>
					fplus = true;
 80039a8:	2c2b      	cmp	r4, #43	; 0x2b
 80039aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ac:	bf08      	it	eq
 80039ae:	2301      	moveq	r3, #1
 80039b0:	9309      	str	r3, [sp, #36]	; 0x24
 80039b2:	e79a      	b.n	80038ea <z_prf+0x4e>
					falt = true;
 80039b4:	2301      	movs	r3, #1
 80039b6:	9306      	str	r3, [sp, #24]
 80039b8:	e797      	b.n	80038ea <z_prf+0x4e>
					fminus = true;
 80039ba:	2301      	movs	r3, #1
 80039bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80039be:	e794      	b.n	80038ea <z_prf+0x4e>
					fzero = true;
 80039c0:	2301      	movs	r3, #1
 80039c2:	9308      	str	r3, [sp, #32]
 80039c4:	e791      	b.n	80038ea <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
 80039c6:	2300      	movs	r3, #0
 80039c8:	9308      	str	r3, [sp, #32]
 80039ca:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 80039ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80039d0:	9306      	str	r3, [sp, #24]
 80039d2:	e78c      	b.n	80038ee <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 80039d4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
 80039d8:	2b09      	cmp	r3, #9
				width = 0;
 80039da:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
 80039dc:	d8a1      	bhi.n	8003922 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
 80039de:	220a      	movs	r2, #10
	while (isdigit(*p)) {
 80039e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80039e4:	f818 4b01 	ldrb.w	r4, [r8], #1
 80039e8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80039ec:	2b09      	cmp	r3, #9
 80039ee:	d898      	bhi.n	8003922 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
 80039f0:	9b07      	ldr	r3, [sp, #28]
 80039f2:	f8cd 8014 	str.w	r8, [sp, #20]
 80039f6:	fb02 4403 	mla	r4, r2, r3, r4
 80039fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80039fe:	9307      	str	r3, [sp, #28]
 8003a00:	e7ee      	b.n	80039e0 <z_prf+0x144>
 8003a02:	fb01 3505 	mla	r5, r1, r5, r3
 8003a06:	3d30      	subs	r5, #48	; 0x30
 8003a08:	4690      	mov	r8, r2
	while (isdigit(*p)) {
 8003a0a:	4642      	mov	r2, r8
 8003a0c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003a10:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8003a14:	2809      	cmp	r0, #9
 8003a16:	d9f4      	bls.n	8003a02 <z_prf+0x166>
 8003a18:	e78d      	b.n	8003936 <z_prf+0x9a>
	int i = 0;
 8003a1a:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
 8003a1c:	210a      	movs	r1, #10
 8003a1e:	e7f4      	b.n	8003a0a <z_prf+0x16e>
			precision = -1;
 8003a20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003a24:	e789      	b.n	800393a <z_prf+0x9e>
 8003a26:	f8cd 8014 	str.w	r8, [sp, #20]
			i = 0;
 8003a2a:	4607      	mov	r7, r0
 8003a2c:	e79a      	b.n	8003964 <z_prf+0xc8>
			switch (c) {
 8003a2e:	2c63      	cmp	r4, #99	; 0x63
 8003a30:	d05a      	beq.n	8003ae8 <z_prf+0x24c>
 8003a32:	d820      	bhi.n	8003a76 <z_prf+0x1da>
 8003a34:	2c58      	cmp	r4, #88	; 0x58
 8003a36:	d1a4      	bne.n	8003982 <z_prf+0xe6>
				if (c == 'o') {
 8003a38:	2c6f      	cmp	r4, #111	; 0x6f
 8003a3a:	f106 0904 	add.w	r9, r6, #4
 8003a3e:	6831      	ldr	r1, [r6, #0]
 8003a40:	f040 831c 	bne.w	800407c <z_prf+0x7e0>
	if (alt_form) {
 8003a44:	9b06      	ldr	r3, [sp, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 830a 	beq.w	8004060 <z_prf+0x7c4>
		*buf++ = '0';
 8003a4c:	2330      	movs	r3, #48	; 0x30
 8003a4e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		if (!value) {
 8003a52:	2900      	cmp	r1, #0
 8003a54:	f040 830f 	bne.w	8004076 <z_prf+0x7da>
			*buf++ = 0;
 8003a58:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
			prefix = 0;
 8003a5c:	4688      	mov	r8, r1
			return 1;
 8003a5e:	2601      	movs	r6, #1
 8003a60:	e026      	b.n	8003ab0 <z_prf+0x214>
			switch (c) {
 8003a62:	2c70      	cmp	r4, #112	; 0x70
 8003a64:	f000 82e7 	beq.w	8004036 <z_prf+0x79a>
 8003a68:	d828      	bhi.n	8003abc <z_prf+0x220>
 8003a6a:	2c6e      	cmp	r4, #110	; 0x6e
 8003a6c:	f000 82d0 	beq.w	8004010 <z_prf+0x774>
 8003a70:	d8e2      	bhi.n	8003a38 <z_prf+0x19c>
 8003a72:	2c69      	cmp	r4, #105	; 0x69
 8003a74:	d185      	bne.n	8003982 <z_prf+0xe6>
				switch (i) {
 8003a76:	6834      	ldr	r4, [r6, #0]
	if (value < 0) {
 8003a78:	2c00      	cmp	r4, #0
 8003a7a:	f106 0904 	add.w	r9, r6, #4
 8003a7e:	f280 809c 	bge.w	8003bba <z_prf+0x31e>
		*buf++ = '-';
 8003a82:	232d      	movs	r3, #45	; 0x2d
 8003a84:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		value = -value;
 8003a88:	4261      	negs	r1, r4
		*buf++ = ' ';
 8003a8a:	f10d 065d 	add.w	r6, sp, #93	; 0x5d
	return _to_x(buf, value, 10);
 8003a8e:	4630      	mov	r0, r6
 8003a90:	220a      	movs	r2, #10
 8003a92:	f004 faa3 	bl	8007fdc <_to_x>
				if (fplus || fspace || val < 0) {
 8003a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
 8003a98:	4406      	add	r6, r0
 8003a9a:	a817      	add	r0, sp, #92	; 0x5c
 8003a9c:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f040 8324 	bne.w	80040ec <z_prf+0x850>
 8003aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f040 8320 	bne.w	80040ec <z_prf+0x850>
 8003aac:	ea4f 78d4 	mov.w	r8, r4, lsr #31
			if (precision >= 0) {
 8003ab0:	2d00      	cmp	r5, #0
 8003ab2:	da22      	bge.n	8003afa <z_prf+0x25e>
			zero.predot = zero.postdot = zero.trail = 0;
 8003ab4:	2500      	movs	r5, #0
 8003ab6:	462f      	mov	r7, r5
 8003ab8:	46aa      	mov	sl, r5
 8003aba:	e0e5      	b.n	8003c88 <z_prf+0x3ec>
			switch (c) {
 8003abc:	2c75      	cmp	r4, #117	; 0x75
 8003abe:	d0bb      	beq.n	8003a38 <z_prf+0x19c>
 8003ac0:	2c78      	cmp	r4, #120	; 0x78
 8003ac2:	d0b9      	beq.n	8003a38 <z_prf+0x19c>
 8003ac4:	2c73      	cmp	r4, #115	; 0x73
 8003ac6:	f47f af5c 	bne.w	8003982 <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
 8003aca:	46b1      	mov	r9, r6
					precision = INT_MAX;
 8003acc:	2d00      	cmp	r5, #0
				cptr = va_arg(vargs, char *);
 8003ace:	f859 3b04 	ldr.w	r3, [r9], #4
					precision = INT_MAX;
 8003ad2:	bfb8      	it	lt
 8003ad4:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
 8003ad8:	2600      	movs	r6, #0
 8003ada:	42b5      	cmp	r5, r6
 8003adc:	f040 82bb 	bne.w	8004056 <z_prf+0x7ba>
 8003ae0:	462e      	mov	r6, r5
 8003ae2:	2500      	movs	r5, #0
 8003ae4:	46a8      	mov	r8, r5
 8003ae6:	e009      	b.n	8003afc <z_prf+0x260>
				buf[0] = va_arg(vargs, int);
 8003ae8:	46b1      	mov	r9, r6
				break;
 8003aea:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
 8003aee:	f859 3b04 	ldr.w	r3, [r9], #4
 8003af2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
				clen = 1;
 8003af6:	2601      	movs	r6, #1
				break;
 8003af8:	4645      	mov	r5, r8
 8003afa:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = precision - clen + prefix;
 8003afc:	eb05 0208 	add.w	r2, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
 8003b00:	2500      	movs	r5, #0
				zero_head = precision - clen + prefix;
 8003b02:	1b92      	subs	r2, r2, r6
			zero.predot = zero.postdot = zero.trail = 0;
 8003b04:	462f      	mov	r7, r5
 8003b06:	46aa      	mov	sl, r5
			if (zero_head < 0) {
 8003b08:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
 8003b0c:	1991      	adds	r1, r2, r6
 8003b0e:	9106      	str	r1, [sp, #24]
 8003b10:	9907      	ldr	r1, [sp, #28]
 8003b12:	1990      	adds	r0, r2, r6
 8003b14:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
 8003b16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b18:	b911      	cbnz	r1, 8003b20 <z_prf+0x284>
 8003b1a:	2c00      	cmp	r4, #0
 8003b1c:	f300 8304 	bgt.w	8004128 <z_prf+0x88c>
			while (prefix-- > 0) {
 8003b20:	eb03 0b08 	add.w	fp, r3, r8
 8003b24:	455b      	cmp	r3, fp
 8003b26:	f040 8301 	bne.w	800412c <z_prf+0x890>
			while (zero_head-- > 0) {
 8003b2a:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8003b2e:	f080 830d 	bcs.w	800414c <z_prf+0x8b0>
			clen -= prefix;
 8003b32:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
 8003b36:	f1ba 0f00 	cmp.w	sl, #0
 8003b3a:	d011      	beq.n	8003b60 <z_prf+0x2c4>
				c = *cptr;
 8003b3c:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c)) {
 8003b40:	eb0b 0806 	add.w	r8, fp, r6
 8003b44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003b48:	2b09      	cmp	r3, #9
 8003b4a:	eba8 060b 	sub.w	r6, r8, fp
 8003b4e:	f240 8308 	bls.w	8004162 <z_prf+0x8c6>
 8003b52:	46d0      	mov	r8, sl
				while (zero.predot-- > 0) {
 8003b54:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
 8003b58:	f080 830c 	bcs.w	8004174 <z_prf+0x8d8>
				clen -= zero.predot;
 8003b5c:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.postdot) {
 8003b60:	b1af      	cbz	r7, 8003b8e <z_prf+0x2f2>
 8003b62:	eb0b 0806 	add.w	r8, fp, r6
					c = *cptr++;
 8003b66:	f81b ab01 	ldrb.w	sl, [fp], #1
					PUTC(c);
 8003b6a:	9904      	ldr	r1, [sp, #16]
 8003b6c:	9b01      	ldr	r3, [sp, #4]
 8003b6e:	4650      	mov	r0, sl
 8003b70:	4798      	blx	r3
 8003b72:	3001      	adds	r0, #1
 8003b74:	f43f aea8 	beq.w	80038c8 <z_prf+0x2c>
				} while (c != '.');
 8003b78:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
 8003b7c:	eba8 060b 	sub.w	r6, r8, fp
 8003b80:	d1f1      	bne.n	8003b66 <z_prf+0x2ca>
				while (zero.postdot-- > 0) {
 8003b82:	46b8      	mov	r8, r7
 8003b84:	f1b8 0f00 	cmp.w	r8, #0
 8003b88:	f300 82fd 	bgt.w	8004186 <z_prf+0x8ea>
				clen -= zero.postdot;
 8003b8c:	1bf6      	subs	r6, r6, r7
			if (zero.trail) {
 8003b8e:	b195      	cbz	r5, 8003bb6 <z_prf+0x31a>
				c = *cptr;
 8003b90:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c) || c == '.') {
 8003b94:	eb0b 0806 	add.w	r8, fp, r6
 8003b98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003b9c:	2b09      	cmp	r3, #9
 8003b9e:	eba8 060b 	sub.w	r6, r8, fp
 8003ba2:	f240 82fb 	bls.w	800419c <z_prf+0x900>
 8003ba6:	282e      	cmp	r0, #46	; 0x2e
 8003ba8:	f000 82f8 	beq.w	800419c <z_prf+0x900>
				while (zero.trail-- > 0) {
 8003bac:	462f      	mov	r7, r5
 8003bae:	2f00      	cmp	r7, #0
 8003bb0:	f300 82fd 	bgt.w	80041ae <z_prf+0x912>
				clen -= zero.trail;
 8003bb4:	1b76      	subs	r6, r6, r5
 8003bb6:	445e      	add	r6, fp
 8003bb8:	e30c      	b.n	80041d4 <z_prf+0x938>
	} else if (fplus) {
 8003bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bbc:	b123      	cbz	r3, 8003bc8 <z_prf+0x32c>
		*buf++ = '+';
 8003bbe:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
 8003bc0:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	e760      	b.n	8003a8a <z_prf+0x1ee>
	} else if (fspace) {
 8003bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bca:	b10b      	cbz	r3, 8003bd0 <z_prf+0x334>
		*buf++ = ' ';
 8003bcc:	2320      	movs	r3, #32
 8003bce:	e7f7      	b.n	8003bc0 <z_prf+0x324>
	} else if (fspace) {
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	ae17      	add	r6, sp, #92	; 0x5c
 8003bd4:	e75b      	b.n	8003a8e <z_prf+0x1f2>
 8003bd6:	bf00      	nop
 8003bd8:	0800a3a2 	.word	0x0800a3a2
 8003bdc:	0800a3a8 	.word	0x0800a3a8
				u.d = va_arg(vargs, double);
 8003be0:	f106 0907 	add.w	r9, r6, #7
 8003be4:	f029 0907 	bic.w	r9, r9, #7
 8003be8:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
 8003bec:	02d8      	lsls	r0, r3, #11
 8003bee:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
 8003bf2:	02d6      	lsls	r6, r2, #11
 8003bf4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003bf8:	9602      	str	r6, [sp, #8]
 8003bfa:	9003      	str	r0, [sp, #12]
 8003bfc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
	if (sign) {
 8003c00:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
 8003c02:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
 8003c06:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
 8003c0a:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	if (sign) {
 8003c0e:	da43      	bge.n	8003c98 <z_prf+0x3fc>
		*buf++ = '-';
 8003c10:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
 8003c12:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8003c16:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
	if (exp == 0x7ff) {
 8003c1a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003c1e:	4299      	cmp	r1, r3
 8003c20:	d155      	bne.n	8003cce <z_prf+0x432>
		if (!fract) {
 8003c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
 8003c2c:	f107 0b03 	add.w	fp, r7, #3
 8003c30:	d142      	bne.n	8003cb8 <z_prf+0x41c>
			if (isupper(c)) {
 8003c32:	2c19      	cmp	r4, #25
 8003c34:	d83a      	bhi.n	8003cac <z_prf+0x410>
				*buf++ = 'I';
 8003c36:	2349      	movs	r3, #73	; 0x49
 8003c38:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
 8003c3a:	234e      	movs	r3, #78	; 0x4e
 8003c3c:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
 8003c3e:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
 8003c40:	2500      	movs	r5, #0
		return buf - start;
 8003c42:	ae17      	add	r6, sp, #92	; 0x5c
				*buf++ = 'n';
 8003c44:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
 8003c46:	70fd      	strb	r5, [r7, #3]
		return buf - start;
 8003c48:	ebab 0b06 	sub.w	fp, fp, r6
			zero.predot = zero.postdot = zero.trail = 0;
 8003c4c:	462f      	mov	r7, r5
 8003c4e:	46aa      	mov	sl, r5
				if (fplus || fspace || (buf[0] == '-')) {
 8003c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f040 81d9 	bne.w	800400a <z_prf+0x76e>
 8003c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f040 81d5 	bne.w	800400a <z_prf+0x76e>
 8003c60:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
 8003c64:	f1a8 032d 	sub.w	r3, r8, #45	; 0x2d
 8003c68:	f1d3 0800 	rsbs	r8, r3, #0
 8003c6c:	eb48 0803 	adc.w	r8, r8, r3
				if (!isdigit(buf[prefix])) {
 8003c70:	ab1e      	add	r3, sp, #120	; 0x78
 8003c72:	4443      	add	r3, r8
				clen += zero.predot + zero.postdot + zero.trail;
 8003c74:	44bb      	add	fp, r7
 8003c76:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8003c7a:	3b30      	subs	r3, #48	; 0x30
 8003c7c:	eb0b 060a 	add.w	r6, fp, sl
				if (!isdigit(buf[prefix])) {
 8003c80:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
 8003c82:	442e      	add	r6, r5
				if (!isdigit(buf[prefix])) {
 8003c84:	f200 8237 	bhi.w	80040f6 <z_prf+0x85a>
			} else if (fzero) {
 8003c88:	9b08      	ldr	r3, [sp, #32]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8236 	beq.w	80040fc <z_prf+0x860>
 8003c90:	9b07      	ldr	r3, [sp, #28]
 8003c92:	1b9a      	subs	r2, r3, r6
 8003c94:	ab17      	add	r3, sp, #92	; 0x5c
 8003c96:	e737      	b.n	8003b08 <z_prf+0x26c>
	} else if (fplus) {
 8003c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c9a:	b10b      	cbz	r3, 8003ca0 <z_prf+0x404>
		*buf++ = '+';
 8003c9c:	232b      	movs	r3, #43	; 0x2b
 8003c9e:	e7b8      	b.n	8003c12 <z_prf+0x376>
	} else if (fspace) {
 8003ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ca2:	b10b      	cbz	r3, 8003ca8 <z_prf+0x40c>
		*buf++ = ' ';
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	e7b4      	b.n	8003c12 <z_prf+0x376>
	} else if (fspace) {
 8003ca8:	af17      	add	r7, sp, #92	; 0x5c
 8003caa:	e7b6      	b.n	8003c1a <z_prf+0x37e>
				*buf++ = 'i';
 8003cac:	2369      	movs	r3, #105	; 0x69
 8003cae:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
 8003cb0:	236e      	movs	r3, #110	; 0x6e
 8003cb2:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
 8003cb4:	2366      	movs	r3, #102	; 0x66
 8003cb6:	e7c3      	b.n	8003c40 <z_prf+0x3a4>
			if (isupper(c)) {
 8003cb8:	2c19      	cmp	r4, #25
				*buf++ = 'N';
 8003cba:	bf99      	ittee	ls
 8003cbc:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
 8003cbe:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
 8003cc0:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
 8003cc2:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
 8003cc4:	bf94      	ite	ls
 8003cc6:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
 8003cc8:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
 8003cca:	707a      	strb	r2, [r7, #1]
 8003ccc:	e7b8      	b.n	8003c40 <z_prf+0x3a4>
	if ((exp | fract) != 0) {
 8003cce:	9b02      	ldr	r3, [sp, #8]
 8003cd0:	9803      	ldr	r0, [sp, #12]
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	930c      	str	r3, [sp, #48]	; 0x30
 8003cd6:	17cb      	asrs	r3, r1, #31
 8003cd8:	4303      	orrs	r3, r0
 8003cda:	930d      	str	r3, [sp, #52]	; 0x34
 8003cdc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
		c = 'f';
 8003ce0:	2c46      	cmp	r4, #70	; 0x46
 8003ce2:	bf08      	it	eq
 8003ce4:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f000 80ff 	beq.w	8003eea <z_prf+0x64e>
		if (exp == 0) {
 8003cec:	2900      	cmp	r1, #0
 8003cee:	f000 809f 	beq.w	8003e30 <z_prf+0x594>
		fract |= HIGHBIT64;
 8003cf2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003cf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
 8003cf8:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
 8003cfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8003cfe:	2600      	movs	r6, #0
	while (exp <= -3) {
 8003d00:	f118 0f02 	cmn.w	r8, #2
 8003d04:	f2c0 80a8 	blt.w	8003e58 <z_prf+0x5bc>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8003d08:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8003d0c:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
 8003d10:	f1b8 0f00 	cmp.w	r8, #0
 8003d14:	f300 80cc 	bgt.w	8003eb0 <z_prf+0x614>
		_rlrshift(&fract);
 8003d18:	a812      	add	r0, sp, #72	; 0x48
		exp++;
 8003d1a:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
 8003d1e:	f004 f97f 	bl	8008020 <_rlrshift>
	while (exp < (0 + 4)) {
 8003d22:	f1b8 0f04 	cmp.w	r8, #4
 8003d26:	d1f7      	bne.n	8003d18 <z_prf+0x47c>
		precision = 6;		/* Default precision if none given */
 8003d28:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
 8003d2a:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
 8003d2e:	bfb8      	it	lt
 8003d30:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
 8003d32:	2b47      	cmp	r3, #71	; 0x47
 8003d34:	f040 80e1 	bne.w	8003efa <z_prf+0x65e>
		if (decexp < (-4 + 1) || decexp > precision) {
 8003d38:	1cf2      	adds	r2, r6, #3
 8003d3a:	db02      	blt.n	8003d42 <z_prf+0x4a6>
 8003d3c:	42ae      	cmp	r6, r5
 8003d3e:	f340 80d7 	ble.w	8003ef0 <z_prf+0x654>
			c += 'e' - 'g';
 8003d42:	3c02      	subs	r4, #2
 8003d44:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
 8003d46:	2d00      	cmp	r5, #0
 8003d48:	f000 80dd 	beq.w	8003f06 <z_prf+0x66a>
		if (!falt && (precision > 0)) {
 8003d4c:	9b06      	ldr	r3, [sp, #24]
				precision--;
 8003d4e:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f040 80d8 	bne.w	8003f06 <z_prf+0x66a>
 8003d56:	2d00      	cmp	r5, #0
 8003d58:	bfd4      	ite	le
 8003d5a:	f04f 0800 	movle.w	r8, #0
 8003d5e:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
 8003d62:	2c66      	cmp	r4, #102	; 0x66
 8003d64:	f040 80d1 	bne.w	8003f0a <z_prf+0x66e>
		if (exp < 0) {
 8003d68:	eb16 0a05 	adds.w	sl, r6, r5
 8003d6c:	f140 80d5 	bpl.w	8003f1a <z_prf+0x67e>
	digit_count = 16;
 8003d70:	2310      	movs	r3, #16
 8003d72:	9311      	str	r3, [sp, #68]	; 0x44
 8003d74:	2466      	movs	r4, #102	; 0x66
			exp = 0;
 8003d76:	f04f 0a00 	mov.w	sl, #0
	ltemp = 0x0800000000000000;
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d80:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
 8003d84:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
 8003d88:	f080 80c9 	bcs.w	8003f1e <z_prf+0x682>
	fract += ltemp;
 8003d8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003d90:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003d96:	eb41 0202 	adc.w	r2, r1, r2
 8003d9a:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & 0xF0000000) {
 8003d9e:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
 8003da2:	930e      	str	r3, [sp, #56]	; 0x38
 8003da4:	2300      	movs	r3, #0
 8003da6:	930f      	str	r3, [sp, #60]	; 0x3c
 8003da8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003dac:	4313      	orrs	r3, r2
 8003dae:	d006      	beq.n	8003dbe <z_prf+0x522>
		_ldiv5(&fract);
 8003db0:	a812      	add	r0, sp, #72	; 0x48
 8003db2:	f004 f947 	bl	8008044 <_ldiv5>
		_rlrshift(&fract);
 8003db6:	a812      	add	r0, sp, #72	; 0x48
 8003db8:	f004 f932 	bl	8008020 <_rlrshift>
		decexp++;
 8003dbc:	3601      	adds	r6, #1
	if (c == 'f') {
 8003dbe:	2c66      	cmp	r4, #102	; 0x66
 8003dc0:	f040 80c7 	bne.w	8003f52 <z_prf+0x6b6>
		if (decexp > 0) {
 8003dc4:	2e00      	cmp	r6, #0
 8003dc6:	f340 80b1 	ble.w	8003f2c <z_prf+0x690>
			while (decexp > 0 && digit_count > 0) {
 8003dca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	dd07      	ble.n	8003de0 <z_prf+0x544>
				*buf++ = _get_digit(&fract, &digit_count);
 8003dd0:	a911      	add	r1, sp, #68	; 0x44
 8003dd2:	a812      	add	r0, sp, #72	; 0x48
 8003dd4:	f004 f962 	bl	800809c <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 8003dd8:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
 8003dda:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
 8003dde:	d1f4      	bne.n	8003dca <z_prf+0x52e>
			zp->predot = decexp;
 8003de0:	46b2      	mov	sl, r6
 8003de2:	46bb      	mov	fp, r7
			decexp = 0;
 8003de4:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
 8003de6:	9b06      	ldr	r3, [sp, #24]
 8003de8:	b913      	cbnz	r3, 8003df0 <z_prf+0x554>
 8003dea:	2d00      	cmp	r5, #0
 8003dec:	f340 80af 	ble.w	8003f4e <z_prf+0x6b2>
			*buf++ = '.';
 8003df0:	232e      	movs	r3, #46	; 0x2e
 8003df2:	f80b 3b01 	strb.w	r3, [fp], #1
		if (decexp < 0 && precision > 0) {
 8003df6:	2e00      	cmp	r6, #0
 8003df8:	f000 80a7 	beq.w	8003f4a <z_prf+0x6ae>
 8003dfc:	2d00      	cmp	r5, #0
 8003dfe:	f340 80a6 	ble.w	8003f4e <z_prf+0x6b2>
			zp->postdot = -decexp;
 8003e02:	4277      	negs	r7, r6
 8003e04:	42af      	cmp	r7, r5
 8003e06:	bfa8      	it	ge
 8003e08:	462f      	movge	r7, r5
			precision -= zp->postdot;
 8003e0a:	1bed      	subs	r5, r5, r7
		while (precision > 0 && digit_count > 0) {
 8003e0c:	2d00      	cmp	r5, #0
 8003e0e:	dd03      	ble.n	8003e18 <z_prf+0x57c>
 8003e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f300 8091 	bgt.w	8003f3a <z_prf+0x69e>
	if (prune_zero) {
 8003e18:	f1b8 0f00 	cmp.w	r8, #0
 8003e1c:	f040 80af 	bne.w	8003f7e <z_prf+0x6e2>
	*buf = 0;
 8003e20:	2300      	movs	r3, #0
	return buf - start;
 8003e22:	ae17      	add	r6, sp, #92	; 0x5c
	*buf = 0;
 8003e24:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
 8003e28:	ebab 0b06 	sub.w	fp, fp, r6
 8003e2c:	e710      	b.n	8003c50 <z_prf+0x3b4>
				exp--;
 8003e2e:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
 8003e30:	9b02      	ldr	r3, [sp, #8]
 8003e32:	18db      	adds	r3, r3, r3
 8003e34:	9302      	str	r3, [sp, #8]
 8003e36:	9b03      	ldr	r3, [sp, #12]
 8003e38:	415b      	adcs	r3, r3
 8003e3a:	9303      	str	r3, [sp, #12]
 8003e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e40:	2a00      	cmp	r2, #0
 8003e42:	f173 0300 	sbcs.w	r3, r3, #0
 8003e46:	daf2      	bge.n	8003e2e <z_prf+0x592>
 8003e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e4c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8003e50:	e74f      	b.n	8003cf2 <z_prf+0x456>
			_rlrshift(&fract);
 8003e52:	a812      	add	r0, sp, #72	; 0x48
 8003e54:	f004 f8e4 	bl	8008020 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
 8003e58:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
 8003e5c:	f04f 0b00 	mov.w	fp, #0
 8003e60:	48b9      	ldr	r0, [pc, #740]	; (8004148 <z_prf+0x8ac>)
 8003e62:	2100      	movs	r1, #0
 8003e64:	4559      	cmp	r1, fp
 8003e66:	bf08      	it	eq
 8003e68:	4560      	cmpeq	r0, ip
 8003e6a:	f108 0801 	add.w	r8, r8, #1
 8003e6e:	d3f0      	bcc.n	8003e52 <z_prf+0x5b6>
		fract *= 5U;
 8003e70:	2005      	movs	r0, #5
 8003e72:	fba2 2300 	umull	r2, r3, r2, r0
 8003e76:	fb00 330c 	mla	r3, r0, ip, r3
 8003e7a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		decexp--;
 8003e7e:	46dc      	mov	ip, fp
 8003e80:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8003e82:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8003e86:	f04f 0b00 	mov.w	fp, #0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	458b      	cmp	fp, r1
 8003e8e:	bf08      	it	eq
 8003e90:	459a      	cmpeq	sl, r3
 8003e92:	d206      	bcs.n	8003ea2 <z_prf+0x606>
 8003e94:	f1bc 0f00 	cmp.w	ip, #0
 8003e98:	f43f af32 	beq.w	8003d00 <z_prf+0x464>
 8003e9c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8003ea0:	e72e      	b.n	8003d00 <z_prf+0x464>
			fract <<= 1;
 8003ea2:	1892      	adds	r2, r2, r2
 8003ea4:	415b      	adcs	r3, r3
			exp--;
 8003ea6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003eaa:	f04f 0c01 	mov.w	ip, #1
 8003eae:	e7ec      	b.n	8003e8a <z_prf+0x5ee>
		_ldiv5(&fract);
 8003eb0:	a812      	add	r0, sp, #72	; 0x48
 8003eb2:	f004 f8c7 	bl	8008044 <_ldiv5>
		exp--;
 8003eb6:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
 8003eba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
 8003ebe:	3601      	adds	r6, #1
 8003ec0:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	459b      	cmp	fp, r3
 8003ec8:	bf08      	it	eq
 8003eca:	4582      	cmpeq	sl, r0
 8003ecc:	d206      	bcs.n	8003edc <z_prf+0x640>
 8003ece:	f1bc 0f00 	cmp.w	ip, #0
 8003ed2:	f43f af1d 	beq.w	8003d10 <z_prf+0x474>
 8003ed6:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
 8003eda:	e719      	b.n	8003d10 <z_prf+0x474>
			fract <<= 1;
 8003edc:	1849      	adds	r1, r1, r1
 8003ede:	4140      	adcs	r0, r0
			exp--;
 8003ee0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003ee4:	f04f 0c01 	mov.w	ip, #1
 8003ee8:	e7ec      	b.n	8003ec4 <z_prf+0x628>
	if ((exp | fract) != 0) {
 8003eea:	2600      	movs	r6, #0
 8003eec:	46b0      	mov	r8, r6
 8003eee:	e713      	b.n	8003d18 <z_prf+0x47c>
		if (!falt && (precision > 0)) {
 8003ef0:	9b06      	ldr	r3, [sp, #24]
			precision -= decexp;
 8003ef2:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
 8003ef4:	b923      	cbnz	r3, 8003f00 <z_prf+0x664>
			c = 'f';
 8003ef6:	2466      	movs	r4, #102	; 0x66
 8003ef8:	e72d      	b.n	8003d56 <z_prf+0x4ba>
	prune_zero = false;		/* Assume trailing 0's allowed     */
 8003efa:	f04f 0800 	mov.w	r8, #0
 8003efe:	e730      	b.n	8003d62 <z_prf+0x4c6>
 8003f00:	f04f 0800 	mov.w	r8, #0
 8003f04:	e730      	b.n	8003d68 <z_prf+0x4cc>
 8003f06:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
 8003f0a:	f105 0a01 	add.w	sl, r5, #1
	digit_count = 16;
 8003f0e:	2310      	movs	r3, #16
 8003f10:	459a      	cmp	sl, r3
 8003f12:	9311      	str	r3, [sp, #68]	; 0x44
	if (exp > 16) {
 8003f14:	bfa8      	it	ge
 8003f16:	469a      	movge	sl, r3
 8003f18:	e72f      	b.n	8003d7a <z_prf+0x4de>
		if (exp < 0) {
 8003f1a:	2466      	movs	r4, #102	; 0x66
 8003f1c:	e7f7      	b.n	8003f0e <z_prf+0x672>
		_ldiv5(&ltemp);
 8003f1e:	a814      	add	r0, sp, #80	; 0x50
 8003f20:	f004 f890 	bl	8008044 <_ldiv5>
		_rlrshift(&ltemp);
 8003f24:	a814      	add	r0, sp, #80	; 0x50
 8003f26:	f004 f87b 	bl	8008020 <_rlrshift>
 8003f2a:	e72b      	b.n	8003d84 <z_prf+0x4e8>
			*buf++ = '0';
 8003f2c:	46bb      	mov	fp, r7
 8003f2e:	2330      	movs	r3, #48	; 0x30
 8003f30:	f80b 3b01 	strb.w	r3, [fp], #1
			zero.predot = zero.postdot = zero.trail = 0;
 8003f34:	f04f 0a00 	mov.w	sl, #0
 8003f38:	e755      	b.n	8003de6 <z_prf+0x54a>
			*buf++ = _get_digit(&fract, &digit_count);
 8003f3a:	a911      	add	r1, sp, #68	; 0x44
 8003f3c:	a812      	add	r0, sp, #72	; 0x48
 8003f3e:	f004 f8ad 	bl	800809c <_get_digit>
			precision--;
 8003f42:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
 8003f44:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
 8003f48:	e760      	b.n	8003e0c <z_prf+0x570>
			zero.predot = zero.postdot = zero.trail = 0;
 8003f4a:	4637      	mov	r7, r6
 8003f4c:	e75e      	b.n	8003e0c <z_prf+0x570>
 8003f4e:	2700      	movs	r7, #0
 8003f50:	e762      	b.n	8003e18 <z_prf+0x57c>
		*buf = _get_digit(&fract, &digit_count);
 8003f52:	a911      	add	r1, sp, #68	; 0x44
 8003f54:	a812      	add	r0, sp, #72	; 0x48
 8003f56:	f004 f8a1 	bl	800809c <_get_digit>
		if (falt || (precision > 0)) {
 8003f5a:	9b06      	ldr	r3, [sp, #24]
		*buf = _get_digit(&fract, &digit_count);
 8003f5c:	7038      	strb	r0, [r7, #0]
		if (*buf++ != '0') {
 8003f5e:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 8003f60:	bf18      	it	ne
 8003f62:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d13b      	bne.n	8003fe2 <z_prf+0x746>
 8003f6a:	2d00      	cmp	r5, #0
 8003f6c:	dc39      	bgt.n	8003fe2 <z_prf+0x746>
		if (*buf++ != '0') {
 8003f6e:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
 8003f72:	f1b8 0f00 	cmp.w	r8, #0
 8003f76:	d045      	beq.n	8004004 <z_prf+0x768>
			zero.predot = zero.postdot = zero.trail = 0;
 8003f78:	f04f 0a00 	mov.w	sl, #0
 8003f7c:	4657      	mov	r7, sl
		while (*--buf == '0')
 8003f7e:	465b      	mov	r3, fp
 8003f80:	f81b 2d01 	ldrb.w	r2, [fp, #-1]!
 8003f84:	2a30      	cmp	r2, #48	; 0x30
 8003f86:	d0fa      	beq.n	8003f7e <z_prf+0x6e2>
		if (*buf != '.') {
 8003f88:	2a2e      	cmp	r2, #46	; 0x2e
 8003f8a:	bf18      	it	ne
 8003f8c:	469b      	movne	fp, r3
 8003f8e:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
 8003f90:	f004 03df 	and.w	r3, r4, #223	; 0xdf
 8003f94:	2b45      	cmp	r3, #69	; 0x45
 8003f96:	f47f af43 	bne.w	8003e20 <z_prf+0x584>
		if (decexp < 0) {
 8003f9a:	2e00      	cmp	r6, #0
		*buf++ = c;
 8003f9c:	465a      	mov	r2, fp
			decexp = -decexp;
 8003f9e:	bfba      	itte	lt
 8003fa0:	4276      	neglt	r6, r6
			*buf++ = '-';
 8003fa2:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
 8003fa4:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
 8003fa6:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
 8003fa8:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '-';
 8003fac:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
 8003fb0:	dd0a      	ble.n	8003fc8 <z_prf+0x72c>
			*buf++ = (decexp / 100) + '0';
 8003fb2:	2164      	movs	r1, #100	; 0x64
 8003fb4:	fb96 f3f1 	sdiv	r3, r6, r1
 8003fb8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003fbc:	f10b 0203 	add.w	r2, fp, #3
 8003fc0:	f88b 0002 	strb.w	r0, [fp, #2]
			decexp %= 100;
 8003fc4:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
 8003fc8:	210a      	movs	r1, #10
 8003fca:	4693      	mov	fp, r2
 8003fcc:	fb96 f3f1 	sdiv	r3, r6, r1
		decexp %= 10;
 8003fd0:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
 8003fd4:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
 8003fd8:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 8003fda:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
 8003fde:	7056      	strb	r6, [r2, #1]
 8003fe0:	e71e      	b.n	8003e20 <z_prf+0x584>
			*buf++ = '.';
 8003fe2:	232e      	movs	r3, #46	; 0x2e
 8003fe4:	f107 0b02 	add.w	fp, r7, #2
 8003fe8:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
 8003fea:	2d00      	cmp	r5, #0
 8003fec:	ddc1      	ble.n	8003f72 <z_prf+0x6d6>
 8003fee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	ddbe      	ble.n	8003f72 <z_prf+0x6d6>
			*buf++ = _get_digit(&fract, &digit_count);
 8003ff4:	a911      	add	r1, sp, #68	; 0x44
 8003ff6:	a812      	add	r0, sp, #72	; 0x48
 8003ff8:	f004 f850 	bl	800809c <_get_digit>
			precision--;
 8003ffc:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
 8003ffe:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
 8004002:	e7f2      	b.n	8003fea <z_prf+0x74e>
			zero.predot = zero.postdot = zero.trail = 0;
 8004004:	46c2      	mov	sl, r8
 8004006:	4647      	mov	r7, r8
 8004008:	e7c2      	b.n	8003f90 <z_prf+0x6f4>
					prefix = 1;
 800400a:	f04f 0801 	mov.w	r8, #1
 800400e:	e62f      	b.n	8003c70 <z_prf+0x3d4>
				switch (i) {
 8004010:	46b1      	mov	r9, r6
 8004012:	2f68      	cmp	r7, #104	; 0x68
 8004014:	f859 3b04 	ldr.w	r3, [r9], #4
 8004018:	d005      	beq.n	8004026 <z_prf+0x78a>
 800401a:	dc01      	bgt.n	8004020 <z_prf+0x784>
 800401c:	2f48      	cmp	r7, #72	; 0x48
 800401e:	d007      	beq.n	8004030 <z_prf+0x794>
					*va_arg(vargs, int *) = count;
 8004020:	9a00      	ldr	r2, [sp, #0]
 8004022:	601a      	str	r2, [r3, #0]
					break;
 8004024:	e001      	b.n	800402a <z_prf+0x78e>
					*va_arg(vargs, short *) = count;
 8004026:	9a00      	ldr	r2, [sp, #0]
 8004028:	801a      	strh	r2, [r3, #0]
				continue;
 800402a:	464e      	mov	r6, r9
 800402c:	9a05      	ldr	r2, [sp, #20]
 800402e:	e43d      	b.n	80038ac <z_prf+0x10>
					*va_arg(vargs, char *) = count;
 8004030:	9a00      	ldr	r2, [sp, #0]
 8004032:	701a      	strb	r2, [r3, #0]
					break;
 8004034:	e7f9      	b.n	800402a <z_prf+0x78e>
				val = (uintptr_t) va_arg(vargs, void *);
 8004036:	46b1      	mov	r9, r6
		*buf++ = '0';
 8004038:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
 800403c:	2210      	movs	r2, #16
 800403e:	f859 1b04 	ldr.w	r1, [r9], #4
		*buf++ = '0';
 8004042:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	len = _to_x(buf, value, 16);
 8004046:	f10d 005e 	add.w	r0, sp, #94	; 0x5e
 800404a:	f003 ffc7 	bl	8007fdc <_to_x>
				prefix = 2;
 800404e:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
 8004052:	1c86      	adds	r6, r0, #2
				break;
 8004054:	e52c      	b.n	8003ab0 <z_prf+0x214>
					if (cptr[clen] == '\0') {
 8004056:	5d9a      	ldrb	r2, [r3, r6]
 8004058:	2a00      	cmp	r2, #0
 800405a:	d04a      	beq.n	80040f2 <z_prf+0x856>
				for (clen = 0; clen < precision; clen++) {
 800405c:	3601      	adds	r6, #1
 800405e:	e53c      	b.n	8003ada <z_prf+0x23e>
	if (alt_form) {
 8004060:	ac17      	add	r4, sp, #92	; 0x5c
	return (buf - buf0) + _to_x(buf, value, 8);
 8004062:	2208      	movs	r2, #8
 8004064:	4620      	mov	r0, r4
 8004066:	f003 ffb9 	bl	8007fdc <_to_x>
 800406a:	ae17      	add	r6, sp, #92	; 0x5c
 800406c:	1ba6      	subs	r6, r4, r6
 800406e:	4406      	add	r6, r0
			prefix = 0;
 8004070:	f04f 0800 	mov.w	r8, #0
 8004074:	e51c      	b.n	8003ab0 <z_prf+0x214>
		*buf++ = '0';
 8004076:	f10d 045d 	add.w	r4, sp, #93	; 0x5d
 800407a:	e7f2      	b.n	8004062 <z_prf+0x7c6>
				} else if (c == 'u') {
 800407c:	2c75      	cmp	r4, #117	; 0x75
 800407e:	d105      	bne.n	800408c <z_prf+0x7f0>
	return _to_x(buf, value, 10);
 8004080:	220a      	movs	r2, #10
 8004082:	a817      	add	r0, sp, #92	; 0x5c
 8004084:	f003 ffaa 	bl	8007fdc <_to_x>
 8004088:	4606      	mov	r6, r0
 800408a:	e7f1      	b.n	8004070 <z_prf+0x7d4>
	if (alt_form) {
 800408c:	9b06      	ldr	r3, [sp, #24]
 800408e:	b193      	cbz	r3, 80040b6 <z_prf+0x81a>
		*buf++ = '0';
 8004090:	f647 0330 	movw	r3, #30768	; 0x7830
 8004094:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
		*buf++ = 'x';
 8004098:	f10d 075e 	add.w	r7, sp, #94	; 0x5e
	len = _to_x(buf, value, 16);
 800409c:	2210      	movs	r2, #16
 800409e:	4638      	mov	r0, r7
 80040a0:	f003 ff9c 	bl	8007fdc <_to_x>
	if (prefix == 'X') {
 80040a4:	2c58      	cmp	r4, #88	; 0x58
 80040a6:	d008      	beq.n	80040ba <z_prf+0x81e>
	return len + (buf - buf0);
 80040a8:	ae17      	add	r6, sp, #92	; 0x5c
						prefix = 2;
 80040aa:	9b06      	ldr	r3, [sp, #24]
	return len + (buf - buf0);
 80040ac:	1bbe      	subs	r6, r7, r6
 80040ae:	4406      	add	r6, r0
						prefix = 2;
 80040b0:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80040b4:	e4fc      	b.n	8003ab0 <z_prf+0x214>
	if (alt_form) {
 80040b6:	af17      	add	r7, sp, #92	; 0x5c
 80040b8:	e7f0      	b.n	800409c <z_prf+0x800>
 80040ba:	aa17      	add	r2, sp, #92	; 0x5c
		if (*buf >= 'a' && *buf <= 'z') {
 80040bc:	f812 3b01 	ldrb.w	r3, [r2], #1
 80040c0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 80040c4:	2919      	cmp	r1, #25
 80040c6:	d803      	bhi.n	80040d0 <z_prf+0x834>
			*buf += 'A' - 'a';
 80040c8:	3b20      	subs	r3, #32
 80040ca:	f802 3c01 	strb.w	r3, [r2, #-1]
 80040ce:	e7f5      	b.n	80040bc <z_prf+0x820>
	} while (*buf++);
 80040d0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f1      	bne.n	80040bc <z_prf+0x820>
 80040d8:	e7e6      	b.n	80040a8 <z_prf+0x80c>
				PUTC('%');
 80040da:	9904      	ldr	r1, [sp, #16]
 80040dc:	4620      	mov	r0, r4
 80040de:	f7ff bbee 	b.w	80038be <z_prf+0x22>
				count++;
 80040e2:	9b00      	ldr	r3, [sp, #0]
 80040e4:	3301      	adds	r3, #1
				count += 2;
 80040e6:	9300      	str	r3, [sp, #0]
				continue;
 80040e8:	46b1      	mov	r9, r6
 80040ea:	e79e      	b.n	800402a <z_prf+0x78e>
					prefix = 1;
 80040ec:	f04f 0801 	mov.w	r8, #1
 80040f0:	e4de      	b.n	8003ab0 <z_prf+0x214>
 80040f2:	4615      	mov	r5, r2
 80040f4:	e4f6      	b.n	8003ae4 <z_prf+0x248>
			cptr = buf;
 80040f6:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = 0;
 80040f8:	2200      	movs	r2, #0
 80040fa:	e507      	b.n	8003b0c <z_prf+0x270>
 80040fc:	ab17      	add	r3, sp, #92	; 0x5c
 80040fe:	9a08      	ldr	r2, [sp, #32]
 8004100:	e504      	b.n	8003b0c <z_prf+0x270>
 8004102:	e9cd 3207 	strd	r3, r2, [sp, #28]
					PUTC(' ');
 8004106:	9904      	ldr	r1, [sp, #16]
 8004108:	9b01      	ldr	r3, [sp, #4]
 800410a:	2020      	movs	r0, #32
 800410c:	4798      	blx	r3
 800410e:	3001      	adds	r0, #1
 8004110:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004114:	f43f abd8 	beq.w	80038c8 <z_prf+0x2c>
				while (width-- > 0) {
 8004118:	f11b 3bff 	adds.w	fp, fp, #4294967295	; 0xffffffff
 800411c:	d2f1      	bcs.n	8004102 <z_prf+0x866>
				count += width;
 800411e:	9900      	ldr	r1, [sp, #0]
 8004120:	4421      	add	r1, r4
 8004122:	9100      	str	r1, [sp, #0]
				while (width-- > 0) {
 8004124:	465c      	mov	r4, fp
 8004126:	e4fb      	b.n	8003b20 <z_prf+0x284>
 8004128:	46a3      	mov	fp, r4
 800412a:	e7f5      	b.n	8004118 <z_prf+0x87c>
				PUTC(*cptr++);
 800412c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004130:	9307      	str	r3, [sp, #28]
 8004132:	9904      	ldr	r1, [sp, #16]
 8004134:	9b01      	ldr	r3, [sp, #4]
 8004136:	9208      	str	r2, [sp, #32]
 8004138:	4798      	blx	r3
 800413a:	3001      	adds	r0, #1
 800413c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004140:	f47f acf0 	bne.w	8003b24 <z_prf+0x288>
 8004144:	f7ff bbc0 	b.w	80038c8 <z_prf+0x2c>
 8004148:	33333332 	.word	0x33333332
				PUTC('0');
 800414c:	9904      	ldr	r1, [sp, #16]
 800414e:	9b01      	ldr	r3, [sp, #4]
 8004150:	9207      	str	r2, [sp, #28]
 8004152:	2030      	movs	r0, #48	; 0x30
 8004154:	4798      	blx	r3
 8004156:	3001      	adds	r0, #1
 8004158:	9a07      	ldr	r2, [sp, #28]
 800415a:	f47f ace6 	bne.w	8003b2a <z_prf+0x28e>
 800415e:	f7ff bbb3 	b.w	80038c8 <z_prf+0x2c>
					PUTC(c);
 8004162:	9904      	ldr	r1, [sp, #16]
 8004164:	9b01      	ldr	r3, [sp, #4]
 8004166:	4798      	blx	r3
 8004168:	3001      	adds	r0, #1
 800416a:	f43f abad 	beq.w	80038c8 <z_prf+0x2c>
					c = *++cptr;
 800416e:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
 8004172:	e4e7      	b.n	8003b44 <z_prf+0x2a8>
					PUTC('0');
 8004174:	9904      	ldr	r1, [sp, #16]
 8004176:	9b01      	ldr	r3, [sp, #4]
 8004178:	2030      	movs	r0, #48	; 0x30
 800417a:	4798      	blx	r3
 800417c:	3001      	adds	r0, #1
 800417e:	f47f ace9 	bne.w	8003b54 <z_prf+0x2b8>
 8004182:	f7ff bba1 	b.w	80038c8 <z_prf+0x2c>
					PUTC('0');
 8004186:	9904      	ldr	r1, [sp, #16]
 8004188:	9b01      	ldr	r3, [sp, #4]
 800418a:	2030      	movs	r0, #48	; 0x30
 800418c:	4798      	blx	r3
 800418e:	3001      	adds	r0, #1
 8004190:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004194:	f47f acf6 	bne.w	8003b84 <z_prf+0x2e8>
 8004198:	f7ff bb96 	b.w	80038c8 <z_prf+0x2c>
					PUTC(c);
 800419c:	9904      	ldr	r1, [sp, #16]
 800419e:	9b01      	ldr	r3, [sp, #4]
 80041a0:	4798      	blx	r3
 80041a2:	3001      	adds	r0, #1
 80041a4:	f43f ab90 	beq.w	80038c8 <z_prf+0x2c>
					c = *++cptr;
 80041a8:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
 80041ac:	e4f4      	b.n	8003b98 <z_prf+0x2fc>
					PUTC('0');
 80041ae:	9904      	ldr	r1, [sp, #16]
 80041b0:	9b01      	ldr	r3, [sp, #4]
 80041b2:	2030      	movs	r0, #48	; 0x30
 80041b4:	4798      	blx	r3
 80041b6:	3001      	adds	r0, #1
 80041b8:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 80041bc:	f47f acf7 	bne.w	8003bae <z_prf+0x312>
 80041c0:	f7ff bb82 	b.w	80038c8 <z_prf+0x2c>
				PUTC(*cptr++);
 80041c4:	9904      	ldr	r1, [sp, #16]
 80041c6:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80041ca:	9b01      	ldr	r3, [sp, #4]
 80041cc:	4798      	blx	r3
 80041ce:	3001      	adds	r0, #1
 80041d0:	f43f ab7a 	beq.w	80038c8 <z_prf+0x2c>
 80041d4:	eba6 030b 	sub.w	r3, r6, fp
			while (clen-- > 0) {
 80041d8:	2b00      	cmp	r3, #0
 80041da:	dcf3      	bgt.n	80041c4 <z_prf+0x928>
			count += clen;
 80041dc:	9b00      	ldr	r3, [sp, #0]
 80041de:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
 80041e0:	2c00      	cmp	r4, #0
			count += clen;
 80041e2:	4413      	add	r3, r2
 80041e4:	9300      	str	r3, [sp, #0]
			if (width > 0) {
 80041e6:	f77f af20 	ble.w	800402a <z_prf+0x78e>
 80041ea:	4625      	mov	r5, r4
 80041ec:	e006      	b.n	80041fc <z_prf+0x960>
					PUTC(' ');
 80041ee:	9904      	ldr	r1, [sp, #16]
 80041f0:	9b01      	ldr	r3, [sp, #4]
 80041f2:	2020      	movs	r0, #32
 80041f4:	4798      	blx	r3
 80041f6:	3001      	adds	r0, #1
 80041f8:	f43f ab66 	beq.w	80038c8 <z_prf+0x2c>
				while (width-- > 0) {
 80041fc:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8004200:	d2f5      	bcs.n	80041ee <z_prf+0x952>
				count += width;
 8004202:	9b00      	ldr	r3, [sp, #0]
 8004204:	4423      	add	r3, r4
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	e70f      	b.n	800402a <z_prf+0x78e>
 800420a:	bf00      	nop

0800420c <pinmux_stm32_init>:
        {STM32_PIN_PA12, STM32F4_PINMUX_FUNC_PA12_CAN1_TX},
#endif /* CONFIG_CAN_1 */
};

static int pinmux_stm32_init(struct device *port)
{
 800420c:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 800420e:	2105      	movs	r1, #5
 8004210:	4802      	ldr	r0, [pc, #8]	; (800421c <pinmux_stm32_init+0x10>)
 8004212:	f7fe f927 	bl	8002464 <stm32_setup_pins>

	return 0;
}
 8004216:	2000      	movs	r0, #0
 8004218:	bd08      	pop	{r3, pc}
 800421a:	bf00      	nop
 800421c:	08009590 	.word	0x08009590

08004220 <gpio_stm32_init>:
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8004220:	6803      	ldr	r3, [r0, #0]
{
 8004222:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8004224:	689c      	ldr	r4, [r3, #8]
 8004226:	4806      	ldr	r0, [pc, #24]	; (8004240 <gpio_stm32_init+0x20>)
 8004228:	f000 fccc 	bl	8004bc4 <z_impl_device_get_binding>
 800422c:	6843      	ldr	r3, [r0, #4]
 800422e:	f104 0108 	add.w	r1, r4, #8
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4798      	blx	r3

	/* enable clock for subsystem */
	struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 8004236:	2800      	cmp	r0, #0
		}
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 8004238:	bf18      	it	ne
 800423a:	f06f 0004 	mvnne.w	r0, #4
 800423e:	bd10      	pop	{r4, pc}
 8004240:	08009f78 	.word	0x08009f78

08004244 <gpio_stm32_config>:
{
 8004244:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004248:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 800424a:	6803      	ldr	r3, [r0, #0]
 800424c:	689f      	ldr	r7, [r3, #8]
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 800424e:	f005 0380 	and.w	r3, r5, #128	; 0x80
 8004252:	430b      	orrs	r3, r1
{
 8004254:	4680      	mov	r8, r0
 8004256:	4614      	mov	r4, r2
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 8004258:	d005      	beq.n	8004266 <gpio_stm32_config+0x22>
		return -ENOTSUP;
 800425a:	f06f 0622 	mvn.w	r6, #34	; 0x22
}
 800425e:	4630      	mov	r0, r6
 8004260:	b004      	add	sp, #16
 8004262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	map_res = gpio_stm32_flags_to_conf(flags, &pincfg);
 8004266:	a901      	add	r1, sp, #4
 8004268:	4628      	mov	r0, r5
 800426a:	f003 ffac 	bl	80081c6 <gpio_stm32_flags_to_conf>
	if (map_res != 0) {
 800426e:	4606      	mov	r6, r0
 8004270:	2800      	cmp	r0, #0
 8004272:	d1f4      	bne.n	800425e <gpio_stm32_config+0x1a>
	if (gpio_stm32_configure(cfg->base, pin, pincfg, 0) != 0) {
 8004274:	4603      	mov	r3, r0
 8004276:	9a01      	ldr	r2, [sp, #4]
 8004278:	6838      	ldr	r0, [r7, #0]
 800427a:	4621      	mov	r1, r4
 800427c:	f003 ffc0 	bl	8008200 <gpio_stm32_configure>
 8004280:	b110      	cbz	r0, 8004288 <gpio_stm32_config+0x44>
		err = -EIO;
 8004282:	f06f 0604 	mvn.w	r6, #4
 8004286:	e7ea      	b.n	800425e <gpio_stm32_config+0x1a>
	if (flags & GPIO_INT) {
 8004288:	f015 0602 	ands.w	r6, r5, #2
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	d051      	beq.n	8004334 <gpio_stm32_config+0xf0>
		if (stm32_exti_set_callback(pin, cfg->port,
 8004290:	4643      	mov	r3, r8
 8004292:	4a41      	ldr	r2, [pc, #260]	; (8004398 <gpio_stm32_config+0x154>)
 8004294:	4620      	mov	r0, r4
 8004296:	f7fd ffcf 	bl	8002238 <stm32_exti_set_callback>
 800429a:	2800      	cmp	r0, #0
 800429c:	d178      	bne.n	8004390 <gpio_stm32_config+0x14c>
		gpio_stm32_enable_int(cfg->port, pin);
 800429e:	687e      	ldr	r6, [r7, #4]
 80042a0:	483e      	ldr	r0, [pc, #248]	; (800439c <gpio_stm32_config+0x158>)
 80042a2:	f000 fc8f 	bl	8004bc4 <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 80042a6:	493e      	ldr	r1, [pc, #248]	; (80043a0 <gpio_stm32_config+0x15c>)
 80042a8:	4602      	mov	r2, r0
 80042aa:	c903      	ldmia	r1, {r0, r1}
 80042ac:	ab02      	add	r3, sp, #8
 80042ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80042b2:	6851      	ldr	r1, [r2, #4]
 80042b4:	4610      	mov	r0, r2
 80042b6:	680f      	ldr	r7, [r1, #0]
 80042b8:	4619      	mov	r1, r3
 80042ba:	47b8      	blx	r7
	if (pin > 15) {
 80042bc:	2c0f      	cmp	r4, #15
 80042be:	dc24      	bgt.n	800430a <gpio_stm32_config+0xc6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80042c0:	4262      	negs	r2, r4
 80042c2:	f002 0203 	and.w	r2, r2, #3
 80042c6:	f004 0303 	and.w	r3, r4, #3
 80042ca:	bf58      	it	pl
 80042cc:	4253      	negpl	r3, r2
 80042ce:	3304      	adds	r3, #4
 80042d0:	009a      	lsls	r2, r3, #2
 80042d2:	2c00      	cmp	r4, #0
 80042d4:	f04f 030f 	mov.w	r3, #15
 80042d8:	fa03 f302 	lsl.w	r3, r3, r2
 80042dc:	4622      	mov	r2, r4
 80042de:	bfb8      	it	lt
 80042e0:	1ce2      	addlt	r2, r4, #3
 80042e2:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	0092      	lsls	r2, r2, #2
 80042ea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80042ee:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80042f2:	0c1b      	lsrs	r3, r3, #16
 80042f4:	6891      	ldr	r1, [r2, #8]
 80042f6:	ea21 0103 	bic.w	r1, r1, r3
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80042fe:	fab3 f383 	clz	r3, r3
 8004302:	fa06 f303 	lsl.w	r3, r6, r3
 8004306:	430b      	orrs	r3, r1
 8004308:	6093      	str	r3, [r2, #8]
		if ((flags & GPIO_INT_EDGE) != 0) {
 800430a:	06aa      	lsls	r2, r5, #26
 800430c:	d5a5      	bpl.n	800425a <gpio_stm32_config+0x16>
			if ((flags & GPIO_INT_DOUBLE_EDGE) != 0) {
 800430e:	066b      	lsls	r3, r5, #25
 8004310:	d40e      	bmi.n	8004330 <gpio_stm32_config+0xec>
				edge = STM32_EXTI_TRIG_FALLING;
 8004312:	f015 0f04 	tst.w	r5, #4
 8004316:	bf14      	ite	ne
 8004318:	2101      	movne	r1, #1
 800431a:	2102      	moveq	r1, #2
			stm32_exti_trigger(pin, edge);
 800431c:	4620      	mov	r0, r4
 800431e:	f7fd ff73 	bl	8002208 <stm32_exti_trigger>
		if (stm32_exti_enable(pin) != 0) {
 8004322:	4620      	mov	r0, r4
 8004324:	f7fd ff4c 	bl	80021c0 <stm32_exti_enable>
 8004328:	2800      	cmp	r0, #0
 800432a:	d1aa      	bne.n	8004282 <gpio_stm32_config+0x3e>
	int err = 0;
 800432c:	2600      	movs	r6, #0
 800432e:	e796      	b.n	800425e <gpio_stm32_config+0x1a>
				edge = STM32_EXTI_TRIG_RISING |
 8004330:	2103      	movs	r1, #3
 8004332:	e7f3      	b.n	800431c <gpio_stm32_config+0xd8>
	if (pin > 15) {
 8004334:	2c0f      	cmp	r4, #15
 8004336:	dc28      	bgt.n	800438a <gpio_stm32_config+0x146>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8004338:	4263      	negs	r3, r4
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	f004 0203 	and.w	r2, r4, #3
 8004342:	bf58      	it	pl
 8004344:	425a      	negpl	r2, r3
 8004346:	3204      	adds	r2, #4
 8004348:	0093      	lsls	r3, r2, #2
 800434a:	2c00      	cmp	r4, #0
 800434c:	f04f 020f 	mov.w	r2, #15
 8004350:	fa02 f203 	lsl.w	r2, r2, r3
 8004354:	4623      	mov	r3, r4
 8004356:	bfb8      	it	lt
 8004358:	1ce3      	addlt	r3, r4, #3
 800435a:	ea42 02a3 	orr.w	r2, r2, r3, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800435e:	b2d3      	uxtb	r3, r2
 8004360:	4810      	ldr	r0, [pc, #64]	; (80043a4 <gpio_stm32_config+0x160>)
 8004362:	3302      	adds	r3, #2
 8004364:	0c12      	lsrs	r2, r2, #16
 8004366:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800436a:	4013      	ands	r3, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8004370:	fab2 f282 	clz	r2, r2
 8004374:	fa23 f202 	lsr.w	r2, r3, r2
		if (gpio_stm32_int_enabled_port(pin) == cfg->port) {
 8004378:	4291      	cmp	r1, r2
 800437a:	d1d7      	bne.n	800432c <gpio_stm32_config+0xe8>
			stm32_exti_disable(pin);
 800437c:	4620      	mov	r0, r4
 800437e:	f7fd ff37 	bl	80021f0 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8004382:	4620      	mov	r0, r4
 8004384:	f7fd ff6a 	bl	800225c <stm32_exti_unset_callback>
 8004388:	e769      	b.n	800425e <gpio_stm32_config+0x1a>
		return -EINVAL;
 800438a:	f06f 0215 	mvn.w	r2, #21
 800438e:	e7f3      	b.n	8004378 <gpio_stm32_config+0x134>
			err = -EBUSY;
 8004390:	f06f 060f 	mvn.w	r6, #15
 8004394:	e763      	b.n	800425e <gpio_stm32_config+0x1a>
 8004396:	bf00      	nop
 8004398:	080080cb 	.word	0x080080cb
 800439c:	08009f78 	.word	0x08009f78
 80043a0:	080091bc 	.word	0x080091bc
 80043a4:	40013800 	.word	0x40013800

080043a8 <pwm_stm32_pin_set>:
 *
 * return 0, or negative errno code
 */
static int pwm_stm32_pin_set(struct device *dev, u32_t pwm,
			     u32_t period_cycles, u32_t pulse_cycles)
{
 80043a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043aa:	461f      	mov	r7, r3
 80043ac:	b089      	sub	sp, #36	; 0x24
	struct pwm_stm32_data *data = DEV_DATA(dev);
 80043ae:	6886      	ldr	r6, [r0, #8]
	TIM_HandleTypeDef *TimerHandle = &data->hpwm;
	TIM_OC_InitTypeDef sConfig;
	u32_t channel;
	bool counter_32b;

	if (period_cycles == 0U || pulse_cycles > period_cycles) {
 80043b0:	b3a2      	cbz	r2, 800441c <pwm_stm32_pin_set+0x74>
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d332      	bcc.n	800441c <pwm_stm32_pin_set+0x74>
	}

	/* configure channel */
	channel = (pwm - 1)*CHANNEL_LENGTH;

	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80043b6:	6803      	ldr	r3, [r0, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
	channel = (pwm - 1)*CHANNEL_LENGTH;
 80043ba:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80043be:	6819      	ldr	r1, [r3, #0]
 80043c0:	4b33      	ldr	r3, [pc, #204]	; (8004490 <pwm_stm32_pin_set+0xe8>)
	channel = (pwm - 1)*CHANNEL_LENGTH;
 80043c2:	3c01      	subs	r4, #1
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80043c4:	4299      	cmp	r1, r3
	channel = (pwm - 1)*CHANNEL_LENGTH;
 80043c6:	ea4f 0484 	mov.w	r4, r4, lsl #2
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80043ca:	d05e      	beq.n	800448a <pwm_stm32_pin_set+0xe2>
 80043cc:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80043d0:	d027      	beq.n	8004422 <pwm_stm32_pin_set+0x7a>
 80043d2:	4830      	ldr	r0, [pc, #192]	; (8004494 <pwm_stm32_pin_set+0xec>)
 80043d4:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 80043d8:	4283      	cmp	r3, r0
 80043da:	d053      	beq.n	8004484 <pwm_stm32_pin_set+0xdc>
 80043dc:	f421 5580 	bic.w	r5, r1, #4096	; 0x1000
 80043e0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80043e4:	4285      	cmp	r5, r0
 80043e6:	d04d      	beq.n	8004484 <pwm_stm32_pin_set+0xdc>
 80043e8:	f421 6580 	bic.w	r5, r1, #1024	; 0x400
 80043ec:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80043f0:	4285      	cmp	r5, r0
 80043f2:	d047      	beq.n	8004484 <pwm_stm32_pin_set+0xdc>
 80043f4:	f421 4580 	bic.w	r5, r1, #16384	; 0x4000
 80043f8:	f500 4074 	add.w	r0, r0, #62464	; 0xf400
 80043fc:	4285      	cmp	r5, r0
 80043fe:	d041      	beq.n	8004484 <pwm_stm32_pin_set+0xdc>
 8004400:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 8004404:	4283      	cmp	r3, r0
 8004406:	d03d      	beq.n	8004484 <pwm_stm32_pin_set+0xdc>
 8004408:	4b23      	ldr	r3, [pc, #140]	; (8004498 <pwm_stm32_pin_set+0xf0>)
 800440a:	4299      	cmp	r1, r3
 800440c:	d03d      	beq.n	800448a <pwm_stm32_pin_set+0xe2>
 800440e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004412:	4299      	cmp	r1, r3
 8004414:	d039      	beq.n	800448a <pwm_stm32_pin_set+0xe2>
		!IS_TIM_CHANNELS(channel)) {
		return -ENOTSUP;
 8004416:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800441a:	e031      	b.n	8004480 <pwm_stm32_pin_set+0xd8>
		return -EINVAL;
 800441c:	f06f 0015 	mvn.w	r0, #21
 8004420:	e02e      	b.n	8004480 <pwm_stm32_pin_set+0xd8>
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8004422:	b184      	cbz	r4, 8004446 <pwm_stm32_pin_set+0x9e>
		!IS_TIM_CHANNELS(channel)) {
 8004424:	f024 0308 	bic.w	r3, r4, #8
 8004428:	2b04      	cmp	r3, #4
 800442a:	d003      	beq.n	8004434 <pwm_stm32_pin_set+0x8c>
 800442c:	2c08      	cmp	r4, #8
 800442e:	d001      	beq.n	8004434 <pwm_stm32_pin_set+0x8c>
 8004430:	2c3c      	cmp	r4, #60	; 0x3c
 8004432:	d1f0      	bne.n	8004416 <pwm_stm32_pin_set+0x6e>
	/* FIXME: IS_TIM_32B_COUNTER_INSTANCE not available on
	 * SMT32F1 Cube HAL since all timer counters are 16 bits
	 */
	counter_32b = 0;
#else
	counter_32b = IS_TIM_32B_COUNTER_INSTANCE(PWM_STRUCT(dev));
 8004434:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8004438:	d005      	beq.n	8004446 <pwm_stm32_pin_set+0x9e>

	/*
	 * The timer counts from 0 up to the value in the ARR register (16-bit).
	 * Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!counter_32b && (period_cycles > 0x10000)) {
 800443a:	4b18      	ldr	r3, [pc, #96]	; (800449c <pwm_stm32_pin_set+0xf4>)
 800443c:	4299      	cmp	r1, r3
 800443e:	d002      	beq.n	8004446 <pwm_stm32_pin_set+0x9e>
 8004440:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004444:	d8e7      	bhi.n	8004416 <pwm_stm32_pin_set+0x6e>
	}

	/* Configure Timer IP */
	TimerHandle->Instance = PWM_STRUCT(dev);
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
	TimerHandle->Init.ClockDivision = 0;
 8004446:	2500      	movs	r5, #0
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
 8004448:	6c33      	ldr	r3, [r6, #64]	; 0x40
	TimerHandle->Instance = PWM_STRUCT(dev);
 800444a:	6031      	str	r1, [r6, #0]
	TimerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
	TimerHandle->Init.RepetitionCounter = 0;

	/* Set period value */
	TimerHandle->Init.Period = period_cycles - 1;
 800444c:	3a01      	subs	r2, #1
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
 800444e:	6073      	str	r3, [r6, #4]
	TimerHandle->Init.Period = period_cycles - 1;
 8004450:	60f2      	str	r2, [r6, #12]
	TimerHandle->Init.ClockDivision = 0;
 8004452:	6135      	str	r5, [r6, #16]
	TimerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8004454:	60b5      	str	r5, [r6, #8]
	TimerHandle->Init.RepetitionCounter = 0;
 8004456:	6175      	str	r5, [r6, #20]

	HAL_TIM_PWM_Init(TimerHandle);
 8004458:	4630      	mov	r0, r6
 800445a:	f004 f8a1 	bl	80085a0 <HAL_TIM_PWM_Init>

	/* Configure PWM channel */
	sConfig.OCMode       = TIM_OCMODE_PWM1;
 800445e:	2360      	movs	r3, #96	; 0x60
	sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;

	/* Set the pulse value */
	sConfig.Pulse = pulse_cycles;

	HAL_TIM_PWM_ConfigChannel(TimerHandle, &sConfig, channel);
 8004460:	a901      	add	r1, sp, #4
 8004462:	4622      	mov	r2, r4
 8004464:	4630      	mov	r0, r6
	sConfig.OCMode       = TIM_OCMODE_PWM1;
 8004466:	9301      	str	r3, [sp, #4]
	sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8004468:	9503      	str	r5, [sp, #12]
	sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800446a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800446e:	e9cd 5506 	strd	r5, r5, [sp, #24]
	sConfig.Pulse = pulse_cycles;
 8004472:	9702      	str	r7, [sp, #8]
	HAL_TIM_PWM_ConfigChannel(TimerHandle, &sConfig, channel);
 8004474:	f004 f8ae 	bl	80085d4 <HAL_TIM_PWM_ConfigChannel>

	return HAL_TIM_PWM_Start(TimerHandle, channel);
 8004478:	4621      	mov	r1, r4
 800447a:	4630      	mov	r0, r6
 800447c:	f004 f91a 	bl	80086b4 <HAL_TIM_PWM_Start>
}
 8004480:	b009      	add	sp, #36	; 0x24
 8004482:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8004484:	2c00      	cmp	r4, #0
 8004486:	d1cd      	bne.n	8004424 <pwm_stm32_pin_set+0x7c>
 8004488:	e7d7      	b.n	800443a <pwm_stm32_pin_set+0x92>
 800448a:	2c00      	cmp	r4, #0
 800448c:	d1ca      	bne.n	8004424 <pwm_stm32_pin_set+0x7c>
 800448e:	e7d7      	b.n	8004440 <pwm_stm32_pin_set+0x98>
 8004490:	40010000 	.word	0x40010000
 8004494:	40000400 	.word	0x40000400
 8004498:	40001c00 	.word	0x40001c00
 800449c:	40000c00 	.word	0x40000c00

080044a0 <pwm_stm32_init>:
	data->clock = clk;
}


static int pwm_stm32_init(struct device *dev)
{
 80044a0:	b538      	push	{r3, r4, r5, lr}
	const struct pwm_stm32_config *config = DEV_CFG(dev);
 80044a2:	6803      	ldr	r3, [r0, #0]
	struct pwm_stm32_data *data = DEV_DATA(dev);
 80044a4:	6885      	ldr	r5, [r0, #8]
	const struct pwm_stm32_config *config = DEV_CFG(dev);
 80044a6:	689c      	ldr	r4, [r3, #8]
 80044a8:	4806      	ldr	r0, [pc, #24]	; (80044c4 <pwm_stm32_init+0x24>)
 80044aa:	f000 fb8b 	bl	8004bc4 <z_impl_device_get_binding>
 80044ae:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 80044b0:	6468      	str	r0, [r5, #68]	; 0x44
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	1d21      	adds	r1, r4, #4
 80044b6:	4798      	blx	r3

	__pwm_stm32_get_clock(dev);

	/* enable clock */
	if (clock_control_on(data->clock,
 80044b8:	2800      	cmp	r0, #0
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
	}

	return 0;
}
 80044ba:	bf18      	it	ne
 80044bc:	f06f 0004 	mvnne.w	r0, #4
 80044c0:	bd38      	pop	{r3, r4, r5, pc}
 80044c2:	bf00      	nop
 80044c4:	08009f78 	.word	0x08009f78

080044c8 <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80044c8:	6803      	ldr	r3, [r0, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	615a      	str	r2, [r3, #20]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 80044d6:	4a10      	ldr	r2, [pc, #64]	; (8004518 <uart_stm32_irq_err_enable+0x50>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <uart_stm32_irq_err_enable+0x3c>
 80044dc:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00f      	beq.n	8004504 <uart_stm32_irq_err_enable+0x3c>
 80044e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00b      	beq.n	8004504 <uart_stm32_irq_err_enable+0x3c>
 80044ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d007      	beq.n	8004504 <uart_stm32_irq_err_enable+0x3c>
 80044f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <uart_stm32_irq_err_enable+0x3c>
 80044fc:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8004500:	4293      	cmp	r3, r2
 8004502:	d103      	bne.n	800450c <uart_stm32_irq_err_enable+0x44>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800450a:	611a      	str	r2, [r3, #16]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004512:	60da      	str	r2, [r3, #12]
		LL_USART_EnableIT_LBD(UartInstance);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(UartInstance);
}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40011000 	.word	0x40011000

0800451c <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800451c:	6803      	ldr	r3, [r0, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	f022 0201 	bic.w	r2, r2, #1
 8004528:	615a      	str	r2, [r3, #20]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 800452a:	4a10      	ldr	r2, [pc, #64]	; (800456c <uart_stm32_irq_err_disable+0x50>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <uart_stm32_irq_err_disable+0x3c>
 8004530:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8004534:	4293      	cmp	r3, r2
 8004536:	d00f      	beq.n	8004558 <uart_stm32_irq_err_disable+0x3c>
 8004538:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800453c:	4293      	cmp	r3, r2
 800453e:	d00b      	beq.n	8004558 <uart_stm32_irq_err_disable+0x3c>
 8004540:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004544:	4293      	cmp	r3, r2
 8004546:	d007      	beq.n	8004558 <uart_stm32_irq_err_disable+0x3c>
 8004548:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <uart_stm32_irq_err_disable+0x3c>
 8004550:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8004554:	4293      	cmp	r3, r2
 8004556:	d103      	bne.n	8004560 <uart_stm32_irq_err_disable+0x44>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004566:	60da      	str	r2, [r3, #12]
		LL_USART_DisableIT_LBD(UartInstance);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(UartInstance);
}
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40011000 	.word	0x40011000

08004570 <uart_stm32_configure>:
{
 8004570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004574:	6803      	ldr	r3, [r0, #0]
	const u32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8004576:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004578:	689b      	ldr	r3, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 800457a:	6886      	ldr	r6, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800457c:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 800457e:	2a01      	cmp	r2, #1
{
 8004580:	460d      	mov	r5, r1
	switch (parity) {
 8004582:	d075      	beq.n	8004670 <uart_stm32_configure+0x100>
		return LL_USART_PARITY_NONE;
 8004584:	2a02      	cmp	r2, #2
 8004586:	bf0c      	ite	eq
 8004588:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 800458c:	2100      	movne	r1, #0
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800458e:	f895 8005 	ldrb.w	r8, [r5, #5]
	const u32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 8004592:	f895 9006 	ldrb.w	r9, [r5, #6]
	const u32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8004596:	79ef      	ldrb	r7, [r5, #7]
 8004598:	f1b8 0f02 	cmp.w	r8, #2
 800459c:	bf96      	itet	ls
 800459e:	4b37      	ldrls	r3, [pc, #220]	; (800467c <uart_stm32_configure+0x10c>)
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80045a0:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 80045a4:	f833 e018 	ldrhls.w	lr, [r3, r8, lsl #1]
		return LL_USART_DATAWIDTH_8B;
 80045a8:	f1b9 0f04 	cmp.w	r9, #4
 80045ac:	bf0c      	ite	eq
 80045ae:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 80045b2:	2300      	movne	r3, #0
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 80045b4:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 80045b6:	2f01      	cmp	r7, #1
 80045b8:	bf14      	ite	ne
 80045ba:	f04f 0c00 	movne.w	ip, #0
 80045be:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 80045c2:	2a01      	cmp	r2, #1
 80045c4:	d957      	bls.n	8004676 <uart_stm32_configure+0x106>
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 80045c6:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 80045ca:	d054      	beq.n	8004676 <uart_stm32_configure+0x106>
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 80045cc:	f1b9 0f02 	cmp.w	r9, #2
 80045d0:	d951      	bls.n	8004676 <uart_stm32_configure+0x106>
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 80045d2:	b187      	cbz	r7, 80045f6 <uart_stm32_configure+0x86>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 80045d4:	4a2a      	ldr	r2, [pc, #168]	; (8004680 <uart_stm32_configure+0x110>)
 80045d6:	4294      	cmp	r4, r2
 80045d8:	d00b      	beq.n	80045f2 <uart_stm32_configure+0x82>
 80045da:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80045de:	4294      	cmp	r4, r2
 80045e0:	d007      	beq.n	80045f2 <uart_stm32_configure+0x82>
 80045e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045e6:	4294      	cmp	r4, r2
 80045e8:	d003      	beq.n	80045f2 <uart_stm32_configure+0x82>
 80045ea:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 80045ee:	4294      	cmp	r4, r2
 80045f0:	d141      	bne.n	8004676 <uart_stm32_configure+0x106>
 80045f2:	2f01      	cmp	r7, #1
 80045f4:	d13f      	bne.n	8004676 <uart_stm32_configure+0x106>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80045f6:	68e2      	ldr	r2, [r4, #12]
 80045f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045fc:	60e2      	str	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80045fe:	68e2      	ldr	r2, [r4, #12]
 8004600:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8004604:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8004606:	bf1f      	itttt	ne
 8004608:	68e7      	ldrne	r7, [r4, #12]
 800460a:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 800460e:	430f      	orrne	r7, r1
 8004610:	60e7      	strne	r7, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8004612:	6922      	ldr	r2, [r4, #16]
 8004614:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8004618:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800461a:	bf1f      	itttt	ne
 800461c:	6921      	ldrne	r1, [r4, #16]
 800461e:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8004622:	ea41 010e 	orrne.w	r1, r1, lr
 8004626:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8004628:	68e2      	ldr	r2, [r4, #12]
	if (cfg->baudrate != data->baud_rate) {
 800462a:	6829      	ldr	r1, [r5, #0]
 800462c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8004630:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8004632:	bf1f      	itttt	ne
 8004634:	68e2      	ldrne	r2, [r4, #12]
 8004636:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 800463a:	431a      	orrne	r2, r3
 800463c:	60e2      	strne	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800463e:	6963      	ldr	r3, [r4, #20]
 8004640:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8004644:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004646:	bf1f      	itttt	ne
 8004648:	6963      	ldrne	r3, [r4, #20]
 800464a:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 800464e:	ea43 030c 	orrne.w	r3, r3, ip
 8004652:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 8004654:	6833      	ldr	r3, [r6, #0]
 8004656:	4299      	cmp	r1, r3
 8004658:	d003      	beq.n	8004662 <uart_stm32_configure+0xf2>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 800465a:	f003 ff47 	bl	80084ec <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 800465e:	682b      	ldr	r3, [r5, #0]
 8004660:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004662:	68e3      	ldr	r3, [r4, #12]
 8004664:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004668:	60e3      	str	r3, [r4, #12]
	return 0;
 800466a:	2000      	movs	r0, #0
};
 800466c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return LL_USART_PARITY_ODD;
 8004670:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004674:	e78b      	b.n	800458e <uart_stm32_configure+0x1e>
		return -ENOTSUP;
 8004676:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800467a:	e7f7      	b.n	800466c <uart_stm32_configure+0xfc>
 800467c:	080096f4 	.word	0x080096f4
 8004680:	40011000 	.word	0x40011000

08004684 <uart_stm32_init>:
 *
 * @return 0
 */
static int uart_stm32_init(struct device *dev)
{
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8004684:	6803      	ldr	r3, [r0, #0]
{
 8004686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 800468a:	689f      	ldr	r7, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 800468c:	f8d0 8008 	ldr.w	r8, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004690:	463e      	mov	r6, r7
{
 8004692:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004694:	f856 4b0c 	ldr.w	r4, [r6], #12
 8004698:	481a      	ldr	r0, [pc, #104]	; (8004704 <uart_stm32_init+0x80>)
 800469a:	f000 fa93 	bl	8004bc4 <z_impl_device_get_binding>
 800469e:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 80046a0:	f8c8 0004 	str.w	r0, [r8, #4]
 80046a4:	4631      	mov	r1, r6
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4798      	blx	r3

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 80046aa:	4606      	mov	r6, r0
 80046ac:	bb38      	cbnz	r0, 80046fe <uart_stm32_init+0x7a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80046ae:	68e3      	ldr	r3, [r4, #12]
 80046b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046b4:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80046b6:	68e3      	ldr	r3, [r4, #12]
 80046b8:	f043 030c 	orr.w	r3, r3, #12
 80046bc:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80046be:	68e3      	ldr	r3, [r4, #12]
 80046c0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046c4:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80046c6:	6923      	ldr	r3, [r4, #16]
 80046c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046cc:	6123      	str	r3, [r4, #16]
	LL_USART_ConfigCharacter(UartInstance,
				 LL_USART_DATAWIDTH_8B,
				 LL_USART_PARITY_NONE,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 80046ce:	7d3b      	ldrb	r3, [r7, #20]
 80046d0:	b133      	cbz	r3, 80046e0 <uart_stm32_init+0x5c>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80046d2:	682b      	ldr	r3, [r5, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80046d8:	6953      	ldr	r3, [r2, #20]
 80046da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80046de:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80046e0:	4628      	mov	r0, r5
 80046e2:	f8d8 1000 	ldr.w	r1, [r8]
 80046e6:	f003 ff01 	bl	80084ec <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80046ea:	68e3      	ldr	r3, [r4, #12]
 80046ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046f0:	60e3      	str	r3, [r4, #12]
	while (!(LL_USART_IsActiveFlag_REACK(UartInstance))) {
	}
#endif /* !USART_ISR_REACK */

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
 80046f2:	4628      	mov	r0, r5
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4798      	blx	r3
#endif
	return 0;
}
 80046f8:	4630      	mov	r0, r6
 80046fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 80046fe:	f06f 0604 	mvn.w	r6, #4
 8004702:	e7f9      	b.n	80046f8 <uart_stm32_init+0x74>
 8004704:	08009f78 	.word	0x08009f78

08004708 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004708:	6a03      	ldr	r3, [r0, #32]
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004710:	6a03      	ldr	r3, [r0, #32]
{
 8004712:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004714:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004716:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004718:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800471a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800471e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004720:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004722:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004726:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004728:	4d0e      	ldr	r5, [pc, #56]	; (8004764 <TIM_OC1_SetConfig+0x5c>)
 800472a:	42a8      	cmp	r0, r5
 800472c:	d002      	beq.n	8004734 <TIM_OC1_SetConfig+0x2c>
 800472e:	4e0e      	ldr	r6, [pc, #56]	; (8004768 <TIM_OC1_SetConfig+0x60>)
 8004730:	42b0      	cmp	r0, r6
 8004732:	d110      	bne.n	8004756 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004734:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004736:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800473a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800473e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004742:	d002      	beq.n	800474a <TIM_OC1_SetConfig+0x42>
 8004744:	4d08      	ldr	r5, [pc, #32]	; (8004768 <TIM_OC1_SetConfig+0x60>)
 8004746:	42a8      	cmp	r0, r5
 8004748:	d105      	bne.n	8004756 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800474a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800474e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004752:	4335      	orrs	r5, r6
 8004754:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004756:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004758:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800475a:	684a      	ldr	r2, [r1, #4]
 800475c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475e:	6203      	str	r3, [r0, #32]
}
 8004760:	bd70      	pop	{r4, r5, r6, pc}
 8004762:	bf00      	nop
 8004764:	40010000 	.word	0x40010000
 8004768:	40010400 	.word	0x40010400

0800476c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800476c:	6a03      	ldr	r3, [r0, #32]
 800476e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004772:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004774:	6a03      	ldr	r3, [r0, #32]
{
 8004776:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004778:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800477a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800477c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800477e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004782:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004784:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004786:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800478a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800478e:	4d11      	ldr	r5, [pc, #68]	; (80047d4 <TIM_OC3_SetConfig+0x68>)
 8004790:	42a8      	cmp	r0, r5
 8004792:	d003      	beq.n	800479c <TIM_OC3_SetConfig+0x30>
 8004794:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004798:	42a8      	cmp	r0, r5
 800479a:	d114      	bne.n	80047c6 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800479c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800479e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a6:	4d0b      	ldr	r5, [pc, #44]	; (80047d4 <TIM_OC3_SetConfig+0x68>)
 80047a8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80047aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ae:	d003      	beq.n	80047b8 <TIM_OC3_SetConfig+0x4c>
 80047b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80047b4:	42a8      	cmp	r0, r5
 80047b6:	d106      	bne.n	80047c6 <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047b8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047bc:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047c0:	4335      	orrs	r5, r6
 80047c2:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047c8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ca:	684a      	ldr	r2, [r1, #4]
 80047cc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ce:	6203      	str	r3, [r0, #32]
}
 80047d0:	bd70      	pop	{r4, r5, r6, pc}
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000

080047d8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047d8:	6a03      	ldr	r3, [r0, #32]
 80047da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047de:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e0:	6a03      	ldr	r3, [r0, #32]
{
 80047e2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047e6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047ea:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047ee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047f2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80047f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047f8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047fc:	4d08      	ldr	r5, [pc, #32]	; (8004820 <TIM_OC4_SetConfig+0x48>)
 80047fe:	42a8      	cmp	r0, r5
 8004800:	d003      	beq.n	800480a <TIM_OC4_SetConfig+0x32>
 8004802:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004806:	42a8      	cmp	r0, r5
 8004808:	d104      	bne.n	8004814 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800480a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800480c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004810:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004814:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004816:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004818:	684a      	ldr	r2, [r1, #4]
 800481a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481c:	6203      	str	r3, [r0, #32]
}
 800481e:	bd30      	pop	{r4, r5, pc}
 8004820:	40010000 	.word	0x40010000

08004824 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004824:	4a30      	ldr	r2, [pc, #192]	; (80048e8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8004826:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004828:	4290      	cmp	r0, r2
 800482a:	d012      	beq.n	8004852 <TIM_Base_SetConfig+0x2e>
 800482c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004830:	d00f      	beq.n	8004852 <TIM_Base_SetConfig+0x2e>
 8004832:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004836:	4290      	cmp	r0, r2
 8004838:	d00b      	beq.n	8004852 <TIM_Base_SetConfig+0x2e>
 800483a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800483e:	4290      	cmp	r0, r2
 8004840:	d007      	beq.n	8004852 <TIM_Base_SetConfig+0x2e>
 8004842:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004846:	4290      	cmp	r0, r2
 8004848:	d003      	beq.n	8004852 <TIM_Base_SetConfig+0x2e>
 800484a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800484e:	4290      	cmp	r0, r2
 8004850:	d119      	bne.n	8004886 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8004852:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004858:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800485a:	4a23      	ldr	r2, [pc, #140]	; (80048e8 <TIM_Base_SetConfig+0xc4>)
 800485c:	4290      	cmp	r0, r2
 800485e:	d029      	beq.n	80048b4 <TIM_Base_SetConfig+0x90>
 8004860:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004864:	d026      	beq.n	80048b4 <TIM_Base_SetConfig+0x90>
 8004866:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800486a:	4290      	cmp	r0, r2
 800486c:	d022      	beq.n	80048b4 <TIM_Base_SetConfig+0x90>
 800486e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004872:	4290      	cmp	r0, r2
 8004874:	d01e      	beq.n	80048b4 <TIM_Base_SetConfig+0x90>
 8004876:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800487a:	4290      	cmp	r0, r2
 800487c:	d01a      	beq.n	80048b4 <TIM_Base_SetConfig+0x90>
 800487e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004882:	4290      	cmp	r0, r2
 8004884:	d016      	beq.n	80048b4 <TIM_Base_SetConfig+0x90>
 8004886:	4a19      	ldr	r2, [pc, #100]	; (80048ec <TIM_Base_SetConfig+0xc8>)
 8004888:	4290      	cmp	r0, r2
 800488a:	d013      	beq.n	80048b4 <TIM_Base_SetConfig+0x90>
 800488c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004890:	4290      	cmp	r0, r2
 8004892:	d00f      	beq.n	80048b4 <TIM_Base_SetConfig+0x90>
 8004894:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004898:	4290      	cmp	r0, r2
 800489a:	d00b      	beq.n	80048b4 <TIM_Base_SetConfig+0x90>
 800489c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80048a0:	4290      	cmp	r0, r2
 80048a2:	d007      	beq.n	80048b4 <TIM_Base_SetConfig+0x90>
 80048a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048a8:	4290      	cmp	r0, r2
 80048aa:	d003      	beq.n	80048b4 <TIM_Base_SetConfig+0x90>
 80048ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048b0:	4290      	cmp	r0, r2
 80048b2:	d103      	bne.n	80048bc <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048b4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80048b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ba:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048bc:	694a      	ldr	r2, [r1, #20]
 80048be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80048c4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c6:	688b      	ldr	r3, [r1, #8]
 80048c8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048ca:	680b      	ldr	r3, [r1, #0]
 80048cc:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ce:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <TIM_Base_SetConfig+0xc4>)
 80048d0:	4298      	cmp	r0, r3
 80048d2:	d003      	beq.n	80048dc <TIM_Base_SetConfig+0xb8>
 80048d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048d8:	4298      	cmp	r0, r3
 80048da:	d101      	bne.n	80048e0 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80048dc:	690b      	ldr	r3, [r1, #16]
 80048de:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80048e0:	2301      	movs	r3, #1
 80048e2:	6143      	str	r3, [r0, #20]
}
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40014000 	.word	0x40014000

080048f0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f0:	6a03      	ldr	r3, [r0, #32]
 80048f2:	f023 0310 	bic.w	r3, r3, #16
 80048f6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80048f8:	6a03      	ldr	r3, [r0, #32]
{
 80048fa:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 80048fc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80048fe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004900:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004902:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004906:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800490a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800490c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004910:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004914:	4d10      	ldr	r5, [pc, #64]	; (8004958 <TIM_OC2_SetConfig+0x68>)
 8004916:	42a8      	cmp	r0, r5
 8004918:	d003      	beq.n	8004922 <TIM_OC2_SetConfig+0x32>
 800491a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800491e:	42a8      	cmp	r0, r5
 8004920:	d114      	bne.n	800494c <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004922:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004928:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492c:	4d0a      	ldr	r5, [pc, #40]	; (8004958 <TIM_OC2_SetConfig+0x68>)
 800492e:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8004930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004934:	d003      	beq.n	800493e <TIM_OC2_SetConfig+0x4e>
 8004936:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800493a:	42a8      	cmp	r0, r5
 800493c:	d106      	bne.n	800494c <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800493e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004942:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004946:	4335      	orrs	r5, r6
 8004948:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800494c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800494e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004950:	684a      	ldr	r2, [r1, #4]
 8004952:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004954:	6203      	str	r3, [r0, #32]
}
 8004956:	bd70      	pop	{r4, r5, r6, pc}
 8004958:	40010000 	.word	0x40010000

0800495c <HAL_TIM_OC_Start>:
{
 800495c:	b510      	push	{r4, lr}
 800495e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004960:	2201      	movs	r2, #1
 8004962:	6800      	ldr	r0, [r0, #0]
 8004964:	f003 fe98 	bl	8008698 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	4a0b      	ldr	r2, [pc, #44]	; (8004998 <HAL_TIM_OC_Start+0x3c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <HAL_TIM_OC_Start+0x1c>
 8004970:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004974:	4293      	cmp	r3, r2
 8004976:	d103      	bne.n	8004980 <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8004978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800497a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800497e:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004986:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8004988:	bf1e      	ittt	ne
 800498a:	681a      	ldrne	r2, [r3, #0]
 800498c:	f042 0201 	orrne.w	r2, r2, #1
 8004990:	601a      	strne	r2, [r3, #0]
}
 8004992:	2000      	movs	r0, #0
 8004994:	bd10      	pop	{r4, pc}
 8004996:	bf00      	nop
 8004998:	40010000 	.word	0x40010000

0800499c <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <UTILS_PLL_IsBusy+0x18>)
 800499e:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLI2SRDY    LL_RCC_PLLI2S_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLI2S_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 80049a0:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80049a2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 80049a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 80049aa:	4313      	orrs	r3, r2
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 80049ac:	bf14      	ite	ne
 80049ae:	2001      	movne	r0, #1
 80049b0:	2000      	moveq	r0, #0
 80049b2:	4770      	bx	lr
 80049b4:	40023800 	.word	0x40023800

080049b8 <UTILS_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 80049b8:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <UTILS_SetFlashLatency.part.0+0x84>)
 80049ba:	681b      	ldr	r3, [r3, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 80049bc:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 80049c0:	d010      	beq.n	80049e4 <UTILS_SetFlashLatency.part.0+0x2c>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80049c2:	4b1f      	ldr	r3, [pc, #124]	; (8004a40 <UTILS_SetFlashLatency.part.0+0x88>)
 80049c4:	4298      	cmp	r0, r3
 80049c6:	d80c      	bhi.n	80049e2 <UTILS_SetFlashLatency.part.0+0x2a>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80049c8:	4b1e      	ldr	r3, [pc, #120]	; (8004a44 <UTILS_SetFlashLatency.part.0+0x8c>)
 80049ca:	4298      	cmp	r0, r3
 80049cc:	d901      	bls.n	80049d2 <UTILS_SetFlashLatency.part.0+0x1a>
        latency = LL_FLASH_LATENCY_4;
 80049ce:	2304      	movs	r3, #4
 80049d0:	e008      	b.n	80049e4 <UTILS_SetFlashLatency.part.0+0x2c>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80049d2:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <UTILS_SetFlashLatency.part.0+0x90>)
 80049d4:	4298      	cmp	r0, r3
 80049d6:	d828      	bhi.n	8004a2a <UTILS_SetFlashLatency.part.0+0x72>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80049d8:	4b1c      	ldr	r3, [pc, #112]	; (8004a4c <UTILS_SetFlashLatency.part.0+0x94>)
 80049da:	4298      	cmp	r0, r3
 80049dc:	d927      	bls.n	8004a2e <UTILS_SetFlashLatency.part.0+0x76>
        latency = LL_FLASH_LATENCY_2;
 80049de:	2302      	movs	r3, #2
 80049e0:	e000      	b.n	80049e4 <UTILS_SetFlashLatency.part.0+0x2c>
        latency = LL_FLASH_LATENCY_5;
 80049e2:	2305      	movs	r3, #5
 80049e4:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <UTILS_SetFlashLatency.part.0+0x84>)
 80049e6:	6812      	ldr	r2, [r2, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80049e8:	0452      	lsls	r2, r2, #17
 80049ea:	d411      	bmi.n	8004a10 <UTILS_SetFlashLatency.part.0+0x58>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80049ec:	4a18      	ldr	r2, [pc, #96]	; (8004a50 <UTILS_SetFlashLatency.part.0+0x98>)
 80049ee:	4290      	cmp	r0, r2
 80049f0:	d908      	bls.n	8004a04 <UTILS_SetFlashLatency.part.0+0x4c>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80049f2:	4a15      	ldr	r2, [pc, #84]	; (8004a48 <UTILS_SetFlashLatency.part.0+0x90>)
        latency = LL_FLASH_LATENCY_4;
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bf08      	it	eq
 80049f8:	2304      	moveq	r3, #4
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80049fa:	4290      	cmp	r0, r2
 80049fc:	d808      	bhi.n	8004a10 <UTILS_SetFlashLatency.part.0+0x58>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80049fe:	4a13      	ldr	r2, [pc, #76]	; (8004a4c <UTILS_SetFlashLatency.part.0+0x94>)
 8004a00:	4290      	cmp	r0, r2
 8004a02:	d805      	bhi.n	8004a10 <UTILS_SetFlashLatency.part.0+0x58>
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004a04:	4a13      	ldr	r2, [pc, #76]	; (8004a54 <UTILS_SetFlashLatency.part.0+0x9c>)
 8004a06:	4290      	cmp	r0, r2
 8004a08:	d902      	bls.n	8004a10 <UTILS_SetFlashLatency.part.0+0x58>
          latency = LL_FLASH_LATENCY_1;
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf08      	it	eq
 8004a0e:	2301      	moveq	r3, #1
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004a10:	4911      	ldr	r1, [pc, #68]	; (8004a58 <UTILS_SetFlashLatency.part.0+0xa0>)
 8004a12:	680a      	ldr	r2, [r1, #0]
 8004a14:	f022 020f 	bic.w	r2, r2, #15
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004a1c:	6808      	ldr	r0, [r1, #0]
 8004a1e:	f000 000f 	and.w	r0, r0, #15
  return status;
 8004a22:	1ac0      	subs	r0, r0, r3
 8004a24:	bf18      	it	ne
 8004a26:	2001      	movne	r0, #1
}
 8004a28:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e7da      	b.n	80049e4 <UTILS_SetFlashLatency.part.0+0x2c>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <UTILS_SetFlashLatency.part.0+0x9c>)
 8004a30:	4298      	cmp	r0, r3
 8004a32:	bf94      	ite	ls
 8004a34:	2300      	movls	r3, #0
 8004a36:	2301      	movhi	r3, #1
 8004a38:	e7d4      	b.n	80049e4 <UTILS_SetFlashLatency.part.0+0x2c>
 8004a3a:	bf00      	nop
 8004a3c:	40007000 	.word	0x40007000
 8004a40:	08f0d180 	.word	0x08f0d180
 8004a44:	07270e00 	.word	0x07270e00
 8004a48:	055d4a80 	.word	0x055d4a80
 8004a4c:	03938700 	.word	0x03938700
 8004a50:	00b71b00 	.word	0x00b71b00
 8004a54:	01c9c380 	.word	0x01c9c380
 8004a58:	40023c00 	.word	0x40023c00

08004a5c <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8004a5c:	680b      	ldr	r3, [r1, #0]
 8004a5e:	4a24      	ldr	r2, [pc, #144]	; (8004af0 <UTILS_EnablePLLAndSwitchSystem+0x94>)
 8004a60:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8004a64:	b570      	push	{r4, r5, r6, lr}

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8004a66:	4d23      	ldr	r5, [pc, #140]	; (8004af4 <UTILS_EnablePLLAndSwitchSystem+0x98>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8004a68:	5cd4      	ldrb	r4, [r2, r3]
  if(SystemCoreClock < hclk_frequency)
 8004a6a:	682b      	ldr	r3, [r5, #0]
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8004a6c:	fa20 f404 	lsr.w	r4, r0, r4
  if(SystemCoreClock < hclk_frequency)
 8004a70:	42a3      	cmp	r3, r4
{
 8004a72:	460e      	mov	r6, r1
  if(SystemCoreClock < hclk_frequency)
 8004a74:	d327      	bcc.n	8004ac6 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004a76:	4b20      	ldr	r3, [pc, #128]	; (8004af8 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004a7e:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004a80:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8004a82:	0192      	lsls	r2, r2, #6
 8004a84:	d5fc      	bpl.n	8004a80 <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	6831      	ldr	r1, [r6, #0]
 8004a8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	f022 0203 	bic.w	r2, r2, #3
 8004a98:	f042 0202 	orr.w	r2, r2, #2
 8004a9c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a9e:	4b16      	ldr	r3, [pc, #88]	; (8004af8 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004aa6:	2a08      	cmp	r2, #8
 8004aa8:	d1fa      	bne.n	8004aa0 <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	6871      	ldr	r1, [r6, #4]
 8004aae:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	68b1      	ldr	r1, [r6, #8]
 8004aba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	609a      	str	r2, [r3, #8]
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	e005      	b.n	8004ad2 <UTILS_EnablePLLAndSwitchSystem+0x76>
  if(HCLK_Frequency == 0U)
 8004ac6:	b174      	cbz	r4, 8004ae6 <UTILS_EnablePLLAndSwitchSystem+0x8a>
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f7ff ff75 	bl	80049b8 <UTILS_SetFlashLatency.part.0>
  if(status == SUCCESS)
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d0d1      	beq.n	8004a76 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8004ad2:	682b      	ldr	r3, [r5, #0]
 8004ad4:	42a3      	cmp	r3, r4
 8004ad6:	d903      	bls.n	8004ae0 <UTILS_EnablePLLAndSwitchSystem+0x84>
  if(HCLK_Frequency == 0U)
 8004ad8:	b13c      	cbz	r4, 8004aea <UTILS_EnablePLLAndSwitchSystem+0x8e>
 8004ada:	4620      	mov	r0, r4
 8004adc:	f7ff ff6c 	bl	80049b8 <UTILS_SetFlashLatency.part.0>
    /* Set FLASH latency to lowest latency */
    status = UTILS_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8004ae0:	b900      	cbnz	r0, 8004ae4 <UTILS_EnablePLLAndSwitchSystem+0x88>
  SystemCoreClock = HCLKFrequency;
 8004ae2:	602c      	str	r4, [r5, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8004ae4:	bd70      	pop	{r4, r5, r6, pc}
    status = ERROR;
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	e7f3      	b.n	8004ad2 <UTILS_EnablePLLAndSwitchSystem+0x76>
 8004aea:	2001      	movs	r0, #1
 8004aec:	e7fa      	b.n	8004ae4 <UTILS_EnablePLLAndSwitchSystem+0x88>
 8004aee:	bf00      	nop
 8004af0:	0800a3f1 	.word	0x0800a3f1
 8004af4:	200029e0 	.word	0x200029e0
 8004af8:	40023800 	.word	0x40023800

08004afc <LL_PLL_ConfigSystemClock_HSE>:
{
 8004afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b00:	460d      	mov	r5, r1
 8004b02:	4604      	mov	r4, r0
 8004b04:	4690      	mov	r8, r2
 8004b06:	4619      	mov	r1, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8004b08:	f7ff ff48 	bl	800499c <UTILS_PLL_IsBusy>
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d138      	bne.n	8004b82 <LL_PLL_ConfigSystemClock_HSE+0x86>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8004b10:	f8d8 6000 	ldr.w	r6, [r8]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8004b14:	f8d8 7004 	ldr.w	r7, [r8, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b18:	f8d8 3008 	ldr.w	r3, [r8, #8]
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8004b1c:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 8004b20:	fbb4 f4f0 	udiv	r4, r4, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8004b24:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8004b28:	4344      	muls	r4, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b2a:	0c18      	lsrs	r0, r3, #16
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	0040      	lsls	r0, r0, #1
 8004b30:	fbb4 f0f0 	udiv	r0, r4, r0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004b34:	4c14      	ldr	r4, [pc, #80]	; (8004b88 <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 8004b36:	6822      	ldr	r2, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 8004b38:	0392      	lsls	r2, r2, #14
 8004b3a:	d40f      	bmi.n	8004b5c <LL_PLL_ConfigSystemClock_HSE+0x60>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004b3c:	6822      	ldr	r2, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8004b3e:	2d01      	cmp	r5, #1
 8004b40:	bf0c      	ite	eq
 8004b42:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004b46:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 8004b4a:	6022      	str	r2, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004b4c:	6822      	ldr	r2, [r4, #0]
 8004b4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b52:	6022      	str	r2, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004b54:	4c0c      	ldr	r4, [pc, #48]	; (8004b88 <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 8004b56:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8004b58:	0392      	lsls	r2, r2, #14
 8004b5a:	d5fc      	bpl.n	8004b56 <LL_PLL_ConfigSystemClock_HSE+0x5a>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8004b5c:	4c0a      	ldr	r4, [pc, #40]	; (8004b88 <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 8004b5e:	4a0b      	ldr	r2, [pc, #44]	; (8004b8c <LL_PLL_ConfigSystemClock_HSE+0x90>)
 8004b60:	6865      	ldr	r5, [r4, #4]
 8004b62:	402a      	ands	r2, r5
 8004b64:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 8004b68:	4332      	orrs	r2, r6
 8004b6a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004b6e:	6062      	str	r2, [r4, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8004b70:	6862      	ldr	r2, [r4, #4]
 8004b72:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004b76:	431a      	orrs	r2, r3
 8004b78:	6062      	str	r2, [r4, #4]
}
 8004b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8004b7e:	f7ff bf6d 	b.w	8004a5c <UTILS_EnablePLLAndSwitchSystem>
}
 8004b82:	2001      	movs	r0, #1
 8004b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	ffbf8000 	.word	0xffbf8000

08004b90 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	z_sys_device_level = level;
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <z_sys_device_do_config_level+0x2c>)
{
 8004b92:	b570      	push	{r4, r5, r6, lr}
	z_sys_device_level = level;
 8004b94:	7018      	strb	r0, [r3, #0]
	for (info = config_levels[level]; info < config_levels[level+1];
 8004b96:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <z_sys_device_do_config_level+0x30>)
 8004b98:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8004b9c:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
 8004b9e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 8004ba0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8004ba4:	42a5      	cmp	r5, r4
 8004ba6:	d800      	bhi.n	8004baa <z_sys_device_do_config_level+0x1a>
		} else {
			z_object_init(info);
		}
	}
}
 8004ba8:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	4620      	mov	r0, r4
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	4798      	blx	r3
		if (retval != 0) {
 8004bb2:	b100      	cbz	r0, 8004bb6 <z_sys_device_do_config_level+0x26>
			info->driver_api = NULL;
 8004bb4:	6066      	str	r6, [r4, #4]
								info++) {
 8004bb6:	340c      	adds	r4, #12
 8004bb8:	e7f4      	b.n	8004ba4 <z_sys_device_do_config_level+0x14>
 8004bba:	bf00      	nop
 8004bbc:	20000977 	.word	0x20000977
 8004bc0:	080096dc 	.word	0x080096dc

08004bc4 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004bc4:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <z_impl_device_get_binding+0x44>)
{
 8004bc6:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004bc8:	4c10      	ldr	r4, [pc, #64]	; (8004c0c <z_impl_device_get_binding+0x48>)
{
 8004bca:	4605      	mov	r5, r0
 8004bcc:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004bce:	429c      	cmp	r4, r3
 8004bd0:	d104      	bne.n	8004bdc <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
 8004bd2:	4c0e      	ldr	r4, [pc, #56]	; (8004c0c <z_impl_device_get_binding+0x48>)
 8004bd4:	42b4      	cmp	r4, r6
 8004bd6:	d109      	bne.n	8004bec <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
 8004bd8:	2400      	movs	r4, #0
 8004bda:	e012      	b.n	8004c02 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
 8004bdc:	6862      	ldr	r2, [r4, #4]
 8004bde:	b11a      	cbz	r2, 8004be8 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
 8004be0:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	42aa      	cmp	r2, r5
 8004be6:	d00c      	beq.n	8004c02 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004be8:	340c      	adds	r4, #12
 8004bea:	e7f0      	b.n	8004bce <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
 8004bec:	6863      	ldr	r3, [r4, #4]
 8004bee:	b90b      	cbnz	r3, 8004bf4 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004bf0:	340c      	adds	r4, #12
 8004bf2:	e7ef      	b.n	8004bd4 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	6819      	ldr	r1, [r3, #0]
 8004bfa:	f003 f961 	bl	8007ec0 <strcmp>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d1f6      	bne.n	8004bf0 <z_impl_device_get_binding+0x2c>
}
 8004c02:	4620      	mov	r0, r4
 8004c04:	bd70      	pop	{r4, r5, r6, pc}
 8004c06:	bf00      	nop
 8004c08:	20002ae8 	.word	0x20002ae8
 8004c0c:	200029ec 	.word	0x200029ec

08004c10 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 8004c10:	4b01      	ldr	r3, [pc, #4]	; (8004c18 <z_impl_z_errno+0x8>)
 8004c12:	6898      	ldr	r0, [r3, #8]
}
 8004c14:	3054      	adds	r0, #84	; 0x54
 8004c16:	4770      	bx	lr
 8004c18:	20000854 	.word	0x20000854

08004c1c <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
 8004c1c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8004c1e:	4807      	ldr	r0, [pc, #28]	; (8004c3c <z_bss_zero+0x20>)
 8004c20:	4a07      	ldr	r2, [pc, #28]	; (8004c40 <z_bss_zero+0x24>)
 8004c22:	2100      	movs	r1, #0
 8004c24:	1a12      	subs	r2, r2, r0
 8004c26:	f003 f9b7 	bl	8007f98 <memset>
#ifdef DT_CCM_BASE_ADDRESS
	(void)memset(&__ccm_bss_start, 0,
 8004c2a:	4806      	ldr	r0, [pc, #24]	; (8004c44 <z_bss_zero+0x28>)
 8004c2c:	4a06      	ldr	r2, [pc, #24]	; (8004c48 <z_bss_zero+0x2c>)
 8004c2e:	2100      	movs	r1, #0
 8004c30:	1a12      	subs	r2, r2, r0
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((u32_t) &__gcov_bss_end - (u32_t) &__gcov_bss_start));
#endif
}
 8004c32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memset(&__ccm_bss_start, 0,
 8004c36:	f003 b9af 	b.w	8007f98 <memset>
 8004c3a:	bf00      	nop
 8004c3c:	20000000 	.word	0x20000000
 8004c40:	20000978 	.word	0x20000978
 8004c44:	10000000 	.word	0x10000000
 8004c48:	10000000 	.word	0x10000000

08004c4c <z_data_copy>:
 * @return N/A
 */
void z_data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 8004c4c:	4809      	ldr	r0, [pc, #36]	; (8004c74 <z_data_copy+0x28>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8004c4e:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <z_data_copy+0x2c>)
 8004c50:	490a      	ldr	r1, [pc, #40]	; (8004c7c <z_data_copy+0x30>)
{
 8004c52:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8004c54:	1a12      	subs	r2, r2, r0
 8004c56:	f003 f975 	bl	8007f44 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 8004c5a:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <z_data_copy+0x34>)
 8004c5c:	4909      	ldr	r1, [pc, #36]	; (8004c84 <z_data_copy+0x38>)
 8004c5e:	480a      	ldr	r0, [pc, #40]	; (8004c88 <z_data_copy+0x3c>)
 8004c60:	f003 f970 	bl	8007f44 <memcpy>
		 (uintptr_t) &_ramfunc_ram_size);
#endif /* CONFIG_ARCH_HAS_RAMFUNC_SUPPORT */
#ifdef DT_CCM_BASE_ADDRESS
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
		 __ccm_data_end - __ccm_data_start);
 8004c64:	4809      	ldr	r0, [pc, #36]	; (8004c8c <z_data_copy+0x40>)
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
 8004c66:	4a0a      	ldr	r2, [pc, #40]	; (8004c90 <z_data_copy+0x44>)
 8004c68:	490a      	ldr	r1, [pc, #40]	; (8004c94 <z_data_copy+0x48>)
 8004c6a:	1a12      	subs	r2, r2, r0
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8004c6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
 8004c70:	f003 b968 	b.w	8007f44 <memcpy>
 8004c74:	20002944 	.word	0x20002944
 8004c78:	20002b24 	.word	0x20002b24
 8004c7c:	0800a420 	.word	0x0800a420
 8004c80:	00000000 	.word	0x00000000
 8004c84:	0800a420 	.word	0x0800a420
 8004c88:	20000000 	.word	0x20000000
 8004c8c:	10000000 	.word	0x10000000
 8004c90:	10000000 	.word	0x10000000
 8004c94:	0800a600 	.word	0x0800a600

08004c98 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8004c98:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8004c9a:	2002      	movs	r0, #2
 8004c9c:	f7ff ff78 	bl	8004b90 <z_sys_device_do_config_level>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 8004ca0:	2003      	movs	r0, #3
 8004ca2:	f7ff ff75 	bl	8004b90 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
 8004ca6:	f000 fde3 	bl	8005870 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
 8004caa:	f7fb fd3f 	bl	800072c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8004cae:	4a03      	ldr	r2, [pc, #12]	; (8004cbc <bg_thread_main+0x24>)
 8004cb0:	7b13      	ldrb	r3, [r2, #12]
 8004cb2:	f023 0301 	bic.w	r3, r3, #1
 8004cb6:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8004cb8:	bd08      	pop	{r3, pc}
 8004cba:	bf00      	nop
 8004cbc:	200007e8 	.word	0x200007e8

08004cc0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 8004cc0:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
 8004cc2:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <z_cstart+0xdc>)
 8004cc4:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004cc6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8004cca:	4c35      	ldr	r4, [pc, #212]	; (8004da0 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
 8004ccc:	4e35      	ldr	r6, [pc, #212]	; (8004da4 <z_cstart+0xe4>)
 8004cce:	6963      	ldr	r3, [r4, #20]
 8004cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cd4:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd6:	2500      	movs	r5, #0
 8004cd8:	23f0      	movs	r3, #240	; 0xf0
 8004cda:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8004cde:	77e5      	strb	r5, [r4, #31]
 8004ce0:	7625      	strb	r5, [r4, #24]
 8004ce2:	7665      	strb	r5, [r4, #25]
 8004ce4:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8004ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ce8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004cec:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8004cee:	f7fe fcdb 	bl	80036a8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8004cf2:	f7fe fbbf 	bl	8003474 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cfa:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8004cfc:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
 8004cfe:	ab07      	add	r3, sp, #28
 8004d00:	226c      	movs	r2, #108	; 0x6c
 8004d02:	4629      	mov	r1, r5
 8004d04:	4618      	mov	r0, r3
 8004d06:	f003 f947 	bl	8007f98 <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
 8004d0a:	4c27      	ldr	r4, [pc, #156]	; (8004da8 <z_cstart+0xe8>)
	struct k_thread dummy_thread = {
 8004d0c:	2701      	movs	r7, #1
	_current = &dummy_thread;
 8004d0e:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8004d10:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
 8004d12:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8004d16:	f7ff ff3b 	bl	8004b90 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	f7ff ff38 	bl	8004b90 <z_sys_device_do_config_level>
	z_sched_init();
 8004d20:	f000 fc06 	bl	8005530 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
 8004d24:	4b21      	ldr	r3, [pc, #132]	; (8004dac <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
 8004d26:	6226      	str	r6, [r4, #32]
	z_setup_new_thread(&z_main_thread, z_main_stack,
 8004d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d2c:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8004d30:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8004d34:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <z_cstart+0xf0>)
 8004d36:	491f      	ldr	r1, [pc, #124]	; (8004db4 <z_cstart+0xf4>)
 8004d38:	e9cd 5500 	strd	r5, r5, [sp]
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	f000 fd15 	bl	800576c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004d42:	7b73      	ldrb	r3, [r6, #13]
 8004d44:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8004d48:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004d4c:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8004d4e:	d104      	bne.n	8004d5a <z_cstart+0x9a>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
 8004d50:	69b3      	ldr	r3, [r6, #24]
 8004d52:	b913      	cbnz	r3, 8004d5a <z_cstart+0x9a>
		z_add_thread_to_ready_q(thread);
 8004d54:	4630      	mov	r0, r6
 8004d56:	f000 fa35 	bl	80051c4 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
 8004d5a:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <z_cstart+0xf8>)
 8004d5c:	4d17      	ldr	r5, [pc, #92]	; (8004dbc <z_cstart+0xfc>)
 8004d5e:	9305      	str	r3, [sp, #20]
 8004d60:	2201      	movs	r2, #1
 8004d62:	230f      	movs	r3, #15
 8004d64:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d74:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <z_cstart+0x100>)
 8004d76:	4913      	ldr	r1, [pc, #76]	; (8004dc4 <z_cstart+0x104>)
 8004d78:	4628      	mov	r0, r5
 8004d7a:	f000 fcf7 	bl	800576c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004d7e:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
 8004d80:	60e5      	str	r5, [r4, #12]
 8004d82:	f023 0304 	bic.w	r3, r3, #4
 8004d86:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <z_cstart+0x108>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
 8004d8a:	490a      	ldr	r1, [pc, #40]	; (8004db4 <z_cstart+0xf4>)
 8004d8c:	4805      	ldr	r0, [pc, #20]	; (8004da4 <z_cstart+0xe4>)
	list->tail = (sys_dnode_t *)list;
 8004d8e:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8004d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <z_cstart+0xf0>)
 8004d98:	f7fe fb4e 	bl	8003438 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8004d9c:	200022b8 	.word	0x200022b8
 8004da0:	e000ed00 	.word	0xe000ed00
 8004da4:	200007e8 	.word	0x200007e8
 8004da8:	20000854 	.word	0x20000854
 8004dac:	0800a401 	.word	0x0800a401
 8004db0:	08004c99 	.word	0x08004c99
 8004db4:	20001578 	.word	0x20001578
 8004db8:	0800a406 	.word	0x0800a406
 8004dbc:	2000077c 	.word	0x2000077c
 8004dc0:	08008d93 	.word	0x08008d93
 8004dc4:	20001978 	.word	0x20001978
 8004dc8:	2000086c 	.word	0x2000086c

08004dcc <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
 8004dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 8004dd6:	f100 0808 	add.w	r8, r0, #8
 8004dda:	f04f 0210 	mov.w	r2, #16
 8004dde:	f3ef 8611 	mrs	r6, BASEPRI
 8004de2:	f382 8811 	msr	BASEPRI, r2
 8004de6:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
 8004dea:	6a01      	ldr	r1, [r0, #32]
 8004dec:	68c2      	ldr	r2, [r0, #12]
 8004dee:	4291      	cmp	r1, r2
 8004df0:	d22e      	bcs.n	8004e50 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8004df2:	f003 fdf2 	bl	80089da <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
 8004df6:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
 8004df8:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
 8004dfa:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
 8004dfc:	b198      	cbz	r0, 8004e26 <z_impl_k_msgq_put+0x5a>
			(void)memcpy(pending_thread->base.swap_data, data,
 8004dfe:	6940      	ldr	r0, [r0, #20]
 8004e00:	f003 f8a0 	bl	8007f44 <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8004e04:	2300      	movs	r3, #0
 8004e06:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8004e08:	7b6b      	ldrb	r3, [r5, #13]
 8004e0a:	06db      	lsls	r3, r3, #27
 8004e0c:	d104      	bne.n	8004e18 <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
 8004e0e:	69ab      	ldr	r3, [r5, #24]
 8004e10:	b913      	cbnz	r3, 8004e18 <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
 8004e12:	4628      	mov	r0, r5
 8004e14:	f000 f9d6 	bl	80051c4 <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
 8004e18:	4640      	mov	r0, r8
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	f003 fd67 	bl	80088ee <z_reschedule>
			return 0;
 8004e20:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8004e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
 8004e26:	69e0      	ldr	r0, [r4, #28]
 8004e28:	f003 f88c 	bl	8007f44 <memcpy>
			msgq->write_ptr += msgq->msg_size;
 8004e2c:	69e3      	ldr	r3, [r4, #28]
 8004e2e:	68a2      	ldr	r2, [r4, #8]
 8004e30:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
 8004e32:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
 8004e34:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
 8004e36:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
 8004e38:	bf04      	itt	eq
 8004e3a:	6923      	ldreq	r3, [r4, #16]
 8004e3c:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
 8004e3e:	6a23      	ldr	r3, [r4, #32]
 8004e40:	3301      	adds	r3, #1
 8004e42:	6223      	str	r3, [r4, #32]
		result = 0;
 8004e44:	2000      	movs	r0, #0
	__asm__ volatile(
 8004e46:	f386 8811 	msr	BASEPRI, r6
 8004e4a:	f3bf 8f6f 	isb	sy
	return result;
 8004e4e:	e7e8      	b.n	8004e22 <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
 8004e50:	b14b      	cbz	r3, 8004e66 <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
 8004e52:	4a06      	ldr	r2, [pc, #24]	; (8004e6c <z_impl_k_msgq_put+0xa0>)
 8004e54:	6892      	ldr	r2, [r2, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8004e56:	4631      	mov	r1, r6
		_current->base.swap_data = data;
 8004e58:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	4640      	mov	r0, r8
}
 8004e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8004e62:	f000 bae1 	b.w	8005428 <z_pend_curr>
		result = -ENOMSG;
 8004e66:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8004e6a:	e7ec      	b.n	8004e46 <z_impl_k_msgq_put+0x7a>
 8004e6c:	20000854 	.word	0x20000854

08004e70 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
 8004e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e74:	4604      	mov	r4, r0
 8004e76:	4613      	mov	r3, r2
 8004e78:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 8004e7a:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
 8004e7e:	f04f 0210 	mov.w	r2, #16
 8004e82:	f3ef 8611 	mrs	r6, BASEPRI
 8004e86:	f382 8811 	msr	BASEPRI, r2
 8004e8a:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
 8004e8e:	6a22      	ldr	r2, [r4, #32]
 8004e90:	2a00      	cmp	r2, #0
 8004e92:	d037      	beq.n	8004f04 <z_impl_k_msgq_get+0x94>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
 8004e94:	68a2      	ldr	r2, [r4, #8]
 8004e96:	69a1      	ldr	r1, [r4, #24]
 8004e98:	f003 f854 	bl	8007f44 <memcpy>
		msgq->read_ptr += msgq->msg_size;
 8004e9c:	69a3      	ldr	r3, [r4, #24]
 8004e9e:	68a2      	ldr	r2, [r4, #8]
 8004ea0:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
 8004ea2:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
 8004ea4:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
 8004ea6:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
 8004ea8:	bf04      	itt	eq
 8004eaa:	6923      	ldreq	r3, [r4, #16]
 8004eac:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
 8004eae:	6a23      	ldr	r3, [r4, #32]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f003 fd90 	bl	80089da <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8004eba:	4605      	mov	r5, r0
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d02e      	beq.n	8004f1e <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
 8004ec0:	68a2      	ldr	r2, [r4, #8]
 8004ec2:	6941      	ldr	r1, [r0, #20]
 8004ec4:	69e0      	ldr	r0, [r4, #28]
 8004ec6:	f003 f83d 	bl	8007f44 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 8004eca:	69e3      	ldr	r3, [r4, #28]
 8004ecc:	68a2      	ldr	r2, [r4, #8]
 8004ece:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
 8004ed0:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
 8004ed2:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
 8004ed4:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
 8004ed6:	bf04      	itt	eq
 8004ed8:	6923      	ldreq	r3, [r4, #16]
 8004eda:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
 8004edc:	6a23      	ldr	r3, [r4, #32]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	6223      	str	r3, [r4, #32]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8004ee6:	7b6b      	ldrb	r3, [r5, #13]
 8004ee8:	06db      	lsls	r3, r3, #27
 8004eea:	d104      	bne.n	8004ef6 <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
 8004eec:	69ab      	ldr	r3, [r5, #24]
 8004eee:	b913      	cbnz	r3, 8004ef6 <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f000 f967 	bl	80051c4 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	4631      	mov	r1, r6
 8004efa:	f003 fcf8 	bl	80088ee <z_reschedule>
			return 0;
 8004efe:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8004f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
 8004f04:	b14b      	cbz	r3, 8004f1a <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
 8004f06:	4a08      	ldr	r2, [pc, #32]	; (8004f28 <z_impl_k_msgq_get+0xb8>)
 8004f08:	6892      	ldr	r2, [r2, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8004f0a:	4638      	mov	r0, r7
		_current->base.swap_data = data;
 8004f0c:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8004f0e:	4622      	mov	r2, r4
 8004f10:	4631      	mov	r1, r6
}
 8004f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8004f16:	f000 ba87 	b.w	8005428 <z_pend_curr>
		result = -ENOMSG;
 8004f1a:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
 8004f1e:	f386 8811 	msr	BASEPRI, r6
 8004f22:	f3bf 8f6f 	isb	sy
	return result;
 8004f26:	e7eb      	b.n	8004f00 <z_impl_k_msgq_get+0x90>
 8004f28:	20000854 	.word	0x20000854

08004f2c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	4604      	mov	r4, r0
 8004f30:	460f      	mov	r7, r1
	__asm__ volatile(
 8004f32:	f04f 0310 	mov.w	r3, #16
 8004f36:	f3ef 8511 	mrs	r5, BASEPRI
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8004f42:	68c2      	ldr	r2, [r0, #12]
 8004f44:	4930      	ldr	r1, [pc, #192]	; (8005008 <z_impl_k_mutex_lock+0xdc>)
 8004f46:	b15a      	cbz	r2, 8004f60 <z_impl_k_mutex_lock+0x34>
 8004f48:	6880      	ldr	r0, [r0, #8]
 8004f4a:	688e      	ldr	r6, [r1, #8]
 8004f4c:	42b0      	cmp	r0, r6
 8004f4e:	d015      	beq.n	8004f7c <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
 8004f50:	b9b7      	cbnz	r7, 8004f80 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
 8004f52:	f385 8811 	msr	BASEPRI, r5
 8004f56:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
 8004f5a:	f06f 000f 	mvn.w	r0, #15
 8004f5e:	e00c      	b.n	8004f7a <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
 8004f60:	688b      	ldr	r3, [r1, #8]
 8004f62:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8004f66:	6123      	str	r3, [r4, #16]
		mutex->lock_count++;
 8004f68:	3201      	adds	r2, #1
		mutex->owner = _current;
 8004f6a:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
 8004f6c:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
 8004f6e:	60a3      	str	r3, [r4, #8]
 8004f70:	f385 8811 	msr	BASEPRI, r5
 8004f74:	f3bf 8f6f 	isb	sy
		return 0;
 8004f78:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
 8004f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
 8004f7c:	6923      	ldr	r3, [r4, #16]
 8004f7e:	e7f2      	b.n	8004f66 <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8004f80:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8004f84:	f996 100e 	ldrsb.w	r1, [r6, #14]
 8004f88:	4299      	cmp	r1, r3
 8004f8a:	bfa8      	it	ge
 8004f8c:	4619      	movge	r1, r3
 8004f8e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8004f92:	4299      	cmp	r1, r3
 8004f94:	da2b      	bge.n	8004fee <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
 8004f96:	f000 fa89 	bl	80054ac <z_set_prio>
 8004f9a:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	481a      	ldr	r0, [pc, #104]	; (800500c <z_impl_k_mutex_lock+0xe0>)
 8004fa4:	f000 fa40 	bl	8005428 <z_pend_curr>
	if (got_mutex == 0) {
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d0e6      	beq.n	8004f7a <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
 8004fac:	f04f 0310 	mov.w	r3, #16
 8004fb0:	f3ef 8511 	mrs	r5, BASEPRI
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004fc0:	429c      	cmp	r4, r3
 8004fc2:	d007      	beq.n	8004fd4 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
 8004fc4:	b133      	cbz	r3, 8004fd4 <z_impl_k_mutex_lock+0xa8>
 8004fc6:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8004fca:	4299      	cmp	r1, r3
 8004fcc:	bfa8      	it	ge
 8004fce:	4619      	movge	r1, r3
 8004fd0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8004fd4:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
 8004fd6:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8004fda:	4299      	cmp	r1, r3
 8004fdc:	d109      	bne.n	8004ff2 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
 8004fde:	b16e      	cbz	r6, 8004ffc <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	480a      	ldr	r0, [pc, #40]	; (800500c <z_impl_k_mutex_lock+0xe0>)
 8004fe4:	f003 fc83 	bl	80088ee <z_reschedule>
	return -EAGAIN;
 8004fe8:	f06f 000a 	mvn.w	r0, #10
 8004fec:	e7c5      	b.n	8004f7a <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
 8004fee:	2600      	movs	r6, #0
 8004ff0:	e7d4      	b.n	8004f9c <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
 8004ff2:	f000 fa5b 	bl	80054ac <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d1f2      	bne.n	8004fe0 <z_impl_k_mutex_lock+0xb4>
 8004ffa:	e7f0      	b.n	8004fde <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
 8004ffc:	f385 8811 	msr	BASEPRI, r5
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	e7f0      	b.n	8004fe8 <z_impl_k_mutex_lock+0xbc>
 8005006:	bf00      	nop
 8005008:	20000854 	.word	0x20000854
 800500c:	20000978 	.word	0x20000978

08005010 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 8005010:	b538      	push	{r3, r4, r5, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 8005012:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <z_impl_k_mutex_unlock+0x78>)
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	7bd3      	ldrb	r3, [r2, #15]
 8005018:	3b01      	subs	r3, #1
 800501a:	4604      	mov	r4, r0
 800501c:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
 800501e:	68c3      	ldr	r3, [r0, #12]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d005      	beq.n	8005030 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
 8005024:	3b01      	subs	r3, #1
 8005026:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
 8005028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sched_unlock();
 800502c:	f000 b8ae 	b.w	800518c <k_sched_unlock>
	__asm__ volatile(
 8005030:	f04f 0310 	mov.w	r3, #16
 8005034:	f3ef 8511 	mrs	r5, BASEPRI
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8005040:	6901      	ldr	r1, [r0, #16]
 8005042:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
 8005044:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8005048:	4299      	cmp	r1, r3
 800504a:	d001      	beq.n	8005050 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
 800504c:	f000 fa2e 	bl	80054ac <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8005050:	4620      	mov	r0, r4
 8005052:	f003 fcc2 	bl	80089da <z_unpend_first_thread>
	mutex->owner = new_owner;
 8005056:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8005058:	b180      	cbz	r0, 800507c <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
 800505a:	f990 200e 	ldrsb.w	r2, [r0, #14]
 800505e:	6122      	str	r2, [r4, #16]
 8005060:	2200      	movs	r2, #0
 8005062:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8005064:	7b42      	ldrb	r2, [r0, #13]
 8005066:	06d2      	lsls	r2, r2, #27
 8005068:	d103      	bne.n	8005072 <z_impl_k_mutex_unlock+0x62>
	if (z_is_thread_ready(thread)) {
 800506a:	6983      	ldr	r3, [r0, #24]
 800506c:	b90b      	cbnz	r3, 8005072 <z_impl_k_mutex_unlock+0x62>
		z_add_thread_to_ready_q(thread);
 800506e:	f000 f8a9 	bl	80051c4 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
 8005072:	4629      	mov	r1, r5
 8005074:	4805      	ldr	r0, [pc, #20]	; (800508c <z_impl_k_mutex_unlock+0x7c>)
 8005076:	f003 fc3a 	bl	80088ee <z_reschedule>
 800507a:	e7d5      	b.n	8005028 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
 800507c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800507e:	f385 8811 	msr	BASEPRI, r5
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	e7cf      	b.n	8005028 <z_impl_k_mutex_unlock+0x18>
 8005088:	20000854 	.word	0x20000854
 800508c:	20000978 	.word	0x20000978

08005090 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8005090:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 8005092:	4c08      	ldr	r4, [pc, #32]	; (80050b4 <z_reset_time_slice+0x24>)
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	b15b      	cbz	r3, 80050b0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8005098:	f7fe f8ee 	bl	8003278 <z_clock_elapsed>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	4a06      	ldr	r2, [pc, #24]	; (80050b8 <z_reset_time_slice+0x28>)
 80050a0:	4418      	add	r0, r3
 80050a2:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 80050a4:	2100      	movs	r1, #0
 80050a6:	4618      	mov	r0, r3
	}
}
 80050a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
 80050ac:	f003 bd41 	b.w	8008b32 <z_set_timeout_expiry>
}
 80050b0:	bd10      	pop	{r4, pc}
 80050b2:	bf00      	nop
 80050b4:	20000888 	.word	0x20000888
 80050b8:	20000854 	.word	0x20000854

080050bc <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
 80050bc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80050be:	f04f 0310 	mov.w	r3, #16
 80050c2:	f3ef 8411 	mrs	r4, BASEPRI
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 80050ce:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <k_sched_time_slice_set+0x34>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
 80050d4:	4a07      	ldr	r2, [pc, #28]	; (80050f4 <k_sched_time_slice_set+0x38>)
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((u32_t)t) * (to_hz / from_hz);
 80050d6:	230a      	movs	r3, #10
 80050d8:	4343      	muls	r3, r0
 80050da:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <k_sched_time_slice_set+0x3c>)
 80050de:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 80050e0:	f7ff ffd6 	bl	8005090 <z_reset_time_slice>
	__asm__ volatile(
 80050e4:	f384 8811 	msr	BASEPRI, r4
 80050e8:	f3bf 8f6f 	isb	sy
	}
}
 80050ec:	bd10      	pop	{r4, pc}
 80050ee:	bf00      	nop
 80050f0:	20000854 	.word	0x20000854
 80050f4:	20000888 	.word	0x20000888
 80050f8:	20000884 	.word	0x20000884

080050fc <k_sched_lock>:
	__asm__ volatile(
 80050fc:	f04f 0310 	mov.w	r3, #16
 8005100:	f3ef 8111 	mrs	r1, BASEPRI
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <k_sched_lock+0x24>)
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	7bd3      	ldrb	r3, [r2, #15]
 8005112:	3b01      	subs	r3, #1
 8005114:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8005116:	f381 8811 	msr	BASEPRI, r1
 800511a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 800511e:	4770      	bx	lr
 8005120:	20000854 	.word	0x20000854

08005124 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 8005124:	4b09      	ldr	r3, [pc, #36]	; (800514c <z_priq_dumb_remove+0x28>)
 8005126:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800512a:	4282      	cmp	r2, r0
 800512c:	d105      	bne.n	800513a <z_priq_dumb_remove+0x16>
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	428b      	cmp	r3, r1
 8005132:	d102      	bne.n	800513a <z_priq_dumb_remove+0x16>
 8005134:	7b4b      	ldrb	r3, [r1, #13]
 8005136:	06db      	lsls	r3, r3, #27
 8005138:	d106      	bne.n	8005148 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 800513a:	e9d1 3200 	ldrd	r3, r2, [r1]
 800513e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8005140:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8005142:	2300      	movs	r3, #0
	node->prev = NULL;
 8005144:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20000854 	.word	0x20000854

08005150 <update_cache>:
{
 8005150:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 8005152:	4c0d      	ldr	r4, [pc, #52]	; (8005188 <update_cache+0x38>)
{
 8005154:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 8005156:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800515a:	f003 fc07 	bl	800896c <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
 800515e:	4605      	mov	r5, r0
 8005160:	b900      	cbnz	r0, 8005164 <update_cache+0x14>
 8005162:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 8005164:	68a3      	ldr	r3, [r4, #8]
 8005166:	b94a      	cbnz	r2, 800517c <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
 8005168:	7b5a      	ldrb	r2, [r3, #13]
 800516a:	06d2      	lsls	r2, r2, #27
 800516c:	d106      	bne.n	800517c <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800516e:	69aa      	ldr	r2, [r5, #24]
 8005170:	b922      	cbnz	r2, 800517c <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
 8005172:	89da      	ldrh	r2, [r3, #14]
 8005174:	2a7f      	cmp	r2, #127	; 0x7f
 8005176:	d901      	bls.n	800517c <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
 8005178:	6223      	str	r3, [r4, #32]
}
 800517a:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 800517c:	429d      	cmp	r5, r3
 800517e:	d001      	beq.n	8005184 <update_cache+0x34>
			z_reset_time_slice();
 8005180:	f7ff ff86 	bl	8005090 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8005184:	6225      	str	r5, [r4, #32]
}
 8005186:	e7f8      	b.n	800517a <update_cache+0x2a>
 8005188:	20000854 	.word	0x20000854

0800518c <k_sched_unlock>:
{
 800518c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800518e:	f04f 0310 	mov.w	r3, #16
 8005192:	f3ef 8411 	mrs	r4, BASEPRI
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 800519e:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <k_sched_unlock+0x34>)
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	7bd3      	ldrb	r3, [r2, #15]
 80051a4:	3301      	adds	r3, #1
 80051a6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80051a8:	2000      	movs	r0, #0
 80051aa:	f7ff ffd1 	bl	8005150 <update_cache>
	__asm__ volatile(
 80051ae:	f384 8811 	msr	BASEPRI, r4
 80051b2:	f3bf 8f6f 	isb	sy
}
 80051b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 80051ba:	f003 bbaf 	b.w	800891c <z_reschedule_unlocked>
 80051be:	bf00      	nop
 80051c0:	20000854 	.word	0x20000854

080051c4 <z_add_thread_to_ready_q>:
{
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 80051c6:	f04f 0310 	mov.w	r3, #16
 80051ca:	f3ef 8411 	mrs	r4, BASEPRI
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80051d6:	4a15      	ldr	r2, [pc, #84]	; (800522c <z_add_thread_to_ready_q+0x68>)
 80051d8:	4611      	mov	r1, r2
 80051da:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80051de:	428b      	cmp	r3, r1
 80051e0:	d01d      	beq.n	800521e <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80051e2:	b1e3      	cbz	r3, 800521e <z_add_thread_to_ready_q+0x5a>
 80051e4:	6a96      	ldr	r6, [r2, #40]	; 0x28
	if (thread_1->base.prio < thread_2->base.prio) {
 80051e6:	f990 500e 	ldrsb.w	r5, [r0, #14]
 80051ea:	f993 700e 	ldrsb.w	r7, [r3, #14]
 80051ee:	42af      	cmp	r7, r5
 80051f0:	dd10      	ble.n	8005214 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
 80051f2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80051f4:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 80051f8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80051fa:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 80051fc:	7b43      	ldrb	r3, [r0, #13]
 80051fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005202:	7343      	strb	r3, [r0, #13]
		update_cache(0);
 8005204:	2000      	movs	r0, #0
 8005206:	f7ff ffa3 	bl	8005150 <update_cache>
	__asm__ volatile(
 800520a:	f384 8811 	msr	BASEPRI, r4
 800520e:	f3bf 8f6f 	isb	sy
}
 8005212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8005214:	42b3      	cmp	r3, r6
 8005216:	d002      	beq.n	800521e <z_add_thread_to_ready_q+0x5a>
 8005218:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e5      	bne.n	80051ea <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
 800521e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005220:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
 8005222:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->next = list;
 8005224:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
 8005226:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8005228:	6290      	str	r0, [r2, #40]	; 0x28
 800522a:	e7e7      	b.n	80051fc <z_add_thread_to_ready_q+0x38>
 800522c:	20000854 	.word	0x20000854

08005230 <z_move_thread_to_end_of_prio_q>:
{
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	4604      	mov	r4, r0
	__asm__ volatile(
 8005234:	f04f 0310 	mov.w	r3, #16
 8005238:	f3ef 8511 	mrs	r5, BASEPRI
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8005244:	7b43      	ldrb	r3, [r0, #13]
 8005246:	065a      	lsls	r2, r3, #25
 8005248:	d503      	bpl.n	8005252 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 800524a:	4601      	mov	r1, r0
 800524c:	4817      	ldr	r0, [pc, #92]	; (80052ac <z_move_thread_to_end_of_prio_q+0x7c>)
 800524e:	f7ff ff69 	bl	8005124 <z_priq_dumb_remove>
	return list->head == list;
 8005252:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <z_move_thread_to_end_of_prio_q+0x80>)
 8005254:	e9d2 3009 	ldrd	r3, r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005258:	f102 0124 	add.w	r1, r2, #36	; 0x24
 800525c:	428b      	cmp	r3, r1
 800525e:	d01f      	beq.n	80052a0 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005260:	b1f3      	cbz	r3, 80052a0 <z_move_thread_to_end_of_prio_q+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
 8005262:	f994 600e 	ldrsb.w	r6, [r4, #14]
 8005266:	f993 700e 	ldrsb.w	r7, [r3, #14]
 800526a:	42b7      	cmp	r7, r6
 800526c:	dd13      	ble.n	8005296 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
 800526e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 8005270:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
 8005274:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 8005276:	605c      	str	r4, [r3, #4]
 8005278:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 800527a:	6890      	ldr	r0, [r2, #8]
 800527c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005280:	7363      	strb	r3, [r4, #13]
 8005282:	1b03      	subs	r3, r0, r4
 8005284:	4258      	negs	r0, r3
 8005286:	4158      	adcs	r0, r3
 8005288:	f7ff ff62 	bl	8005150 <update_cache>
	__asm__ volatile(
 800528c:	f385 8811 	msr	BASEPRI, r5
 8005290:	f3bf 8f6f 	isb	sy
}
 8005294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8005296:	4283      	cmp	r3, r0
 8005298:	d002      	beq.n	80052a0 <z_move_thread_to_end_of_prio_q+0x70>
 800529a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e2      	bne.n	8005266 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
 80052a0:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
 80052a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80052a6:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80052a8:	6294      	str	r4, [r2, #40]	; 0x28
 80052aa:	e7e5      	b.n	8005278 <z_move_thread_to_end_of_prio_q+0x48>
 80052ac:	20000878 	.word	0x20000878
 80052b0:	20000854 	.word	0x20000854

080052b4 <z_time_slice>:
	if (pending_current == _current) {
 80052b4:	4a15      	ldr	r2, [pc, #84]	; (800530c <z_time_slice+0x58>)
 80052b6:	4916      	ldr	r1, [pc, #88]	; (8005310 <z_time_slice+0x5c>)
{
 80052b8:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
 80052ba:	680c      	ldr	r4, [r1, #0]
 80052bc:	6893      	ldr	r3, [r2, #8]
 80052be:	42a3      	cmp	r3, r4
 80052c0:	4614      	mov	r4, r2
 80052c2:	d103      	bne.n	80052cc <z_time_slice+0x18>
}
 80052c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
 80052c8:	f7ff bee2 	b.w	8005090 <z_reset_time_slice>
	pending_current = NULL;
 80052cc:	2500      	movs	r5, #0
 80052ce:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
 80052d0:	4910      	ldr	r1, [pc, #64]	; (8005314 <z_time_slice+0x60>)
 80052d2:	6809      	ldr	r1, [r1, #0]
 80052d4:	b1b9      	cbz	r1, 8005306 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
 80052d6:	89d9      	ldrh	r1, [r3, #14]
 80052d8:	297f      	cmp	r1, #127	; 0x7f
 80052da:	d814      	bhi.n	8005306 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80052dc:	490e      	ldr	r1, [pc, #56]	; (8005318 <z_time_slice+0x64>)
 80052de:	f993 500e 	ldrsb.w	r5, [r3, #14]
 80052e2:	6809      	ldr	r1, [r1, #0]
 80052e4:	428d      	cmp	r5, r1
 80052e6:	db0e      	blt.n	8005306 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
 80052e8:	490c      	ldr	r1, [pc, #48]	; (800531c <z_time_slice+0x68>)
 80052ea:	428b      	cmp	r3, r1
 80052ec:	d00b      	beq.n	8005306 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
 80052ee:	6999      	ldr	r1, [r3, #24]
 80052f0:	b949      	cbnz	r1, 8005306 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
 80052f2:	6911      	ldr	r1, [r2, #16]
 80052f4:	4281      	cmp	r1, r0
 80052f6:	dc03      	bgt.n	8005300 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff ff99 	bl	8005230 <z_move_thread_to_end_of_prio_q>
 80052fe:	e7e1      	b.n	80052c4 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
 8005300:	1a09      	subs	r1, r1, r0
 8005302:	6111      	str	r1, [r2, #16]
}
 8005304:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	6123      	str	r3, [r4, #16]
 800530a:	e7fb      	b.n	8005304 <z_time_slice+0x50>
 800530c:	20000854 	.word	0x20000854
 8005310:	20000880 	.word	0x20000880
 8005314:	20000888 	.word	0x20000888
 8005318:	20000884 	.word	0x20000884
 800531c:	2000077c 	.word	0x2000077c

08005320 <z_remove_thread_from_ready_q>:
{
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	4604      	mov	r4, r0
	__asm__ volatile(
 8005324:	f04f 0310 	mov.w	r3, #16
 8005328:	f3ef 8511 	mrs	r5, BASEPRI
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8005334:	7b43      	ldrb	r3, [r0, #13]
 8005336:	065a      	lsls	r2, r3, #25
 8005338:	d507      	bpl.n	800534a <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 800533a:	4601      	mov	r1, r0
 800533c:	4809      	ldr	r0, [pc, #36]	; (8005364 <z_remove_thread_from_ready_q+0x44>)
 800533e:	f7ff fef1 	bl	8005124 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8005342:	7b63      	ldrb	r3, [r4, #13]
 8005344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005348:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 800534a:	4b07      	ldr	r3, [pc, #28]	; (8005368 <z_remove_thread_from_ready_q+0x48>)
 800534c:	6898      	ldr	r0, [r3, #8]
 800534e:	1b03      	subs	r3, r0, r4
 8005350:	4258      	negs	r0, r3
 8005352:	4158      	adcs	r0, r3
 8005354:	f7ff fefc 	bl	8005150 <update_cache>
	__asm__ volatile(
 8005358:	f385 8811 	msr	BASEPRI, r5
 800535c:	f3bf 8f6f 	isb	sy
}
 8005360:	bd38      	pop	{r3, r4, r5, pc}
 8005362:	bf00      	nop
 8005364:	20000878 	.word	0x20000878
 8005368:	20000854 	.word	0x20000854

0800536c <pend>:
{
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	4604      	mov	r4, r0
 8005370:	460d      	mov	r5, r1
 8005372:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
 8005374:	f7ff ffd4 	bl	8005320 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
 8005378:	7b63      	ldrb	r3, [r4, #13]
 800537a:	f043 0302 	orr.w	r3, r3, #2
 800537e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8005380:	b17d      	cbz	r5, 80053a2 <pend+0x36>
	return list->head == list;
 8005382:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8005384:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005386:	429d      	cmp	r5, r3
 8005388:	d01f      	beq.n	80053ca <pend+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800538a:	b1f3      	cbz	r3, 80053ca <pend+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
 800538c:	f994 200e 	ldrsb.w	r2, [r4, #14]
 8005390:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8005394:	4291      	cmp	r1, r2
 8005396:	dd12      	ble.n	80053be <pend+0x52>
	node->prev = successor->prev;
 8005398:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800539a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
 800539e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80053a0:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
 80053a2:	1c73      	adds	r3, r6, #1
 80053a4:	d018      	beq.n	80053d8 <pend+0x6c>
		ticks = _TICK_ALIGN + k_ms_to_ticks_ceil32(timeout);
 80053a6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80053aa:	220a      	movs	r2, #10
 80053ac:	4372      	muls	r2, r6

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 80053ae:	f104 0018 	add.w	r0, r4, #24
 80053b2:	3201      	adds	r2, #1
 80053b4:	4909      	ldr	r1, [pc, #36]	; (80053dc <pend+0x70>)
}
 80053b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053ba:	f000 baff 	b.w	80059bc <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
 80053be:	6869      	ldr	r1, [r5, #4]
 80053c0:	428b      	cmp	r3, r1
 80053c2:	d002      	beq.n	80053ca <pend+0x5e>
 80053c4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e2      	bne.n	8005390 <pend+0x24>
	node->prev = list->tail;
 80053ca:	686b      	ldr	r3, [r5, #4]
 80053cc:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 80053ce:	686b      	ldr	r3, [r5, #4]
	node->next = list;
 80053d0:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
 80053d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80053d4:	606c      	str	r4, [r5, #4]
 80053d6:	e7e4      	b.n	80053a2 <pend+0x36>
}
 80053d8:	bd70      	pop	{r4, r5, r6, pc}
 80053da:	bf00      	nop
 80053dc:	08008979 	.word	0x08008979

080053e0 <z_pend_curr_irqlock>:
{
 80053e0:	b570      	push	{r4, r5, r6, lr}
	pend(_current, wait_q, timeout);
 80053e2:	4d0f      	ldr	r5, [pc, #60]	; (8005420 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
 80053e4:	4c0f      	ldr	r4, [pc, #60]	; (8005424 <z_pend_curr_irqlock+0x44>)
{
 80053e6:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
 80053e8:	68a8      	ldr	r0, [r5, #8]
 80053ea:	f7ff ffbf 	bl	800536c <pend>
	pending_current = _current;
 80053ee:	68ab      	ldr	r3, [r5, #8]
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	4630      	mov	r0, r6
 80053f4:	f7fd ff82 	bl	80032fc <arch_swap>
	__asm__ volatile(
 80053f8:	f04f 0210 	mov.w	r2, #16
 80053fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005400:	f382 8811 	msr	BASEPRI, r2
 8005404:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
 8005408:	6822      	ldr	r2, [r4, #0]
 800540a:	68a9      	ldr	r1, [r5, #8]
 800540c:	4291      	cmp	r1, r2
			pending_current = NULL;
 800540e:	bf04      	itt	eq
 8005410:	2200      	moveq	r2, #0
 8005412:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
}
 800541c:	bd70      	pop	{r4, r5, r6, pc}
 800541e:	bf00      	nop
 8005420:	20000854 	.word	0x20000854
 8005424:	20000880 	.word	0x20000880

08005428 <z_pend_curr>:
{
 8005428:	b510      	push	{r4, lr}
 800542a:	460c      	mov	r4, r1
 800542c:	4611      	mov	r1, r2
	pending_current = _current;
 800542e:	4a06      	ldr	r2, [pc, #24]	; (8005448 <z_pend_curr+0x20>)
 8005430:	6890      	ldr	r0, [r2, #8]
 8005432:	4a06      	ldr	r2, [pc, #24]	; (800544c <z_pend_curr+0x24>)
 8005434:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
 8005436:	461a      	mov	r2, r3
 8005438:	f7ff ff98 	bl	800536c <pend>
 800543c:	4620      	mov	r0, r4
}
 800543e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005442:	f7fd bf5b 	b.w	80032fc <arch_swap>
 8005446:	bf00      	nop
 8005448:	20000854 	.word	0x20000854
 800544c:	20000880 	.word	0x20000880

08005450 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
 8005452:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
 8005454:	f003 fb87 	bl	8008b66 <z_tick_get_32>
 8005458:	1834      	adds	r4, r6, r0
	__asm__ volatile(
 800545a:	f04f 0310 	mov.w	r3, #16
 800545e:	f3ef 8711 	mrs	r7, BASEPRI
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 800546a:	4d0d      	ldr	r5, [pc, #52]	; (80054a0 <z_tick_sleep.part.19+0x50>)
 800546c:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <z_tick_sleep.part.19+0x54>)
 800546e:	68a8      	ldr	r0, [r5, #8]
 8005470:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
 8005472:	f7ff ff55 	bl	8005320 <z_remove_thread_from_ready_q>
 8005476:	68a8      	ldr	r0, [r5, #8]
 8005478:	490b      	ldr	r1, [pc, #44]	; (80054a8 <z_tick_sleep.part.19+0x58>)
 800547a:	4632      	mov	r2, r6
 800547c:	3018      	adds	r0, #24
 800547e:	f000 fa9d 	bl	80059bc <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
 8005482:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8005484:	7b53      	ldrb	r3, [r2, #13]
 8005486:	f043 0310 	orr.w	r3, r3, #16
 800548a:	7353      	strb	r3, [r2, #13]
 800548c:	4638      	mov	r0, r7
 800548e:	f7fd ff35 	bl	80032fc <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 8005492:	f003 fb68 	bl	8008b66 <z_tick_get_32>
 8005496:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
 8005498:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800549c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000854 	.word	0x20000854
 80054a4:	20000880 	.word	0x20000880
 80054a8:	08008979 	.word	0x08008979

080054ac <z_set_prio>:
{
 80054ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054b0:	4604      	mov	r4, r0
 80054b2:	f04f 0310 	mov.w	r3, #16
 80054b6:	f3ef 8911 	mrs	r9, BASEPRI
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
 80054c2:	f003 f9e9 	bl	8008898 <z_is_thread_ready>
		if (need_sched) {
 80054c6:	b24e      	sxtb	r6, r1
 80054c8:	4680      	mov	r8, r0
 80054ca:	b360      	cbz	r0, 8005526 <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
 80054cc:	4d17      	ldr	r5, [pc, #92]	; (800552c <z_set_prio+0x80>)
 80054ce:	f105 0724 	add.w	r7, r5, #36	; 0x24
 80054d2:	4621      	mov	r1, r4
 80054d4:	4638      	mov	r0, r7
 80054d6:	f7ff fe25 	bl	8005124 <z_priq_dumb_remove>
	return list->head == list;
 80054da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				thread->base.prio = prio;
 80054dc:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80054de:	42bb      	cmp	r3, r7
 80054e0:	462a      	mov	r2, r5
 80054e2:	d019      	beq.n	8005518 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80054e4:	b1c3      	cbz	r3, 8005518 <z_set_prio+0x6c>
 80054e6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	if (thread_1->base.prio < thread_2->base.prio) {
 80054e8:	f993 000e 	ldrsb.w	r0, [r3, #14]
 80054ec:	42b0      	cmp	r0, r6
 80054ee:	dd0e      	ble.n	800550e <z_set_prio+0x62>
	node->prev = successor->prev;
 80054f0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80054f2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
 80054f6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80054f8:	605c      	str	r4, [r3, #4]
			update_cache(1);
 80054fa:	2001      	movs	r0, #1
 80054fc:	f7ff fe28 	bl	8005150 <update_cache>
	__asm__ volatile(
 8005500:	f389 8811 	msr	BASEPRI, r9
 8005504:	f3bf 8f6f 	isb	sy
}
 8005508:	4640      	mov	r0, r8
 800550a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
 800550e:	4299      	cmp	r1, r3
 8005510:	d002      	beq.n	8005518 <z_set_prio+0x6c>
 8005512:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e7      	bne.n	80054e8 <z_set_prio+0x3c>
	node->prev = list->tail;
 8005518:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800551a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 800551c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->next = list;
 800551e:	6027      	str	r7, [r4, #0]
	list->tail->next = node;
 8005520:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8005522:	6294      	str	r4, [r2, #40]	; 0x28
 8005524:	e7e9      	b.n	80054fa <z_set_prio+0x4e>
			thread->base.prio = prio;
 8005526:	73a6      	strb	r6, [r4, #14]
 8005528:	e7ea      	b.n	8005500 <z_set_prio+0x54>
 800552a:	bf00      	nop
 800552c:	20000854 	.word	0x20000854

08005530 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8005532:	2100      	movs	r1, #0
 8005534:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 8005538:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 800553c:	4608      	mov	r0, r1
 800553e:	f7ff bdbd 	b.w	80050bc <k_sched_time_slice_set>
 8005542:	bf00      	nop
 8005544:	20000854 	.word	0x20000854

08005548 <z_impl_k_yield>:
{
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
 800554a:	4c23      	ldr	r4, [pc, #140]	; (80055d8 <z_impl_k_yield+0x90>)
 800554c:	4b23      	ldr	r3, [pc, #140]	; (80055dc <z_impl_k_yield+0x94>)
 800554e:	68a2      	ldr	r2, [r4, #8]
 8005550:	429a      	cmp	r2, r3
 8005552:	d029      	beq.n	80055a8 <z_impl_k_yield+0x60>
	__asm__ volatile(
 8005554:	f04f 0310 	mov.w	r3, #16
 8005558:	f3ef 8611 	mrs	r6, BASEPRI
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 8005564:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8005568:	68a1      	ldr	r1, [r4, #8]
 800556a:	4628      	mov	r0, r5
 800556c:	f7ff fdda 	bl	8005124 <z_priq_dumb_remove>
	return list->head == list;
 8005570:	6a62      	ldr	r2, [r4, #36]	; 0x24
			_priq_run_add(&_kernel.ready_q.runq, _current);
 8005572:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005574:	42aa      	cmp	r2, r5
 8005576:	d028      	beq.n	80055ca <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005578:	b33a      	cbz	r2, 80055ca <z_impl_k_yield+0x82>
 800557a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	if (thread_1->base.prio < thread_2->base.prio) {
 800557c:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8005580:	f992 700e 	ldrsb.w	r7, [r2, #14]
 8005584:	428f      	cmp	r7, r1
 8005586:	dd1b      	ble.n	80055c0 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
 8005588:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 800558a:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
 800558e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8005590:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
 8005592:	7b5a      	ldrb	r2, [r3, #13]
 8005594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005598:	735a      	strb	r2, [r3, #13]
			update_cache(1);
 800559a:	2001      	movs	r0, #1
 800559c:	f7ff fdd8 	bl	8005150 <update_cache>
	__asm__ volatile(
 80055a0:	f386 8811 	msr	BASEPRI, r6
 80055a4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80055a8:	f04f 0310 	mov.w	r3, #16
 80055ac:	f3ef 8011 	mrs	r0, BASEPRI
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
}
 80055b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055bc:	f7fd be9e 	b.w	80032fc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 80055c0:	4282      	cmp	r2, r0
 80055c2:	d002      	beq.n	80055ca <z_impl_k_yield+0x82>
 80055c4:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80055c6:	2a00      	cmp	r2, #0
 80055c8:	d1da      	bne.n	8005580 <z_impl_k_yield+0x38>
	node->prev = list->tail;
 80055ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80055cc:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
 80055ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	node->next = list;
 80055d0:	601d      	str	r5, [r3, #0]
	list->tail->next = node;
 80055d2:	6013      	str	r3, [r2, #0]
	list->tail = node;
 80055d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80055d6:	e7dc      	b.n	8005592 <z_impl_k_yield+0x4a>
 80055d8:	20000854 	.word	0x20000854
 80055dc:	2000077c 	.word	0x2000077c

080055e0 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
 80055e0:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
 80055e2:	1c43      	adds	r3, r0, #1
{
 80055e4:	4605      	mov	r5, r0
	if (ms == K_FOREVER) {
 80055e6:	d105      	bne.n	80055f4 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
 80055e8:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <z_impl_k_sleep+0x38>)
 80055ea:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 80055ec:	f000 f920 	bl	8005830 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
 80055f0:	4628      	mov	r0, r5
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
 80055f4:	240a      	movs	r4, #10
	if (ticks == 0) {
 80055f6:	4344      	muls	r4, r0
 80055f8:	d109      	bne.n	800560e <z_impl_k_sleep+0x2e>
	z_impl_k_yield();
 80055fa:	f7ff ffa5 	bl	8005548 <z_impl_k_yield>
			return t / (from_hz / to_hz);
 80055fe:	220a      	movs	r2, #10
 8005600:	2300      	movs	r3, #0
 8005602:	4620      	mov	r0, r4
 8005604:	17e1      	asrs	r1, r4, #31
 8005606:	f7fa fdbf 	bl	8000188 <__aeabi_uldivmod>
 800560a:	4605      	mov	r5, r0
	return k_ticks_to_ms_floor64(ticks);
 800560c:	e7f0      	b.n	80055f0 <z_impl_k_sleep+0x10>
 800560e:	4620      	mov	r0, r4
 8005610:	f7ff ff1e 	bl	8005450 <z_tick_sleep.part.19>
 8005614:	4604      	mov	r4, r0
 8005616:	e7f2      	b.n	80055fe <z_impl_k_sleep+0x1e>
 8005618:	20000854 	.word	0x20000854

0800561c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
 800561c:	4b01      	ldr	r3, [pc, #4]	; (8005624 <z_impl_k_current_get+0x8>)
 800561e:	6898      	ldr	r0, [r3, #8]
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20000854 	.word	0x20000854

08005628 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	4604      	mov	r4, r0
 800562c:	f04f 0310 	mov.w	r3, #16
 8005630:	f3ef 8611 	mrs	r6, BASEPRI
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
 800563c:	f003 f9cd 	bl	80089da <z_unpend_first_thread>
	if (thread != NULL) {
 8005640:	4605      	mov	r5, r0
 8005642:	b170      	cbz	r0, 8005662 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8005644:	7b43      	ldrb	r3, [r0, #13]
 8005646:	06db      	lsls	r3, r3, #27
 8005648:	d103      	bne.n	8005652 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
 800564a:	6983      	ldr	r3, [r0, #24]
 800564c:	b90b      	cbnz	r3, 8005652 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
 800564e:	f7ff fdb9 	bl	80051c4 <z_add_thread_to_ready_q>
 8005652:	2300      	movs	r3, #0
 8005654:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
 8005656:	4631      	mov	r1, r6
 8005658:	4808      	ldr	r0, [pc, #32]	; (800567c <z_impl_k_sem_give+0x54>)
}
 800565a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 800565e:	f003 b946 	b.w	80088ee <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8005662:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8005666:	429a      	cmp	r2, r3
 8005668:	bf18      	it	ne
 800566a:	3301      	addne	r3, #1
 800566c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800566e:	2102      	movs	r1, #2
 8005670:	f104 0010 	add.w	r0, r4, #16
 8005674:	f003 fb75 	bl	8008d62 <z_handle_obj_poll_events>
 8005678:	e7ed      	b.n	8005656 <z_impl_k_sem_give+0x2e>
 800567a:	bf00      	nop
 800567c:	20000978 	.word	0x20000978

08005680 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
 8005680:	b410      	push	{r4}
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	f04f 0010 	mov.w	r0, #16
 800568a:	f3ef 8111 	mrs	r1, BASEPRI
 800568e:	f380 8811 	msr	BASEPRI, r0
 8005692:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
 8005696:	6894      	ldr	r4, [r2, #8]
 8005698:	b144      	cbz	r4, 80056ac <z_impl_k_sem_take+0x2c>
		sem->count--;
 800569a:	3c01      	subs	r4, #1
 800569c:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
 800569e:	f381 8811 	msr	BASEPRI, r1
 80056a2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
 80056a6:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
 80056a8:	bc10      	pop	{r4}
 80056aa:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
 80056ac:	b933      	cbnz	r3, 80056bc <z_impl_k_sem_take+0x3c>
 80056ae:	f381 8811 	msr	BASEPRI, r1
 80056b2:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 80056b6:	f06f 000f 	mvn.w	r0, #15
 80056ba:	e7f5      	b.n	80056a8 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 80056bc:	4801      	ldr	r0, [pc, #4]	; (80056c4 <z_impl_k_sem_take+0x44>)
}
 80056be:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 80056c0:	f7ff beb2 	b.w	8005428 <z_pend_curr>
 80056c4:	20000978 	.word	0x20000978

080056c8 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
 80056c8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
 80056ca:	4c08      	ldr	r4, [pc, #32]	; (80056ec <k_sys_work_q_init+0x24>)
 80056cc:	4908      	ldr	r1, [pc, #32]	; (80056f0 <k_sys_work_q_init+0x28>)
 80056ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056d6:	4620      	mov	r0, r4
 80056d8:	f000 f912 	bl	8005900 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
 80056dc:	4905      	ldr	r1, [pc, #20]	; (80056f4 <k_sys_work_q_init+0x2c>)
 80056de:	f104 0010 	add.w	r0, r4, #16
 80056e2:	f003 f9cf 	bl	8008a84 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
 80056e6:	2000      	movs	r0, #0
 80056e8:	bd10      	pop	{r4, pc}
 80056ea:	bf00      	nop
 80056ec:	2000088c 	.word	0x2000088c
 80056f0:	200022b8 	.word	0x200022b8
 80056f4:	0800a40b 	.word	0x0800a40b

080056f8 <z_impl_k_busy_wait>:
{
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	/* use 64-bit math to prevent overflow when multiplying */
	u32_t cycles_to_wait = (u32_t)(
		(u64_t)usec_to_wait *
		(u64_t)sys_clock_hw_cycles_per_sec() /
 80056f8:	4908      	ldr	r1, [pc, #32]	; (800571c <z_impl_k_busy_wait+0x24>)
 80056fa:	4a09      	ldr	r2, [pc, #36]	; (8005720 <z_impl_k_busy_wait+0x28>)
{
 80056fc:	b538      	push	{r3, r4, r5, lr}
		(u64_t)sys_clock_hw_cycles_per_sec() /
 80056fe:	fba0 0101 	umull	r0, r1, r0, r1
 8005702:	2300      	movs	r3, #0
 8005704:	f7fa fd40 	bl	8000188 <__aeabi_uldivmod>
 8005708:	4604      	mov	r4, r0
 800570a:	f7fd fdd3 	bl	80032b4 <z_timer_cycle_get_32>
 800570e:	4605      	mov	r5, r0
 8005710:	f7fd fdd0 	bl	80032b4 <z_timer_cycle_get_32>

	for (;;) {
		u32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8005714:	1b40      	subs	r0, r0, r5
 8005716:	42a0      	cmp	r0, r4
 8005718:	d3fa      	bcc.n	8005710 <z_impl_k_busy_wait+0x18>
		}
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
 800571a:	bd38      	pop	{r3, r4, r5, pc}
 800571c:	0a037a00 	.word	0x0a037a00
 8005720:	000f4240 	.word	0x000f4240

08005724 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
 8005724:	b510      	push	{r4, lr}
 8005726:	4602      	mov	r2, r0
	__asm__ volatile(
 8005728:	f04f 0310 	mov.w	r3, #16
 800572c:	f3ef 8411 	mrs	r4, BASEPRI
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
 8005738:	7b43      	ldrb	r3, [r0, #13]
 800573a:	0759      	lsls	r1, r3, #29
 800573c:	d404      	bmi.n	8005748 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
 800573e:	f384 8811 	msr	BASEPRI, r4
 8005742:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
 8005746:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8005748:	f023 0304 	bic.w	r3, r3, #4
 800574c:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
 800574e:	f003 f990 	bl	8008a72 <z_is_thread_ready>
 8005752:	b110      	cbz	r0, 800575a <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
 8005754:	4610      	mov	r0, r2
 8005756:	f7ff fd35 	bl	80051c4 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
 800575a:	4621      	mov	r1, r4
 800575c:	4802      	ldr	r0, [pc, #8]	; (8005768 <z_impl_k_thread_start+0x44>)
}
 800575e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
 8005762:	f003 b8c4 	b.w	80088ee <z_reschedule>
 8005766:	bf00      	nop
 8005768:	20000978 	.word	0x20000978

0800576c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
 800576c:	b530      	push	{r4, r5, lr}
 800576e:	b087      	sub	sp, #28
 8005770:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8005772:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005774:	9504      	str	r5, [sp, #16]
 8005776:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005778:	9503      	str	r5, [sp, #12]
 800577a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800577c:	9502      	str	r5, [sp, #8]
 800577e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005780:	9501      	str	r5, [sp, #4]
 8005782:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005784:	9500      	str	r5, [sp, #0]
 8005786:	f7fd fe35 	bl	80033f4 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 800578a:	4b03      	ldr	r3, [pc, #12]	; (8005798 <z_setup_new_thread+0x2c>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	b103      	cbz	r3, 8005792 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 8005790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005792:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
 8005794:	b007      	add	sp, #28
 8005796:	bd30      	pop	{r4, r5, pc}
 8005798:	20000854 	.word	0x20000854

0800579c <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80057a0:	2600      	movs	r6, #0
 80057a2:	9605      	str	r6, [sp, #20]
 80057a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80057a6:	9604      	str	r6, [sp, #16]
 80057a8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80057aa:	9603      	str	r6, [sp, #12]
 80057ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80057ae:	9602      	str	r6, [sp, #8]
 80057b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
 80057b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80057b4:	9601      	str	r6, [sp, #4]
 80057b6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80057b8:	9600      	str	r6, [sp, #0]
{
 80057ba:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80057bc:	f7ff ffd6 	bl	800576c <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
 80057c0:	1c6b      	adds	r3, r5, #1
 80057c2:	d003      	beq.n	80057cc <z_impl_k_thread_create+0x30>
	if (delay == 0) {
 80057c4:	b92d      	cbnz	r5, 80057d2 <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
 80057c6:	4620      	mov	r0, r4
 80057c8:	f7ff ffac 	bl	8005724 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
 80057cc:	4620      	mov	r0, r4
 80057ce:	b006      	add	sp, #24
 80057d0:	bd70      	pop	{r4, r5, r6, pc}
			return ((u32_t)t) * (to_hz / from_hz);
 80057d2:	220a      	movs	r2, #10
 80057d4:	436a      	muls	r2, r5
 80057d6:	3201      	adds	r2, #1
 80057d8:	4902      	ldr	r1, [pc, #8]	; (80057e4 <z_impl_k_thread_create+0x48>)
 80057da:	f104 0018 	add.w	r0, r4, #24
 80057de:	f000 f8ed 	bl	80059bc <z_add_timeout>
 80057e2:	e7f3      	b.n	80057cc <z_impl_k_thread_create+0x30>
 80057e4:	08008979 	.word	0x08008979

080057e8 <z_thread_single_suspend>:
#include <syscalls/k_thread_create_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_MULTITHREADING */

void z_thread_single_suspend(struct k_thread *thread)
{
 80057e8:	b510      	push	{r4, lr}
 80057ea:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
 80057ec:	f003 f941 	bl	8008a72 <z_is_thread_ready>
 80057f0:	b110      	cbz	r0, 80057f8 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
 80057f2:	4620      	mov	r0, r4
 80057f4:	f7ff fd94 	bl	8005320 <z_remove_thread_from_ready_q>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80057f8:	f104 0018 	add.w	r0, r4, #24
 80057fc:	f003 f973 	bl	8008ae6 <z_abort_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8005800:	7b63      	ldrb	r3, [r4, #13]
 8005802:	f043 0310 	orr.w	r3, r3, #16
 8005806:	7363      	strb	r3, [r4, #13]

	(void)z_abort_thread_timeout(thread);

	z_mark_thread_as_suspended(thread);

	if (thread == _current) {
 8005808:	4b08      	ldr	r3, [pc, #32]	; (800582c <z_thread_single_suspend+0x44>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	42a3      	cmp	r3, r4
 800580e:	d10b      	bne.n	8005828 <z_thread_single_suspend+0x40>
	__asm__ volatile(
 8005810:	f04f 0310 	mov.w	r3, #16
 8005814:	f3ef 8011 	mrs	r0, BASEPRI
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
 8005820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 8005824:	f003 b86e 	b.w	8008904 <z_reschedule_irqlock>
 8005828:	bd10      	pop	{r4, pc}
 800582a:	bf00      	nop
 800582c:	20000854 	.word	0x20000854

08005830 <z_impl_k_thread_suspend>:

void z_impl_k_thread_suspend(struct k_thread *thread)
{
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4605      	mov	r5, r0
 8005834:	f04f 0310 	mov.w	r3, #16
 8005838:	f3ef 8411 	mrs	r4, BASEPRI
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
 8005844:	f7ff ffd0 	bl	80057e8 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
 8005848:	4b07      	ldr	r3, [pc, #28]	; (8005868 <z_impl_k_thread_suspend+0x38>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	42ab      	cmp	r3, r5
 800584e:	d105      	bne.n	800585c <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
 8005850:	4621      	mov	r1, r4
 8005852:	4806      	ldr	r0, [pc, #24]	; (800586c <z_impl_k_thread_suspend+0x3c>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
 8005854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
 8005858:	f003 b849 	b.w	80088ee <z_reschedule>
	__asm__ volatile(
 800585c:	f384 8811 	msr	BASEPRI, r4
 8005860:	f3bf 8f6f 	isb	sy
}
 8005864:	bd38      	pop	{r3, r4, r5, pc}
 8005866:	bf00      	nop
 8005868:	20000854 	.word	0x20000854
 800586c:	20000978 	.word	0x20000978

08005870 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8005870:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 8005872:	4e20      	ldr	r6, [pc, #128]	; (80058f4 <z_init_static_threads+0x84>)
 8005874:	4d20      	ldr	r5, [pc, #128]	; (80058f8 <z_init_static_threads+0x88>)
{
 8005876:	b087      	sub	sp, #28
 8005878:	4637      	mov	r7, r6
	_FOREACH_STATIC_THREAD(thread_data) {
 800587a:	42b5      	cmp	r5, r6
 800587c:	f105 0430 	add.w	r4, r5, #48	; 0x30
 8005880:	d30b      	bcc.n	800589a <z_init_static_threads+0x2a>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 8005882:	f7ff fc3b 	bl	80050fc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8005886:	4c1c      	ldr	r4, [pc, #112]	; (80058f8 <z_init_static_threads+0x88>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8005888:	4e1c      	ldr	r6, [pc, #112]	; (80058fc <z_init_static_threads+0x8c>)
 800588a:	250a      	movs	r5, #10
 800588c:	42bc      	cmp	r4, r7
 800588e:	d321      	bcc.n	80058d4 <z_init_static_threads+0x64>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
 8005890:	b007      	add	sp, #28
 8005892:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8005896:	f7ff bc79 	b.w	800518c <k_sched_unlock>
		z_setup_new_thread(
 800589a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800589e:	9305      	str	r3, [sp, #20]
 80058a0:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80058a4:	9304      	str	r3, [sp, #16]
 80058a6:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80058aa:	9303      	str	r3, [sp, #12]
 80058ac:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80058b0:	9302      	str	r3, [sp, #8]
 80058b2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80058c2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80058c6:	f7ff ff51 	bl	800576c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80058ca:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80058ce:	64dd      	str	r5, [r3, #76]	; 0x4c
 80058d0:	4625      	mov	r5, r4
 80058d2:	e7d2      	b.n	800587a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
 80058d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058d6:	1c53      	adds	r3, r2, #1
 80058d8:	d003      	beq.n	80058e2 <z_init_static_threads+0x72>
			schedule_new_thread(thread_data->init_thread,
 80058da:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
 80058dc:	b91a      	cbnz	r2, 80058e6 <z_init_static_threads+0x76>
 80058de:	f7ff ff21 	bl	8005724 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 80058e2:	3430      	adds	r4, #48	; 0x30
 80058e4:	e7d2      	b.n	800588c <z_init_static_threads+0x1c>
 80058e6:	436a      	muls	r2, r5
 80058e8:	3201      	adds	r2, #1
 80058ea:	4631      	mov	r1, r6
 80058ec:	3018      	adds	r0, #24
 80058ee:	f000 f865 	bl	80059bc <z_add_timeout>
 80058f2:	e7f6      	b.n	80058e2 <z_init_static_threads+0x72>
 80058f4:	20002ae8 	.word	0x20002ae8
 80058f8:	20002ae8 	.word	0x20002ae8
 80058fc:	08008979 	.word	0x08008979

08005900 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
 8005900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005904:	4605      	mov	r5, r0
 8005906:	b086      	sub	sp, #24
 8005908:	460e      	mov	r6, r1
 800590a:	4617      	mov	r7, r2
 800590c:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
 800590e:	f002 ff51 	bl	80087b4 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
 8005912:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8005916:	2000      	movs	r0, #0
 8005918:	e9cd 0004 	strd	r0, r0, [sp, #16]
 800591c:	e9cd 0802 	strd	r0, r8, [sp, #8]
 8005920:	e9cd 5000 	strd	r5, r0, [sp]
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <k_work_q_start+0x40>)
 8005926:	463a      	mov	r2, r7
 8005928:	4631      	mov	r1, r6
 800592a:	4620      	mov	r0, r4
 800592c:	f7ff ff36 	bl	800579c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
 8005930:	4904      	ldr	r1, [pc, #16]	; (8005944 <k_work_q_start+0x44>)
 8005932:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
 8005934:	b006      	add	sp, #24
 8005936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800593a:	f003 b8a3 	b.w	8008a84 <z_impl_k_thread_name_set>
 800593e:	bf00      	nop
 8005940:	08006309 	.word	0x08006309
 8005944:	0800a414 	.word	0x0800a414

08005948 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 8005948:	4b03      	ldr	r3, [pc, #12]	; (8005958 <elapsed+0x10>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	b90b      	cbnz	r3, 8005952 <elapsed+0xa>
 800594e:	f7fd bc93 	b.w	8003278 <z_clock_elapsed>
}
 8005952:	2000      	movs	r0, #0
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	20000908 	.word	0x20000908

0800595c <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800595c:	6803      	ldr	r3, [r0, #0]
 800595e:	b140      	cbz	r0, 8005972 <remove_timeout+0x16>
 8005960:	4a07      	ldr	r2, [pc, #28]	; (8005980 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
 8005962:	6852      	ldr	r2, [r2, #4]
 8005964:	4290      	cmp	r0, r2
 8005966:	d004      	beq.n	8005972 <remove_timeout+0x16>
	if (next(t) != NULL) {
 8005968:	b11b      	cbz	r3, 8005972 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	6881      	ldr	r1, [r0, #8]
 800596e:	440a      	add	r2, r1
 8005970:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
 8005972:	6842      	ldr	r2, [r0, #4]
 8005974:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8005976:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8005978:	2300      	movs	r3, #0
	node->prev = NULL;
 800597a:	e9c0 3300 	strd	r3, r3, [r0]
}
 800597e:	4770      	bx	lr
 8005980:	200029e4 	.word	0x200029e4

08005984 <next_timeout>:
	return list->head == list;
 8005984:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
 8005986:	b510      	push	{r4, lr}
 8005988:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800598a:	429c      	cmp	r4, r3
 800598c:	bf08      	it	eq
 800598e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
 8005990:	f7ff ffda 	bl	8005948 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 8005994:	b154      	cbz	r4, 80059ac <next_timeout+0x28>
 8005996:	68a3      	ldr	r3, [r4, #8]
 8005998:	1a18      	subs	r0, r3, r0
 800599a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800599e:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <next_timeout+0x34>)
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	b113      	cbz	r3, 80059aa <next_timeout+0x26>
 80059a4:	4298      	cmp	r0, r3
 80059a6:	bfa8      	it	ge
 80059a8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 80059aa:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 80059ac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80059b0:	e7f5      	b.n	800599e <next_timeout+0x1a>
 80059b2:	bf00      	nop
 80059b4:	200029e4 	.word	0x200029e4
 80059b8:	20000854 	.word	0x20000854

080059bc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	4604      	mov	r4, r0
 80059c0:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80059c2:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
 80059c4:	f04f 0310 	mov.w	r3, #16
 80059c8:	f3ef 8511 	mrs	r5, BASEPRI
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 80059d4:	f7ff ffb8 	bl	8005948 <elapsed>
	return list->head == list;
 80059d8:	4b18      	ldr	r3, [pc, #96]	; (8005a3c <z_add_timeout+0x80>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	2e01      	cmp	r6, #1
 80059de:	bfac      	ite	ge
 80059e0:	1980      	addge	r0, r0, r6
 80059e2:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80059e4:	429a      	cmp	r2, r3
 80059e6:	60a0      	str	r0, [r4, #8]
 80059e8:	d001      	beq.n	80059ee <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80059ea:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 80059ec:	b932      	cbnz	r2, 80059fc <z_add_timeout+0x40>
	node->prev = list->tail;
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
 80059f2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 80059f4:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
 80059f6:	6014      	str	r4, [r2, #0]
	list->tail = node;
 80059f8:	605c      	str	r4, [r3, #4]
 80059fa:	e00a      	b.n	8005a12 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
 80059fc:	6890      	ldr	r0, [r2, #8]
 80059fe:	68a1      	ldr	r1, [r4, #8]
 8005a00:	4288      	cmp	r0, r1
 8005a02:	dd15      	ble.n	8005a30 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
 8005a04:	1a41      	subs	r1, r0, r1
 8005a06:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
 8005a08:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8005a0a:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
 8005a0e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 8005a10:	6054      	str	r4, [r2, #4]
	return list->head == list;
 8005a12:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d006      	beq.n	8005a26 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8005a18:	4294      	cmp	r4, r2
 8005a1a:	d104      	bne.n	8005a26 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
 8005a1c:	f7ff ffb2 	bl	8005984 <next_timeout>
 8005a20:	2100      	movs	r1, #0
 8005a22:	f7fd fbc5 	bl	80031b0 <z_clock_set_timeout>
	__asm__ volatile(
 8005a26:	f385 8811 	msr	BASEPRI, r5
 8005a2a:	f3bf 8f6f 	isb	sy
		}
	}
}
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
 8005a30:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 8005a32:	42b2      	cmp	r2, r6
 8005a34:	60a1      	str	r1, [r4, #8]
 8005a36:	d0da      	beq.n	80059ee <z_add_timeout+0x32>
 8005a38:	6812      	ldr	r2, [r2, #0]
 8005a3a:	e7d7      	b.n	80059ec <z_add_timeout+0x30>
 8005a3c:	200029e4 	.word	0x200029e4

08005a40 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
 8005a40:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8005a44:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8005a46:	f7ff fc35 	bl	80052b4 <z_time_slice>
	__asm__ volatile(
 8005a4a:	f04f 0310 	mov.w	r3, #16
 8005a4e:	f3ef 8511 	mrs	r5, BASEPRI
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8005a5a:	4e21      	ldr	r6, [pc, #132]	; (8005ae0 <z_clock_announce+0xa0>)
 8005a5c:	4f21      	ldr	r7, [pc, #132]	; (8005ae4 <z_clock_announce+0xa4>)
	return list->head == list;
 8005a5e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005ae8 <z_clock_announce+0xa8>
 8005a62:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8005a64:	46b8      	mov	r8, r7
 8005a66:	f8d9 4000 	ldr.w	r4, [r9]
 8005a6a:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005a6c:	454c      	cmp	r4, r9
 8005a6e:	e9d7 bc00 	ldrd	fp, ip, [r7]
 8005a72:	d005      	beq.n	8005a80 <z_clock_announce+0x40>
 8005a74:	b124      	cbz	r4, 8005a80 <z_clock_announce+0x40>
 8005a76:	68a3      	ldr	r3, [r4, #8]
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	dd14      	ble.n	8005aa6 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
 8005a80:	eb1b 0002 	adds.w	r0, fp, r2
 8005a84:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
 8005a88:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8005a8a:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
 8005a8e:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
 8005a90:	f7ff ff78 	bl	8005984 <next_timeout>
 8005a94:	4621      	mov	r1, r4
 8005a96:	f7fd fb8b 	bl	80031b0 <z_clock_set_timeout>
	__asm__ volatile(
 8005a9a:	f385 8811 	msr	BASEPRI, r5
 8005a9e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8005aa2:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
 8005aa6:	eb1b 0003 	adds.w	r0, fp, r3
 8005aaa:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 8005ab2:	2300      	movs	r3, #0
		curr_tick += dt;
 8005ab4:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
 8005ab8:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
 8005aba:	4620      	mov	r0, r4
 8005abc:	f7ff ff4e 	bl	800595c <remove_timeout>
 8005ac0:	f385 8811 	msr	BASEPRI, r5
 8005ac4:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8005ac8:	68e3      	ldr	r3, [r4, #12]
 8005aca:	4798      	blx	r3
	__asm__ volatile(
 8005acc:	f04f 0310 	mov.w	r3, #16
 8005ad0:	f3ef 8511 	mrs	r5, BASEPRI
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8005adc:	e7c3      	b.n	8005a66 <z_clock_announce+0x26>
 8005ade:	bf00      	nop
 8005ae0:	20000908 	.word	0x20000908
 8005ae4:	200000d0 	.word	0x200000d0
 8005ae8:	200029e4 	.word	0x200029e4

08005aec <z_tick_get>:

s64_t z_tick_get(void)
{
 8005aec:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
 8005af0:	f04f 0310 	mov.w	r3, #16
 8005af4:	f3ef 8411 	mrs	r4, BASEPRI
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 8005b00:	f7fd fbba 	bl	8003278 <z_clock_elapsed>
 8005b04:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <z_tick_get+0x38>)
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	eb12 0b00 	adds.w	fp, r2, r0
 8005b0e:	f143 0c00 	adc.w	ip, r3, #0
 8005b12:	4658      	mov	r0, fp
 8005b14:	4661      	mov	r1, ip
	__asm__ volatile(
 8005b16:	f384 8811 	msr	BASEPRI, r4
 8005b1a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8005b1e:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
 8005b22:	bf00      	nop
 8005b24:	200000d0 	.word	0x200000d0

08005b28 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
 8005b28:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
 8005b2a:	7b44      	ldrb	r4, [r0, #13]
 8005b2c:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
 8005b30:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
 8005b32:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
 8005b34:	f362 0141 	bfi	r1, r2, #1, #1
 8005b38:	7381      	strb	r1, [r0, #14]
	event->poller = NULL;
 8005b3a:	2200      	movs	r2, #0
	event->state = K_POLL_STATE_NOT_READY;
 8005b3c:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
 8005b3e:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
 8005b40:	4a02      	ldr	r2, [pc, #8]	; (8005b4c <k_poll_event_init+0x24>)
 8005b42:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
 8005b44:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
 8005b48:	bd10      	pop	{r4, pc}
 8005b4a:	bf00      	nop
 8005b4c:	00020fff 	.word	0x00020fff

08005b50 <z_impl_k_poll>:

	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
 8005b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b54:	b086      	sub	sp, #24
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
 8005b56:	2301      	movs	r3, #1
 8005b58:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
 8005b5c:	4b23      	ldr	r3, [pc, #140]	; (8005bec <z_impl_k_poll+0x9c>)
	struct _poller poller = { .is_polling = true,
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	9304      	str	r3, [sp, #16]
 8005b62:	4b23      	ldr	r3, [pc, #140]	; (8005bf0 <z_impl_k_poll+0xa0>)
 8005b64:	9305      	str	r3, [sp, #20]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	events_registered = register_events(events, num_events, &poller,
 8005b66:	fab2 f382 	clz	r3, r2
 8005b6a:	4690      	mov	r8, r2
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	aa03      	add	r2, sp, #12
{
 8005b70:	4606      	mov	r6, r0
	events_registered = register_events(events, num_events, &poller,
 8005b72:	f003 f89c 	bl	8008cae <register_events>
 8005b76:	4607      	mov	r7, r0
	__asm__ volatile(
 8005b78:	f04f 0310 	mov.w	r3, #16
 8005b7c:	f3ef 8511 	mrs	r5, BASEPRI
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
 8005b88:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005b8c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8005b90:	b94b      	cbnz	r3, 8005ba6 <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
 8005b92:	462a      	mov	r2, r5
 8005b94:	4639      	mov	r1, r7
 8005b96:	4630      	mov	r0, r6
 8005b98:	f002 fff1 	bl	8008b7e <clear_event_registrations>
	__asm__ volatile(
 8005b9c:	f385 8811 	msr	BASEPRI, r5
 8005ba0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
 8005ba4:	e00b      	b.n	8005bbe <z_impl_k_poll+0x6e>
	poller.is_polling = false;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
 8005bac:	f1b8 0f00 	cmp.w	r8, #0
 8005bb0:	d109      	bne.n	8005bc6 <z_impl_k_poll+0x76>
 8005bb2:	f385 8811 	msr	BASEPRI, r5
 8005bb6:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 8005bba:	f06f 040a 	mvn.w	r4, #10
}
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	b006      	add	sp, #24
 8005bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
 8005bc6:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8005bc8:	4643      	mov	r3, r8
 8005bca:	4629      	mov	r1, r5
 8005bcc:	4809      	ldr	r0, [pc, #36]	; (8005bf4 <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
 8005bce:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8005bd2:	f7ff fc29 	bl	8005428 <z_pend_curr>
 8005bd6:	4604      	mov	r4, r0
	__asm__ volatile(
 8005bd8:	f04f 0310 	mov.w	r3, #16
 8005bdc:	f3ef 8511 	mrs	r5, BASEPRI
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	e7d3      	b.n	8005b92 <z_impl_k_poll+0x42>
 8005bea:	bf00      	nop
 8005bec:	20000854 	.word	0x20000854
 8005bf0:	08008c0f 	.word	0x08008c0f
 8005bf4:	20000978 	.word	0x20000978

08005bf8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	f04f 0310 	mov.w	r3, #16
 8005bfe:	f3ef 8511 	mrs	r5, BASEPRI
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8005c0a:	6803      	ldr	r3, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
 8005c0c:	60c1      	str	r1, [r0, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 8005c0e:	4298      	cmp	r0, r3
	signal->signaled = 1U;
 8005c10:	f04f 0101 	mov.w	r1, #1
 8005c14:	6081      	str	r1, [r0, #8]
 8005c16:	d106      	bne.n	8005c26 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
 8005c18:	f385 8811 	msr	BASEPRI, r5
 8005c1c:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
 8005c20:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
 8005c22:	4620      	mov	r0, r4
 8005c24:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
 8005c26:	e9d3 2000 	ldrd	r2, r0, [r3]
 8005c2a:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
 8005c2c:	6050      	str	r0, [r2, #4]
	node->next = NULL;
 8005c2e:	2200      	movs	r2, #0
	node->prev = NULL;
 8005c30:	e9c3 2200 	strd	r2, r2, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8005c34:	4618      	mov	r0, r3
 8005c36:	f002 ffcf 	bl	8008bd8 <signal_poll_event>
	z_reschedule(&lock, key);
 8005c3a:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8005c3c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 8005c3e:	4802      	ldr	r0, [pc, #8]	; (8005c48 <z_impl_k_poll_signal_raise+0x50>)
 8005c40:	f002 fe55 	bl	80088ee <z_reschedule>
	return rc;
 8005c44:	e7ed      	b.n	8005c22 <z_impl_k_poll_signal_raise+0x2a>
 8005c46:	bf00      	nop
 8005c48:	20000978 	.word	0x20000978

08005c4c <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
 8005c4c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 8005c4e:	4c07      	ldr	r4, [pc, #28]	; (8005c6c <init_static_pools+0x20>)
 8005c50:	4d07      	ldr	r5, [pc, #28]	; (8005c70 <init_static_pools+0x24>)
 8005c52:	42ac      	cmp	r4, r5
 8005c54:	d301      	bcc.n	8005c5a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
 8005c56:	2000      	movs	r0, #0
 8005c58:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8005c5a:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
 8005c5e:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
 8005c60:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8005c64:	f000 f9b3 	bl	8005fce <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 8005c68:	341c      	adds	r4, #28
 8005c6a:	e7f2      	b.n	8005c52 <init_static_pools+0x6>
 8005c6c:	20002ae8 	.word	0x20002ae8
 8005c70:	20002ae8 	.word	0x20002ae8

08005c74 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
 8005c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
 8005c78:	1e1c      	subs	r4, r3, #0
{
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	4607      	mov	r7, r0
 8005c7e:	460d      	mov	r5, r1
 8005c80:	4692      	mov	sl, r2
	if (timeout > 0) {
 8005c82:	dd3b      	ble.n	8005cfc <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
 8005c84:	f002 ff73 	bl	8008b6e <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
 8005c88:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
 8005c8c:	4b1d      	ldr	r3, [pc, #116]	; (8005d04 <k_mem_pool_alloc+0x90>)
 8005c8e:	4e1e      	ldr	r6, [pc, #120]	; (8005d08 <k_mem_pool_alloc+0x94>)
 8005c90:	1afb      	subs	r3, r7, r3
 8005c92:	109b      	asrs	r3, r3, #2
 8005c94:	435e      	muls	r6, r3
		u32_t level_num, block_num;

		ret = z_sys_mem_pool_block_alloc(&p->base, size,
						 &level_num, &block_num,
						 &block->data);
		block->id.pool = pool_id(p);
 8005c96:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
 8005c98:	f107 0b14 	add.w	fp, r7, #20
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
 8005c9c:	ab03      	add	r3, sp, #12
 8005c9e:	aa02      	add	r2, sp, #8
 8005ca0:	9500      	str	r5, [sp, #0]
 8005ca2:	4651      	mov	r1, sl
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	f000 f9d8 	bl	800605a <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
 8005caa:	796b      	ldrb	r3, [r5, #5]
 8005cac:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
 8005cae:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
 8005cb0:	f362 0303 	bfi	r3, r2, #0, #4
 8005cb4:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
 8005cb6:	686b      	ldr	r3, [r5, #4]
 8005cb8:	9a03      	ldr	r2, [sp, #12]
 8005cba:	f362 331f 	bfi	r3, r2, #12, #20
 8005cbe:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
 8005cc0:	b1c8      	cbz	r0, 8005cf6 <k_mem_pool_alloc+0x82>
 8005cc2:	b1c4      	cbz	r4, 8005cf6 <k_mem_pool_alloc+0x82>
 8005cc4:	f110 0f0c 	cmn.w	r0, #12
 8005cc8:	d115      	bne.n	8005cf6 <k_mem_pool_alloc+0x82>
	__asm__ volatile(
 8005cca:	f04f 0310 	mov.w	r3, #16
 8005cce:	f3ef 8011 	mrs	r0, BASEPRI
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
 8005cda:	4622      	mov	r2, r4
 8005cdc:	4659      	mov	r1, fp
 8005cde:	f7ff fb7f 	bl	80053e0 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
 8005ce2:	1c63      	adds	r3, r4, #1
 8005ce4:	d0da      	beq.n	8005c9c <k_mem_pool_alloc+0x28>
 8005ce6:	f002 ff42 	bl	8008b6e <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
 8005cea:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
 8005cee:	2c00      	cmp	r4, #0
 8005cf0:	dcd4      	bgt.n	8005c9c <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
 8005cf2:	f06f 000a 	mvn.w	r0, #10
}
 8005cf6:	b005      	add	sp, #20
 8005cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
 8005cfc:	f04f 0800 	mov.w	r8, #0
 8005d00:	e7c4      	b.n	8005c8c <k_mem_pool_alloc+0x18>
 8005d02:	bf00      	nop
 8005d04:	20002ae8 	.word	0x20002ae8
 8005d08:	b6db6db7 	.word	0xb6db6db7

08005d0c <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
 8005d10:	6802      	ldr	r2, [r0, #0]
 8005d12:	7841      	ldrb	r1, [r0, #1]
 8005d14:	4e11      	ldr	r6, [pc, #68]	; (8005d5c <k_mem_pool_free_id+0x50>)
 8005d16:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8005d1a:	00a4      	lsls	r4, r4, #2
 8005d1c:	0b12      	lsrs	r2, r2, #12
 8005d1e:	f001 010f 	and.w	r1, r1, #15
 8005d22:	1930      	adds	r0, r6, r4
 8005d24:	f000 fa4c 	bl	80061c0 <z_sys_mem_pool_block_free>
 8005d28:	f04f 0310 	mov.w	r3, #16
 8005d2c:	f3ef 8511 	mrs	r5, BASEPRI
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
 8005d38:	f104 0014 	add.w	r0, r4, #20
 8005d3c:	4430      	add	r0, r6
 8005d3e:	f002 fe79 	bl	8008a34 <z_unpend_all>

	if (need_sched != 0) {
 8005d42:	b128      	cbz	r0, 8005d50 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
 8005d44:	4629      	mov	r1, r5
 8005d46:	4806      	ldr	r0, [pc, #24]	; (8005d60 <k_mem_pool_free_id+0x54>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
 8005d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
 8005d4c:	f002 bdcf 	b.w	80088ee <z_reschedule>
	__asm__ volatile(
 8005d50:	f385 8811 	msr	BASEPRI, r5
 8005d54:	f3bf 8f6f 	isb	sy
}
 8005d58:	bd70      	pop	{r4, r5, r6, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20002ae8 	.word	0x20002ae8
 8005d60:	20000978 	.word	0x20000978

08005d64 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
 8005d64:	4b03      	ldr	r3, [pc, #12]	; (8005d74 <z_thread_malloc+0x10>)
 8005d66:	689b      	ldr	r3, [r3, #8]
{
 8005d68:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
 8005d6a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005d6c:	b108      	cbz	r0, 8005d72 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
 8005d6e:	f003 b824 	b.w	8008dba <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
 8005d72:	4770      	bx	lr
 8005d74:	20000854 	.word	0x20000854

08005d78 <state_change_work_handler>:
}
 8005d78:	4770      	bx	lr

08005d7a <k_sleep>:
	return z_impl_k_sleep(ms);
 8005d7a:	f7ff bc31 	b.w	80055e0 <z_impl_k_sleep>

08005d7e <gpio_pin_write>:
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
 8005d7e:	b410      	push	{r4}
 8005d80:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
 8005d82:	6842      	ldr	r2, [r0, #4]
 8005d84:	6854      	ldr	r4, [r2, #4]
 8005d86:	460a      	mov	r2, r1
 8005d88:	46a4      	mov	ip, r4
 8005d8a:	2100      	movs	r1, #0
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
 8005d8c:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
 8005d8e:	4760      	bx	ip

08005d90 <change_led>:
{
 8005d90:	4603      	mov	r3, r0
	if (!led_dev_param) {
 8005d92:	4608      	mov	r0, r1
 8005d94:	b131      	cbz	r1, 8005da4 <change_led+0x14>
	switch (msg->data[0]) {
 8005d96:	799a      	ldrb	r2, [r3, #6]
 8005d98:	b10a      	cbz	r2, 8005d9e <change_led+0xe>
 8005d9a:	2a01      	cmp	r2, #1
 8005d9c:	d102      	bne.n	8005da4 <change_led+0x14>
		gpio_pin_write(led_dev, 14, 0);
 8005d9e:	210e      	movs	r1, #14
 8005da0:	f7ff bfed 	b.w	8005d7e <gpio_pin_write>
}
 8005da4:	4770      	bx	lr

08005da6 <int32_to_array>:
	array[1] = BYTE(u_val,1);
 8005da6:	0a03      	lsrs	r3, r0, #8
	array[0] = BYTE(u_val,0);
 8005da8:	7008      	strb	r0, [r1, #0]
	array[1] = BYTE(u_val,1);
 8005daa:	704b      	strb	r3, [r1, #1]
	array[2] = BYTE(u_val,2);
 8005dac:	0c03      	lsrs	r3, r0, #16
	array[3] = BYTE(u_val,3);
 8005dae:	0e00      	lsrs	r0, r0, #24
	array[2] = BYTE(u_val,2);
 8005db0:	708b      	strb	r3, [r1, #2]
	array[3] = BYTE(u_val,3);
 8005db2:	70c8      	strb	r0, [r1, #3]
}
 8005db4:	4770      	bx	lr

08005db6 <get_motor_status>:
void get_motor_status(struct motor_dev * motor, struct device * dev){
 8005db6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005db8:	4604      	mov	r4, r0
 8005dba:	4608      	mov	r0, r1
	if(motor->initialized){
 8005dbc:	7863      	ldrb	r3, [r4, #1]
 8005dbe:	b3e3      	cbz	r3, 8005e3a <get_motor_status+0x84>
		u8_t data[4];

		if(can_motor_request(dev, motor, CS_DOWNLOAD, SDO_STATUS_REGISTER_INDEX, SDO_STATUS_REGISTER_SUBINDEX, data)){
 8005dc0:	ab03      	add	r3, sp, #12
 8005dc2:	9301      	str	r3, [sp, #4]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	2240      	movs	r2, #64	; 0x40
 8005dca:	f243 0302 	movw	r3, #12290	; 0x3002
 8005dce:	4621      	mov	r1, r4
 8005dd0:	f7fa fbea 	bl	80005a8 <can_motor_request>
 8005dd4:	b388      	cbz	r0, 8005e3a <get_motor_status+0x84>
			motor->status_register.STAT_Enabled = (data[0] >> 0 ) & 0x1;
 8005dd6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005dda:	f003 0201 	and.w	r2, r3, #1
 8005dde:	70e2      	strb	r2, [r4, #3]
			motor->status_register.STAT_Errror = (data[0] >> 1 ) & 0x1;
 8005de0:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8005de4:	7122      	strb	r2, [r4, #4]
			motor->status_register.STAT_Warning = (data[0] >> 2 ) & 0x1;
 8005de6:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8005dea:	7162      	strb	r2, [r4, #5]
			motor->status_register.STAT_Moving = (data[0] >> 3 ) & 0x1;
 8005dec:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8005df0:	71a2      	strb	r2, [r4, #6]
			motor->status_register.STAT_Reached = (data[0] >> 4 ) & 0x1;
 8005df2:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8005df6:	71e2      	strb	r2, [r4, #7]
			motor->status_register.STAT_Limit = (data[0] >> 5 ) & 0x1;
 8005df8:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8005dfc:	7222      	strb	r2, [r4, #8]
			motor->status_register.STAT_FollowingError = (data[0] >> 6 ) & 0x1;
 8005dfe:	f3c3 1280 	ubfx	r2, r3, #6, #1
			motor->status_register.STAT_HomingDone = (data[0] >> 7 ) & 0x1;
 8005e02:	09db      	lsrs	r3, r3, #7
 8005e04:	72a3      	strb	r3, [r4, #10]
			motor->status_register.STAT_Toggle = (data[1] >> 0 ) & 0x1;
 8005e06:	f89d 300d 	ldrb.w	r3, [sp, #13]
			motor->status_register.STAT_FollowingError = (data[0] >> 6 ) & 0x1;
 8005e0a:	7262      	strb	r2, [r4, #9]
			motor->status_register.STAT_Toggle = (data[1] >> 0 ) & 0x1;
 8005e0c:	f003 0201 	and.w	r2, r3, #1
 8005e10:	72e2      	strb	r2, [r4, #11]
			motor->status_register.STAT_CmdToggle = (data[1] >> 1 ) & 0x1;
 8005e12:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8005e16:	7322      	strb	r2, [r4, #12]
			motor->status_register.STAT_CmdError = (data[1] >> 2 ) & 0x1;
 8005e18:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8005e1c:	7362      	strb	r2, [r4, #13]
			motor->status_register.STAT_StopOrHalt = (data[1] >> 3 ) & 0x1;
 8005e1e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8005e22:	73a2      	strb	r2, [r4, #14]
			motor->status_register.STAT_LimitCurrent = (data[1] >> 4 ) & 0x1;
 8005e24:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8005e28:	73e2      	strb	r2, [r4, #15]
			motor->status_register.STAT_LimitVel = (data[1] >> 5 ) & 0x1;
 8005e2a:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8005e2e:	7422      	strb	r2, [r4, #16]
			motor->status_register.STAT_LimitPos = (data[1] >> 6 ) & 0x1;
 8005e30:	f3c3 1280 	ubfx	r2, r3, #6, #1
			motor->status_register.STAT_LimitSVel = (data[1] >> 7 ) & 0x1;
 8005e34:	09db      	lsrs	r3, r3, #7
			motor->status_register.STAT_LimitPos = (data[1] >> 6 ) & 0x1;
 8005e36:	7462      	strb	r2, [r4, #17]
			motor->status_register.STAT_LimitSVel = (data[1] >> 7 ) & 0x1;
 8005e38:	74a3      	strb	r3, [r4, #18]
		}
	}
}
 8005e3a:	b004      	add	sp, #16
 8005e3c:	bd10      	pop	{r4, pc}

08005e3e <get_error_register>:
void get_error_register(struct motor_dev * motor, struct device * dev){
 8005e3e:	b530      	push	{r4, r5, lr}
 8005e40:	4604      	mov	r4, r0
 8005e42:	b085      	sub	sp, #20
	if(motor->initialized){
 8005e44:	7863      	ldrb	r3, [r4, #1]
void get_error_register(struct motor_dev * motor, struct device * dev){
 8005e46:	4608      	mov	r0, r1
	if(motor->initialized){
 8005e48:	b15b      	cbz	r3, 8005e62 <get_error_register+0x24>
		u8_t data[4];
		if(can_motor_request(dev, motor, CS_DOWNLOAD, SDO_STATUS_REGISTER_INDEX, SDO_STATUS_REGISTER_SUBINDEX, data)){
 8005e4a:	ab03      	add	r3, sp, #12
 8005e4c:	2500      	movs	r5, #0
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	9500      	str	r5, [sp, #0]
 8005e52:	f243 0302 	movw	r3, #12290	; 0x3002
 8005e56:	2240      	movs	r2, #64	; 0x40
 8005e58:	4621      	mov	r1, r4
 8005e5a:	f7fa fba5 	bl	80005a8 <can_motor_request>
 8005e5e:	b100      	cbz	r0, 8005e62 <get_error_register+0x24>
			motor->error_register = data[0] & (data[1] << 8) & (data[2] << 16) & (data[3] << 24);
 8005e60:	6165      	str	r5, [r4, #20]
		}
	}
}
 8005e62:	b005      	add	sp, #20
 8005e64:	bd30      	pop	{r4, r5, pc}

08005e66 <get_motor_mode>:

void get_motor_mode(struct motor_dev * motor, struct device * dev){
 8005e66:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u8_t data[4];
	if(can_motor_request(dev, motor, CS_DOWNLOAD, SDO_MODE_INDEX, SDO_MODE_SUBINDEX, data)){
 8005e68:	ab03      	add	r3, sp, #12
void get_motor_mode(struct motor_dev * motor, struct device * dev){
 8005e6a:	4604      	mov	r4, r0
	if(can_motor_request(dev, motor, CS_DOWNLOAD, SDO_MODE_INDEX, SDO_MODE_SUBINDEX, data)){
 8005e6c:	9301      	str	r3, [sp, #4]
 8005e6e:	2300      	movs	r3, #0
void get_motor_mode(struct motor_dev * motor, struct device * dev){
 8005e70:	4608      	mov	r0, r1
	if(can_motor_request(dev, motor, CS_DOWNLOAD, SDO_MODE_INDEX, SDO_MODE_SUBINDEX, data)){
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	2240      	movs	r2, #64	; 0x40
 8005e76:	f243 0303 	movw	r3, #12291	; 0x3003
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	f7fa fb94 	bl	80005a8 <can_motor_request>
 8005e80:	b110      	cbz	r0, 8005e88 <get_motor_mode+0x22>
		motor->mode = data[0];
 8005e82:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005e86:	7623      	strb	r3, [r4, #24]
	}
}
 8005e88:	b004      	add	sp, #16
 8005e8a:	bd10      	pop	{r4, pc}

08005e8c <motor_enable>:
	if(can_motor_request(dev, motor, CS_DOWNLOAD, SDO_POSITION_LIMIT_MAX_INDEX, SDO_POSITION_LIMIT_MAX_SUBINDEX, data)){
		motor->actual_limits.PosMax = data[0] | (data[1] << 8) | (data[2] << 16) | (data[3] << 24);
	}
}

void motor_enable(struct motor_dev * motor, struct device * dev){
 8005e8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(motor->initialized){
 8005e8e:	7843      	ldrb	r3, [r0, #1]
void motor_enable(struct motor_dev * motor, struct device * dev){
 8005e90:	4604      	mov	r4, r0
 8005e92:	460d      	mov	r5, r1
	if(motor->initialized){
 8005e94:	b193      	cbz	r3, 8005ebc <motor_enable+0x30>

		u8_t data[4];
		zero_table(data);
		data[0] = 1;
 8005e96:	2301      	movs	r3, #1
 8005e98:	9303      	str	r3, [sp, #12]

		if(can_motor_request(dev, motor, CS_UPLOAD, SDO_ENABLE_INDEX, SDO_ENABLE_SUBINDEX, data)){
 8005e9a:	2600      	movs	r6, #0
 8005e9c:	ab03      	add	r3, sp, #12
 8005e9e:	9301      	str	r3, [sp, #4]
 8005ea0:	4601      	mov	r1, r0
 8005ea2:	9600      	str	r6, [sp, #0]
 8005ea4:	f243 0304 	movw	r3, #12292	; 0x3004
 8005ea8:	2223      	movs	r2, #35	; 0x23
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f7fa fb7c 	bl	80005a8 <can_motor_request>
 8005eb0:	b100      	cbz	r0, 8005eb4 <motor_enable+0x28>
			motor->error_register = data[0] & (data[1] << 8) & (data[2] << 16) & (data[3] << 24);
 8005eb2:	6166      	str	r6, [r4, #20]
		}

		get_motor_status(motor, dev);
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f7ff ff7d 	bl	8005db6 <get_motor_status>
	}
}
 8005ebc:	b004      	add	sp, #16
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}

08005ec0 <motor_disable>:


void motor_disable(struct motor_dev * motor, struct device * dev){
 8005ec0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005ec2:	460e      	mov	r6, r1
	tb[0] = 0;
 8005ec4:	2500      	movs	r5, #0
	u8_t data[4];
	zero_table(data);

	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_ENABLE_INDEX, SDO_ENABLE_SUBINDEX, data)){
 8005ec6:	ab03      	add	r3, sp, #12
void motor_disable(struct motor_dev * motor, struct device * dev){
 8005ec8:	4604      	mov	r4, r0
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_ENABLE_INDEX, SDO_ENABLE_SUBINDEX, data)){
 8005eca:	e9cd 5300 	strd	r5, r3, [sp]
 8005ece:	4601      	mov	r1, r0
 8005ed0:	f243 0304 	movw	r3, #12292	; 0x3004
 8005ed4:	2223      	movs	r2, #35	; 0x23
 8005ed6:	4630      	mov	r0, r6
	tb[0] = 0;
 8005ed8:	9503      	str	r5, [sp, #12]
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_ENABLE_INDEX, SDO_ENABLE_SUBINDEX, data)){
 8005eda:	f7fa fb65 	bl	80005a8 <can_motor_request>
 8005ede:	b100      	cbz	r0, 8005ee2 <motor_disable+0x22>
		motor->error_register = data[0] & (data[1] << 8) & (data[2] << 16) & (data[3] << 24);
 8005ee0:	6165      	str	r5, [r4, #20]
	}

	get_motor_status(motor, dev);
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f7ff ff66 	bl	8005db6 <get_motor_status>
}
 8005eea:	b004      	add	sp, #16
 8005eec:	bd70      	pop	{r4, r5, r6, pc}

08005eee <motor_mode>:
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_SVEL_FEEDBACK_INDEX, SDO_SVEL_FEEDBACK_SUBINDEX, data)){

	}

}
void motor_mode(struct motor_dev * motor, struct device *dev, u8_t mode){
 8005eee:	b530      	push	{r4, r5, lr}
 8005ef0:	b085      	sub	sp, #20
 8005ef2:	460d      	mov	r5, r1
	tb[1] = 0;
 8005ef4:	2300      	movs	r3, #0

	u8_t data[4];
	zero_table(data);
	data[0] = mode;
 8005ef6:	f88d 200c 	strb.w	r2, [sp, #12]
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_MODE_INDEX, SDO_MODE_SUBINDEX, data)){
 8005efa:	aa03      	add	r2, sp, #12
 8005efc:	e9cd 3200 	strd	r3, r2, [sp]
void motor_mode(struct motor_dev * motor, struct device *dev, u8_t mode){
 8005f00:	4604      	mov	r4, r0
	tb[1] = 0;
 8005f02:	f88d 300d 	strb.w	r3, [sp, #13]
	tb[2] = 0;
 8005f06:	f8ad 300e 	strh.w	r3, [sp, #14]
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_MODE_INDEX, SDO_MODE_SUBINDEX, data)){
 8005f0a:	2223      	movs	r2, #35	; 0x23
 8005f0c:	f243 0303 	movw	r3, #12291	; 0x3003
 8005f10:	4601      	mov	r1, r0
 8005f12:	4628      	mov	r0, r5
 8005f14:	f7fa fb48 	bl	80005a8 <can_motor_request>

	}
	get_motor_status(motor, dev);
 8005f18:	4629      	mov	r1, r5
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f7ff ff4b 	bl	8005db6 <get_motor_status>
}
 8005f20:	b005      	add	sp, #20
 8005f22:	bd30      	pop	{r4, r5, pc}

08005f24 <motor_set_velocity>:
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_FACTOR_GROUP_INDEX, SDO_FACTOR_GROUP_SUBINDEX, data)){

	}
}

void motor_set_velocity(struct motor_dev * motor, struct device *dev, int32_t velocity){
 8005f24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005f26:	4615      	mov	r5, r2
	u8_t data[4];
	int32_to_array(velocity, data);
 8005f28:	aa03      	add	r2, sp, #12
void motor_set_velocity(struct motor_dev * motor, struct device *dev, int32_t velocity){
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	460e      	mov	r6, r1
	int32_to_array(velocity, data);
 8005f2e:	4628      	mov	r0, r5
 8005f30:	4611      	mov	r1, r2
 8005f32:	f7ff ff38 	bl	8005da6 <int32_to_array>

	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_SET_VELOCITY_INDEX, SDO_SET_VELOCITY_SUBINDEX, data)){
 8005f36:	2300      	movs	r3, #0
 8005f38:	9201      	str	r2, [sp, #4]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2223      	movs	r2, #35	; 0x23
 8005f3e:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8005f42:	4621      	mov	r1, r4
 8005f44:	4630      	mov	r0, r6
 8005f46:	f7fa fb2f 	bl	80005a8 <can_motor_request>
 8005f4a:	b100      	cbz	r0, 8005f4e <motor_set_velocity+0x2a>
		motor->setpoints.Velocity = velocity;
 8005f4c:	6225      	str	r5, [r4, #32]
	}
}
 8005f4e:	b004      	add	sp, #16
 8005f50:	bd70      	pop	{r4, r5, r6, pc}

08005f52 <motor_set_encoder_resolution>:
	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_POSITION_LIMIT_MIN_INDEX, SDO_POSITION_LIMIT_MIN_SUBINDEX, data)){
		motor->actual_limits.PosMin = val;
	}
}

void motor_set_encoder_resolution(struct motor_dev * motor, struct device *dev, int32_t val){
 8005f52:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005f54:	4615      	mov	r5, r2
	u8_t data[4];
	int32_to_array(val, data);
 8005f56:	aa03      	add	r2, sp, #12
void motor_set_encoder_resolution(struct motor_dev * motor, struct device *dev, int32_t val){
 8005f58:	4604      	mov	r4, r0
 8005f5a:	460e      	mov	r6, r1
	int32_to_array(val, data);
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	4611      	mov	r1, r2
 8005f60:	f7ff ff21 	bl	8005da6 <int32_to_array>

	if(can_motor_request(dev, motor, CS_UPLOAD, SDO_ENCODER_RESOLUTION_INDEX, SDO_ENCODER_RESOLUTION_SUBINDEX, data)){
 8005f64:	2300      	movs	r3, #0
 8005f66:	9201      	str	r2, [sp, #4]
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	2223      	movs	r2, #35	; 0x23
 8005f6c:	f643 1362 	movw	r3, #14690	; 0x3962
 8005f70:	4621      	mov	r1, r4
 8005f72:	4630      	mov	r0, r6
 8005f74:	f7fa fb18 	bl	80005a8 <can_motor_request>
 8005f78:	b100      	cbz	r0, 8005f7c <motor_set_encoder_resolution+0x2a>
		motor->actual_limits.PosMin = val;
 8005f7a:	65e5      	str	r5, [r4, #92]	; 0x5c
	}
}
 8005f7c:	b004      	add	sp, #16
 8005f7e:	bd70      	pop	{r4, r5, r6, pc}

08005f80 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
 8005f84:	f990 000b 	ldrsb.w	r0, [r0, #11]
 8005f88:	250c      	movs	r5, #12
 8005f8a:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
 8005f8c:	4288      	cmp	r0, r1
 8005f8e:	eb06 0405 	add.w	r4, r6, r5
 8005f92:	bfb8      	it	lt
 8005f94:	5974      	ldrlt	r4, [r6, r5]

	*word = &bitarray[bn / 32];
 8005f96:	2a00      	cmp	r2, #0
 8005f98:	4610      	mov	r0, r2
 8005f9a:	bfb8      	it	lt
 8005f9c:	f102 001f 	addlt.w	r0, r2, #31
 8005fa0:	1140      	asrs	r0, r0, #5
 8005fa2:	eb04 0180 	add.w	r1, r4, r0, lsl #2
 8005fa6:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
 8005fa8:	f002 001f 	and.w	r0, r2, #31
 8005fac:	bd70      	pop	{r4, r5, r6, pc}

08005fae <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
 8005fae:	f04f 0310 	mov.w	r3, #16
 8005fb2:	f3ef 8011 	mrs	r0, BASEPRI
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
 8005fbe:	4770      	bx	lr

08005fc0 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 8005fc0:	07c3      	lsls	r3, r0, #31
 8005fc2:	d503      	bpl.n	8005fcc <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
 8005fc4:	f381 8811 	msr	BASEPRI, r1
 8005fc8:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
 8005fcc:	4770      	bx	lr

08005fce <z_sys_mem_pool_base_init>:
{
 8005fce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8005fd2:	6846      	ldr	r6, [r0, #4]
 8005fd4:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 8005fd6:	6801      	ldr	r1, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
 8005fd8:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
 8005fdc:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8005fde:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
 8005fe2:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 8005fe4:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8005fe6:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
 8005fe8:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
 8005fea:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
 8005fee:	4598      	cmp	r8, r3
 8005ff0:	dc05      	bgt.n	8005ffe <z_sys_mem_pool_base_init+0x30>
 8005ff2:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	428f      	cmp	r7, r1
 8005ff8:	dc20      	bgt.n	800603c <z_sys_mem_pool_base_init+0x6e>
}
 8005ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
 8005ffe:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
 8006002:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
 8006006:	fb09 fe03 	mul.w	lr, r9, r3
 800600a:	eb0a 040e 	add.w	r4, sl, lr
 800600e:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
 8006012:	2d20      	cmp	r5, #32
 8006014:	e9c4 bb01 	strd	fp, fp, [r4, #4]
 8006018:	d805      	bhi.n	8006026 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
 800601a:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
 800601c:	0892      	lsrs	r2, r2, #2
 800601e:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
 8006022:	3301      	adds	r3, #1
 8006024:	e7e3      	b.n	8005fee <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
 8006026:	f115 041f 	adds.w	r4, r5, #31
 800602a:	bf48      	it	mi
 800602c:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
 8006030:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
 8006032:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
 8006036:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800603a:	e7ef      	b.n	800601c <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
 800603c:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
 800603e:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
 8006040:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
 8006044:	18ec      	adds	r4, r5, r3
	node->next = list;
 8006046:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
 800604a:	6895      	ldr	r5, [r2, #8]
 800604c:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
 800604e:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
 8006050:	3101      	adds	r1, #1
 8006052:	602c      	str	r4, [r5, #0]
	list->tail = node;
 8006054:	4433      	add	r3, r6
 8006056:	6094      	str	r4, [r2, #8]
 8006058:	e7cd      	b.n	8005ff6 <z_sys_mem_pool_base_init+0x28>

0800605a <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
 800605a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605e:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 8006060:	7a85      	ldrb	r5, [r0, #10]
{
 8006062:	af00      	add	r7, sp, #0
 8006064:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 8006068:	00ab      	lsls	r3, r5, #2
 800606a:	3307      	adds	r3, #7
 800606c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006070:	ebad 0d03 	sub.w	sp, sp, r3
 8006074:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
 8006076:	4653      	mov	r3, sl
 8006078:	6842      	ldr	r2, [r0, #4]
 800607a:	f843 2904 	str.w	r2, [r3], #-4
{
 800607e:	4604      	mov	r4, r0
	for (i = 0; i < p->n_levels; i++) {
 8006080:	2200      	movs	r2, #0
 8006082:	4295      	cmp	r5, r2
 8006084:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
 8006088:	dd09      	ble.n	800609e <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
 800608a:	b122      	cbz	r2, 8006096 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	0880      	lsrs	r0, r0, #2
 8006090:	f020 0003 	bic.w	r0, r0, #3
 8006094:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
 8006096:	f853 0f04 	ldr.w	r0, [r3, #4]!
 800609a:	4288      	cmp	r0, r1
 800609c:	d208      	bcs.n	80060b0 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
 800609e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80060a2:	d107      	bne.n	80060b4 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
 80060a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060a6:	2300      	movs	r3, #0
 80060a8:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
 80060aa:	f06f 000b 	mvn.w	r0, #11
 80060ae:	e044      	b.n	800613a <z_sys_mem_pool_block_alloc+0xe0>
	for (i = 0; i < p->n_levels; i++) {
 80060b0:	3201      	adds	r2, #1
 80060b2:	e7e6      	b.n	8006082 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80060b4:	7c20      	ldrb	r0, [r4, #16]
 80060b6:	f010 0001 	ands.w	r0, r0, #1
 80060ba:	d001      	beq.n	80060c0 <z_sys_mem_pool_block_alloc+0x66>
 80060bc:	f7ff ff77 	bl	8005fae <pool_irq_lock.isra.2.part.3>
 80060c0:	68e2      	ldr	r2, [r4, #12]
 80060c2:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
 80060c4:	4680      	mov	r8, r0
	for (i = alloc_l; i >= 0; i--) {
 80060c6:	fb03 2309 	mla	r3, r3, r9, r2
	block = sys_dlist_get(&p->levels[l].free_list);
 80060ca:	464e      	mov	r6, r9
	return list->head == list;
 80060cc:	461a      	mov	r2, r3
 80060ce:	f852 5f04 	ldr.w	r5, [r2, #4]!
	if (!sys_dlist_is_empty(list)) {
 80060d2:	4295      	cmp	r5, r2
 80060d4:	d06d      	beq.n	80061b2 <z_sys_mem_pool_block_alloc+0x158>
	node->prev->next = node->next;
 80060d6:	e9d5 3200 	ldrd	r3, r2, [r5]
 80060da:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 80060dc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80060de:	2300      	movs	r3, #0
	node->prev = NULL;
 80060e0:	e9c5 3300 	strd	r3, r3, [r5]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 80060e4:	6823      	ldr	r3, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
 80060e6:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
 80060ea:	f107 0b14 	add.w	fp, r7, #20
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 80060ee:	1aea      	subs	r2, r5, r3
	int bit = get_bit_ptr(p, level, bn, &word);
 80060f0:	4620      	mov	r0, r4
 80060f2:	fb92 f2f1 	sdiv	r2, r2, r1
 80060f6:	465b      	mov	r3, fp
 80060f8:	4631      	mov	r1, r6
 80060fa:	f7ff ff41 	bl	8005f80 <get_bit_ptr>
	*word |= (1<<bit);
 80060fe:	6979      	ldr	r1, [r7, #20]
 8006100:	2201      	movs	r2, #1
 8006102:	680b      	ldr	r3, [r1, #0]
 8006104:	603a      	str	r2, [r7, #0]
 8006106:	fa02 f000 	lsl.w	r0, r2, r0
 800610a:	4303      	orrs	r3, r0
 800610c:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
 800610e:	454e      	cmp	r6, r9
 8006110:	db17      	blt.n	8006142 <z_sys_mem_pool_block_alloc+0xe8>
	pool_irq_unlock(p, key);
 8006112:	4641      	mov	r1, r8
 8006114:	7c20      	ldrb	r0, [r4, #16]
 8006116:	f7ff ff53 	bl	8005fc0 <pool_irq_unlock.isra.4>
	*data_p = data;
 800611a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800611c:	601d      	str	r5, [r3, #0]
	if (data == NULL) {
 800611e:	2d00      	cmp	r5, #0
 8006120:	d0c3      	beq.n	80060aa <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	1aed      	subs	r5, r5, r3
 800612c:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
 8006130:	fb95 f5f3 	sdiv	r5, r5, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
 8006134:	687b      	ldr	r3, [r7, #4]

	return 0;
 8006136:	2000      	movs	r0, #0
	*block_p = block_num(p, data, lsizes[alloc_l]);
 8006138:	601d      	str	r5, [r3, #0]
}
 800613a:	371c      	adds	r7, #28
 800613c:	46bd      	mov	sp, r7
 800613e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8006142:	6822      	ldr	r2, [r4, #0]
 8006144:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
	set_alloc_bit(p, l + 1, 4*bn);
 8006148:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
 800614a:	4631      	mov	r1, r6
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 800614c:	1aaa      	subs	r2, r5, r2
	int bit = get_bit_ptr(p, level, bn, &word);
 800614e:	4620      	mov	r0, r4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8006150:	fb92 f2f3 	sdiv	r2, r2, r3
	int bit = get_bit_ptr(p, level, bn, &word);
 8006154:	465b      	mov	r3, fp
 8006156:	0092      	lsls	r2, r2, #2
 8006158:	f7ff ff12 	bl	8005f80 <get_bit_ptr>
	*word |= (1<<bit);
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
 8006160:	68e1      	ldr	r1, [r4, #12]
	*word |= (1<<bit);
 8006162:	fa03 f000 	lsl.w	r0, r3, r0
 8006166:	6813      	ldr	r3, [r2, #0]
 8006168:	4303      	orrs	r3, r0
 800616a:	6013      	str	r3, [r2, #0]
		int lsz = lsizes[l + 1];
 800616c:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
 8006170:	230c      	movs	r3, #12
 8006172:	fb03 1106 	mla	r1, r3, r6, r1
 8006176:	2203      	movs	r2, #3
 8006178:	f101 0e04 	add.w	lr, r1, #4
 800617c:	182b      	adds	r3, r5, r0
 800617e:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
 8006180:	688a      	ldr	r2, [r1, #8]
 8006182:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
 8006184:	688a      	ldr	r2, [r1, #8]
	node->next = list;
 8006186:	f8c3 e000 	str.w	lr, [r3]
	list->tail->next = node;
 800618a:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
 800618c:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
 800618e:	608b      	str	r3, [r1, #8]
 8006190:	3a01      	subs	r2, #1
 8006192:	4403      	add	r3, r0
 8006194:	60fa      	str	r2, [r7, #12]
 8006196:	d1f3      	bne.n	8006180 <z_sys_mem_pool_block_alloc+0x126>
				pool_irq_unlock(p, key);
 8006198:	4641      	mov	r1, r8
 800619a:	7c20      	ldrb	r0, [r4, #16]
 800619c:	f7ff ff10 	bl	8005fc0 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80061a0:	7c23      	ldrb	r3, [r4, #16]
 80061a2:	07d9      	lsls	r1, r3, #31
 80061a4:	d503      	bpl.n	80061ae <z_sys_mem_pool_block_alloc+0x154>
 80061a6:	f7ff ff02 	bl	8005fae <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
 80061aa:	4680      	mov	r8, r0
 80061ac:	e7af      	b.n	800610e <z_sys_mem_pool_block_alloc+0xb4>
		return 0;
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	e7fb      	b.n	80061aa <z_sys_mem_pool_block_alloc+0x150>
	for (i = alloc_l; i >= 0; i--) {
 80061b2:	3e01      	subs	r6, #1
 80061b4:	1c72      	adds	r2, r6, #1
 80061b6:	f1a3 030c 	sub.w	r3, r3, #12
 80061ba:	d187      	bne.n	80060cc <z_sys_mem_pool_block_alloc+0x72>
 80061bc:	2500      	movs	r5, #0
 80061be:	e7a8      	b.n	8006112 <z_sys_mem_pool_block_alloc+0xb8>

080061c0 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
 80061c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c4:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 80061c6:	7a83      	ldrb	r3, [r0, #10]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	3307      	adds	r3, #7
 80061cc:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
 80061d0:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 80061d2:	ebad 0d03 	sub.w	sp, sp, r3
 80061d6:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
 80061d8:	6843      	ldr	r3, [r0, #4]
 80061da:	f8cb 3000 	str.w	r3, [fp]
{
 80061de:	4606      	mov	r6, r0
	for (i = 1; i <= level; i++) {
 80061e0:	465c      	mov	r4, fp
 80061e2:	2001      	movs	r0, #1
 80061e4:	4281      	cmp	r1, r0
 80061e6:	d215      	bcs.n	8006214 <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80061e8:	7c30      	ldrb	r0, [r6, #16]
 80061ea:	f010 0001 	ands.w	r0, r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
 80061ee:	4688      	mov	r8, r1
 80061f0:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80061f2:	d001      	beq.n	80061f8 <z_sys_mem_pool_block_free+0x38>
 80061f4:	f7ff fedb 	bl	8005fae <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
 80061f8:	4604      	mov	r4, r0
	while (level >= 0) {
 80061fa:	f1b8 0f00 	cmp.w	r8, #0
 80061fe:	da11      	bge.n	8006224 <z_sys_mem_pool_block_free+0x64>
	return -1;
 8006200:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
 8006204:	4621      	mov	r1, r4
 8006206:	7c30      	ldrb	r0, [r6, #16]
 8006208:	f7ff feda 	bl	8005fc0 <pool_irq_unlock.isra.4>
}
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	089b      	lsrs	r3, r3, #2
 8006218:	f023 0303 	bic.w	r3, r3, #3
 800621c:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
 8006220:	3001      	adds	r0, #1
 8006222:	e7df      	b.n	80061e4 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
 8006224:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8006228:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
 800622a:	fb03 fa05 	mul.w	sl, r3, r5
 800622e:	6833      	ldr	r3, [r6, #0]
 8006230:	603b      	str	r3, [r7, #0]
 8006232:	eb03 090a 	add.w	r9, r3, sl
	int bit = get_bit_ptr(p, level, bn, &word);
 8006236:	462a      	mov	r2, r5
 8006238:	f107 030c 	add.w	r3, r7, #12
 800623c:	4641      	mov	r1, r8
 800623e:	4630      	mov	r0, r6
 8006240:	f7ff fe9e 	bl	8005f80 <get_bit_ptr>
	*word &= ~(1<<bit);
 8006244:	68fa      	ldr	r2, [r7, #12]
	node->next = list;
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	2301      	movs	r3, #1
 800624a:	fa03 f000 	lsl.w	r0, r3, r0
 800624e:	6813      	ldr	r3, [r2, #0]
 8006250:	ea23 0300 	bic.w	r3, r3, r0
 8006254:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
 8006256:	68f3      	ldr	r3, [r6, #12]
 8006258:	220c      	movs	r2, #12
 800625a:	fb02 3308 	mla	r3, r2, r8, r3
 800625e:	1d1a      	adds	r2, r3, #4
 8006260:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
 8006270:	f8c3 9008 	str.w	r9, [r3, #8]
		pool_irq_unlock(p, key);
 8006274:	7c30      	ldrb	r0, [r6, #16]
 8006276:	4621      	mov	r1, r4
 8006278:	f7ff fea2 	bl	8005fc0 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 800627c:	7c30      	ldrb	r0, [r6, #16]
 800627e:	f010 0001 	ands.w	r0, r0, #1
 8006282:	d001      	beq.n	8006288 <z_sys_mem_pool_block_free+0xc8>
 8006284:	f7ff fe93 	bl	8005fae <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
 8006288:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
 800628a:	f1b8 0f00 	cmp.w	r8, #0
 800628e:	d0b9      	beq.n	8006204 <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
 8006290:	f107 030c 	add.w	r3, r7, #12
 8006294:	462a      	mov	r2, r5
 8006296:	4641      	mov	r1, r8
 8006298:	4630      	mov	r0, r6
 800629a:	f7ff fe71 	bl	8005f80 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2800      	cmp	r0, #0
 80062a2:	bfb8      	it	lt
 80062a4:	3003      	addlt	r0, #3
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f020 0003 	bic.w	r0, r0, #3
 80062ac:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
 80062b0:	f010 000f 	ands.w	r0, r0, #15
 80062b4:	d1a6      	bne.n	8006204 <z_sys_mem_pool_block_free+0x44>
			int b = (bn & ~3) + i;
 80062b6:	f025 0a03 	bic.w	sl, r5, #3
	node->next = NULL;
 80062ba:	4684      	mov	ip, r0
	return (u8_t *)p->buf + lsz * block;
 80062bc:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
 80062be:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
 80062c2:	4353      	muls	r3, r2
 80062c4:	6832      	ldr	r2, [r6, #0]
 80062c6:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
 80062c8:	f852 e003 	ldr.w	lr, [r2, r3]
 80062cc:	f8d1 9004 	ldr.w	r9, [r1, #4]
		for (i = 0; i < 4; i++) {
 80062d0:	3001      	adds	r0, #1
 80062d2:	2804      	cmp	r0, #4
 80062d4:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
 80062d8:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
 80062dc:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
 80062e0:	f8c1 c004 	str.w	ip, [r1, #4]
 80062e4:	d1ea      	bne.n	80062bc <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	bfb8      	it	lt
 80062ea:	3503      	addlt	r5, #3
		level = level - 1;
 80062ec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
 80062f0:	10ad      	asrs	r5, r5, #2
 80062f2:	e782      	b.n	80061fa <z_sys_mem_pool_block_free+0x3a>

080062f4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80062f4:	4604      	mov	r4, r0
 80062f6:	b508      	push	{r3, lr}
 80062f8:	4608      	mov	r0, r1
 80062fa:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 80062fc:	461a      	mov	r2, r3
 80062fe:	47a0      	blx	r4
	return z_impl_k_current_get();
 8006300:	f7ff f98c 	bl	800561c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 8006304:	f7fd f9e4 	bl	80036d0 <z_impl_k_thread_abort>

08006308 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
 8006308:	b510      	push	{r4, lr}
 800630a:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
 800630c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006310:	4620      	mov	r0, r4
 8006312:	f002 fa5c 	bl	80087ce <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
 8006316:	4603      	mov	r3, r0
 8006318:	2800      	cmp	r0, #0
 800631a:	d0f7      	beq.n	800630c <z_work_q_main+0x4>
 800631c:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
 800631e:	6842      	ldr	r2, [r0, #4]
 8006320:	f3bf 8f5b 	dmb	ish
 8006324:	e853 1f00 	ldrex	r1, [r3]
 8006328:	f021 0c01 	bic.w	ip, r1, #1
 800632c:	e843 ce00 	strex	lr, ip, [r3]
 8006330:	f1be 0f00 	cmp.w	lr, #0
 8006334:	d1f6      	bne.n	8006324 <z_work_q_main+0x1c>
 8006336:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
 800633a:	07cb      	lsls	r3, r1, #31
 800633c:	d500      	bpl.n	8006340 <z_work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
 800633e:	4790      	blx	r2
	z_impl_k_yield();
 8006340:	f7ff f902 	bl	8005548 <z_impl_k_yield>
 8006344:	e7e2      	b.n	800630c <z_work_q_main+0x4>

08006346 <arch_printk_char_out>:
}
 8006346:	2000      	movs	r0, #0
 8006348:	4770      	bx	lr

0800634a <print_err>:
{
 800634a:	b570      	push	{r4, r5, r6, lr}
 800634c:	4604      	mov	r4, r0
 800634e:	460d      	mov	r5, r1
	out('E', ctx);
 8006350:	2045      	movs	r0, #69	; 0x45
 8006352:	47a0      	blx	r4
	out('R', ctx);
 8006354:	4629      	mov	r1, r5
 8006356:	2052      	movs	r0, #82	; 0x52
 8006358:	47a0      	blx	r4
	out('R', ctx);
 800635a:	4629      	mov	r1, r5
 800635c:	4623      	mov	r3, r4
 800635e:	2052      	movs	r0, #82	; 0x52
}
 8006360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
 8006364:	4718      	bx	r3

08006366 <z_vprintk>:
{
 8006366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636a:	b08b      	sub	sp, #44	; 0x2c
 800636c:	461c      	mov	r4, r3
	char length_mod = 0;
 800636e:	f04f 0800 	mov.w	r8, #0
 8006372:	1e53      	subs	r3, r2, #1
{
 8006374:	4606      	mov	r6, r0
 8006376:	460f      	mov	r7, r1
 8006378:	9302      	str	r3, [sp, #8]
	int min_width = -1;
 800637a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 800637e:	46c1      	mov	r9, r8
			might_format = 0;
 8006380:	2500      	movs	r5, #0
					break;
 8006382:	e005      	b.n	8006390 <z_vprintk+0x2a>
		if (!might_format) {
 8006384:	b96d      	cbnz	r5, 80063a2 <z_vprintk+0x3c>
			if (*fmt != '%') {
 8006386:	2825      	cmp	r0, #37	; 0x25
 8006388:	f000 814f 	beq.w	800662a <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
 800638c:	4639      	mov	r1, r7
 800638e:	47b0      	blx	r6
	while (*fmt) {
 8006390:	9b02      	ldr	r3, [sp, #8]
 8006392:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8006396:	9302      	str	r3, [sp, #8]
 8006398:	2800      	cmp	r0, #0
 800639a:	d1f3      	bne.n	8006384 <z_vprintk+0x1e>
}
 800639c:	b00b      	add	sp, #44	; 0x2c
 800639e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
 80063a2:	2864      	cmp	r0, #100	; 0x64
 80063a4:	d06e      	beq.n	8006484 <z_vprintk+0x11e>
 80063a6:	d81a      	bhi.n	80063de <z_vprintk+0x78>
 80063a8:	2839      	cmp	r0, #57	; 0x39
 80063aa:	d80a      	bhi.n	80063c2 <z_vprintk+0x5c>
 80063ac:	2831      	cmp	r0, #49	; 0x31
 80063ae:	d260      	bcs.n	8006472 <z_vprintk+0x10c>
 80063b0:	282d      	cmp	r0, #45	; 0x2d
 80063b2:	f000 8140 	beq.w	8006636 <z_vprintk+0x2d0>
 80063b6:	2830      	cmp	r0, #48	; 0x30
 80063b8:	d04c      	beq.n	8006454 <z_vprintk+0xee>
 80063ba:	2825      	cmp	r0, #37	; 0x25
 80063bc:	d107      	bne.n	80063ce <z_vprintk+0x68>
				out((int)'%', ctx);
 80063be:	4639      	mov	r1, r7
 80063c0:	e00b      	b.n	80063da <z_vprintk+0x74>
			switch (*fmt) {
 80063c2:	2858      	cmp	r0, #88	; 0x58
 80063c4:	f000 80bb 	beq.w	800653e <z_vprintk+0x1d8>
 80063c8:	2863      	cmp	r0, #99	; 0x63
 80063ca:	f000 812a 	beq.w	8006622 <z_vprintk+0x2bc>
					out((int)'%', ctx);
 80063ce:	4639      	mov	r1, r7
 80063d0:	2025      	movs	r0, #37	; 0x25
 80063d2:	47b0      	blx	r6
					out((int)*fmt, ctx);
 80063d4:	9b02      	ldr	r3, [sp, #8]
 80063d6:	7818      	ldrb	r0, [r3, #0]
 80063d8:	4639      	mov	r1, r7
 80063da:	47b0      	blx	r6
 80063dc:	e7d0      	b.n	8006380 <z_vprintk+0x1a>
			switch (*fmt) {
 80063de:	2870      	cmp	r0, #112	; 0x70
 80063e0:	f000 80a3 	beq.w	800652a <z_vprintk+0x1c4>
 80063e4:	d811      	bhi.n	800640a <z_vprintk+0xa4>
 80063e6:	2869      	cmp	r0, #105	; 0x69
 80063e8:	d04c      	beq.n	8006484 <z_vprintk+0x11e>
 80063ea:	286c      	cmp	r0, #108	; 0x6c
 80063ec:	d105      	bne.n	80063fa <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
 80063ee:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 80063f2:	d12a      	bne.n	800644a <z_vprintk+0xe4>
					length_mod = 'L';
 80063f4:	f04f 084c 	mov.w	r8, #76	; 0x4c
 80063f8:	e7ca      	b.n	8006390 <z_vprintk+0x2a>
			switch (*fmt) {
 80063fa:	2868      	cmp	r0, #104	; 0x68
 80063fc:	d1e7      	bne.n	80063ce <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
 80063fe:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
 8006402:	d122      	bne.n	800644a <z_vprintk+0xe4>
					length_mod = 'H';
 8006404:	f04f 0848 	mov.w	r8, #72	; 0x48
 8006408:	e7c2      	b.n	8006390 <z_vprintk+0x2a>
			switch (*fmt) {
 800640a:	2875      	cmp	r0, #117	; 0x75
 800640c:	d071      	beq.n	80064f2 <z_vprintk+0x18c>
 800640e:	d818      	bhi.n	8006442 <z_vprintk+0xdc>
 8006410:	2873      	cmp	r0, #115	; 0x73
 8006412:	d1dc      	bne.n	80063ce <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
 8006414:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
 8006418:	46ab      	mov	fp, r5
 800641a:	465b      	mov	r3, fp
 800641c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006420:	2800      	cmp	r0, #0
 8006422:	f040 80fb 	bne.w	800661c <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
 8006426:	f1b9 0f03 	cmp.w	r9, #3
 800642a:	f040 810a 	bne.w	8006642 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
 800642e:	1b5d      	subs	r5, r3, r5
 8006430:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
 8006434:	2d00      	cmp	r5, #0
 8006436:	dda3      	ble.n	8006380 <z_vprintk+0x1a>
						out(' ', ctx);
 8006438:	4639      	mov	r1, r7
 800643a:	2020      	movs	r0, #32
 800643c:	47b0      	blx	r6
 800643e:	3d01      	subs	r5, #1
 8006440:	e7f8      	b.n	8006434 <z_vprintk+0xce>
			switch (*fmt) {
 8006442:	2878      	cmp	r0, #120	; 0x78
 8006444:	d07b      	beq.n	800653e <z_vprintk+0x1d8>
 8006446:	287a      	cmp	r0, #122	; 0x7a
 8006448:	d1c1      	bne.n	80063ce <z_vprintk+0x68>
				} else if (length_mod == 0) {
 800644a:	f1b8 0f00 	cmp.w	r8, #0
 800644e:	d1be      	bne.n	80063ce <z_vprintk+0x68>
 8006450:	4680      	mov	r8, r0
 8006452:	e79d      	b.n	8006390 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
 8006454:	f1ba 0f00 	cmp.w	sl, #0
 8006458:	da0e      	bge.n	8006478 <z_vprintk+0x112>
 800645a:	f1b9 0f00 	cmp.w	r9, #0
 800645e:	f000 80ed 	beq.w	800663c <z_vprintk+0x2d6>
					min_width = *fmt - '0';
 8006462:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 8006466:	f1b9 0f00 	cmp.w	r9, #0
 800646a:	bf08      	it	eq
 800646c:	f04f 0902 	moveq.w	r9, #2
 8006470:	e78e      	b.n	8006390 <z_vprintk+0x2a>
				if (min_width < 0) {
 8006472:	f1ba 0f00 	cmp.w	sl, #0
 8006476:	dbf4      	blt.n	8006462 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
 8006478:	230a      	movs	r3, #10
 800647a:	fb03 0a0a 	mla	sl, r3, sl, r0
 800647e:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8006482:	e7f0      	b.n	8006466 <z_vprintk+0x100>
				if (length_mod == 'z') {
 8006484:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 8006488:	d102      	bne.n	8006490 <z_vprintk+0x12a>
					d = va_arg(ap, int);
 800648a:	f854 5b04 	ldr.w	r5, [r4], #4
 800648e:	e01f      	b.n	80064d0 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
 8006490:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8006494:	d0f9      	beq.n	800648a <z_vprintk+0x124>
				} else if (length_mod == 'L') {
 8006496:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 800649a:	d1f6      	bne.n	800648a <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
 800649c:	3407      	adds	r4, #7
 800649e:	f024 0407 	bic.w	r4, r4, #7
 80064a2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
 80064a6:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
 80064aa:	9106      	str	r1, [sp, #24]
 80064ac:	f143 0100 	adc.w	r1, r3, #0
 80064b0:	9107      	str	r1, [sp, #28]
 80064b2:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80064b6:	2100      	movs	r1, #0
 80064b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064bc:	4561      	cmp	r1, ip
 80064be:	bf08      	it	eq
 80064c0:	4558      	cmpeq	r0, fp
 80064c2:	d204      	bcs.n	80064ce <z_vprintk+0x168>
						print_err(out, ctx);
 80064c4:	4639      	mov	r1, r7
 80064c6:	4630      	mov	r0, r6
 80064c8:	f7ff ff3f 	bl	800634a <print_err>
						break;
 80064cc:	e758      	b.n	8006380 <z_vprintk+0x1a>
					d = lld;
 80064ce:	4615      	mov	r5, r2
				if (d < 0) {
 80064d0:	2d00      	cmp	r5, #0
 80064d2:	da05      	bge.n	80064e0 <z_vprintk+0x17a>
					out((int)'-', ctx);
 80064d4:	4639      	mov	r1, r7
 80064d6:	202d      	movs	r0, #45	; 0x2d
 80064d8:	47b0      	blx	r6
					d = -d;
 80064da:	426d      	negs	r5, r5
					min_width--;
 80064dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
 80064e0:	f8cd a000 	str.w	sl, [sp]
 80064e4:	464b      	mov	r3, r9
 80064e6:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
 80064e8:	4639      	mov	r1, r7
 80064ea:	4630      	mov	r0, r6
 80064ec:	f7fa fa5a 	bl	80009a4 <_printk_dec_ulong>
				break;
 80064f0:	e746      	b.n	8006380 <z_vprintk+0x1a>
				if (length_mod == 'z') {
 80064f2:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 80064f6:	d102      	bne.n	80064fe <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
 80064f8:	f854 2b04 	ldr.w	r2, [r4], #4
 80064fc:	e011      	b.n	8006522 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
 80064fe:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8006502:	d0f9      	beq.n	80064f8 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
 8006504:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 8006508:	d1f6      	bne.n	80064f8 <z_vprintk+0x192>
					unsigned long long llu =
 800650a:	3407      	adds	r4, #7
 800650c:	f024 0407 	bic.w	r4, r4, #7
 8006510:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
 8006514:	2100      	movs	r1, #0
 8006516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800651a:	4299      	cmp	r1, r3
 800651c:	bf08      	it	eq
 800651e:	4290      	cmpeq	r0, r2
 8006520:	d3d0      	bcc.n	80064c4 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
 8006522:	f8cd a000 	str.w	sl, [sp]
 8006526:	464b      	mov	r3, r9
 8006528:	e7de      	b.n	80064e8 <z_vprintk+0x182>
				out('0', ctx);
 800652a:	4639      	mov	r1, r7
 800652c:	2030      	movs	r0, #48	; 0x30
 800652e:	47b0      	blx	r6
				out('x', ctx);
 8006530:	4639      	mov	r1, r7
 8006532:	2078      	movs	r0, #120	; 0x78
 8006534:	47b0      	blx	r6
					min_width = 8;
 8006536:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
 800653a:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
 800653e:	9b02      	ldr	r3, [sp, #8]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b70      	cmp	r3, #112	; 0x70
 8006544:	d104      	bne.n	8006550 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
 8006546:	f854 3b04 	ldr.w	r3, [r4], #4
 800654a:	9304      	str	r3, [sp, #16]
 800654c:	2300      	movs	r3, #0
 800654e:	e00d      	b.n	800656c <z_vprintk+0x206>
				} else if (length_mod == 'l') {
 8006550:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8006554:	d0f7      	beq.n	8006546 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
 8006556:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 800655a:	d1f4      	bne.n	8006546 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
 800655c:	3407      	adds	r4, #7
 800655e:	f024 0307 	bic.w	r3, r4, #7
 8006562:	461c      	mov	r4, r3
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f854 2b08 	ldr.w	r2, [r4], #8
 800656a:	9204      	str	r2, [sp, #16]
	int digits = 0;
 800656c:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
 800656e:	2210      	movs	r2, #16
	int digits = 0;
 8006570:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
 8006572:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
 8006574:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
 8006578:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
 800657c:	9804      	ldr	r0, [sp, #16]
 800657e:	f1cb 0c20 	rsb	ip, fp, #32
 8006582:	f1ab 0120 	sub.w	r1, fp, #32
 8006586:	fa20 f00b 	lsr.w	r0, r0, fp
 800658a:	fa03 fc0c 	lsl.w	ip, r3, ip
 800658e:	ea40 000c 	orr.w	r0, r0, ip
 8006592:	fa23 f101 	lsr.w	r1, r3, r1
 8006596:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
 8006598:	f010 000f 	ands.w	r0, r0, #15
 800659c:	d108      	bne.n	80065b0 <z_vprintk+0x24a>
 800659e:	9905      	ldr	r1, [sp, #20]
 80065a0:	b911      	cbnz	r1, 80065a8 <z_vprintk+0x242>
 80065a2:	f1bb 0f00 	cmp.w	fp, #0
 80065a6:	d124      	bne.n	80065f2 <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
 80065a8:	2130      	movs	r1, #48	; 0x30
 80065aa:	e005      	b.n	80065b8 <z_vprintk+0x252>
			found_largest_digit = 1;
 80065ac:	9505      	str	r5, [sp, #20]
 80065ae:	e7e3      	b.n	8006578 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
 80065b0:	2809      	cmp	r0, #9
 80065b2:	bf8c      	ite	hi
 80065b4:	2157      	movhi	r1, #87	; 0x57
 80065b6:	2130      	movls	r1, #48	; 0x30
 80065b8:	4408      	add	r0, r1
			out((int)nibble, ctx);
 80065ba:	b240      	sxtb	r0, r0
 80065bc:	4639      	mov	r1, r7
 80065be:	9308      	str	r3, [sp, #32]
 80065c0:	9205      	str	r2, [sp, #20]
 80065c2:	47b0      	blx	r6
			digits++;
 80065c4:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
 80065c6:	9a05      	ldr	r2, [sp, #20]
			digits++;
 80065c8:	3301      	adds	r3, #1
 80065ca:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
 80065cc:	9b08      	ldr	r3, [sp, #32]
 80065ce:	f1bb 0f00 	cmp.w	fp, #0
 80065d2:	d1eb      	bne.n	80065ac <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
 80065d4:	f1b9 0f03 	cmp.w	r9, #3
 80065d8:	f47f aed2 	bne.w	8006380 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
 80065e2:	2d00      	cmp	r5, #0
 80065e4:	f77f aecc 	ble.w	8006380 <z_vprintk+0x1a>
			out(' ', ctx);
 80065e8:	4639      	mov	r1, r7
 80065ea:	2020      	movs	r0, #32
 80065ec:	47b0      	blx	r6
 80065ee:	3d01      	subs	r5, #1
 80065f0:	e7f7      	b.n	80065e2 <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
 80065f2:	1e51      	subs	r1, r2, #1
 80065f4:	4592      	cmp	sl, r2
 80065f6:	9108      	str	r1, [sp, #32]
 80065f8:	db07      	blt.n	800660a <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
 80065fa:	f1b9 0f01 	cmp.w	r9, #1
 80065fe:	d106      	bne.n	800660e <z_vprintk+0x2a8>
 8006600:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
 8006602:	4639      	mov	r1, r7
 8006604:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
 8006606:	47b0      	blx	r6
 8006608:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
 800660a:	9a08      	ldr	r2, [sp, #32]
 800660c:	e7b4      	b.n	8006578 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
 800660e:	f1b9 0f02 	cmp.w	r9, #2
 8006612:	d1fa      	bne.n	800660a <z_vprintk+0x2a4>
 8006614:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
 8006616:	4639      	mov	r1, r7
 8006618:	2020      	movs	r0, #32
 800661a:	e7f4      	b.n	8006606 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
 800661c:	4639      	mov	r1, r7
 800661e:	47b0      	blx	r6
 8006620:	e6fb      	b.n	800641a <z_vprintk+0xb4>
				out(c, ctx);
 8006622:	4639      	mov	r1, r7
 8006624:	f854 0b04 	ldr.w	r0, [r4], #4
 8006628:	e6d7      	b.n	80063da <z_vprintk+0x74>
				length_mod = 0;
 800662a:	46a8      	mov	r8, r5
				padding = PAD_NONE;
 800662c:	46a9      	mov	r9, r5
				min_width = -1;
 800662e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
 8006632:	2501      	movs	r5, #1
 8006634:	e6ac      	b.n	8006390 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
 8006636:	f04f 0903 	mov.w	r9, #3
 800663a:	e6a9      	b.n	8006390 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
 800663c:	f04f 0901 	mov.w	r9, #1
 8006640:	e6a6      	b.n	8006390 <z_vprintk+0x2a>
			might_format = 0;
 8006642:	4605      	mov	r5, r0
		++fmt;
 8006644:	e6a4      	b.n	8006390 <z_vprintk+0x2a>

08006646 <printk>:
{
 8006646:	b40f      	push	{r0, r1, r2, r3}
 8006648:	b507      	push	{r0, r1, r2, lr}
 800664a:	a904      	add	r1, sp, #16
 800664c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8006650:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 8006652:	f7fa f9f3 	bl	8000a3c <vprintk>
}
 8006656:	b003      	add	sp, #12
 8006658:	f85d eb04 	ldr.w	lr, [sp], #4
 800665c:	b004      	add	sp, #16
 800665e:	4770      	bx	lr

08006660 <ring_buf_space_get>:
 *
 * @return Ring buffer free space (in 32-bit words or bytes).
 */
static inline u32_t ring_buf_space_get(struct ring_buf *buf)
{
	return z_ring_buf_custom_space_get(buf->size, buf->head, buf->tail);
 8006660:	6903      	ldr	r3, [r0, #16]
 8006662:	e9d0 2000 	ldrd	r2, r0, [r0]
	if (tail < head) {
 8006666:	4282      	cmp	r2, r0
	return (size - tail) + head - 1;
 8006668:	bf96      	itet	ls
 800666a:	189b      	addls	r3, r3, r2
		return head - tail - 1;
 800666c:	f102 33ff 	addhi.w	r3, r2, #4294967295	; 0xffffffff
	return (size - tail) + head - 1;
 8006670:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
 8006674:	1a18      	subs	r0, r3, r0
}
 8006676:	4770      	bx	lr

08006678 <ring_buf_put_claim>:

u32_t ring_buf_put_claim(struct ring_buf *buf, u8_t **data, u32_t size)
{
	u32_t space, trail_size, allocated;

	space = z_ring_buf_custom_space_get(buf->size, buf->head,
 8006678:	6803      	ldr	r3, [r0, #0]
{
 800667a:	b570      	push	{r4, r5, r6, lr}
	space = z_ring_buf_custom_space_get(buf->size, buf->head,
 800667c:	6884      	ldr	r4, [r0, #8]
 800667e:	6906      	ldr	r6, [r0, #16]
	if (tail < head) {
 8006680:	42a3      	cmp	r3, r4
					    buf->misc.byte_mode.tmp_tail);

	/* Limit requested size to available size. */
	size = MIN(size, space);
	trail_size = buf->size - buf->misc.byte_mode.tmp_tail;
 8006682:	eba6 0504 	sub.w	r5, r6, r4
	return (size - tail) + head - 1;
 8006686:	bf98      	it	ls
 8006688:	199b      	addls	r3, r3, r6
 800668a:	3b01      	subs	r3, #1

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
 800668c:	4295      	cmp	r5, r2
 800668e:	eba3 0304 	sub.w	r3, r3, r4
 8006692:	bf28      	it	cs
 8006694:	4615      	movcs	r5, r2
 8006696:	42ab      	cmp	r3, r5

	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
 8006698:	6942      	ldr	r2, [r0, #20]
	allocated = MIN(trail_size, size);
 800669a:	bf28      	it	cs
 800669c:	462b      	movcs	r3, r5
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
 800669e:	4422      	add	r2, r4
	buf->misc.byte_mode.tmp_tail =
		wrap(buf->misc.byte_mode.tmp_tail + allocated, buf->size);
 80066a0:	441c      	add	r4, r3
	return val >= max ? (val - max) : val;
 80066a2:	42a6      	cmp	r6, r4
 80066a4:	bf98      	it	ls
 80066a6:	1ba4      	subls	r4, r4, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
 80066a8:	600a      	str	r2, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
 80066aa:	6084      	str	r4, [r0, #8]

	return allocated;
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	bd70      	pop	{r4, r5, r6, pc}

080066b0 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, u32_t size)
{
 80066b0:	b510      	push	{r4, lr}
 80066b2:	4604      	mov	r4, r0
	if (size > ring_buf_space_get(buf)) {
 80066b4:	f7ff ffd4 	bl	8006660 <ring_buf_space_get>
 80066b8:	4288      	cmp	r0, r1
 80066ba:	d309      	bcc.n	80066d0 <ring_buf_put_finish+0x20>
		return -EINVAL;
	}

	buf->tail = wrap(buf->tail + size, buf->size);
 80066bc:	6863      	ldr	r3, [r4, #4]
 80066be:	4419      	add	r1, r3
 80066c0:	6923      	ldr	r3, [r4, #16]
	return val >= max ? (val - max) : val;
 80066c2:	4299      	cmp	r1, r3
 80066c4:	bf28      	it	cs
 80066c6:	1ac9      	subcs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
 80066c8:	e9c4 1101 	strd	r1, r1, [r4, #4]

	return 0;
 80066cc:	2000      	movs	r0, #0
}
 80066ce:	bd10      	pop	{r4, pc}
		return -EINVAL;
 80066d0:	f06f 0015 	mvn.w	r0, #21
 80066d4:	e7fb      	b.n	80066ce <ring_buf_put_finish+0x1e>

080066d6 <ring_buf_put>:

u32_t ring_buf_put(struct ring_buf *buf, const u8_t *data, u32_t size)
{
 80066d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80066da:	4680      	mov	r8, r0
 80066dc:	460f      	mov	r7, r1
 80066de:	4616      	mov	r6, r2
	u8_t *dst;
	u32_t partial_size;
	u32_t total_size = 0U;
 80066e0:	2500      	movs	r5, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
 80066e2:	4632      	mov	r2, r6
 80066e4:	a901      	add	r1, sp, #4
 80066e6:	4640      	mov	r0, r8
 80066e8:	f7ff ffc6 	bl	8006678 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
 80066ec:	4639      	mov	r1, r7
		partial_size = ring_buf_put_claim(buf, &dst, size);
 80066ee:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
 80066f0:	4602      	mov	r2, r0
 80066f2:	9801      	ldr	r0, [sp, #4]
 80066f4:	f001 fc26 	bl	8007f44 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 80066f8:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
 80066fa:	4425      	add	r5, r4
		data += partial_size;
 80066fc:	4427      	add	r7, r4
	} while (size && partial_size);
 80066fe:	d001      	beq.n	8006704 <ring_buf_put+0x2e>
 8006700:	2c00      	cmp	r4, #0
 8006702:	d1ee      	bne.n	80066e2 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
 8006704:	4629      	mov	r1, r5
 8006706:	4640      	mov	r0, r8
 8006708:	f7ff ffd2 	bl	80066b0 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 800670c:	4628      	mov	r0, r5
 800670e:	b002      	add	sp, #8
 8006710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006714 <ring_buf_get_claim>:

u32_t ring_buf_get_claim(struct ring_buf *buf, u8_t **data, u32_t size)
{
 8006714:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t space, granted_size, trail_size;

	space = (buf->size - 1) -
		z_ring_buf_custom_space_get(buf->size,
 8006716:	e9d0 3603 	ldrd	r3, r6, [r0, #12]
 800671a:	6844      	ldr	r4, [r0, #4]
	if (tail < head) {
 800671c:	42a3      	cmp	r3, r4
	return (size - tail) + head - 1;
 800671e:	bf95      	itete	ls
 8006720:	18f7      	addls	r7, r6, r3
		return head - tail - 1;
 8006722:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
	return (size - tail) + head - 1;
 8006726:	f107 37ff 	addls.w	r7, r7, #4294967295	; 0xffffffff
		return head - tail - 1;
 800672a:	1b2d      	subhi	r5, r5, r4
	return (size - tail) + head - 1;
 800672c:	bf98      	it	ls
 800672e:	1b3d      	subls	r5, r7, r4
	space = (buf->size - 1) -
 8006730:	1e74      	subs	r4, r6, #1
 8006732:	1b64      	subs	r4, r4, r5
					    buf->misc.byte_mode.tmp_head,
					    buf->tail);
	trail_size = buf->size - buf->misc.byte_mode.tmp_head;
 8006734:	1af5      	subs	r5, r6, r3

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
 8006736:	42aa      	cmp	r2, r5
 8006738:	bf28      	it	cs
 800673a:	462a      	movcs	r2, r5
 800673c:	42a2      	cmp	r2, r4
 800673e:	bf28      	it	cs
 8006740:	4622      	movcs	r2, r4

	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
 8006742:	6944      	ldr	r4, [r0, #20]
 8006744:	441c      	add	r4, r3
	buf->misc.byte_mode.tmp_head =
		wrap(buf->misc.byte_mode.tmp_head + granted_size, buf->size);
 8006746:	4413      	add	r3, r2
	return val >= max ? (val - max) : val;
 8006748:	429e      	cmp	r6, r3
 800674a:	bf98      	it	ls
 800674c:	1b9b      	subls	r3, r3, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
 800674e:	600c      	str	r4, [r1, #0]
	buf->misc.byte_mode.tmp_head =
 8006750:	60c3      	str	r3, [r0, #12]

	return granted_size;
}
 8006752:	4610      	mov	r0, r2
 8006754:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006756 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, u32_t size)
{
 8006756:	b538      	push	{r3, r4, r5, lr}
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
 8006758:	6905      	ldr	r5, [r0, #16]
{
 800675a:	4604      	mov	r4, r0
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
 800675c:	f7ff ff80 	bl	8006660 <ring_buf_space_get>
 8006760:	1e6b      	subs	r3, r5, #1
 8006762:	1a18      	subs	r0, r3, r0

	if (size > allocated) {
 8006764:	4288      	cmp	r0, r1
 8006766:	d308      	bcc.n	800677a <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->head = wrap(buf->head + size, buf->size);
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	4419      	add	r1, r3
	return val >= max ? (val - max) : val;
 800676c:	428d      	cmp	r5, r1
 800676e:	bf98      	it	ls
 8006770:	1b49      	subls	r1, r1, r5
	buf->head = wrap(buf->head + size, buf->size);
 8006772:	6021      	str	r1, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
 8006774:	60e1      	str	r1, [r4, #12]

	return 0;
 8006776:	2000      	movs	r0, #0
}
 8006778:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 800677a:	f06f 0015 	mvn.w	r0, #21
 800677e:	e7fb      	b.n	8006778 <ring_buf_get_finish+0x22>

08006780 <ring_buf_get>:

u32_t ring_buf_get(struct ring_buf *buf, u8_t *data, u32_t size)
{
 8006780:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006784:	4680      	mov	r8, r0
 8006786:	460f      	mov	r7, r1
 8006788:	4616      	mov	r6, r2
	u8_t *src;
	u32_t partial_size;
	u32_t total_size = 0U;
 800678a:	2500      	movs	r5, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
 800678c:	4632      	mov	r2, r6
 800678e:	a901      	add	r1, sp, #4
 8006790:	4640      	mov	r0, r8
 8006792:	f7ff ffbf 	bl	8006714 <ring_buf_get_claim>
		memcpy(data, src, partial_size);
 8006796:	9901      	ldr	r1, [sp, #4]
		partial_size = ring_buf_get_claim(buf, &src, size);
 8006798:	4604      	mov	r4, r0
		memcpy(data, src, partial_size);
 800679a:	4602      	mov	r2, r0
 800679c:	4638      	mov	r0, r7
 800679e:	f001 fbd1 	bl	8007f44 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 80067a2:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
 80067a4:	4425      	add	r5, r4
		data += partial_size;
 80067a6:	4427      	add	r7, r4
	} while (size && partial_size);
 80067a8:	d001      	beq.n	80067ae <ring_buf_get+0x2e>
 80067aa:	2c00      	cmp	r4, #0
 80067ac:	d1ee      	bne.n	800678c <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
 80067ae:	4629      	mov	r1, r5
 80067b0:	4640      	mov	r0, r8
 80067b2:	f7ff ffd0 	bl	8006756 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 80067b6:	4628      	mov	r0, r5
 80067b8:	b002      	add	sp, #8
 80067ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080067be <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80067be:	4770      	bx	lr

080067c0 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
 80067c0:	070b      	lsls	r3, r1, #28
 80067c2:	d504      	bpl.n	80067ce <foldcase+0xe>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 80067c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80067c8:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
 80067ca:	bf98      	it	ls
 80067cc:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
 80067ce:	4770      	bx	lr

080067d0 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
 80067d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d4:	b087      	sub	sp, #28
 80067d6:	468a      	mov	sl, r1
 80067d8:	4614      	mov	r4, r2
 80067da:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
 80067dc:	4605      	mov	r5, r0
 80067de:	b918      	cbnz	r0, 80067e8 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
 80067e0:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
 80067e2:	b007      	add	sp, #28
 80067e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
 80067e8:	2900      	cmp	r1, #0
 80067ea:	d0f9      	beq.n	80067e0 <fnmatchx+0x10>
    if (recursion-- == 0)
 80067ec:	9b02      	ldr	r3, [sp, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 8114 	beq.w	8006a1c <fnmatchx+0x24c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 80067f4:	f004 0304 	and.w	r3, r4, #4
 80067f8:	460a      	mov	r2, r1
 80067fa:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
 80067fc:	46a8      	mov	r8, r5
 80067fe:	4621      	mov	r1, r4
 8006800:	f818 0b01 	ldrb.w	r0, [r8], #1
 8006804:	f7ff ffdc 	bl	80067c0 <foldcase>
 8006808:	b2c0      	uxtb	r0, r0
 800680a:	283f      	cmp	r0, #63	; 0x3f
 800680c:	4606      	mov	r6, r0
 800680e:	7817      	ldrb	r7, [r2, #0]
 8006810:	d022      	beq.n	8006858 <fnmatchx+0x88>
 8006812:	dc0a      	bgt.n	800682a <fnmatchx+0x5a>
 8006814:	b1c0      	cbz	r0, 8006848 <fnmatchx+0x78>
 8006816:	282a      	cmp	r0, #42	; 0x2a
 8006818:	d035      	beq.n	8006886 <fnmatchx+0xb6>
            if (c != FOLDCASE(*string++, flags))
 800681a:	4621      	mov	r1, r4
 800681c:	4638      	mov	r0, r7
 800681e:	3201      	adds	r2, #1
 8006820:	f7ff ffce 	bl	80067c0 <foldcase>
 8006824:	4286      	cmp	r6, r0
 8006826:	d01e      	beq.n	8006866 <fnmatchx+0x96>
 8006828:	e7da      	b.n	80067e0 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
 800682a:	285b      	cmp	r0, #91	; 0x5b
 800682c:	d07a      	beq.n	8006924 <fnmatchx+0x154>
 800682e:	285c      	cmp	r0, #92	; 0x5c
 8006830:	d1f3      	bne.n	800681a <fnmatchx+0x4a>
            if (!(flags & FNM_NOESCAPE)) {
 8006832:	07e3      	lsls	r3, r4, #31
 8006834:	d4f1      	bmi.n	800681a <fnmatchx+0x4a>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
 8006836:	7868      	ldrb	r0, [r5, #1]
 8006838:	f7ff ffc2 	bl	80067c0 <foldcase>
 800683c:	b2c6      	uxtb	r6, r0
 800683e:	2e00      	cmp	r6, #0
 8006840:	d0eb      	beq.n	800681a <fnmatchx+0x4a>
 8006842:	f105 0802 	add.w	r8, r5, #2
 8006846:	e7e8      	b.n	800681a <fnmatchx+0x4a>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
 8006848:	06e4      	lsls	r4, r4, #27
 800684a:	d501      	bpl.n	8006850 <fnmatchx+0x80>
 800684c:	2f2f      	cmp	r7, #47	; 0x2f
 800684e:	d0c8      	beq.n	80067e2 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
 8006850:	1c38      	adds	r0, r7, #0
                        0 : FNM_NOMATCH;
 8006852:	bf18      	it	ne
 8006854:	2001      	movne	r0, #1
 8006856:	e7c4      	b.n	80067e2 <fnmatchx+0x12>
            if (*string == EOS)
 8006858:	2f00      	cmp	r7, #0
 800685a:	d0c1      	beq.n	80067e0 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
 800685c:	2f2f      	cmp	r7, #47	; 0x2f
 800685e:	d104      	bne.n	800686a <fnmatchx+0x9a>
 8006860:	07a1      	lsls	r1, r4, #30
 8006862:	d4bd      	bmi.n	80067e0 <fnmatchx+0x10>
            ++string;
 8006864:	3201      	adds	r2, #1
            break;
 8006866:	4645      	mov	r5, r8
 8006868:	e7c8      	b.n	80067fc <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 800686a:	2f2e      	cmp	r7, #46	; 0x2e
 800686c:	d1fa      	bne.n	8006864 <fnmatchx+0x94>
 800686e:	9b04      	ldr	r3, [sp, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0f7      	beq.n	8006864 <fnmatchx+0x94>
 8006874:	4552      	cmp	r2, sl
 8006876:	d0b3      	beq.n	80067e0 <fnmatchx+0x10>
                (string == stringstart ||
 8006878:	07a3      	lsls	r3, r4, #30
 800687a:	d5f3      	bpl.n	8006864 <fnmatchx+0x94>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
 800687c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8006880:	2b2f      	cmp	r3, #47	; 0x2f
 8006882:	d1ef      	bne.n	8006864 <fnmatchx+0x94>
 8006884:	e7ac      	b.n	80067e0 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
 8006886:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
 8006888:	f7ff ff9a 	bl	80067c0 <foldcase>
 800688c:	b2c1      	uxtb	r1, r0
            while (c == '*')
 800688e:	292a      	cmp	r1, #42	; 0x2a
 8006890:	d018      	beq.n	80068c4 <fnmatchx+0xf4>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 8006892:	2f2e      	cmp	r7, #46	; 0x2e
 8006894:	d109      	bne.n	80068aa <fnmatchx+0xda>
 8006896:	9b04      	ldr	r3, [sp, #16]
 8006898:	b13b      	cbz	r3, 80068aa <fnmatchx+0xda>
 800689a:	4552      	cmp	r2, sl
 800689c:	d0a0      	beq.n	80067e0 <fnmatchx+0x10>
                (string == stringstart ||
 800689e:	07a7      	lsls	r7, r4, #30
 80068a0:	d503      	bpl.n	80068aa <fnmatchx+0xda>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
 80068a2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80068a6:	2b2f      	cmp	r3, #47	; 0x2f
 80068a8:	d09a      	beq.n	80067e0 <fnmatchx+0x10>
            if (c == EOS) {
 80068aa:	b979      	cbnz	r1, 80068cc <fnmatchx+0xfc>
                if (flags & FNM_PATHNAME)
 80068ac:	f014 0002 	ands.w	r0, r4, #2
 80068b0:	d097      	beq.n	80067e2 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
 80068b2:	06e6      	lsls	r6, r4, #27
 80068b4:	f100 80b4 	bmi.w	8006a20 <fnmatchx+0x250>
                        strchr(string, '/') == NULL ?
 80068b8:	212f      	movs	r1, #47	; 0x2f
 80068ba:	4610      	mov	r0, r2
 80068bc:	f001 faeb 	bl	8007e96 <strchr>
                        0 : FNM_NOMATCH;
 80068c0:	3000      	adds	r0, #0
 80068c2:	e7c6      	b.n	8006852 <fnmatchx+0x82>
                c = FOLDCASE(*++pattern, flags);
 80068c4:	4621      	mov	r1, r4
 80068c6:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 80068ca:	e7dd      	b.n	8006888 <fnmatchx+0xb8>
            } else if (c == '/' && flags & FNM_PATHNAME) {
 80068cc:	292f      	cmp	r1, #47	; 0x2f
 80068ce:	d101      	bne.n	80068d4 <fnmatchx+0x104>
 80068d0:	07a5      	lsls	r5, r4, #30
 80068d2:	d420      	bmi.n	8006916 <fnmatchx+0x146>
    if (recursion-- == 0)
 80068d4:	9b02      	ldr	r3, [sp, #8]
 80068d6:	4615      	mov	r5, r2
 80068d8:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
 80068da:	f024 0904 	bic.w	r9, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
 80068de:	f004 0a02 	and.w	sl, r4, #2
 80068e2:	46ab      	mov	fp, r5
            while ((test = FOLDCASE(*string, flags)) != EOS) {
 80068e4:	4621      	mov	r1, r4
 80068e6:	f89b 0000 	ldrb.w	r0, [fp]
 80068ea:	f7ff ff69 	bl	80067c0 <foldcase>
 80068ee:	b2c6      	uxtb	r6, r0
 80068f0:	3501      	adds	r5, #1
 80068f2:	2e00      	cmp	r6, #0
 80068f4:	f43f af74 	beq.w	80067e0 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
 80068f8:	463b      	mov	r3, r7
 80068fa:	464a      	mov	r2, r9
 80068fc:	4659      	mov	r1, fp
 80068fe:	4640      	mov	r0, r8
 8006900:	f7ff ff66 	bl	80067d0 <fnmatchx>
 8006904:	2801      	cmp	r0, #1
 8006906:	f47f af6c 	bne.w	80067e2 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
 800690a:	2e2f      	cmp	r6, #47	; 0x2f
 800690c:	d1e9      	bne.n	80068e2 <fnmatchx+0x112>
 800690e:	f1ba 0f00 	cmp.w	sl, #0
 8006912:	d0e6      	beq.n	80068e2 <fnmatchx+0x112>
 8006914:	e764      	b.n	80067e0 <fnmatchx+0x10>
                if ((string = strchr(string, '/')) == NULL)
 8006916:	4610      	mov	r0, r2
 8006918:	f001 fabd 	bl	8007e96 <strchr>
 800691c:	4602      	mov	r2, r0
 800691e:	2800      	cmp	r0, #0
 8006920:	d1a1      	bne.n	8006866 <fnmatchx+0x96>
 8006922:	e75d      	b.n	80067e0 <fnmatchx+0x10>
            if (*string == EOS)
 8006924:	2f00      	cmp	r7, #0
 8006926:	f43f af5b 	beq.w	80067e0 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
 800692a:	2f2f      	cmp	r7, #47	; 0x2f
 800692c:	d102      	bne.n	8006934 <fnmatchx+0x164>
 800692e:	07a0      	lsls	r0, r4, #30
 8006930:	f53f af56 	bmi.w	80067e0 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
 8006934:	4621      	mov	r1, r4
 8006936:	4638      	mov	r0, r7
 8006938:	f7ff ff42 	bl	80067c0 <foldcase>
 800693c:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
 800693e:	f1b8 0f00 	cmp.w	r8, #0
 8006942:	f43f af4d 	beq.w	80067e0 <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 8006946:	786b      	ldrb	r3, [r5, #1]
 8006948:	2b21      	cmp	r3, #33	; 0x21
 800694a:	d001      	beq.n	8006950 <fnmatchx+0x180>
 800694c:	2b5e      	cmp	r3, #94	; 0x5e
 800694e:	d126      	bne.n	800699e <fnmatchx+0x1ce>
        ++pattern;
 8006950:	3502      	adds	r5, #2
 8006952:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 8006954:	9301      	str	r3, [sp, #4]
    need = 1;
 8006956:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 8006958:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
 800695c:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 8006960:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
 8006962:	462e      	mov	r6, r5
 8006964:	4621      	mov	r1, r4
 8006966:	f816 0b01 	ldrb.w	r0, [r6], #1
 800696a:	9305      	str	r3, [sp, #20]
 800696c:	f7ff ff28 	bl	80067c0 <foldcase>
 8006970:	fa5f f980 	uxtb.w	r9, r0
 8006974:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
 8006978:	9b05      	ldr	r3, [sp, #20]
 800697a:	d113      	bne.n	80069a4 <fnmatchx+0x1d4>
 800697c:	bb2b      	cbnz	r3, 80069ca <fnmatchx+0x1fa>
    return ok == negate ? NULL : pattern;
 800697e:	9b01      	ldr	r3, [sp, #4]
 8006980:	455b      	cmp	r3, fp
 8006982:	f43f af2d 	beq.w	80067e0 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
 8006986:	2e00      	cmp	r6, #0
 8006988:	f43f af2a 	beq.w	80067e0 <fnmatchx+0x10>
            if (r == (void *)-1) {
 800698c:	1c71      	adds	r1, r6, #1
 800698e:	d103      	bne.n	8006998 <fnmatchx+0x1c8>
                if (*string != '[')
 8006990:	2f5b      	cmp	r7, #91	; 0x5b
 8006992:	f47f af25 	bne.w	80067e0 <fnmatchx+0x10>
 8006996:	4646      	mov	r6, r8
            ++string;
 8006998:	3201      	adds	r2, #1
            break;
 800699a:	46b0      	mov	r8, r6
 800699c:	e763      	b.n	8006866 <fnmatchx+0x96>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 800699e:	4645      	mov	r5, r8
 80069a0:	2300      	movs	r3, #0
 80069a2:	e7d7      	b.n	8006954 <fnmatchx+0x184>
        if (c == '/')
 80069a4:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
 80069a8:	d0f2      	beq.n	8006990 <fnmatchx+0x1c0>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 80069aa:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
 80069ae:	d108      	bne.n	80069c2 <fnmatchx+0x1f2>
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	b953      	cbnz	r3, 80069ca <fnmatchx+0x1fa>
            c = FOLDCASE(*pattern++, flags);
 80069b4:	4621      	mov	r1, r4
 80069b6:	7868      	ldrb	r0, [r5, #1]
 80069b8:	f7ff ff02 	bl	80067c0 <foldcase>
 80069bc:	1cae      	adds	r6, r5, #2
 80069be:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
 80069c2:	f1b9 0f00 	cmp.w	r9, #0
 80069c6:	f43f af0b 	beq.w	80067e0 <fnmatchx+0x10>
        if (*pattern == '-' 
 80069ca:	7833      	ldrb	r3, [r6, #0]
 80069cc:	2b2d      	cmp	r3, #45	; 0x2d
 80069ce:	d11e      	bne.n	8006a0e <fnmatchx+0x23e>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
 80069d0:	4621      	mov	r1, r4
 80069d2:	7870      	ldrb	r0, [r6, #1]
 80069d4:	f7ff fef4 	bl	80067c0 <foldcase>
 80069d8:	b2c0      	uxtb	r0, r0
 80069da:	b1c0      	cbz	r0, 8006a0e <fnmatchx+0x23e>
 80069dc:	285d      	cmp	r0, #93	; 0x5d
 80069de:	d016      	beq.n	8006a0e <fnmatchx+0x23e>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
 80069e0:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
 80069e2:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
 80069e6:	d109      	bne.n	80069fc <fnmatchx+0x22c>
 80069e8:	9b03      	ldr	r3, [sp, #12]
 80069ea:	b93b      	cbnz	r3, 80069fc <fnmatchx+0x22c>
                c2 = FOLDCASE(*pattern++, flags);
 80069ec:	78b0      	ldrb	r0, [r6, #2]
 80069ee:	f7ff fee7 	bl	80067c0 <foldcase>
 80069f2:	b2c0      	uxtb	r0, r0
 80069f4:	1cf5      	adds	r5, r6, #3
            if (c2 == EOS)
 80069f6:	2800      	cmp	r0, #0
 80069f8:	f43f aef2 	beq.w	80067e0 <fnmatchx+0x10>
            if (c <= test && test <= c2)
 80069fc:	9b00      	ldr	r3, [sp, #0]
 80069fe:	454b      	cmp	r3, r9
 8006a00:	db03      	blt.n	8006a0a <fnmatchx+0x23a>
                ok = 1;
 8006a02:	4283      	cmp	r3, r0
 8006a04:	bfd8      	it	le
 8006a06:	f04f 0b01 	movle.w	fp, #1
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e7a9      	b.n	8006962 <fnmatchx+0x192>
        } else if (c == test)
 8006a0e:	9b00      	ldr	r3, [sp, #0]
 8006a10:	4635      	mov	r5, r6
 8006a12:	454b      	cmp	r3, r9
 8006a14:	bf08      	it	eq
 8006a16:	f04f 0b01 	moveq.w	fp, #1
 8006a1a:	e7f6      	b.n	8006a0a <fnmatchx+0x23a>
        return FNM_NORES;
 8006a1c:	2003      	movs	r0, #3
 8006a1e:	e6e0      	b.n	80067e2 <fnmatchx+0x12>
                return 0;
 8006a20:	4608      	mov	r0, r1
 8006a22:	e6de      	b.n	80067e2 <fnmatchx+0x12>

08006a24 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
 8006a24:	2340      	movs	r3, #64	; 0x40
 8006a26:	f7ff bed3 	b.w	80067d0 <fnmatchx>

08006a2a <shell_strlen>:
{
 8006a2a:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
 8006a2c:	b110      	cbz	r0, 8006a34 <shell_strlen+0xa>
 8006a2e:	f001 fa40 	bl	8007eb2 <strlen>
 8006a32:	b280      	uxth	r0, r0
}
 8006a34:	bd08      	pop	{r3, pc}

08006a36 <shell_raw_fprintf>:
{
 8006a36:	b40e      	push	{r1, r2, r3}
 8006a38:	b503      	push	{r0, r1, lr}
 8006a3a:	aa03      	add	r2, sp, #12
 8006a3c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8006a40:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
 8006a42:	f7fa fed1 	bl	80017e8 <shell_fprintf_fmt>
}
 8006a46:	b002      	add	sp, #8
 8006a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a4c:	b003      	add	sp, #12
 8006a4e:	4770      	bx	lr

08006a50 <shell_internal_help_print>:
{
 8006a50:	b510      	push	{r4, lr}
 8006a52:	4604      	mov	r4, r0
	shell_help_cmd_print(shell);
 8006a54:	f7fb f99c 	bl	8001d90 <shell_help_cmd_print>
	shell_help_subcmd_print(shell);
 8006a58:	4620      	mov	r0, r4
}
 8006a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_help_subcmd_print(shell);
 8006a5e:	f7fb b927 	b.w	8001cb0 <shell_help_subcmd_print>

08006a62 <state_set.constprop.31>:
	shell->ctx->state = state;
 8006a62:	6883      	ldr	r3, [r0, #8]
 8006a64:	2202      	movs	r2, #2
 8006a66:	711a      	strb	r2, [r3, #4]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
 8006a6e:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
 8006a70:	865a      	strh	r2, [r3, #50]	; 0x32
		shell_print_prompt_and_cmd(shell);
 8006a72:	f7fb b85f 	b.w	8001b34 <shell_print_prompt_and_cmd>

08006a76 <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
 8006a76:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
 8006a78:	b920      	cbnz	r0, 8006a84 <transport_evt_handler+0xe>
 8006a7a:	f503 7017 	add.w	r0, r3, #604	; 0x25c
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
 8006a7e:	2100      	movs	r1, #0
 8006a80:	f7ff b8ba 	b.w	8005bf8 <z_impl_k_poll_signal_raise>
 8006a84:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8006a88:	e7f9      	b.n	8006a7e <transport_evt_handler+0x8>

08006a8a <k_mutex_lock.constprop.34>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8006a8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006a8e:	f7fe ba4d 	b.w	8004f2c <z_impl_k_mutex_lock>

08006a92 <shell_fprintf>:
/* This function mustn't be used from shell context to avoid deadlock.
 * However it can be used in shell command handlers.
 */
void shell_fprintf(const struct shell *shell, enum shell_vt100_color color,
		   const char *fmt, ...)
{
 8006a92:	b40c      	push	{r2, r3}
 8006a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a96:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8006a98:	6880      	ldr	r0, [r0, #8]
 8006a9a:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
{
 8006a9e:	460d      	mov	r5, r1
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8006aa0:	f7ff fff3 	bl	8006a8a <k_mutex_lock.constprop.34>
	if (!flag_cmd_ctx_get(shell)) {
 8006aa4:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
 8006aa6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8006aaa:	061a      	lsls	r2, r3, #24
 8006aac:	d402      	bmi.n	8006ab4 <shell_fprintf+0x22>
		shell_cmd_line_erase(shell);
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f000 fae2 	bl	8007078 <shell_cmd_line_erase>
	}

	va_start(args, fmt);
 8006ab4:	ab07      	add	r3, sp, #28
	shell_internal_vfprintf(shell, color, fmt, args);
 8006ab6:	9a06      	ldr	r2, [sp, #24]
	va_start(args, fmt);
 8006ab8:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
 8006aba:	4629      	mov	r1, r5
 8006abc:	4620      	mov	r0, r4
 8006abe:	f000 fb2a 	bl	8007116 <shell_internal_vfprintf>
	va_end(args);

	if (!flag_cmd_ctx_get(shell)) {
 8006ac2:	68a3      	ldr	r3, [r4, #8]
 8006ac4:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8006ac8:	061b      	lsls	r3, r3, #24
 8006aca:	d402      	bmi.n	8006ad2 <shell_fprintf+0x40>
		shell_print_prompt_and_cmd(shell);
 8006acc:	4620      	mov	r0, r4
 8006ace:	f7fb f831 	bl	8001b34 <shell_print_prompt_and_cmd>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
 8006ad2:	6960      	ldr	r0, [r4, #20]
 8006ad4:	f000 f80a 	bl	8006aec <shell_fprintf_buffer_flush>
	}
	transport_buffer_flush(shell);
	k_mutex_unlock(&shell->ctx->wr_mtx);
 8006ad8:	68a0      	ldr	r0, [r4, #8]
 8006ada:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
	z_impl_k_mutex_unlock(mutex);
 8006ade:	f7fe fa97 	bl	8005010 <z_impl_k_mutex_unlock>
}
 8006ae2:	b003      	add	sp, #12
 8006ae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ae8:	b002      	add	sp, #8
 8006aea:	4770      	bx	lr

08006aec <shell_fprintf_buffer_flush>:


void shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 8006aec:	6902      	ldr	r2, [r0, #16]
 8006aee:	6883      	ldr	r3, [r0, #8]
 8006af0:	6812      	ldr	r2, [r2, #0]
 8006af2:	6801      	ldr	r1, [r0, #0]
{
 8006af4:	b510      	push	{r4, lr}
 8006af6:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 8006af8:	68c0      	ldr	r0, [r0, #12]
 8006afa:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
 8006afc:	6923      	ldr	r3, [r4, #16]
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]
}
 8006b02:	bd10      	pop	{r4, pc}

08006b04 <out_func>:
{
 8006b04:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 8006b06:	68cb      	ldr	r3, [r1, #12]
 8006b08:	7c1b      	ldrb	r3, [r3, #16]
 8006b0a:	2b02      	cmp	r3, #2
{
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 8006b10:	d104      	bne.n	8006b1c <out_func+0x18>
 8006b12:	280a      	cmp	r0, #10
 8006b14:	d102      	bne.n	8006b1c <out_func+0x18>
		(void)out_func('\r', ctx);
 8006b16:	200d      	movs	r0, #13
 8006b18:	f7ff fff4 	bl	8006b04 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (u8_t)c;
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	6822      	ldr	r2, [r4, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
 8006b24:	6922      	ldr	r2, [r4, #16]
 8006b26:	6813      	ldr	r3, [r2, #0]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
 8006b2c:	6862      	ldr	r2, [r4, #4]
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d102      	bne.n	8006b38 <out_func+0x34>
		shell_fprintf_buffer_flush(sh_fprintf);
 8006b32:	4620      	mov	r0, r4
 8006b34:	f7ff ffda 	bl	8006aec <shell_fprintf_buffer_flush>
}
 8006b38:	2000      	movs	r0, #0
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}

08006b3c <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
 8006b3c:	2820      	cmp	r0, #32
 8006b3e:	d005      	beq.n	8006b4c <isspace+0x10>
 8006b40:	3809      	subs	r0, #9
 8006b42:	2804      	cmp	r0, #4
 8006b44:	bf8c      	ite	hi
 8006b46:	2000      	movhi	r0, #0
 8006b48:	2001      	movls	r0, #1
 8006b4a:	4770      	bx	lr
 8006b4c:	2001      	movs	r0, #1
}
 8006b4e:	4770      	bx	lr

08006b50 <shell_strlen>:
{
 8006b50:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
 8006b52:	b110      	cbz	r0, 8006b5a <shell_strlen+0xa>
 8006b54:	f001 f9ad 	bl	8007eb2 <strlen>
 8006b58:	b280      	uxth	r0, r0
}
 8006b5a:	bd08      	pop	{r3, pc}

08006b5c <column_span_with_buffer_offsets_get>:
{
 8006b5c:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
 8006b5e:	7b03      	ldrb	r3, [r0, #12]
 8006b60:	8944      	ldrh	r4, [r0, #10]
 8006b62:	441a      	add	r2, r3
 8006b64:	4419      	add	r1, r3
 8006b66:	fbb2 f0f4 	udiv	r0, r2, r4
 8006b6a:	fbb1 f3f4 	udiv	r3, r1, r4
 8006b6e:	fb04 2010 	mls	r0, r4, r0, r2
 8006b72:	fb04 1313 	mls	r3, r4, r3, r1
}
 8006b76:	1ac0      	subs	r0, r0, r3
 8006b78:	bd10      	pop	{r4, pc}

08006b7a <row_span_with_buffer_offsets_get>:
{
 8006b7a:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
 8006b7c:	7b03      	ldrb	r3, [r0, #12]
 8006b7e:	8944      	ldrh	r4, [r0, #10]
 8006b80:	441a      	add	r2, r3
 8006b82:	4419      	add	r1, r3
 8006b84:	fbb2 f0f4 	udiv	r0, r2, r4
 8006b88:	fbb1 f1f4 	udiv	r1, r1, r4
}
 8006b8c:	1a40      	subs	r0, r0, r1
 8006b8e:	bd10      	pop	{r4, pc}

08006b90 <shell_multiline_data_calc>:
{
 8006b90:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 8006b92:	7b04      	ldrb	r4, [r0, #12]
 8006b94:	8945      	ldrh	r5, [r0, #10]
 8006b96:	4421      	add	r1, r4
 8006b98:	fbb1 f3f5 	udiv	r3, r1, r5
 8006b9c:	fb05 1113 	mls	r1, r5, r3, r1
 8006ba0:	3101      	adds	r1, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 8006ba2:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 8006ba4:	4422      	add	r2, r4
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 8006ba6:	8001      	strh	r1, [r0, #0]
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 8006ba8:	8083      	strh	r3, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 8006baa:	fbb2 f3f5 	udiv	r3, r2, r5
 8006bae:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 8006bb0:	fb05 2313 	mls	r3, r5, r3, r2
 8006bb4:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 8006bb6:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 8006bb8:	8043      	strh	r3, [r0, #2]
}
 8006bba:	bd30      	pop	{r4, r5, pc}

08006bbc <shell_make_argv>:
{
 8006bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
 8006bc0:	2500      	movs	r5, #0
{
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	460f      	mov	r7, r1
 8006bc6:	4614      	mov	r4, r2
 8006bc8:	4698      	mov	r8, r3
	*argc = 0;
 8006bca:	6005      	str	r5, [r0, #0]
		c = *cmd;
 8006bcc:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
 8006bce:	b140      	cbz	r0, 8006be2 <shell_make_argv+0x26>
		if (isspace((int) c)) {
 8006bd0:	f7ff ffb4 	bl	8006b3c <isspace>
 8006bd4:	b160      	cbz	r0, 8006bf0 <shell_make_argv+0x34>
			*cmd++ = '\0';
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	f804 3b01 	strb.w	r3, [r4], #1
	} while (*argc < max_argc);
 8006bdc:	6833      	ldr	r3, [r6, #0]
 8006bde:	4543      	cmp	r3, r8
 8006be0:	d3f4      	bcc.n	8006bcc <shell_make_argv+0x10>
	argv[*argc] = 0;
 8006be2:	6833      	ldr	r3, [r6, #0]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
}
 8006bea:	4628      	mov	r0, r5
 8006bec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		argv[(*argc)++] = cmd;
 8006bf0:	6833      	ldr	r3, [r6, #0]
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	6032      	str	r2, [r6, #0]
 8006bf6:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
	char quote = 0;
 8006bfa:	4605      	mov	r5, r0
		c = *cmd;
 8006bfc:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
 8006c00:	f1b9 0f00 	cmp.w	r9, #0
 8006c04:	d0ea      	beq.n	8006bdc <shell_make_argv+0x20>
		if (!quote) {
 8006c06:	2d00      	cmp	r5, #0
 8006c08:	f040 8089 	bne.w	8006d1e <shell_make_argv+0x162>
			switch (c) {
 8006c0c:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
 8006c10:	d006      	beq.n	8006c20 <shell_make_argv+0x64>
 8006c12:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
 8006c16:	f000 808a 	beq.w	8006d2e <shell_make_argv+0x172>
 8006c1a:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
 8006c1e:	d176      	bne.n	8006d0e <shell_make_argv+0x152>
						shell_strlen(cmd));
 8006c20:	4620      	mov	r0, r4
 8006c22:	f7ff ff95 	bl	8006b50 <shell_strlen>
				memmove(cmd, cmd + 1,
 8006c26:	1c61      	adds	r1, r4, #1
 8006c28:	4602      	mov	r2, r0
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f001 f973 	bl	8007f16 <memmove>
 8006c30:	464d      	mov	r5, r9
 8006c32:	e7e3      	b.n	8006bfc <shell_make_argv+0x40>
			memmove(cmd, cmd + 1, shell_strlen(cmd));
 8006c34:	4620      	mov	r0, r4
 8006c36:	f7ff ff8b 	bl	8006b50 <shell_strlen>
 8006c3a:	1c61      	adds	r1, r4, #1
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f001 f969 	bl	8007f16 <memmove>
			quote = 0;
 8006c44:	2500      	movs	r5, #0
 8006c46:	e7d9      	b.n	8006bfc <shell_make_argv+0x40>
			if (t == '0') {
 8006c48:	2930      	cmp	r1, #48	; 0x30
 8006c4a:	d125      	bne.n	8006c98 <shell_make_argv+0xdc>
 8006c4c:	2302      	movs	r3, #2
				u8_t v = 0U;
 8006c4e:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
 8006c52:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
 8006c54:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006c58:	b2d0      	uxtb	r0, r2
 8006c5a:	2807      	cmp	r0, #7
 8006c5c:	fa5f f983 	uxtb.w	r9, r3
 8006c60:	d817      	bhi.n	8006c92 <shell_make_argv+0xd6>
						v = (v << 3) | (t - '0');
 8006c62:	3301      	adds	r3, #1
 8006c64:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
 8006c68:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
 8006c6a:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
 8006c6e:	d1f0      	bne.n	8006c52 <shell_make_argv+0x96>
 8006c70:	4699      	mov	r9, r3
						shell_strlen(cmd) - (i - 2));
 8006c72:	4620      	mov	r0, r4
 8006c74:	f7ff ff6c 	bl	8006b50 <shell_strlen>
					memmove(cmd, cmd + (i - 1),
 8006c78:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006c7c:	44a3      	add	fp, r4
						shell_strlen(cmd) - (i - 2));
 8006c7e:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
 8006c80:	eba2 0209 	sub.w	r2, r2, r9
 8006c84:	4620      	mov	r0, r4
 8006c86:	4659      	mov	r1, fp
 8006c88:	f001 f945 	bl	8007f16 <memmove>
					*cmd++ = v;
 8006c8c:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
 8006c90:	e7b4      	b.n	8006bfc <shell_make_argv+0x40>
				if (i > 2) {
 8006c92:	f1b9 0f02 	cmp.w	r9, #2
 8006c96:	d1ec      	bne.n	8006c72 <shell_make_argv+0xb6>
			if (t == 'x') {
 8006c98:	2978      	cmp	r1, #120	; 0x78
 8006c9a:	d13e      	bne.n	8006d1a <shell_make_argv+0x15e>
 8006c9c:	2202      	movs	r2, #2
				u8_t v = 0U;
 8006c9e:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
 8006ca2:	5ca3      	ldrb	r3, [r4, r2]
					if (t >= '0' && t <= '9') {
 8006ca4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006ca8:	fa5f fc81 	uxtb.w	ip, r1
 8006cac:	f1bc 0f09 	cmp.w	ip, #9
 8006cb0:	b2d0      	uxtb	r0, r2
 8006cb2:	d819      	bhi.n	8006ce8 <shell_make_argv+0x12c>
						v = (v << 4) | (t - '0');
 8006cb4:	ea41 1309 	orr.w	r3, r1, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
 8006cb8:	2a03      	cmp	r2, #3
						v = (v << 4) | (t - 'A' + 10);
 8006cba:	fa5f f983 	uxtb.w	r9, r3
				for (i = 2U; i < (2 + 2); i++) {
 8006cbe:	d111      	bne.n	8006ce4 <shell_make_argv+0x128>
 8006cc0:	f04f 0b04 	mov.w	fp, #4
						shell_strlen(cmd) - (i - 2));
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f7ff ff43 	bl	8006b50 <shell_strlen>
					memmove(cmd, cmd + (i - 1),
 8006cca:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8006cce:	44a2      	add	sl, r4
						shell_strlen(cmd) - (i - 2));
 8006cd0:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
 8006cd2:	eba2 020b 	sub.w	r2, r2, fp
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	4651      	mov	r1, sl
 8006cda:	f001 f91c 	bl	8007f16 <memmove>
					*cmd++ = v;
 8006cde:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
 8006ce2:	e78b      	b.n	8006bfc <shell_make_argv+0x40>
				for (i = 2U; i < (2 + 2); i++) {
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	e7dc      	b.n	8006ca2 <shell_make_argv+0xe6>
					} else if ((t >= 'a') &&
 8006ce8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8006cec:	2905      	cmp	r1, #5
 8006cee:	d803      	bhi.n	8006cf8 <shell_make_argv+0x13c>
						v = (v << 4) | (t - 'a' + 10);
 8006cf0:	3b57      	subs	r3, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
 8006cf2:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
 8006cf6:	e7df      	b.n	8006cb8 <shell_make_argv+0xfc>
					} else if ((t >= 'A') && (t <= 'F')) {
 8006cf8:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 8006cfc:	2905      	cmp	r1, #5
 8006cfe:	d801      	bhi.n	8006d04 <shell_make_argv+0x148>
						v = (v << 4) | (t - 'A' + 10);
 8006d00:	3b37      	subs	r3, #55	; 0x37
 8006d02:	e7f6      	b.n	8006cf2 <shell_make_argv+0x136>
				if (i > 2) {
 8006d04:	2802      	cmp	r0, #2
 8006d06:	d008      	beq.n	8006d1a <shell_make_argv+0x15e>
 8006d08:	f04f 0b03 	mov.w	fp, #3
 8006d0c:	e7da      	b.n	8006cc4 <shell_make_argv+0x108>
		if (!quote && isspace((int) c)) {
 8006d0e:	4648      	mov	r0, r9
 8006d10:	f7ff ff14 	bl	8006b3c <isspace>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	f47f af61 	bne.w	8006bdc <shell_make_argv+0x20>
		cmd += 1;
 8006d1a:	3401      	adds	r4, #1
 8006d1c:	e76e      	b.n	8006bfc <shell_make_argv+0x40>
		if (quote == c) {
 8006d1e:	45a9      	cmp	r9, r5
 8006d20:	d088      	beq.n	8006c34 <shell_make_argv+0x78>
		if (quote && c == '\\') {
 8006d22:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
 8006d26:	d1f8      	bne.n	8006d1a <shell_make_argv+0x15e>
 8006d28:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
 8006d2a:	428d      	cmp	r5, r1
 8006d2c:	d18c      	bne.n	8006c48 <shell_make_argv+0x8c>
						shell_strlen(cmd));
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7ff ff0e 	bl	8006b50 <shell_strlen>
				memmove(cmd, cmd + 1,
 8006d34:	f104 0901 	add.w	r9, r4, #1
 8006d38:	4602      	mov	r2, r0
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f001 f8ea 	bl	8007f16 <memmove>
				cmd += 1;
 8006d42:	464c      	mov	r4, r9
 8006d44:	e75a      	b.n	8006bfc <shell_make_argv+0x40>

08006d46 <shell_pattern_remove>:
{
 8006d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d48:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
 8006d4a:	4611      	mov	r1, r2
{
 8006d4c:	4615      	mov	r5, r2
 8006d4e:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
 8006d50:	f001 f867 	bl	8007e22 <strstr>
 8006d54:	4604      	mov	r4, r0
	u16_t pattern_len = shell_strlen(pattern);
 8006d56:	4628      	mov	r0, r5
 8006d58:	f7ff fefa 	bl	8006b50 <shell_strlen>
 8006d5c:	4605      	mov	r5, r0
	if (!pattern_addr) {
 8006d5e:	b1c4      	cbz	r4, 8006d92 <shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
 8006d60:	42a7      	cmp	r7, r4
 8006d62:	d207      	bcs.n	8006d74 <shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
 8006d64:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006d68:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
 8006d6a:	bf02      	ittt	eq
 8006d6c:	3501      	addeq	r5, #1
 8006d6e:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
 8006d70:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 8006d74:	4620      	mov	r0, r4
 8006d76:	f7ff feeb 	bl	8006b50 <shell_strlen>
	*buff_len -= pattern_len;
 8006d7a:	8833      	ldrh	r3, [r6, #0]
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 8006d7c:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
 8006d7e:	1b5b      	subs	r3, r3, r5
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 8006d80:	3201      	adds	r2, #1
	*buff_len -= pattern_len;
 8006d82:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
 8006d84:	1961      	adds	r1, r4, r5
 8006d86:	4620      	mov	r0, r4
 8006d88:	b292      	uxth	r2, r2
}
 8006d8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
 8006d8e:	f001 b8c2 	b.w	8007f16 <memmove>
}
 8006d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d94 <shell_get_last_command>:
					     size_t argc,
					     char *argv[],
					     size_t *match_arg,
					     struct shell_static_entry *d_entry,
					     bool only_static)
{
 8006d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d98:	b087      	sub	sp, #28
 8006d9a:	461d      	mov	r5, r3
	const struct shell_static_entry *prev_entry = NULL;
	const struct shell_static_entry *entry = NULL;
	const struct shell_cmd_entry *cmd = NULL;

	*match_arg = SHELL_CMD_ROOT_LVL;
 8006d9c:	2400      	movs	r4, #0
{
 8006d9e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8006da2:	9303      	str	r3, [sp, #12]
 8006da4:	4681      	mov	r9, r0
 8006da6:	4688      	mov	r8, r1
 8006da8:	4617      	mov	r7, r2
	*match_arg = SHELL_CMD_ROOT_LVL;
 8006daa:	602c      	str	r4, [r5, #0]
	const struct shell_static_entry *entry = NULL;
 8006dac:	46a2      	mov	sl, r4

	while (*match_arg < argc) {
 8006dae:	682b      	ldr	r3, [r5, #0]
 8006db0:	4543      	cmp	r3, r8
 8006db2:	d303      	bcc.n	8006dbc <shell_get_last_command+0x28>
			return NULL;
		}
	}

	return entry;
}
 8006db4:	4650      	mov	r0, sl
 8006db6:	b007      	add	sp, #28
 8006db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (shell_wildcard_character_exist(argv[*match_arg])) {
 8006dbc:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8006dc0:	f000 fc0b 	bl	80075da <shell_wildcard_character_exist>
 8006dc4:	682e      	ldr	r6, [r5, #0]
 8006dc6:	b110      	cbz	r0, 8006dce <shell_get_last_command+0x3a>
				(*match_arg)++;
 8006dc8:	3601      	adds	r6, #1
 8006dca:	602e      	str	r6, [r5, #0]
				continue;
 8006dcc:	e7ef      	b.n	8006dae <shell_get_last_command+0x1a>
		entry = find_cmd(shell, cmd, *match_arg, argv[*match_arg],
 8006dce:	f857 b026 	ldr.w	fp, [r7, r6, lsl #2]
	const struct shell_static_entry *entry = NULL;
 8006dd2:	9005      	str	r0, [sp, #20]
	size_t idx = 0;
 8006dd4:	4603      	mov	r3, r0
		shell_cmd_get(shell, cmd, lvl, idx++, &entry, d_entry);
 8006dd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006dd8:	9201      	str	r2, [sp, #4]
 8006dda:	aa05      	add	r2, sp, #20
 8006ddc:	9200      	str	r2, [sp, #0]
 8006dde:	4621      	mov	r1, r4
 8006de0:	4632      	mov	r2, r6
 8006de2:	4648      	mov	r0, r9
 8006de4:	f103 0a01 	add.w	sl, r3, #1
 8006de8:	f7fa fd12 	bl	8001810 <shell_cmd_get>
		if (entry && (strcmp(cmd_str, entry->syntax) == 0)) {
 8006dec:	9b05      	ldr	r3, [sp, #20]
 8006dee:	b13b      	cbz	r3, 8006e00 <shell_get_last_command+0x6c>
 8006df0:	6819      	ldr	r1, [r3, #0]
 8006df2:	4658      	mov	r0, fp
 8006df4:	f001 f864 	bl	8007ec0 <strcmp>
 8006df8:	9a05      	ldr	r2, [sp, #20]
 8006dfa:	b920      	cbnz	r0, 8006e06 <shell_get_last_command+0x72>
		if (entry) {
 8006dfc:	4692      	mov	sl, r2
 8006dfe:	b932      	cbnz	r2, 8006e0e <shell_get_last_command+0x7a>
 8006e00:	f04f 0a00 	mov.w	sl, #0
 8006e04:	e7d6      	b.n	8006db4 <shell_get_last_command+0x20>
		shell_cmd_get(shell, cmd, lvl, idx++, &entry, d_entry);
 8006e06:	4653      	mov	r3, sl
	} while (entry);
 8006e08:	2a00      	cmp	r2, #0
 8006e0a:	d1e4      	bne.n	8006dd6 <shell_get_last_command+0x42>
 8006e0c:	e7f8      	b.n	8006e00 <shell_get_last_command+0x6c>
			(*match_arg)++;
 8006e0e:	682b      	ldr	r3, [r5, #0]
			cmd = entry->subcmd;
 8006e10:	6894      	ldr	r4, [r2, #8]
			(*match_arg)++;
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	602a      	str	r2, [r5, #0]
		if (cmd == NULL) {
 8006e16:	2c00      	cmp	r4, #0
 8006e18:	d0f2      	beq.n	8006e00 <shell_get_last_command+0x6c>
		if (only_static && cmd->is_dynamic) {
 8006e1a:	9a03      	ldr	r2, [sp, #12]
 8006e1c:	2a00      	cmp	r2, #0
 8006e1e:	d0c6      	beq.n	8006dae <shell_get_last_command+0x1a>
 8006e20:	7822      	ldrb	r2, [r4, #0]
 8006e22:	2a00      	cmp	r2, #0
 8006e24:	d0c3      	beq.n	8006dae <shell_get_last_command+0x1a>
			(*match_arg)--;
 8006e26:	602b      	str	r3, [r5, #0]
			return NULL;
 8006e28:	e7ea      	b.n	8006e00 <shell_get_last_command+0x6c>

08006e2a <shell_spaces_trim>:

	return 0;
}

void shell_spaces_trim(char *str)
{
 8006e2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e2e:	4607      	mov	r7, r0
	u16_t len = shell_strlen(str);
 8006e30:	f7ff fe8e 	bl	8006b50 <shell_strlen>
 8006e34:	4680      	mov	r8, r0
	u16_t shift = 0U;

	if (!str) {
 8006e36:	bb4f      	cbnz	r7, 8006e8c <shell_spaces_trim+0x62>

				break;
			}
		}
	}
}
 8006e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
 8006e3c:	b15c      	cbz	r4, 8006e56 <shell_spaces_trim+0x2c>
						len - shift + 1);
 8006e3e:	f108 0201 	add.w	r2, r8, #1
					memmove(&str[i + 1],
 8006e42:	1c68      	adds	r0, r5, #1
 8006e44:	1b12      	subs	r2, r2, r4
 8006e46:	4438      	add	r0, r7
 8006e48:	f001 f865 	bl	8007f16 <memmove>
					len -= shift;
 8006e4c:	eba8 0404 	sub.w	r4, r8, r4
 8006e50:	fa1f f884 	uxth.w	r8, r4
					shift = 0U;
 8006e54:	464c      	mov	r4, r9
	for (u16_t i = 0; i < len - 1; i++) {
 8006e56:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8006e5a:	429e      	cmp	r6, r3
 8006e5c:	daec      	bge.n	8006e38 <shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
 8006e5e:	5db8      	ldrb	r0, [r7, r6]
 8006e60:	f7ff fe6c 	bl	8006b3c <isspace>
 8006e64:	4635      	mov	r5, r6
 8006e66:	3601      	adds	r6, #1
 8006e68:	b2b6      	uxth	r6, r6
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d0f3      	beq.n	8006e56 <shell_spaces_trim+0x2c>
			for (u16_t j = i + 1; j < len; j++) {
 8006e6e:	4633      	mov	r3, r6
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	4590      	cmp	r8, r2
 8006e74:	d9ef      	bls.n	8006e56 <shell_spaces_trim+0x2c>
				if (isspace((int)str[j])) {
 8006e76:	5cf8      	ldrb	r0, [r7, r3]
 8006e78:	18f9      	adds	r1, r7, r3
 8006e7a:	f7ff fe5f 	bl	8006b3c <isspace>
 8006e7e:	3301      	adds	r3, #1
 8006e80:	4681      	mov	r9, r0
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d0da      	beq.n	8006e3c <shell_spaces_trim+0x12>
					shift++;
 8006e86:	3401      	adds	r4, #1
 8006e88:	b2a4      	uxth	r4, r4
					continue;
 8006e8a:	e7f1      	b.n	8006e70 <shell_spaces_trim+0x46>
	for (u16_t i = 0; i < len - 1; i++) {
 8006e8c:	2600      	movs	r6, #0
	u16_t shift = 0U;
 8006e8e:	4634      	mov	r4, r6
 8006e90:	e7e1      	b.n	8006e56 <shell_spaces_trim+0x2c>

08006e92 <shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void shell_cmd_trim(const struct shell *shell)
{
 8006e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
 8006e96:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
 8006e98:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
{
 8006e9c:	4606      	mov	r6, r0
	if (buff[0] == '\0') {
 8006e9e:	b95b      	cbnz	r3, 8006eb8 <shell_cmd_trim+0x26>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 8006ea0:	68b3      	ldr	r3, [r6, #8]
 8006ea2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006ea4:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8006ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*buff_len -= 1U;
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	8663      	strh	r3, [r4, #50]	; 0x32
		if (*buff_len == 0U) {
 8006eb0:	b923      	cbnz	r3, 8006ebc <shell_cmd_trim+0x2a>
			buff[0] = '\0';
 8006eb2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			return;
 8006eb6:	e7f3      	b.n	8006ea0 <shell_cmd_trim+0xe>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
 8006eb8:	f104 0538 	add.w	r5, r4, #56	; 0x38
	while (isspace((int) buff[*buff_len - 1U])) {
 8006ebc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006ebe:	18ea      	adds	r2, r5, r3
 8006ec0:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8006ec4:	f7ff fe3a 	bl	8006b3c <isspace>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d1ee      	bne.n	8006eaa <shell_cmd_trim+0x18>
	buff[*buff_len] = '\0';
 8006ecc:	54e8      	strb	r0, [r5, r3]
 8006ece:	4603      	mov	r3, r0
 8006ed0:	fa1f f883 	uxth.w	r8, r3
	}
 8006ed4:	4647      	mov	r7, r8
	while (isspace((int) buff[i++])) {
 8006ed6:	f815 0008 	ldrb.w	r0, [r5, r8]
 8006eda:	19e9      	adds	r1, r5, r7
 8006edc:	f7ff fe2e 	bl	8006b3c <isspace>
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d1f4      	bne.n	8006ed0 <shell_cmd_trim+0x3e>
	if (--i > 0) {
 8006ee6:	f1b8 0f00 	cmp.w	r8, #0
 8006eea:	d0d9      	beq.n	8006ea0 <shell_cmd_trim+0xe>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
 8006eec:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8006eee:	3201      	adds	r2, #1
 8006ef0:	1bd2      	subs	r2, r2, r7
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f001 f80f 	bl	8007f16 <memmove>
		*buff_len = *buff_len - i;
 8006ef8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006efa:	eba3 0308 	sub.w	r3, r3, r8
 8006efe:	8663      	strh	r3, [r4, #50]	; 0x32
 8006f00:	e7ce      	b.n	8006ea0 <shell_cmd_trim+0xe>

08006f02 <shell_raw_fprintf>:
{
 8006f02:	b40e      	push	{r1, r2, r3}
 8006f04:	b503      	push	{r0, r1, lr}
 8006f06:	aa03      	add	r2, sp, #12
 8006f08:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8006f0c:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
 8006f0e:	f7fa fc6b 	bl	80017e8 <shell_fprintf_fmt>
}
 8006f12:	b002      	add	sp, #8
 8006f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f18:	b003      	add	sp, #12
 8006f1a:	4770      	bx	lr

08006f1c <full_line_cmd.isra.8>:
static inline bool full_line_cmd(const struct shell *shell)
 8006f1c:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
 8006f1e:	6803      	ldr	r3, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
 8006f20:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	8e5d      	ldrh	r5, [r3, #50]	; 0x32
	return str == NULL ? 0U : (u16_t)strlen(str);
 8006f26:	b110      	cbz	r0, 8006f2e <full_line_cmd.isra.8+0x12>
 8006f28:	f000 ffc3 	bl	8007eb2 <strlen>
 8006f2c:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
 8006f32:	4428      	add	r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 8006f34:	fbb0 f3f2 	udiv	r3, r0, r2
 8006f38:	fb02 0013 	mls	r0, r2, r3, r0
}
 8006f3c:	fab0 f080 	clz	r0, r0
 8006f40:	0940      	lsrs	r0, r0, #5
 8006f42:	bd38      	pop	{r3, r4, r5, pc}

08006f44 <shell_cursor_in_empty_line>:
{
 8006f44:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
 8006f46:	6883      	ldr	r3, [r0, #8]
{
 8006f48:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
 8006f4a:	6818      	ldr	r0, [r3, #0]
 8006f4c:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
 8006f4e:	b110      	cbz	r0, 8006f56 <shell_cursor_in_empty_line+0x12>
 8006f50:	f000 ffaf 	bl	8007eb2 <strlen>
 8006f54:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 8006f56:	68a3      	ldr	r3, [r4, #8]
 8006f58:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
 8006f5a:	4428      	add	r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 8006f5c:	fbb0 f3f2 	udiv	r3, r0, r2
 8006f60:	fb02 0013 	mls	r0, r2, r3, r0
}
 8006f64:	fab0 f080 	clz	r0, r0
 8006f68:	0940      	lsrs	r0, r0, #5
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}

08006f6c <shell_op_cursor_move>:
{
 8006f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6e:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 8006f70:	6880      	ldr	r0, [r0, #8]
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
 8006f72:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 8006f74:	8e42      	ldrh	r2, [r0, #50]	; 0x32
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
 8006f76:	4419      	add	r1, r3
 8006f78:	b28d      	uxth	r5, r1
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 8006f7a:	3020      	adds	r0, #32
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	f7ff fe07 	bl	8006b90 <shell_multiline_data_calc>
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
 8006f82:	68a0      	ldr	r0, [r4, #8]
 8006f84:	462a      	mov	r2, r5
 8006f86:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8006f88:	3020      	adds	r0, #32
 8006f8a:	f7ff fdf6 	bl	8006b7a <row_span_with_buffer_offsets_get>
 8006f8e:	4607      	mov	r7, r0
						    &shell->ctx->vt100_ctx.cons,
 8006f90:	68a0      	ldr	r0, [r4, #8]
	col_span = column_span_with_buffer_offsets_get(
 8006f92:	462a      	mov	r2, r5
 8006f94:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8006f96:	3020      	adds	r0, #32
 8006f98:	f7ff fde0 	bl	8006b5c <column_span_with_buffer_offsets_get>
	shell_op_cursor_vert_move(shell, -row_span);
 8006f9c:	4279      	negs	r1, r7
	col_span = column_span_with_buffer_offsets_get(
 8006f9e:	4606      	mov	r6, r0
	shell_op_cursor_vert_move(shell, -row_span);
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f7fa fc67 	bl	8001874 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, col_span);
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f7fa fc73 	bl	8001894 <shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
 8006fae:	68a3      	ldr	r3, [r4, #8]
 8006fb0:	869d      	strh	r5, [r3, #52]	; 0x34
}
 8006fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006fb4 <shell_op_cursor_word_move>:
{
 8006fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
 8006fb8:	1e0c      	subs	r4, r1, #0
{
 8006fba:	4606      	mov	r6, r0
	if (val < 0) {
 8006fbc:	da32      	bge.n	8007024 <shell_op_cursor_word_move+0x70>
		val = -val;
 8006fbe:	4264      	negs	r4, r4
 8006fc0:	b224      	sxth	r4, r4
		sign = -1;
 8006fc2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006fc6:	b2af      	uxth	r7, r5
 8006fc8:	e022      	b.n	8007010 <shell_op_cursor_word_move+0x5c>
		shift = shift_calc(shell->ctx->cmd_buff,
 8006fca:	68b3      	ldr	r3, [r6, #8]
 8006fcc:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
 8006fd0:	f8b3 9032 	ldrh.w	r9, [r3, #50]	; 0x32
 8006fd4:	f103 0838 	add.w	r8, r3, #56	; 0x38
	bool found = false;
 8006fd8:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
 8006fda:	4673      	mov	r3, lr
		idx = pos + ret * sign;
 8006fdc:	eba3 010e 	sub.w	r1, r3, lr
 8006fe0:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
 8006fe2:	b90b      	cbnz	r3, 8006fe8 <shell_op_cursor_word_move+0x34>
 8006fe4:	1c6a      	adds	r2, r5, #1
 8006fe6:	d010      	beq.n	800700a <shell_op_cursor_word_move+0x56>
 8006fe8:	4599      	cmp	r9, r3
 8006fea:	d101      	bne.n	8006ff0 <shell_op_cursor_word_move+0x3c>
		    ((idx == len) && (sign > 0))) {
 8006fec:	2d01      	cmp	r5, #1
 8006fee:	d00c      	beq.n	800700a <shell_op_cursor_word_move+0x56>
		if (isalnum((int)str[idx]) != 0) {
 8006ff0:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 8006ff4:	f042 0c20 	orr.w	ip, r2, #32
 8006ff8:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
 8006ffc:	f1bc 0f19 	cmp.w	ip, #25
 8007000:	d90c      	bls.n	800701c <shell_op_cursor_word_move+0x68>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8007002:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
 8007004:	2a09      	cmp	r2, #9
 8007006:	d909      	bls.n	800701c <shell_op_cursor_word_move+0x68>
			if (found) {
 8007008:	b148      	cbz	r0, 800701e <shell_op_cursor_word_move+0x6a>
		shell_op_cursor_move(shell, sign * shift);
 800700a:	4630      	mov	r0, r6
 800700c:	f7ff ffae 	bl	8006f6c <shell_op_cursor_move>
	while (val--) {
 8007010:	3c01      	subs	r4, #1
 8007012:	b224      	sxth	r4, r4
 8007014:	1c63      	adds	r3, r4, #1
 8007016:	d1d8      	bne.n	8006fca <shell_op_cursor_word_move+0x16>
}
 8007018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
 800701c:	2001      	movs	r0, #1
		ret++;
 800701e:	443b      	add	r3, r7
 8007020:	b29b      	uxth	r3, r3
 8007022:	e7db      	b.n	8006fdc <shell_op_cursor_word_move+0x28>
		sign = 1;
 8007024:	2501      	movs	r5, #1
 8007026:	e7ce      	b.n	8006fc6 <shell_op_cursor_word_move+0x12>

08007028 <shell_op_cursor_home_move>:
	shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
 8007028:	6883      	ldr	r3, [r0, #8]
 800702a:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 800702c:	4249      	negs	r1, r1
 800702e:	b209      	sxth	r1, r1
 8007030:	f7ff bf9c 	b.w	8006f6c <shell_op_cursor_move>

08007034 <shell_op_cursor_end_move>:
	shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
 8007034:	6883      	ldr	r3, [r0, #8]
 8007036:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 8007038:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800703a:	1ac9      	subs	r1, r1, r3
 800703c:	b209      	sxth	r1, r1
 800703e:	f7ff bf95 	b.w	8006f6c <shell_op_cursor_move>

08007042 <shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
 8007042:	6883      	ldr	r3, [r0, #8]
 8007044:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007046:	b11b      	cbz	r3, 8007050 <shell_op_left_arrow+0xe>
		shell_op_cursor_move(shell, -1);
 8007048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800704c:	f7ff bf8e 	b.w	8006f6c <shell_op_cursor_move>
}
 8007050:	4770      	bx	lr

08007052 <shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
 8007052:	6883      	ldr	r3, [r0, #8]
 8007054:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8007056:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007058:	429a      	cmp	r2, r3
 800705a:	d202      	bcs.n	8007062 <shell_op_right_arrow+0x10>
		shell_op_cursor_move(shell, 1);
 800705c:	2101      	movs	r1, #1
 800705e:	f7ff bf85 	b.w	8006f6c <shell_op_cursor_move>
}
 8007062:	4770      	bx	lr

08007064 <shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
 8007064:	6883      	ldr	r3, [r0, #8]
 8007066:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8007068:	865a      	strh	r2, [r3, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
 800706a:	4413      	add	r3, r2
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	clear_eos(shell);
 8007072:	6940      	ldr	r0, [r0, #20]
 8007074:	f7fa bbf6 	b.w	8001864 <clear_eos.isra.6>

08007078 <shell_cmd_line_erase>:
{
 8007078:	b510      	push	{r4, lr}
 800707a:	4604      	mov	r4, r0
	shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
 800707c:	6880      	ldr	r0, [r0, #8]
 800707e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8007080:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8007082:	3020      	adds	r0, #32
 8007084:	f7ff fd84 	bl	8006b90 <shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
 8007088:	68a3      	ldr	r3, [r4, #8]
 800708a:	8c19      	ldrh	r1, [r3, #32]
	shell_op_cursor_horiz_move(shell,
 800708c:	4620      	mov	r0, r4
 800708e:	f1c1 0101 	rsb	r1, r1, #1
 8007092:	f7fa fbff 	bl	8001894 <shell_op_cursor_horiz_move>
	shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
 8007096:	68a3      	ldr	r3, [r4, #8]
 8007098:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800709a:	4620      	mov	r0, r4
 800709c:	3901      	subs	r1, #1
 800709e:	f7fa fbe9 	bl	8001874 <shell_op_cursor_vert_move>
	clear_eos(shell);
 80070a2:	6960      	ldr	r0, [r4, #20]
}
 80070a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	clear_eos(shell);
 80070a8:	f7fa bbdc 	b.w	8001864 <clear_eos.isra.6>

080070ac <shell_write>:
{
 80070ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80070b0:	4607      	mov	r7, r0
 80070b2:	4688      	mov	r8, r1
 80070b4:	4614      	mov	r4, r2
	size_t offset = 0;
 80070b6:	2600      	movs	r6, #0
	while (length) {
 80070b8:	b914      	cbnz	r4, 80070c0 <shell_write+0x14>
}
 80070ba:	b002      	add	sp, #8
 80070bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	6803      	ldr	r3, [r0, #0]
 80070c4:	4622      	mov	r2, r4
 80070c6:	68dd      	ldr	r5, [r3, #12]
 80070c8:	eb08 0106 	add.w	r1, r8, r6
 80070cc:	ab01      	add	r3, sp, #4
 80070ce:	47a8      	blx	r5
		offset += tmp_cnt;
 80070d0:	9d01      	ldr	r5, [sp, #4]
 80070d2:	442e      	add	r6, r5
		length -= tmp_cnt;
 80070d4:	1b64      	subs	r4, r4, r5
		if (tmp_cnt == 0 &&
 80070d6:	2d00      	cmp	r5, #0
 80070d8:	d1ee      	bne.n	80070b8 <shell_write+0xc>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
 80070da:	68b8      	ldr	r0, [r7, #8]
 80070dc:	7903      	ldrb	r3, [r0, #4]
		if (tmp_cnt == 0 &&
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d0ea      	beq.n	80070b8 <shell_write+0xc>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d80a      	bhi.n	80070fc <shell_write+0x50>
	return z_impl_k_poll(events, num_events, timeout);
 80070e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070ea:	2101      	movs	r1, #1
 80070ec:	f500 7036 	add.w	r0, r0, #728	; 0x2d8
 80070f0:	f7fe fd2e 	bl	8005b50 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
 80070f4:	68bb      	ldr	r3, [r7, #8]
	signal->signaled = 0U;
 80070f6:	f8c3 5294 	str.w	r5, [r3, #660]	; 0x294
 80070fa:	e7dd      	b.n	80070b8 <shell_write+0xc>
	return shell->ctx->internal.flags.tx_rdy == 1 ? true : false;
 80070fc:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
		while (!flag_tx_rdy_get(shell)) {
 8007100:	06db      	lsls	r3, r3, #27
 8007102:	d5fb      	bpl.n	80070fc <shell_write+0x50>
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
 8007104:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8007108:	f36f 1304 	bfc	r3, #4, #1
 800710c:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
 8007110:	e7d2      	b.n	80070b8 <shell_write+0xc>

08007112 <shell_print_stream>:
	shell_write((const struct shell *) user_ctx, data, data_len);
 8007112:	f7ff bfcb 	b.w	80070ac <shell_write>

08007116 <shell_internal_vfprintf>:

void shell_internal_vfprintf(const struct shell *shell,
			     enum shell_vt100_color color, const char *fmt,
			     va_list args)
{
 8007116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007118:	460f      	mov	r7, r1
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    shell->ctx->internal.flags.use_colors &&
 800711a:	6881      	ldr	r1, [r0, #8]
{
 800711c:	461e      	mov	r6, r3
	    shell->ctx->internal.flags.use_colors &&
 800711e:	f8d1 3258 	ldr.w	r3, [r1, #600]	; 0x258
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
 8007122:	079b      	lsls	r3, r3, #30
{
 8007124:	4604      	mov	r4, r0
 8007126:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
 8007128:	d517      	bpl.n	800715a <shell_internal_vfprintf+0x44>
	    shell->ctx->internal.flags.use_colors &&
 800712a:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
 800712e:	42bb      	cmp	r3, r7
 8007130:	d013      	beq.n	800715a <shell_internal_vfprintf+0x44>
			   enum shell_vt100_color color);

static inline void shell_vt100_colors_store(const struct shell *shell,
					    struct shell_vt100_colors *color)
{
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
 8007132:	2202      	movs	r2, #2
 8007134:	312e      	adds	r1, #46	; 0x2e
 8007136:	a801      	add	r0, sp, #4
 8007138:	f000 ff04 	bl	8007f44 <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		shell_vt100_colors_store(shell, &col);
		shell_vt100_color_set(shell, color);
 800713c:	4639      	mov	r1, r7
 800713e:	4620      	mov	r0, r4
 8007140:	f7fa fbfe 	bl	8001940 <shell_vt100_color_set>

		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 8007144:	4629      	mov	r1, r5
 8007146:	6960      	ldr	r0, [r4, #20]
 8007148:	4632      	mov	r2, r6
 800714a:	f7fa fb4d 	bl	80017e8 <shell_fprintf_fmt>

		shell_vt100_colors_restore(shell, &col);
 800714e:	a901      	add	r1, sp, #4
 8007150:	4620      	mov	r0, r4
 8007152:	f7fa fc19 	bl	8001988 <shell_vt100_colors_restore>
	} else {
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
 8007156:	b003      	add	sp, #12
 8007158:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 800715a:	4632      	mov	r2, r6
 800715c:	4629      	mov	r1, r5
 800715e:	6960      	ldr	r0, [r4, #20]
 8007160:	f7fa fb42 	bl	80017e8 <shell_fprintf_fmt>
}
 8007164:	e7f7      	b.n	8007156 <shell_internal_vfprintf+0x40>

08007166 <shell_internal_fprintf>:

void shell_internal_fprintf(const struct shell *shell,
			    enum shell_vt100_color color,
			    const char *fmt, ...)
{
 8007166:	b40c      	push	{r2, r3}
 8007168:	b507      	push	{r0, r1, r2, lr}
 800716a:	ab04      	add	r3, sp, #16
 800716c:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	va_start(args, fmt);
 8007170:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
 8007172:	f7ff ffd0 	bl	8007116 <shell_internal_vfprintf>
	va_end(args);
}
 8007176:	b003      	add	sp, #12
 8007178:	f85d eb04 	ldr.w	lr, [sp], #4
 800717c:	b002      	add	sp, #8
 800717e:	4770      	bx	lr

08007180 <data_insert>:
{
 8007180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8007184:	6886      	ldr	r6, [r0, #8]
 8007186:	8e74      	ldrh	r4, [r6, #50]	; 0x32
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 8007188:	18a3      	adds	r3, r4, r2
 800718a:	2bff      	cmp	r3, #255	; 0xff
{
 800718c:	4607      	mov	r7, r0
 800718e:	4688      	mov	r8, r1
 8007190:	4615      	mov	r5, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 8007192:	dc1f      	bgt.n	80071d4 <data_insert+0x54>
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8007194:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 8007196:	1ae4      	subs	r4, r4, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 8007198:	3338      	adds	r3, #56	; 0x38
 800719a:	441e      	add	r6, r3
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 800719c:	b2a4      	uxth	r4, r4
	memmove(curr_pos + len, curr_pos, after);
 800719e:	4622      	mov	r2, r4
 80071a0:	4631      	mov	r1, r6
 80071a2:	1970      	adds	r0, r6, r5
 80071a4:	f000 feb7 	bl	8007f16 <memmove>
	memcpy(curr_pos, data, len);
 80071a8:	462a      	mov	r2, r5
 80071aa:	4641      	mov	r1, r8
 80071ac:	4630      	mov	r0, r6
 80071ae:	f000 fec9 	bl	8007f44 <memcpy>
	shell->ctx->cmd_buff_len += len;
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 80071b6:	442b      	add	r3, r5
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	8653      	strh	r3, [r2, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 80071bc:	4413      	add	r3, r2
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
 80071c4:	68bb      	ldr	r3, [r7, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80071c6:	f8d3 1258 	ldr.w	r1, [r3, #600]	; 0x258
 80071ca:	0749      	lsls	r1, r1, #29
 80071cc:	d404      	bmi.n	80071d8 <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
 80071ce:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80071d0:	4415      	add	r5, r2
 80071d2:	869d      	strh	r5, [r3, #52]	; 0x34
}
 80071d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
 80071d8:	4621      	mov	r1, r4
 80071da:	4638      	mov	r0, r7
}
 80071dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
 80071e0:	f7fa bc4c 	b.w	8001a7c <reprint_from_cursor>

080071e4 <shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
 80071e4:	f7ff bfcc 	b.w	8007180 <data_insert>

080071e8 <shell_op_char_delete>:
{
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4605      	mov	r5, r0
	u16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 80071ec:	6880      	ldr	r0, [r0, #8]
 80071ee:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 80071f0:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 80071f2:	1ae4      	subs	r4, r4, r3
 80071f4:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
 80071f6:	b18c      	cbz	r4, 800721c <shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 80071f8:	3338      	adds	r3, #56	; 0x38
 80071fa:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
 80071fc:	4622      	mov	r2, r4
 80071fe:	1c41      	adds	r1, r0, #1
 8007200:	f000 fe89 	bl	8007f16 <memmove>
	--shell->ctx->cmd_buff_len;
 8007204:	68aa      	ldr	r2, [r5, #8]
 8007206:	8e53      	ldrh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
 8007208:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
 800720a:	3b01      	subs	r3, #1
 800720c:	8653      	strh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
 800720e:	4628      	mov	r0, r5
 8007210:	2201      	movs	r2, #1
 8007212:	b289      	uxth	r1, r1
}
 8007214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
 8007218:	f7fa bc30 	b.w	8001a7c <reprint_from_cursor>
}
 800721c:	bd38      	pop	{r3, r4, r5, pc}

0800721e <shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
 800721e:	6883      	ldr	r3, [r0, #8]
 8007220:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
 8007222:	b510      	push	{r4, lr}
 8007224:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
 8007226:	b152      	cbz	r2, 800723e <shell_op_char_backspace+0x20>
 8007228:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800722a:	b143      	cbz	r3, 800723e <shell_op_char_backspace+0x20>
	shell_op_cursor_move(shell, -1);
 800722c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007230:	f7ff fe9c 	bl	8006f6c <shell_op_cursor_move>
	shell_op_char_delete(shell);
 8007234:	4620      	mov	r0, r4
}
 8007236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_op_char_delete(shell);
 800723a:	f7ff bfd5 	b.w	80071e8 <shell_op_char_delete>
}
 800723e:	bd10      	pop	{r4, pc}

08007240 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
 8007240:	6843      	ldr	r3, [r0, #4]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	b103      	cbz	r3, 8007248 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
 8007246:	4718      	bx	r3
}
 8007248:	4770      	bx	lr

0800724a <uninit>:
}
 800724a:	2000      	movs	r0, #0
 800724c:	4770      	bx	lr

0800724e <read>:
{
 800724e:	b510      	push	{r4, lr}
 8007250:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
 8007252:	6843      	ldr	r3, [r0, #4]
 8007254:	68d8      	ldr	r0, [r3, #12]
 8007256:	f7ff fa93 	bl	8006780 <ring_buf_get>
 800725a:	6020      	str	r0, [r4, #0]
}
 800725c:	2000      	movs	r0, #0
 800725e:	bd10      	pop	{r4, pc}

08007260 <write>:
{
 8007260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 8007264:	6845      	ldr	r5, [r0, #4]
{
 8007266:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
 8007268:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
 800726a:	7c1b      	ldrb	r3, [r3, #16]
{
 800726c:	460c      	mov	r4, r1
 800726e:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
 8007270:	b153      	cbz	r3, 8007288 <write+0x28>
 8007272:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
 8007276:	4544      	cmp	r4, r8
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	d120      	bne.n	80072be <write+0x5e>
		*cnt = length;
 800727c:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 800727e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8007282:	2001      	movs	r0, #1
 8007284:	4790      	blx	r2
 8007286:	e017      	b.n	80072b8 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
 8007288:	68a8      	ldr	r0, [r5, #8]
 800728a:	f7ff fa24 	bl	80066d6 <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800728e:	682b      	ldr	r3, [r5, #0]
 8007290:	6030      	str	r0, [r6, #0]
 8007292:	330c      	adds	r3, #12
 8007294:	2101      	movs	r1, #1
 8007296:	f3bf 8f5b 	dmb	ish
 800729a:	e853 2f00 	ldrex	r2, [r3]
 800729e:	e843 1000 	strex	r0, r1, [r3]
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d1f9      	bne.n	800729a <write+0x3a>
 80072a6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
 80072aa:	b92a      	cbnz	r2, 80072b8 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable) {
 80072b0:	6843      	ldr	r3, [r0, #4]
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	b103      	cbz	r3, 80072b8 <write+0x58>
		api->irq_tx_enable(dev);
 80072b6:	4798      	blx	r3
}
 80072b8:	2000      	movs	r0, #0
 80072ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
 80072c4:	6843      	ldr	r3, [r0, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	4798      	blx	r3
 80072ca:	e7d4      	b.n	8007276 <write+0x16>

080072cc <enable>:
{
 80072cc:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
 80072ce:	6843      	ldr	r3, [r0, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
 80072d4:	b111      	cbz	r1, 80072dc <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
 80072d6:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
 80072d8:	f7ff ffb2 	bl	8007240 <z_impl_uart_irq_tx_disable>
}
 80072dc:	2000      	movs	r0, #0
 80072de:	bd08      	pop	{r3, pc}

080072e0 <uart_callback>:
	struct device *dev = sh_uart->ctrl_blk->dev;
 80072e0:	6803      	ldr	r3, [r0, #0]
{
 80072e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80072e6:	4605      	mov	r5, r0
	struct device *dev = sh_uart->ctrl_blk->dev;
 80072e8:	681e      	ldr	r6, [r3, #0]
	if (api->irq_update) {
 80072ea:	6873      	ldr	r3, [r6, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ee:	b10b      	cbz	r3, 80072f4 <uart_callback+0x14>
		return api->irq_update(dev);
 80072f0:	4630      	mov	r0, r6
 80072f2:	4798      	blx	r3
	if (api->irq_rx_ready) {
 80072f4:	6873      	ldr	r3, [r6, #4]
 80072f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f8:	b343      	cbz	r3, 800734c <uart_callback+0x6c>
		return api->irq_rx_ready(dev);
 80072fa:	4630      	mov	r0, r6
 80072fc:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
 80072fe:	b328      	cbz	r0, 800734c <uart_callback+0x6c>
	bool new_data = false;
 8007300:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
 8007304:	68e8      	ldr	r0, [r5, #12]
 8007306:	a901      	add	r1, sp, #4
 8007308:	6902      	ldr	r2, [r0, #16]
 800730a:	f7ff f9b5 	bl	8006678 <ring_buf_put_claim>
		if (len > 0) {
 800730e:	682b      	ldr	r3, [r5, #0]
 8007310:	4607      	mov	r7, r0
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
 8007312:	6818      	ldr	r0, [r3, #0]
	if (api->fifo_read) {
 8007314:	6843      	ldr	r3, [r0, #4]
		if (len > 0) {
 8007316:	2f00      	cmp	r7, #0
 8007318:	d03c      	beq.n	8007394 <uart_callback+0xb4>
 800731a:	699c      	ldr	r4, [r3, #24]
 800731c:	2c00      	cmp	r4, #0
 800731e:	d037      	beq.n	8007390 <uart_callback+0xb0>
		return api->fifo_read(dev, rx_data, size);
 8007320:	463a      	mov	r2, r7
 8007322:	9901      	ldr	r1, [sp, #4]
 8007324:	47a0      	blx	r4
				new_data = true;
 8007326:	1e04      	subs	r4, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 8007328:	4621      	mov	r1, r4
 800732a:	68e8      	ldr	r0, [r5, #12]
				new_data = true;
 800732c:	bf18      	it	ne
 800732e:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 8007332:	f7ff f9bd 	bl	80066b0 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
 8007336:	b10c      	cbz	r4, 800733c <uart_callback+0x5c>
 8007338:	42a7      	cmp	r7, r4
 800733a:	d0e3      	beq.n	8007304 <uart_callback+0x24>
	if (new_data) {
 800733c:	f1b8 0f00 	cmp.w	r8, #0
 8007340:	d004      	beq.n	800734c <uart_callback+0x6c>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
 8007342:	682b      	ldr	r3, [r5, #0]
 8007344:	2000      	movs	r0, #0
 8007346:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 800734a:	4790      	blx	r2
	if (api->irq_tx_ready) {
 800734c:	6873      	ldr	r3, [r6, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	b1db      	cbz	r3, 800738a <uart_callback+0xaa>
		return api->irq_tx_ready(dev);
 8007352:	4630      	mov	r0, r6
 8007354:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
 8007356:	b1c0      	cbz	r0, 800738a <uart_callback+0xaa>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
 8007358:	68a8      	ldr	r0, [r5, #8]
	struct device *dev = sh_uart->ctrl_blk->dev;
 800735a:	682b      	ldr	r3, [r5, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
 800735c:	6902      	ldr	r2, [r0, #16]
	struct device *dev = sh_uart->ctrl_blk->dev;
 800735e:	681e      	ldr	r6, [r3, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
 8007360:	a901      	add	r1, sp, #4
 8007362:	f7ff f9d7 	bl	8006714 <ring_buf_get_claim>
	if (len) {
 8007366:	4604      	mov	r4, r0
 8007368:	b300      	cbz	r0, 80073ac <uart_callback+0xcc>
	if (api->fifo_fill) {
 800736a:	6873      	ldr	r3, [r6, #4]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	b1db      	cbz	r3, 80073a8 <uart_callback+0xc8>
		return api->fifo_fill(dev, tx_data, size);
 8007370:	4602      	mov	r2, r0
 8007372:	9901      	ldr	r1, [sp, #4]
 8007374:	4630      	mov	r0, r6
 8007376:	4798      	blx	r3
 8007378:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
 800737a:	68a8      	ldr	r0, [r5, #8]
 800737c:	f7ff f9eb 	bl	8006756 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	2001      	movs	r0, #1
 8007384:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8007388:	4790      	blx	r2
}
 800738a:	b002      	add	sp, #8
 800738c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
 8007390:	4620      	mov	r0, r4
 8007392:	e7c8      	b.n	8007326 <uart_callback+0x46>
	if (api->fifo_read) {
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	b12b      	cbz	r3, 80073a4 <uart_callback+0xc4>
		return api->fifo_read(dev, rx_data, size);
 8007398:	2201      	movs	r2, #1
 800739a:	f10d 0103 	add.w	r1, sp, #3
 800739e:	4798      	blx	r3
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
 80073a0:	4604      	mov	r4, r0
 80073a2:	e7c8      	b.n	8007336 <uart_callback+0x56>
	return 0;
 80073a4:	4638      	mov	r0, r7
 80073a6:	e7fb      	b.n	80073a0 <uart_callback+0xc0>
	return 0;
 80073a8:	4619      	mov	r1, r3
 80073aa:	e7e6      	b.n	800737a <uart_callback+0x9a>
 80073ac:	4630      	mov	r0, r6
 80073ae:	f7ff ff47 	bl	8007240 <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
 80073b2:	682b      	ldr	r3, [r5, #0]
 80073b4:	60dc      	str	r4, [r3, #12]
 80073b6:	e7e3      	b.n	8007380 <uart_callback+0xa0>

080073b8 <shell_raw_fprintf>:
{
 80073b8:	b40e      	push	{r1, r2, r3}
 80073ba:	b503      	push	{r0, r1, lr}
 80073bc:	aa03      	add	r2, sp, #12
 80073be:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 80073c2:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
 80073c4:	f7fa fa10 	bl	80017e8 <shell_fprintf_fmt>
}
 80073c8:	b002      	add	sp, #8
 80073ca:	f85d eb04 	ldr.w	lr, [sp], #4
 80073ce:	b003      	add	sp, #12
 80073d0:	4770      	bx	lr

080073d2 <cmd_bacskpace_mode_backspace>:
	flag_mode_delete_set(shell, false);
 80073d2:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
 80073d4:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 80073d8:	f36f 1245 	bfc	r2, #5, #1
 80073dc:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
 80073e0:	2000      	movs	r0, #0
 80073e2:	4770      	bx	lr

080073e4 <cmd_bacskpace_mode_delete>:
	flag_mode_delete_set(shell, true);
 80073e4:	6882      	ldr	r2, [r0, #8]
 80073e6:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 80073ea:	f043 0320 	orr.w	r3, r3, #32
 80073ee:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
 80073f2:	2000      	movs	r0, #0
 80073f4:	4770      	bx	lr

080073f6 <cmd_colors_off>:
	flag_use_colors_set(shell, false);
 80073f6:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
 80073f8:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 80073fc:	f36f 0241 	bfc	r2, #1, #1
 8007400:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
 8007404:	2000      	movs	r0, #0
 8007406:	4770      	bx	lr

08007408 <cmd_colors_on>:
	flag_use_colors_set(shell, true);
 8007408:	6882      	ldr	r2, [r0, #8]
 800740a:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 800740e:	f043 0302 	orr.w	r3, r3, #2
 8007412:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
 8007416:	2000      	movs	r0, #0
 8007418:	4770      	bx	lr

0800741a <cmd_echo_off>:
	flag_echo_set(shell, false);
 800741a:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.echo = val ? 1 : 0;
 800741c:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8007420:	f36f 0282 	bfc	r2, #2, #1
 8007424:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
 8007428:	2000      	movs	r0, #0
 800742a:	4770      	bx	lr

0800742c <cmd_echo_on>:
	flag_echo_set(shell, true);
 800742c:	6882      	ldr	r2, [r0, #8]
 800742e:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 8007432:	f043 0304 	orr.w	r3, r3, #4
 8007436:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
 800743a:	2000      	movs	r0, #0
 800743c:	4770      	bx	lr

0800743e <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
 800743e:	6983      	ldr	r3, [r0, #24]
 8007440:	2000      	movs	r0, #0
 8007442:	6018      	str	r0, [r3, #0]
}
 8007444:	4770      	bx	lr

08007446 <shell_raw_fprintf>:
{
 8007446:	b40e      	push	{r1, r2, r3}
 8007448:	b503      	push	{r0, r1, lr}
 800744a:	aa03      	add	r2, sp, #12
 800744c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8007450:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
 8007452:	f7fa f9c9 	bl	80017e8 <shell_fprintf_fmt>
}
 8007456:	b002      	add	sp, #8
 8007458:	f85d eb04 	ldr.w	lr, [sp], #4
 800745c:	b003      	add	sp, #12
 800745e:	4770      	bx	lr

08007460 <remove_from_tail.part.4>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
 8007460:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8007462:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
 8007464:	6800      	ldr	r0, [r0, #0]
	node->prev->next = node->next;
 8007466:	e9d3 2100 	ldrd	r2, r1, [r3]
 800746a:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
 800746c:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800746e:	2200      	movs	r2, #0
	node->prev = NULL;
 8007470:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
 8007474:	8919      	ldrh	r1, [r3, #8]
 8007476:	895b      	ldrh	r3, [r3, #10]
 8007478:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
 800747a:	310c      	adds	r1, #12
 800747c:	f7ff f96b 	bl	8006756 <ring_buf_get_finish>

	return true;
}
 8007480:	2001      	movs	r0, #1
 8007482:	bd08      	pop	{r3, pc}

08007484 <shell_history_mode_exit>:
	history->current = NULL;
 8007484:	2300      	movs	r3, #0
 8007486:	60c3      	str	r3, [r0, #12]
}
 8007488:	4770      	bx	lr

0800748a <shell_history_get>:
{
 800748a:	b570      	push	{r4, r5, r6, lr}
 800748c:	4615      	mov	r5, r2
	return list->head == list;
 800748e:	4602      	mov	r2, r0
 8007490:	461e      	mov	r6, r3
 8007492:	f852 4f04 	ldr.w	r4, [r2, #4]!
	if (sys_dlist_is_empty(&history->list)) {
 8007496:	4294      	cmp	r4, r2
 8007498:	d102      	bne.n	80074a0 <shell_history_get+0x16>
		*len = 0U;
 800749a:	2000      	movs	r0, #0
 800749c:	8030      	strh	r0, [r6, #0]
}
 800749e:	bd70      	pop	{r4, r5, r6, pc}
	if (!up) { /* button down */
 80074a0:	68c2      	ldr	r2, [r0, #12]
 80074a2:	b9b1      	cbnz	r1, 80074d2 <shell_history_get+0x48>
		if (history->current == NULL) {
 80074a4:	2a00      	cmp	r2, #0
 80074a6:	d0f8      	beq.n	800749a <shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
 80074a8:	4294      	cmp	r4, r2
 80074aa:	d102      	bne.n	80074b2 <shell_history_get+0x28>
	history->current = l_item;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60c3      	str	r3, [r0, #12]
	if (l_item) {
 80074b0:	e7f3      	b.n	800749a <shell_history_get+0x10>
 80074b2:	6854      	ldr	r4, [r2, #4]
	history->current = l_item;
 80074b4:	60c4      	str	r4, [r0, #12]
	if (l_item) {
 80074b6:	2c00      	cmp	r4, #0
 80074b8:	d0ef      	beq.n	800749a <shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
 80074ba:	8922      	ldrh	r2, [r4, #8]
 80074bc:	f104 010c 	add.w	r1, r4, #12
 80074c0:	4628      	mov	r0, r5
 80074c2:	f000 fd3f 	bl	8007f44 <memcpy>
		*len = h_item->len;
 80074c6:	8922      	ldrh	r2, [r4, #8]
 80074c8:	8032      	strh	r2, [r6, #0]
		dst[*len] = '\0';
 80074ca:	2300      	movs	r3, #0
 80074cc:	54ab      	strb	r3, [r5, r2]
		return true;
 80074ce:	2001      	movs	r0, #1
 80074d0:	e7e5      	b.n	800749e <shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
 80074d2:	2a00      	cmp	r2, #0
 80074d4:	d0ee      	beq.n	80074b4 <shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
 80074d6:	6883      	ldr	r3, [r0, #8]
 80074d8:	4293      	cmp	r3, r2
 80074da:	d0e7      	beq.n	80074ac <shell_history_get+0x22>
 80074dc:	6814      	ldr	r4, [r2, #0]
 80074de:	e7e9      	b.n	80074b4 <shell_history_get+0x2a>

080074e0 <shell_history_purge>:

void shell_history_purge(struct shell_history *history)
{
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
 80074e4:	1d05      	adds	r5, r0, #4
 80074e6:	6863      	ldr	r3, [r4, #4]
 80074e8:	42ab      	cmp	r3, r5
 80074ea:	d004      	beq.n	80074f6 <shell_history_purge+0x16>
 80074ec:	4620      	mov	r0, r4
 80074ee:	f7ff ffb7 	bl	8007460 <remove_from_tail.part.4>
	while (remove_from_tail(history)) {
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d1f7      	bne.n	80074e6 <shell_history_purge+0x6>
	}
}
 80074f6:	bd38      	pop	{r3, r4, r5, pc}

080074f8 <shell_history_put>:
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 80074f8:	6803      	ldr	r3, [r0, #0]
{
 80074fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t total_len = len + offsetof(struct shell_history_item, data);
 80074fe:	f102 050c 	add.w	r5, r2, #12
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
 8007502:	426f      	negs	r7, r5
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline u32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	/* One element is used to distinguish between empty and full state. */
	return buf->size - 1;
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	f007 0703 	and.w	r7, r7, #3
	total_len += padding;
 800750a:	443d      	add	r5, r7
 800750c:	3b01      	subs	r3, #1
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 800750e:	429d      	cmp	r5, r3
{
 8007510:	4604      	mov	r4, r0
 8007512:	468a      	mov	sl, r1
 8007514:	4690      	mov	r8, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 8007516:	d840      	bhi.n	800759a <shell_history_put+0xa2>
	history->current = NULL;
 8007518:	2300      	movs	r3, #0
 800751a:	60c3      	str	r3, [r0, #12]
		return;
	}

	shell_history_mode_exit(history);

	if (len == 0) {
 800751c:	2a00      	cmp	r2, #0
 800751e:	d03c      	beq.n	800759a <shell_history_put+0xa2>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
 8007520:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
 8007524:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007526:	4581      	cmp	r9, r0
 8007528:	d12c      	bne.n	8007584 <shell_history_put+0x8c>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
 800752a:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
 800752c:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
 8007530:	462a      	mov	r2, r5
 8007532:	a901      	add	r1, sp, #4
 8007534:	6820      	ldr	r0, [r4, #0]
 8007536:	f7ff f89f 	bl	8006678 <ring_buf_put_claim>
		if (claim_len < total_len) {
 800753a:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
 800753c:	4606      	mov	r6, r0
		if (claim_len < total_len) {
 800753e:	d92f      	bls.n	80075a0 <shell_history_put+0xa8>
				ring_buf_put_claim(history->ring_buf,
 8007540:	462a      	mov	r2, r5
 8007542:	a901      	add	r1, sp, #4
 8007544:	6820      	ldr	r0, [r4, #0]
 8007546:	f7ff f897 	bl	8006678 <ring_buf_put_claim>
			if (claim2_len == total_len) {
 800754a:	4285      	cmp	r5, r0
 800754c:	d129      	bne.n	80075a2 <shell_history_put+0xaa>
				ring_buf_put_finish(history->ring_buf,
 800754e:	4631      	mov	r1, r6
 8007550:	6820      	ldr	r0, [r4, #0]
 8007552:	f7ff f8ad 	bl	80066b0 <ring_buf_put_finish>
				padding += claim_len;
 8007556:	4437      	add	r7, r6
 8007558:	b2bf      	uxth	r7, r7
 800755a:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
 800755c:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
 800755e:	4651      	mov	r1, sl
	item->len = len;
 8007560:	f8a5 8008 	strh.w	r8, [r5, #8]
	item->padding = padding;
 8007564:	816f      	strh	r7, [r5, #10]
	memcpy(item->data, src, len);
 8007566:	4642      	mov	r2, r8
 8007568:	f105 000c 	add.w	r0, r5, #12
 800756c:	f000 fcea 	bl	8007f44 <memcpy>
	node->next = list->head;
 8007570:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
 8007572:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
 8007574:	e9c5 3900 	strd	r3, r9, [r5]
 8007578:	4631      	mov	r1, r6
	list->head->prev = node;
 800757a:	605d      	str	r5, [r3, #4]
	list->head = node;
 800757c:	6065      	str	r5, [r4, #4]
 800757e:	f7ff f897 	bl	80066b0 <ring_buf_put_finish>
			break;
 8007582:	e00a      	b.n	800759a <shell_history_put+0xa2>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
 8007584:	9001      	str	r0, [sp, #4]
	if (l_item &&
 8007586:	2800      	cmp	r0, #0
 8007588:	d0d0      	beq.n	800752c <shell_history_put+0x34>
	   (h_item->len == len) &&
 800758a:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
 800758c:	4293      	cmp	r3, r2
 800758e:	d1cd      	bne.n	800752c <shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
 8007590:	300c      	adds	r0, #12
 8007592:	f000 fcb0 	bl	8007ef6 <memcmp>
	   (h_item->len == len) &&
 8007596:	2800      	cmp	r0, #0
 8007598:	d1c8      	bne.n	800752c <shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
 800759a:	b003      	add	sp, #12
 800759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
 80075a0:	d0dc      	beq.n	800755c <shell_history_put+0x64>
		ring_buf_put_finish(history->ring_buf, 0);
 80075a2:	2100      	movs	r1, #0
 80075a4:	6820      	ldr	r0, [r4, #0]
 80075a6:	f7ff f883 	bl	80066b0 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
 80075aa:	6863      	ldr	r3, [r4, #4]
 80075ac:	4599      	cmp	r9, r3
 80075ae:	d108      	bne.n	80075c2 <shell_history_put+0xca>
			ring_buf_reset(history->ring_buf);
 80075b0:	6820      	ldr	r0, [r4, #0]
	memset(&buf->misc, 0, sizeof(buf->misc));
 80075b2:	2208      	movs	r2, #8
	buf->tail = 0;
 80075b4:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
 80075b8:	2100      	movs	r1, #0
 80075ba:	4410      	add	r0, r2
 80075bc:	f000 fcec 	bl	8007f98 <memset>
 80075c0:	e7b6      	b.n	8007530 <shell_history_put+0x38>
 80075c2:	4620      	mov	r0, r4
 80075c4:	f7ff ff4c 	bl	8007460 <remove_from_tail.part.4>
		if (remove_from_tail(history) == false) {
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d1b1      	bne.n	8007530 <shell_history_put+0x38>
 80075cc:	e7f0      	b.n	80075b0 <shell_history_put+0xb8>

080075ce <shell_history_init>:

void shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
 80075ce:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
 80075d0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60c3      	str	r3, [r0, #12]
}
 80075d8:	4770      	bx	lr

080075da <shell_wildcard_character_exist>:
{
 80075da:	b510      	push	{r4, lr}
 80075dc:	4604      	mov	r4, r0
 80075de:	b908      	cbnz	r0, 80075e4 <shell_wildcard_character_exist+0xa>
	return false;
 80075e0:	2000      	movs	r0, #0
}
 80075e2:	bd10      	pop	{r4, pc}
 80075e4:	f000 fc65 	bl	8007eb2 <strlen>
	for (size_t i = 0; i < str_len; i++) {
 80075e8:	2300      	movs	r3, #0
 80075ea:	b280      	uxth	r0, r0
 80075ec:	4283      	cmp	r3, r0
 80075ee:	d2f7      	bcs.n	80075e0 <shell_wildcard_character_exist+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
 80075f0:	5ce2      	ldrb	r2, [r4, r3]
 80075f2:	2a3f      	cmp	r2, #63	; 0x3f
 80075f4:	d003      	beq.n	80075fe <shell_wildcard_character_exist+0x24>
 80075f6:	2a2a      	cmp	r2, #42	; 0x2a
 80075f8:	d001      	beq.n	80075fe <shell_wildcard_character_exist+0x24>
	for (size_t i = 0; i < str_len; i++) {
 80075fa:	3301      	adds	r3, #1
 80075fc:	e7f6      	b.n	80075ec <shell_wildcard_character_exist+0x12>
			return true;
 80075fe:	2001      	movs	r0, #1
 8007600:	e7ef      	b.n	80075e2 <shell_wildcard_character_exist+0x8>

08007602 <shell_wildcard_prepare>:
{
 8007602:	b510      	push	{r4, lr}
 8007604:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
 8007606:	6880      	ldr	r0, [r0, #8]
 8007608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800760c:	2100      	movs	r1, #0
 800760e:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8007612:	f000 fcc1 	bl	8007f98 <memset>
	memcpy(shell->ctx->temp_buff,
 8007616:	68a0      	ldr	r0, [r4, #8]
 8007618:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800761a:	f100 0138 	add.w	r1, r0, #56	; 0x38
 800761e:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8007622:	f000 fc8f 	bl	8007f44 <memcpy>
	shell_spaces_trim(shell->ctx->temp_buff);
 8007626:	68a0      	ldr	r0, [r4, #8]
 8007628:	f500 709c 	add.w	r0, r0, #312	; 0x138
 800762c:	f7ff fbfd 	bl	8006e2a <shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = shell_strlen(shell->ctx->temp_buff) + 1;
 8007630:	68a0      	ldr	r0, [r4, #8]
 8007632:	f510 709c 	adds.w	r0, r0, #312	; 0x138
 8007636:	d002      	beq.n	800763e <shell_wildcard_prepare+0x3c>
 8007638:	f000 fc3b 	bl	8007eb2 <strlen>
 800763c:	b280      	uxth	r0, r0
 800763e:	68a3      	ldr	r3, [r4, #8]
 8007640:	3001      	adds	r0, #1
 8007642:	86d8      	strh	r0, [r3, #54]	; 0x36
}
 8007644:	bd10      	pop	{r4, pc}

08007646 <shell_wildcard_finalize>:

void shell_wildcard_finalize(const struct shell *shell)
{
 8007646:	b510      	push	{r4, lr}
 8007648:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
 800764a:	6880      	ldr	r0, [r0, #8]
 800764c:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 800764e:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8007652:	3038      	adds	r0, #56	; 0x38
 8007654:	f000 fc76 	bl	8007f44 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
 8007658:	68a3      	ldr	r3, [r4, #8]
 800765a:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800765c:	865a      	strh	r2, [r3, #50]	; 0x32
}
 800765e:	bd10      	pop	{r4, pc}

08007660 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 8007660:	4602      	mov	r2, r0
 8007662:	2101      	movs	r1, #1
 8007664:	2000      	movs	r0, #0
 8007666:	f7fa bd8b 	b.w	8002180 <__stm32_exti_isr>

0800766a <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 800766a:	4602      	mov	r2, r0
 800766c:	2102      	movs	r1, #2
 800766e:	2001      	movs	r0, #1
 8007670:	f7fa bd86 	b.w	8002180 <__stm32_exti_isr>

08007674 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 8007674:	4602      	mov	r2, r0
 8007676:	2103      	movs	r1, #3
 8007678:	2002      	movs	r0, #2
 800767a:	f7fa bd81 	b.w	8002180 <__stm32_exti_isr>

0800767e <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 800767e:	4602      	mov	r2, r0
 8007680:	2104      	movs	r1, #4
 8007682:	2003      	movs	r0, #3
 8007684:	f7fa bd7c 	b.w	8002180 <__stm32_exti_isr>

08007688 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8007688:	4602      	mov	r2, r0
 800768a:	2105      	movs	r1, #5
 800768c:	2004      	movs	r0, #4
 800768e:	f7fa bd77 	b.w	8002180 <__stm32_exti_isr>

08007692 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8007692:	4602      	mov	r2, r0
 8007694:	210a      	movs	r1, #10
 8007696:	2005      	movs	r0, #5
 8007698:	f7fa bd72 	b.w	8002180 <__stm32_exti_isr>

0800769c <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 800769c:	4602      	mov	r2, r0
 800769e:	2110      	movs	r1, #16
 80076a0:	200a      	movs	r0, #10
 80076a2:	f7fa bd6d 	b.w	8002180 <__stm32_exti_isr>

080076a6 <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 80076a6:	4602      	mov	r2, r0
 80076a8:	2111      	movs	r1, #17
 80076aa:	2010      	movs	r0, #16
 80076ac:	f7fa bd68 	b.w	8002180 <__stm32_exti_isr>

080076b0 <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 80076b0:	4602      	mov	r2, r0
 80076b2:	2113      	movs	r1, #19
 80076b4:	2012      	movs	r0, #18
 80076b6:	f7fa bd63 	b.w	8002180 <__stm32_exti_isr>

080076ba <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 80076ba:	4602      	mov	r2, r0
 80076bc:	2116      	movs	r1, #22
 80076be:	2015      	movs	r0, #21
 80076c0:	f7fa bd5e 	b.w	8002180 <__stm32_exti_isr>

080076c4 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 80076c4:	4602      	mov	r2, r0
 80076c6:	2117      	movs	r1, #23
 80076c8:	2016      	movs	r0, #22
 80076ca:	f7fa bd59 	b.w	8002180 <__stm32_exti_isr>

080076ce <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 80076ce:	2200      	movs	r2, #0
{
 80076d0:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 80076d2:	4611      	mov	r1, r2
 80076d4:	2006      	movs	r0, #6
 80076d6:	f7fb fe75 	bl	80033c4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 80076da:	2200      	movs	r2, #0
 80076dc:	4611      	mov	r1, r2
 80076de:	2007      	movs	r0, #7
 80076e0:	f7fb fe70 	bl	80033c4 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 80076e4:	2200      	movs	r2, #0
 80076e6:	4611      	mov	r1, r2
 80076e8:	2008      	movs	r0, #8
 80076ea:	f7fb fe6b 	bl	80033c4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 80076ee:	2200      	movs	r2, #0
 80076f0:	4611      	mov	r1, r2
 80076f2:	2009      	movs	r0, #9
 80076f4:	f7fb fe66 	bl	80033c4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 80076f8:	2200      	movs	r2, #0
 80076fa:	4611      	mov	r1, r2
 80076fc:	200a      	movs	r0, #10
 80076fe:	f7fb fe61 	bl	80033c4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#ifndef CONFIG_SOC_SERIES_STM32MP1X
	IRQ_CONNECT(EXTI9_5_IRQn,
 8007702:	2200      	movs	r2, #0
 8007704:	4611      	mov	r1, r2
 8007706:	2017      	movs	r0, #23
 8007708:	f7fb fe5c 	bl	80033c4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800770c:	2200      	movs	r2, #0
 800770e:	4611      	mov	r1, r2
 8007710:	2028      	movs	r0, #40	; 0x28
 8007712:	f7fb fe57 	bl	80033c4 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8007716:	2200      	movs	r2, #0
 8007718:	4611      	mov	r1, r2
 800771a:	2001      	movs	r0, #1
 800771c:	f7fb fe52 	bl	80033c4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8007720:	2200      	movs	r2, #0
 8007722:	4611      	mov	r1, r2
 8007724:	202a      	movs	r0, #42	; 0x2a
 8007726:	f7fb fe4d 	bl	80033c4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 800772a:	2200      	movs	r2, #0
 800772c:	4611      	mov	r1, r2
 800772e:	2002      	movs	r0, #2
 8007730:	f7fb fe48 	bl	80033c4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8007734:	2200      	movs	r2, #0
 8007736:	4611      	mov	r1, r2
 8007738:	2003      	movs	r0, #3
 800773a:	f7fb fe43 	bl	80033c4 <z_arm_irq_priority_set>
}
 800773e:	2000      	movs	r0, #0
 8007740:	bd08      	pop	{r3, pc}

08007742 <config_pll_init>:
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
 8007742:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007746:	2208      	movs	r2, #8
 8007748:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(CONFIG_CLOCK_STM32_PLL_P_DIVISOR);
 800774c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007750:	6083      	str	r3, [r0, #8]
}
 8007752:	4770      	bx	lr

08007754 <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 8007754:	4770      	bx	lr

08007756 <can_work_handler>:
{
 8007756:	b570      	push	{r4, r5, r6, lr}
 8007758:	4604      	mov	r4, r0
		return &buffer->buf[buffer->tail];
 800775a:	f100 0510 	add.w	r5, r0, #16
 800775e:	260e      	movs	r6, #14
	if (buffer->head == buffer->tail) {
 8007760:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
 8007764:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8007768:	4283      	cmp	r3, r0
 800776a:	d016      	beq.n	800779a <can_work_handler+0x44>
		can_work->cb(frame, can_work->cb_arg);
 800776c:	e9d4 3113 	ldrd	r3, r1, [r4, #76]	; 0x4c
 8007770:	fb06 5000 	mla	r0, r6, r0, r5
 8007774:	4798      	blx	r3
	u16_t next_tail = WORK_BUF_MOD_SIZE(buffer->tail + 1);
 8007776:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
	if (buffer->head == buffer->tail) {
 800777a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800777e:	4293      	cmp	r3, r2
 8007780:	d0ee      	beq.n	8007760 <can_work_handler+0xa>
	if (buffer->head == WORK_BUF_FULL) {
 8007782:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007786:	428a      	cmp	r2, r1
		buffer->head = buffer->tail;
 8007788:	bf08      	it	eq
 800778a:	f8a4 3048 	strheq.w	r3, [r4, #72]	; 0x48
	u16_t next_tail = WORK_BUF_MOD_SIZE(buffer->tail + 1);
 800778e:	3301      	adds	r3, #1
 8007790:	f003 0303 	and.w	r3, r3, #3
	buffer->tail = next_tail;
 8007794:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8007798:	e7e2      	b.n	8007760 <can_work_handler+0xa>
}
 800779a:	bd70      	pop	{r4, r5, r6, pc}

0800779c <can_msgq_put>:
{
 800779c:	460b      	mov	r3, r1
	return z_impl_k_msgq_put(msgq, data, timeout);
 800779e:	2200      	movs	r2, #0
 80077a0:	4601      	mov	r1, r0
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fd bb12 	b.w	8004dcc <z_impl_k_msgq_put>

080077a8 <can_work_isr_put>:
	u16_t next_head = WORK_BUF_MOD_SIZE(buffer->head + 1);
 80077a8:	f8b1 3048 	ldrh.w	r3, [r1, #72]	; 0x48
{
 80077ac:	b430      	push	{r4, r5}
	if (buffer->head == WORK_BUF_FULL) {
 80077ae:	f64f 74ff 	movw	r4, #65535	; 0xffff
	u16_t next_head = WORK_BUF_MOD_SIZE(buffer->head + 1);
 80077b2:	1c5a      	adds	r2, r3, #1
	if (buffer->head == WORK_BUF_FULL) {
 80077b4:	42a3      	cmp	r3, r4
	u16_t next_head = WORK_BUF_MOD_SIZE(buffer->head + 1);
 80077b6:	f002 0203 	and.w	r2, r2, #3
	if (buffer->head == WORK_BUF_FULL) {
 80077ba:	d02a      	beq.n	8007812 <can_work_isr_put+0x6a>
	buffer->buf[buffer->head] = *frame;
 80077bc:	240e      	movs	r4, #14
 80077be:	fb04 1303 	mla	r3, r4, r3, r1
 80077c2:	3310      	adds	r3, #16
 80077c4:	f100 040c 	add.w	r4, r0, #12
 80077c8:	f850 5b04 	ldr.w	r5, [r0], #4
 80077cc:	f843 5b04 	str.w	r5, [r3], #4
 80077d0:	42a0      	cmp	r0, r4
 80077d2:	d1f9      	bne.n	80077c8 <can_work_isr_put+0x20>
 80077d4:	8800      	ldrh	r0, [r0, #0]
 80077d6:	8018      	strh	r0, [r3, #0]
	if (next_head == buffer->tail) {
 80077d8:	f8b1 004a 	ldrh.w	r0, [r1, #74]	; 0x4a
		buffer->head = WORK_BUF_FULL;
 80077dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077e0:	4290      	cmp	r0, r2
 80077e2:	bf08      	it	eq
 80077e4:	461a      	moveq	r2, r3
 80077e6:	f8a1 2048 	strh.w	r2, [r1, #72]	; 0x48
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80077ea:	f101 0308 	add.w	r3, r1, #8
	k_work_submit_to_queue(work->work_queue, &work->work_item);
 80077ee:	68c8      	ldr	r0, [r1, #12]
 80077f0:	f3bf 8f5b 	dmb	ish
 80077f4:	e853 2f00 	ldrex	r2, [r3]
 80077f8:	f042 0401 	orr.w	r4, r2, #1
 80077fc:	e843 4500 	strex	r5, r4, [r3]
 8007800:	2d00      	cmp	r5, #0
 8007802:	d1f7      	bne.n	80077f4 <can_work_isr_put+0x4c>
 8007804:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8007808:	07d3      	lsls	r3, r2, #31
 800780a:	d402      	bmi.n	8007812 <can_work_isr_put+0x6a>
}
 800780c:	bc30      	pop	{r4, r5}
		k_queue_append(&work_q->queue, work);
 800780e:	f000 bfd9 	b.w	80087c4 <k_queue_append>
 8007812:	bc30      	pop	{r4, r5}
 8007814:	4770      	bx	lr

08007816 <can_stm32_rx_isr>:
{
 8007816:	b530      	push	{r4, r5, lr}
	cfg = DEV_CFG(dev);
 8007818:	6803      	ldr	r3, [r0, #0]
	data = DEV_DATA(dev);
 800781a:	6885      	ldr	r5, [r0, #8]
	can = cfg->can;
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	681c      	ldr	r4, [r3, #0]
{
 8007820:	b085      	sub	sp, #20
	while (can->RF0R & CAN_RF0R_FMP0) {
 8007822:	68e3      	ldr	r3, [r4, #12]
 8007824:	079b      	lsls	r3, r3, #30
 8007826:	d102      	bne.n	800782e <can_stm32_rx_isr+0x18>
	if (can->RF0R & CAN_RF0R_FOVR0) {
 8007828:	68e3      	ldr	r3, [r4, #12]
}
 800782a:	b005      	add	sp, #20
 800782c:	bd30      	pop	{r4, r5, pc}
		filter_match_index = ((mbox->RDTR & CAN_RDT0R_FMI)
 800782e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 8007832:	f3c2 2207 	ubfx	r2, r2, #8, #8
		if (filter_match_index >= CONFIG_CAN_MAX_FILTER) {
 8007836:	2a04      	cmp	r2, #4
 8007838:	dcf6      	bgt.n	8007828 <can_stm32_rx_isr+0x12>
	if (mbox->RIR & CAN_RI0R_IDE) {
 800783a:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
 800783e:	9b00      	ldr	r3, [sp, #0]
		msg->ext_id = mbox->RIR >> CAN_RI0R_EXID_Pos;
 8007840:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
	if (mbox->RIR & CAN_RI0R_IDE) {
 8007844:	f011 0104 	ands.w	r1, r1, #4
 8007848:	d037      	beq.n	80078ba <can_stm32_rx_isr+0xa4>
		msg->ext_id = mbox->RIR >> CAN_RI0R_EXID_Pos;
 800784a:	f3c0 01d7 	ubfx	r1, r0, #3, #24
 800784e:	b2db      	uxtb	r3, r3
 8007850:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007854:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	f021 011f 	bic.w	r1, r1, #31
 800785e:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
 8007862:	f88d 1004 	strb.w	r1, [sp, #4]
		msg->id_type = CAN_EXTENDED_IDENTIFIER;
 8007866:	f043 0301 	orr.w	r3, r3, #1
		msg->id_type = CAN_STANDARD_IDENTIFIER;
 800786a:	f88d 3000 	strb.w	r3, [sp]
	msg->rtr = mbox->RIR & CAN_RI0R_RTR ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 800786e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8007872:	f89d 1000 	ldrb.w	r1, [sp]
 8007876:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800787a:	f363 0141 	bfi	r1, r3, #1, #1
	msg->dlc = mbox->RDTR & (CAN_RDT0R_DLC >> CAN_RDT0R_DLC_Pos);
 800787e:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
	msg->rtr = mbox->RIR & CAN_RI0R_RTR ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 8007882:	f88d 1000 	strb.w	r1, [sp]
	msg->dlc = mbox->RDTR & (CAN_RDT0R_DLC >> CAN_RDT0R_DLC_Pos);
 8007886:	f003 030f 	and.w	r3, r3, #15
 800788a:	f88d 3005 	strb.w	r3, [sp, #5]
	msg->data_32[0] = mbox->RDLR;
 800788e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8007892:	f8cd 3006 	str.w	r3, [sp, #6]
	msg->data_32[1] = mbox->RDHR;
 8007896:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800789a:	f8cd 300a 	str.w	r3, [sp, #10]
		callback = data->rx_cb[filter_match_index];
 800789e:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 80078a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		if (callback) {
 80078a6:	b11a      	cbz	r2, 80078b0 <can_stm32_rx_isr+0x9a>
			callback(&msg, data->cb_arg[filter_match_index]);
 80078a8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80078ac:	4668      	mov	r0, sp
 80078ae:	4790      	blx	r2
		can->RF0R |= CAN_RF0R_RFOM0;
 80078b0:	68e3      	ldr	r3, [r4, #12]
 80078b2:	f043 0320 	orr.w	r3, r3, #32
 80078b6:	60e3      	str	r3, [r4, #12]
 80078b8:	e7b3      	b.n	8007822 <can_stm32_rx_isr+0xc>
		msg->std_id =  mbox->RIR >> CAN_RI0R_STID_Pos;
 80078ba:	0d40      	lsrs	r0, r0, #21
 80078bc:	f360 2312 	bfi	r3, r0, #8, #11
 80078c0:	9300      	str	r3, [sp, #0]
		msg->id_type = CAN_STANDARD_IDENTIFIER;
 80078c2:	f361 0300 	bfi	r3, r1, #0, #1
 80078c6:	e7d0      	b.n	800786a <can_stm32_rx_isr+0x54>

080078c8 <can_stm32_register_state_change_isr>:
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 80078c8:	6803      	ldr	r3, [r0, #0]
	data->state_change_isr = isr;
 80078ca:	6882      	ldr	r2, [r0, #8]
	CAN_TypeDef *can = cfg->can;
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	681b      	ldr	r3, [r3, #0]
	data->state_change_isr = isr;
 80078d0:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
		can->IER &= ~CAN_IER_EPVIE;
 80078d4:	695a      	ldr	r2, [r3, #20]
	if (isr == NULL) {
 80078d6:	b919      	cbnz	r1, 80078e0 <can_stm32_register_state_change_isr+0x18>
		can->IER &= ~CAN_IER_EPVIE;
 80078d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		can->IER |= CAN_IER_EPVIE;
 80078dc:	615a      	str	r2, [r3, #20]
}
 80078de:	4770      	bx	lr
		can->IER |= CAN_IER_EPVIE;
 80078e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078e4:	e7fa      	b.n	80078dc <can_stm32_register_state_change_isr+0x14>

080078e6 <can_stm32_get_state>:
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 80078e6:	6803      	ldr	r3, [r0, #0]
	CAN_TypeDef *can = cfg->can;
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	681b      	ldr	r3, [r3, #0]
	if (err_cnt) {
 80078ec:	b129      	cbz	r1, 80078fa <can_stm32_get_state+0x14>
			((can->ESR & CAN_ESR_TEC) >> CAN_ESR_TEC_Pos);
 80078ee:	699a      	ldr	r2, [r3, #24]
 80078f0:	0c12      	lsrs	r2, r2, #16
		err_cnt->tx_err_cnt =
 80078f2:	700a      	strb	r2, [r1, #0]
			((can->ESR & CAN_ESR_REC) >> CAN_ESR_REC_Pos);
 80078f4:	699a      	ldr	r2, [r3, #24]
 80078f6:	0e12      	lsrs	r2, r2, #24
		err_cnt->rx_err_cnt =
 80078f8:	704a      	strb	r2, [r1, #1]
	if (can->ESR & CAN_ESR_BOFF) {
 80078fa:	699a      	ldr	r2, [r3, #24]
 80078fc:	0752      	lsls	r2, r2, #29
	if (can->ESR & CAN_ESR_EPVF) {
 80078fe:	bf5a      	itte	pl
 8007900:	6998      	ldrpl	r0, [r3, #24]
		return CAN_BUS_OFF;
 8007902:	f3c0 0040 	ubfxpl	r0, r0, #1, #1
 8007906:	2002      	movmi	r0, #2
}
 8007908:	4770      	bx	lr

0800790a <can_stm32_set_filter_bank>:
{
 800790a:	b510      	push	{r4, lr}
 800790c:	9c02      	ldr	r4, [sp, #8]
	switch (filter_type) {
 800790e:	2a03      	cmp	r2, #3
 8007910:	d824      	bhi.n	800795c <can_stm32_set_filter_bank+0x52>
 8007912:	e8df f002 	tbb	[pc, r2]
 8007916:	021f      	.short	0x021f
 8007918:	2a30      	.short	0x2a30
		switch (filter_nr & 0x03) {
 800791a:	f000 0003 	and.w	r0, r0, #3
 800791e:	2802      	cmp	r0, #2
 8007920:	d00d      	beq.n	800793e <can_stm32_set_filter_bank+0x34>
 8007922:	2803      	cmp	r0, #3
 8007924:	d011      	beq.n	800794a <can_stm32_set_filter_bank+0x40>
			filter_reg->FR1 = (filter_reg->FR1 & 0xFFFF0000) | id;
 8007926:	680a      	ldr	r2, [r1, #0]
 8007928:	2801      	cmp	r0, #1
 800792a:	bf1b      	ittet	ne
 800792c:	0c12      	lsrne	r2, r2, #16
 800792e:	0412      	lslne	r2, r2, #16
			filter_reg->FR1 = (filter_reg->FR1 & 0x0000FFFF)
 8007930:	b292      	uxtheq	r2, r2
			filter_reg->FR1 = (filter_reg->FR1 & 0xFFFF0000) | id;
 8007932:	4313      	orrne	r3, r2
					  | (id << 16);
 8007934:	bf08      	it	eq
 8007936:	ea42 4303 	orreq.w	r3, r2, r3, lsl #16
			filter_reg->FR1 = id;
 800793a:	600b      	str	r3, [r1, #0]
			break;
 800793c:	e00e      	b.n	800795c <can_stm32_set_filter_bank+0x52>
			filter_reg->FR2 = (filter_reg->FR2 & 0xFFFF0000) | id;
 800793e:	684a      	ldr	r2, [r1, #4]
 8007940:	0c12      	lsrs	r2, r2, #16
 8007942:	0412      	lsls	r2, r2, #16
 8007944:	4313      	orrs	r3, r2
			filter_reg->FR2 = id;
 8007946:	604b      	str	r3, [r1, #4]
			break;
 8007948:	e008      	b.n	800795c <can_stm32_set_filter_bank+0x52>
			filter_reg->FR2 = (filter_reg->FR2 & 0x0000FFFF)
 800794a:	684a      	ldr	r2, [r1, #4]
 800794c:	b292      	uxth	r2, r2
					   | (id << 16);
 800794e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8007952:	e7f8      	b.n	8007946 <can_stm32_set_filter_bank+0x3c>
		switch (filter_nr & 0x02) {
 8007954:	f010 0002 	ands.w	r0, r0, #2
 8007958:	d001      	beq.n	800795e <can_stm32_set_filter_bank+0x54>
 800795a:	b918      	cbnz	r0, 8007964 <can_stm32_set_filter_bank+0x5a>
}
 800795c:	bd10      	pop	{r4, pc}
			filter_reg->FR1 = id | (mask << 16);
 800795e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007962:	e7ea      	b.n	800793a <can_stm32_set_filter_bank+0x30>
			filter_reg->FR2 = id | (mask << 16);
 8007964:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007968:	e7ed      	b.n	8007946 <can_stm32_set_filter_bank+0x3c>
		switch (filter_nr & 0x02) {
 800796a:	f010 0002 	ands.w	r0, r0, #2
 800796e:	d0e4      	beq.n	800793a <can_stm32_set_filter_bank+0x30>
 8007970:	2800      	cmp	r0, #0
 8007972:	d1e8      	bne.n	8007946 <can_stm32_set_filter_bank+0x3c>
 8007974:	e7f2      	b.n	800795c <can_stm32_set_filter_bank+0x52>
		filter_reg->FR1 = id;
 8007976:	600b      	str	r3, [r1, #0]
		filter_reg->FR2 = mask;
 8007978:	604c      	str	r4, [r1, #4]
}
 800797a:	e7ef      	b.n	800795c <can_stm32_set_filter_bank+0x52>

0800797c <config_can_1_irq>:
#ifdef CONFIG_SOC_SERIES_STM32F0X
	IRQ_CONNECT(DT_CAN_1_IRQ, DT_CAN_1_IRQ_PRIORITY, can_stm32_isr,
		    DEVICE_GET(can_stm32_1), 0);
	irq_enable(DT_CAN_1_IRQ);
#else
	IRQ_CONNECT(DT_CAN_1_IRQ_RX0, DT_CAN_1_IRQ_PRIORITY,
 800797c:	2200      	movs	r2, #0
{
 800797e:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_CAN_1_IRQ_RX0, DT_CAN_1_IRQ_PRIORITY,
 8007980:	4611      	mov	r1, r2
{
 8007982:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_CAN_1_IRQ_RX0, DT_CAN_1_IRQ_PRIORITY,
 8007984:	2014      	movs	r0, #20
 8007986:	f7fb fd1d 	bl	80033c4 <z_arm_irq_priority_set>
		    can_stm32_rx_isr, DEVICE_GET(can_stm32_1), 0);
	irq_enable(DT_CAN_1_IRQ_RX0);
 800798a:	2014      	movs	r0, #20
 800798c:	f7fb fd0a 	bl	80033a4 <arch_irq_enable>

	IRQ_CONNECT(DT_CAN_1_IRQ_TX, DT_CAN_1_IRQ_PRIORITY,
 8007990:	2200      	movs	r2, #0
 8007992:	4611      	mov	r1, r2
 8007994:	2013      	movs	r0, #19
 8007996:	f7fb fd15 	bl	80033c4 <z_arm_irq_priority_set>
		    can_stm32_tx_isr, DEVICE_GET(can_stm32_1), 0);
	irq_enable(DT_CAN_1_IRQ_TX);
 800799a:	2013      	movs	r0, #19
 800799c:	f7fb fd02 	bl	80033a4 <arch_irq_enable>

	IRQ_CONNECT(DT_CAN_1_IRQ_SCE, DT_CAN_1_IRQ_PRIORITY,
 80079a0:	2200      	movs	r2, #0
 80079a2:	4611      	mov	r1, r2
 80079a4:	2016      	movs	r0, #22
 80079a6:	f7fb fd0d 	bl	80033c4 <z_arm_irq_priority_set>
		    can_stm32_state_change_isr, DEVICE_GET(can_stm32_1), 0);
	irq_enable(DT_CAN_1_IRQ_SCE);
 80079aa:	2016      	movs	r0, #22
 80079ac:	f7fb fcfa 	bl	80033a4 <arch_irq_enable>
#endif
	can->IER |= CAN_IER_TMEIE | CAN_IER_ERRIE | CAN_IER_FMPIE0 |
 80079b0:	6963      	ldr	r3, [r4, #20]
 80079b2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80079b6:	f043 0313 	orr.w	r3, r3, #19
 80079ba:	6163      	str	r3, [r4, #20]
		    CAN_IER_FMPIE1 | CAN_IER_BOFIE;
}
 80079bc:	bd10      	pop	{r4, pc}

080079be <can_stm32_shift_arr>:
	if (start > CONFIG_CAN_MAX_FILTER) {
 80079be:	2905      	cmp	r1, #5
{
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	4605      	mov	r5, r0
 80079c4:	4614      	mov	r4, r2
	void **start_ptr = arr + start;
 80079c6:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	if (start > CONFIG_CAN_MAX_FILTER) {
 80079ca:	dc31      	bgt.n	8007a30 <can_stm32_shift_arr+0x72>
	if (count > 0) {
 80079cc:	2a00      	cmp	r2, #0
 80079ce:	dd1c      	ble.n	8007a0a <can_stm32_shift_arr+0x4c>
		if (!can_stm32_check_free(arr, CONFIG_CAN_MAX_FILTER - count,
 80079d0:	f1c2 0305 	rsb	r3, r2, #5
 80079d4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80079d8:	3514      	adds	r5, #20
		if (arr[i] != NULL) {
 80079da:	f853 7b04 	ldr.w	r7, [r3], #4
 80079de:	bb3f      	cbnz	r7, 8007a30 <can_stm32_shift_arr+0x72>
	for (i = start; i <= end; i++) {
 80079e0:	429d      	cmp	r5, r3
 80079e2:	d1fa      	bne.n	80079da <can_stm32_shift_arr+0x1c>
		if ((start + count) >= CONFIG_CAN_MAX_FILTER) {
 80079e4:	4421      	add	r1, r4
 80079e6:	2904      	cmp	r1, #4
 80079e8:	dc0c      	bgt.n	8007a04 <can_stm32_shift_arr+0x46>
		move_dest = start_ptr + count;
 80079ea:	00a4      	lsls	r4, r4, #2
		cnt = (CONFIG_CAN_MAX_FILTER - start - count) * sizeof(void *);
 80079ec:	f1c1 0105 	rsb	r1, r1, #5
		memmove(move_dest, start_ptr, cnt);
 80079f0:	008a      	lsls	r2, r1, #2
 80079f2:	1930      	adds	r0, r6, r4
 80079f4:	4631      	mov	r1, r6
 80079f6:	f000 fa8e 	bl	8007f16 <memmove>
		(void)memset(start_ptr, 0, count * sizeof(void *));
 80079fa:	4622      	mov	r2, r4
 80079fc:	4639      	mov	r1, r7
 80079fe:	4630      	mov	r0, r6
		(void)memset(arr + CONFIG_CAN_MAX_FILTER - count, 0,
 8007a00:	f000 faca 	bl	8007f98 <memset>
	return 0;
 8007a04:	2400      	movs	r4, #0
}
 8007a06:	4620      	mov	r0, r4
 8007a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (count < 0) {
 8007a0a:	d0fc      	beq.n	8007a06 <can_stm32_shift_arr+0x48>
		if (start - count < 0) {
 8007a0c:	42d1      	cmn	r1, r2
 8007a0e:	d40f      	bmi.n	8007a30 <can_stm32_shift_arr+0x72>
		memmove(start_ptr - count, start_ptr, cnt);
 8007a10:	f06f 0703 	mvn.w	r7, #3
 8007a14:	4357      	muls	r7, r2
		cnt = (CONFIG_CAN_MAX_FILTER - start) * sizeof(void *);
 8007a16:	f1c1 0205 	rsb	r2, r1, #5
		memmove(start_ptr - count, start_ptr, cnt);
 8007a1a:	0092      	lsls	r2, r2, #2
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	1bf0      	subs	r0, r6, r7
 8007a20:	f000 fa79 	bl	8007f16 <memmove>
		(void)memset(arr + CONFIG_CAN_MAX_FILTER - count, 0,
 8007a24:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8007a28:	463a      	mov	r2, r7
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	3014      	adds	r0, #20
 8007a2e:	e7e7      	b.n	8007a00 <can_stm32_shift_arr+0x42>
		return CAN_NO_FREE_FILTER;
 8007a30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007a34:	e7e7      	b.n	8007a06 <can_stm32_shift_arr+0x48>

08007a36 <k_mutex_lock.constprop.6>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8007a36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007a3a:	f7fd ba77 	b.w	8004f2c <z_impl_k_mutex_lock>

08007a3e <can_stm32_send>:
{
 8007a3e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a42:	461e      	mov	r6, r3
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 8007a44:	6803      	ldr	r3, [r0, #0]
{
 8007a46:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	CAN_TypeDef *can = cfg->can;
 8007a4a:	689b      	ldr	r3, [r3, #8]
	struct can_stm32_data *data = DEV_DATA(dev);
 8007a4c:	6887      	ldr	r7, [r0, #8]
	CAN_TypeDef *can = cfg->can;
 8007a4e:	f8d3 9000 	ldr.w	r9, [r3]
	if (msg->dlc > CAN_MAX_DLC) {
 8007a52:	794b      	ldrb	r3, [r1, #5]
	u32_t transmit_status_register = can->TSR;
 8007a54:	f8d9 4008 	ldr.w	r4, [r9, #8]
	if (msg->dlc > CAN_MAX_DLC) {
 8007a58:	2b08      	cmp	r3, #8
{
 8007a5a:	460d      	mov	r5, r1
 8007a5c:	4692      	mov	sl, r2
	if (msg->dlc > CAN_MAX_DLC) {
 8007a5e:	d87c      	bhi.n	8007b5a <can_stm32_send+0x11c>
	if (can->ESR & CAN_ESR_BOFF) {
 8007a60:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8007a64:	075b      	lsls	r3, r3, #29
 8007a66:	d47b      	bmi.n	8007b60 <can_stm32_send+0x122>
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8007a68:	4638      	mov	r0, r7
 8007a6a:	f7ff ffe4 	bl	8007a36 <k_mutex_lock.constprop.6>
		if (k_sem_take(&data->tx_int_sem, timeout)) {
 8007a6e:	f107 0b14 	add.w	fp, r7, #20
	while (!(transmit_status_register & CAN_TSR_TME)) {
 8007a72:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8007a76:	d042      	beq.n	8007afe <can_stm32_send+0xc0>
	if (transmit_status_register & CAN_TSR_TME0) {
 8007a78:	0160      	lsls	r0, r4, #5
 8007a7a:	d54e      	bpl.n	8007b1a <can_stm32_send+0xdc>
		mailbox = &can->sTxMailBox[0];
 8007a7c:	f509 73c0 	add.w	r3, r9, #384	; 0x180
		mb = &(data->mb0);
 8007a80:	f107 042c 	add.w	r4, r7, #44	; 0x2c
	mb->callback_arg = callback_arg;
 8007a84:	e9c4 6800 	strd	r6, r8, [r4]
	sem->count = 0U;
 8007a88:	2200      	movs	r2, #0
 8007a8a:	6122      	str	r2, [r4, #16]
	mailbox->TIR &= CAN_TI0R_TXRQ;
 8007a8c:	681a      	ldr	r2, [r3, #0]
	if (msg->id_type == CAN_STANDARD_IDENTIFIER) {
 8007a8e:	7828      	ldrb	r0, [r5, #0]
 8007a90:	f895 c002 	ldrb.w	ip, [r5, #2]
	mailbox->TIR &= CAN_TI0R_TXRQ;
 8007a94:	f002 0201 	and.w	r2, r2, #1
 8007a98:	601a      	str	r2, [r3, #0]
	if (msg->id_type == CAN_STANDARD_IDENTIFIER) {
 8007a9a:	f010 0f01 	tst.w	r0, #1
 8007a9e:	786a      	ldrb	r2, [r5, #1]
		mailbox->TIR |= (msg->std_id << CAN_TI0R_STID_Pos);
 8007aa0:	6819      	ldr	r1, [r3, #0]
	if (msg->id_type == CAN_STANDARD_IDENTIFIER) {
 8007aa2:	d149      	bne.n	8007b38 <can_stm32_send+0xfa>
		mailbox->TIR |= (msg->std_id << CAN_TI0R_STID_Pos);
 8007aa4:	f00c 0c07 	and.w	ip, ip, #7
 8007aa8:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8007aac:	ea41 5242 	orr.w	r2, r1, r2, lsl #21
		mailbox->TIR |= (msg->ext_id << CAN_TI0R_EXID_Pos)
 8007ab0:	601a      	str	r2, [r3, #0]
	if (msg->rtr == CAN_REMOTEREQUEST) {
 8007ab2:	0782      	lsls	r2, r0, #30
		mailbox->TIR |= CAN_TI1R_RTR;
 8007ab4:	bf42      	ittt	mi
 8007ab6:	681a      	ldrmi	r2, [r3, #0]
 8007ab8:	f042 0202 	orrmi.w	r2, r2, #2
 8007abc:	601a      	strmi	r2, [r3, #0]
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 8007abe:	6859      	ldr	r1, [r3, #4]
			((msg->dlc & 0xF) << CAN_TDT1R_DLC_Pos);
 8007ac0:	796a      	ldrb	r2, [r5, #5]
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 8007ac2:	f021 010f 	bic.w	r1, r1, #15
			((msg->dlc & 0xF) << CAN_TDT1R_DLC_Pos);
 8007ac6:	f002 020f 	and.w	r2, r2, #15
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 8007aca:	430a      	orrs	r2, r1
 8007acc:	605a      	str	r2, [r3, #4]
	mailbox->TDLR = msg->data_32[0];
 8007ace:	f8d5 2006 	ldr.w	r2, [r5, #6]
 8007ad2:	609a      	str	r2, [r3, #8]
	mailbox->TDHR = msg->data_32[1];
 8007ad4:	f8d5 200a 	ldr.w	r2, [r5, #10]
 8007ad8:	60da      	str	r2, [r3, #12]
	mailbox->TIR |= CAN_TI0R_TXRQ;
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	f042 0201 	orr.w	r2, r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]
	z_impl_k_mutex_unlock(mutex);
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	f7fd fa94 	bl	8005010 <z_impl_k_mutex_unlock>
	if (callback == NULL) {
 8007ae8:	2e00      	cmp	r6, #0
 8007aea:	d13f      	bne.n	8007b6c <can_stm32_send+0x12e>
	return z_impl_k_sem_take(sem, timeout);
 8007aec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007af0:	f104 0008 	add.w	r0, r4, #8
 8007af4:	f7fd fdc4 	bl	8005680 <z_impl_k_sem_take>
		return mb->error_flags;
 8007af8:	6a20      	ldr	r0, [r4, #32]
}
 8007afa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_impl_k_mutex_unlock(mutex);
 8007afe:	4638      	mov	r0, r7
 8007b00:	f7fd fa86 	bl	8005010 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
 8007b04:	4651      	mov	r1, sl
 8007b06:	4658      	mov	r0, fp
 8007b08:	f7fd fdba 	bl	8005680 <z_impl_k_sem_take>
		if (k_sem_take(&data->tx_int_sem, timeout)) {
 8007b0c:	bb58      	cbnz	r0, 8007b66 <can_stm32_send+0x128>
		k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8007b0e:	4638      	mov	r0, r7
 8007b10:	f7ff ff91 	bl	8007a36 <k_mutex_lock.constprop.6>
		transmit_status_register = can->TSR;
 8007b14:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8007b18:	e7ab      	b.n	8007a72 <can_stm32_send+0x34>
	} else if (transmit_status_register & CAN_TSR_TME1) {
 8007b1a:	0121      	lsls	r1, r4, #4
 8007b1c:	d504      	bpl.n	8007b28 <can_stm32_send+0xea>
		mailbox = &can->sTxMailBox[1];
 8007b1e:	f509 73c8 	add.w	r3, r9, #400	; 0x190
		mb = &data->mb1;
 8007b22:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8007b26:	e7ad      	b.n	8007a84 <can_stm32_send+0x46>
	} else if (transmit_status_register & CAN_TSR_TME2) {
 8007b28:	f014 5480 	ands.w	r4, r4, #268435456	; 0x10000000
 8007b2c:	d020      	beq.n	8007b70 <can_stm32_send+0x132>
		mailbox = &can->sTxMailBox[2];
 8007b2e:	f509 73d0 	add.w	r3, r9, #416	; 0x1a0
		mb = &data->mb2;
 8007b32:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8007b36:	e7a5      	b.n	8007a84 <can_stm32_send+0x46>
		mailbox->TIR |= (msg->ext_id << CAN_TI0R_EXID_Pos)
 8007b38:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8007b3c:	f895 c003 	ldrb.w	ip, [r5, #3]
 8007b40:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8007b44:	f895 c004 	ldrb.w	ip, [r5, #4]
 8007b48:	f00c 0c1f 	and.w	ip, ip, #31
 8007b4c:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 8007b50:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 8007b54:	f042 0204 	orr.w	r2, r2, #4
 8007b58:	e7aa      	b.n	8007ab0 <can_stm32_send+0x72>
		return CAN_TX_EINVAL;
 8007b5a:	f06f 0015 	mvn.w	r0, #21
 8007b5e:	e7cc      	b.n	8007afa <can_stm32_send+0xbc>
		return CAN_TX_BUS_OFF;
 8007b60:	f06f 0003 	mvn.w	r0, #3
 8007b64:	e7c9      	b.n	8007afa <can_stm32_send+0xbc>
			return CAN_TIMEOUT;
 8007b66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b6a:	e7c6      	b.n	8007afa <can_stm32_send+0xbc>
	return 0;
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	e7c4      	b.n	8007afa <can_stm32_send+0xbc>
	mb->callback_arg = callback_arg;
 8007b70:	e9c4 6800 	strd	r6, r8, [r4]
 8007b74:	6124      	str	r4, [r4, #16]
	mailbox->TIR &= CAN_TI0R_TXRQ;
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	deff      	udf	#255	; 0xff

08007b7a <can_stm32_signal_tx_complete>:
	if (mb->tx_callback) {
 8007b7a:	6803      	ldr	r3, [r0, #0]
 8007b7c:	b113      	cbz	r3, 8007b84 <can_stm32_signal_tx_complete+0xa>
		mb->tx_callback(mb->error_flags, mb->callback_arg);
 8007b7e:	6841      	ldr	r1, [r0, #4]
 8007b80:	6a00      	ldr	r0, [r0, #32]
 8007b82:	4718      	bx	r3
	z_impl_k_sem_give(sem);
 8007b84:	3008      	adds	r0, #8
 8007b86:	f7fd bd4f 	b.w	8005628 <z_impl_k_sem_give>

08007b8a <can_stm32_tx_isr_handler>:
{
 8007b8a:	b570      	push	{r4, r5, r6, lr}
	bus_off = can->ESR & CAN_ESR_BOFF;
 8007b8c:	6985      	ldr	r5, [r0, #24]
	if ((can->TSR & CAN_TSR_RQCP0) | bus_off) {
 8007b8e:	6883      	ldr	r3, [r0, #8]
	bus_off = can->ESR & CAN_ESR_BOFF;
 8007b90:	f005 0504 	and.w	r5, r5, #4
	if ((can->TSR & CAN_TSR_RQCP0) | bus_off) {
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	432b      	orrs	r3, r5
{
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	460e      	mov	r6, r1
	if ((can->TSR & CAN_TSR_RQCP0) | bus_off) {
 8007b9e:	d017      	beq.n	8007bd0 <can_stm32_tx_isr_handler+0x46>
				can->TSR & CAN_TSR_TXOK0 ? CAN_TX_OK  :
 8007ba0:	6883      	ldr	r3, [r0, #8]
 8007ba2:	0798      	lsls	r0, r3, #30
 8007ba4:	d459      	bmi.n	8007c5a <can_stm32_tx_isr_handler+0xd0>
				can->TSR & CAN_TSR_TERR0 ? CAN_TX_ERR :
 8007ba6:	68a3      	ldr	r3, [r4, #8]
				can->TSR & CAN_TSR_TXOK0 ? CAN_TX_OK  :
 8007ba8:	0719      	lsls	r1, r3, #28
 8007baa:	d458      	bmi.n	8007c5e <can_stm32_tx_isr_handler+0xd4>
				can->TSR & CAN_TSR_ALST0 ? CAN_TX_ARB_LOST :
 8007bac:	68a3      	ldr	r3, [r4, #8]
				can->TSR & CAN_TSR_TXOK0 ? CAN_TX_OK  :
 8007bae:	075a      	lsls	r2, r3, #29
 8007bb0:	d458      	bmi.n	8007c64 <can_stm32_tx_isr_handler+0xda>
 8007bb2:	2d00      	cmp	r5, #0
 8007bb4:	bf14      	ite	ne
 8007bb6:	f06f 0303 	mvnne.w	r3, #3
 8007bba:	f06f 0304 	mvneq.w	r3, #4
		data->mb0.error_flags =
 8007bbe:	64f3      	str	r3, [r6, #76]	; 0x4c
		can->TSR |= CAN_TSR_RQCP0;
 8007bc0:	68a3      	ldr	r3, [r4, #8]
 8007bc2:	f043 0301 	orr.w	r3, r3, #1
 8007bc6:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(&data->mb0);
 8007bc8:	f106 002c 	add.w	r0, r6, #44	; 0x2c
 8007bcc:	f7ff ffd5 	bl	8007b7a <can_stm32_signal_tx_complete>
	if ((can->TSR & CAN_TSR_RQCP1) | bus_off) {
 8007bd0:	68a3      	ldr	r3, [r4, #8]
 8007bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd6:	432b      	orrs	r3, r5
 8007bd8:	d017      	beq.n	8007c0a <can_stm32_tx_isr_handler+0x80>
				can->TSR & CAN_TSR_TXOK1 ? CAN_TX_OK  :
 8007bda:	68a3      	ldr	r3, [r4, #8]
 8007bdc:	0598      	lsls	r0, r3, #22
 8007bde:	d444      	bmi.n	8007c6a <can_stm32_tx_isr_handler+0xe0>
				can->TSR & CAN_TSR_TERR1 ? CAN_TX_ERR :
 8007be0:	68a3      	ldr	r3, [r4, #8]
				can->TSR & CAN_TSR_TXOK1 ? CAN_TX_OK  :
 8007be2:	0519      	lsls	r1, r3, #20
 8007be4:	d443      	bmi.n	8007c6e <can_stm32_tx_isr_handler+0xe4>
				can->TSR & CAN_TSR_ALST1 ? CAN_TX_ARB_LOST :
 8007be6:	68a3      	ldr	r3, [r4, #8]
				can->TSR & CAN_TSR_TXOK1 ? CAN_TX_OK  :
 8007be8:	055a      	lsls	r2, r3, #21
 8007bea:	d443      	bmi.n	8007c74 <can_stm32_tx_isr_handler+0xea>
 8007bec:	2d00      	cmp	r5, #0
 8007bee:	bf14      	ite	ne
 8007bf0:	f06f 0303 	mvnne.w	r3, #3
 8007bf4:	f06f 0304 	mvneq.w	r3, #4
		data->mb1.error_flags =
 8007bf8:	6733      	str	r3, [r6, #112]	; 0x70
		can->TSR |= CAN_TSR_RQCP1;
 8007bfa:	68a3      	ldr	r3, [r4, #8]
 8007bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c00:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(&data->mb1);
 8007c02:	f106 0050 	add.w	r0, r6, #80	; 0x50
 8007c06:	f7ff ffb8 	bl	8007b7a <can_stm32_signal_tx_complete>
	if ((can->TSR & CAN_TSR_RQCP2) | bus_off) {
 8007c0a:	68a3      	ldr	r3, [r4, #8]
 8007c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c10:	432b      	orrs	r3, r5
 8007c12:	d018      	beq.n	8007c46 <can_stm32_tx_isr_handler+0xbc>
				can->TSR & CAN_TSR_TXOK2 ? CAN_TX_OK  :
 8007c14:	68a3      	ldr	r3, [r4, #8]
 8007c16:	0398      	lsls	r0, r3, #14
 8007c18:	d42f      	bmi.n	8007c7a <can_stm32_tx_isr_handler+0xf0>
				can->TSR & CAN_TSR_TERR2 ? CAN_TX_ERR :
 8007c1a:	68a3      	ldr	r3, [r4, #8]
				can->TSR & CAN_TSR_TXOK2 ? CAN_TX_OK  :
 8007c1c:	0319      	lsls	r1, r3, #12
 8007c1e:	d42e      	bmi.n	8007c7e <can_stm32_tx_isr_handler+0xf4>
				can->TSR & CAN_TSR_ALST2 ? CAN_TX_ARB_LOST :
 8007c20:	68a3      	ldr	r3, [r4, #8]
				can->TSR & CAN_TSR_TXOK2 ? CAN_TX_OK  :
 8007c22:	035a      	lsls	r2, r3, #13
 8007c24:	d42e      	bmi.n	8007c84 <can_stm32_tx_isr_handler+0xfa>
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	bf14      	ite	ne
 8007c2a:	f06f 0303 	mvnne.w	r3, #3
 8007c2e:	f06f 0304 	mvneq.w	r3, #4
		data->mb2.error_flags =
 8007c32:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
		can->TSR |= CAN_TSR_RQCP2;
 8007c36:	68a3      	ldr	r3, [r4, #8]
 8007c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c3c:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(&data->mb2);
 8007c3e:	f106 0074 	add.w	r0, r6, #116	; 0x74
 8007c42:	f7ff ff9a 	bl	8007b7a <can_stm32_signal_tx_complete>
	if (can->TSR & CAN_TSR_TME) {
 8007c46:	68a3      	ldr	r3, [r4, #8]
 8007c48:	f013 5fe0 	tst.w	r3, #469762048	; 0x1c000000
 8007c4c:	d01d      	beq.n	8007c8a <can_stm32_tx_isr_handler+0x100>
 8007c4e:	f106 0014 	add.w	r0, r6, #20
}
 8007c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c56:	f7fd bce7 	b.w	8005628 <z_impl_k_sem_give>
				can->TSR & CAN_TSR_TXOK0 ? CAN_TX_OK  :
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e7af      	b.n	8007bbe <can_stm32_tx_isr_handler+0x34>
 8007c5e:	f06f 0301 	mvn.w	r3, #1
 8007c62:	e7ac      	b.n	8007bbe <can_stm32_tx_isr_handler+0x34>
 8007c64:	f06f 0302 	mvn.w	r3, #2
 8007c68:	e7a9      	b.n	8007bbe <can_stm32_tx_isr_handler+0x34>
				can->TSR & CAN_TSR_TXOK1 ? CAN_TX_OK  :
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e7c4      	b.n	8007bf8 <can_stm32_tx_isr_handler+0x6e>
 8007c6e:	f06f 0301 	mvn.w	r3, #1
 8007c72:	e7c1      	b.n	8007bf8 <can_stm32_tx_isr_handler+0x6e>
 8007c74:	f06f 0302 	mvn.w	r3, #2
 8007c78:	e7be      	b.n	8007bf8 <can_stm32_tx_isr_handler+0x6e>
				can->TSR & CAN_TSR_TXOK2 ? CAN_TX_OK  :
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e7d9      	b.n	8007c32 <can_stm32_tx_isr_handler+0xa8>
 8007c7e:	f06f 0301 	mvn.w	r3, #1
 8007c82:	e7d6      	b.n	8007c32 <can_stm32_tx_isr_handler+0xa8>
 8007c84:	f06f 0302 	mvn.w	r3, #2
 8007c88:	e7d3      	b.n	8007c32 <can_stm32_tx_isr_handler+0xa8>
}
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}

08007c8c <can_stm32_tx_isr>:
	cfg = DEV_CFG(dev);
 8007c8c:	6803      	ldr	r3, [r0, #0]
	can_stm32_tx_isr_handler(can, data);
 8007c8e:	6881      	ldr	r1, [r0, #8]
	can = cfg->can;
 8007c90:	689b      	ldr	r3, [r3, #8]
	can_stm32_tx_isr_handler(can, data);
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	f7ff bf79 	b.w	8007b8a <can_stm32_tx_isr_handler>

08007c98 <can_stm32_state_change_isr>:
	cfg = DEV_CFG(dev);
 8007c98:	6803      	ldr	r3, [r0, #0]
	can = cfg->can;
 8007c9a:	689b      	ldr	r3, [r3, #8]
{
 8007c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	can = cfg->can;
 8007c9e:	681c      	ldr	r4, [r3, #0]
	if (can->MSR & CAN_MSR_ERRI) {
 8007ca0:	6863      	ldr	r3, [r4, #4]
 8007ca2:	075d      	lsls	r5, r3, #29
 8007ca4:	d50e      	bpl.n	8007cc4 <can_stm32_state_change_isr+0x2c>
	data = DEV_DATA(dev);
 8007ca6:	6885      	ldr	r5, [r0, #8]
		can_stm32_tx_isr_handler(can, data);
 8007ca8:	4620      	mov	r0, r4
 8007caa:	4629      	mov	r1, r5
 8007cac:	f7ff ff6d 	bl	8007b8a <can_stm32_tx_isr_handler>
	if (!(can->ESR & CAN_ESR_EPVF) && !(can->ESR & CAN_ESR_BOFF)) {
 8007cb0:	69a3      	ldr	r3, [r4, #24]
 8007cb2:	0799      	lsls	r1, r3, #30
 8007cb4:	d408      	bmi.n	8007cc8 <can_stm32_state_change_isr+0x30>
 8007cb6:	69a3      	ldr	r3, [r4, #24]
 8007cb8:	075a      	lsls	r2, r3, #29
 8007cba:	d405      	bmi.n	8007cc8 <can_stm32_state_change_isr+0x30>
		can->MSR |= CAN_MSR_ERRI;
 8007cbc:	6863      	ldr	r3, [r4, #4]
 8007cbe:	f043 0304 	orr.w	r3, r3, #4
 8007cc2:	6063      	str	r3, [r4, #4]
}
 8007cc4:	b003      	add	sp, #12
 8007cc6:	bd30      	pop	{r4, r5, pc}
	err_cnt.tx_err_cnt = ((can->ESR & CAN_ESR_TEC) >> CAN_ESR_TEC_Pos);
 8007cc8:	69a3      	ldr	r3, [r4, #24]
 8007cca:	0c1b      	lsrs	r3, r3, #16
 8007ccc:	f88d 3004 	strb.w	r3, [sp, #4]
	err_cnt.rx_err_cnt = ((can->ESR & CAN_ESR_REC) >> CAN_ESR_REC_Pos);
 8007cd0:	69a3      	ldr	r3, [r4, #24]
 8007cd2:	0e1b      	lsrs	r3, r3, #24
 8007cd4:	f88d 3005 	strb.w	r3, [sp, #5]
	if (can->ESR & CAN_ESR_BOFF) {
 8007cd8:	69a3      	ldr	r3, [r4, #24]
 8007cda:	075b      	lsls	r3, r3, #29
	} else if (can->ESR & CAN_ESR_EPVF) {
 8007cdc:	bf58      	it	pl
 8007cde:	69a0      	ldrpl	r0, [r4, #24]
	if (data->state_change_isr) {
 8007ce0:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
		state = CAN_BUS_OFF;
 8007ce4:	bf54      	ite	pl
 8007ce6:	f3c0 0040 	ubfxpl	r0, r0, #1, #1
 8007cea:	2002      	movmi	r0, #2
	if (data->state_change_isr) {
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0e5      	beq.n	8007cbc <can_stm32_state_change_isr+0x24>
		data->state_change_isr(state, err_cnt);
 8007cf0:	9901      	ldr	r1, [sp, #4]
 8007cf2:	4798      	blx	r3
 8007cf4:	e7e2      	b.n	8007cbc <can_stm32_state_change_isr+0x24>

08007cf6 <can_stm32_get_filter_type>:
	u32_t scale_masked = (scale_reg >> bank_nr) & 0x01;
 8007cf6:	40c2      	lsrs	r2, r0
	u32_t mode_masked  = (mode_reg  >> bank_nr) & 0x01;
 8007cf8:	40c1      	lsrs	r1, r0
	u32_t scale_masked = (scale_reg >> bank_nr) & 0x01;
 8007cfa:	f002 0201 	and.w	r2, r2, #1
	u32_t mode_masked  = (mode_reg  >> bank_nr) & 0x01;
 8007cfe:	f001 0101 	and.w	r1, r1, #1
}
 8007d02:	ea41 0042 	orr.w	r0, r1, r2, lsl #1
 8007d06:	4770      	bx	lr

08007d08 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
 8007d08:	f7fb bbc0 	b.w	800348c <z_arm_bus_fault>

08007d0c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8007d0c:	f000 bce0 	b.w	80086d0 <z_fatal_error>

08007d10 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8007d10:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8007d12:	6800      	ldr	r0, [r0, #0]
 8007d14:	f000 bcdc 	b.w	80086d0 <z_fatal_error>

08007d18 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8007d18:	b508      	push	{r3, lr}
	handler();
 8007d1a:	f7fb fbc1 	bl	80034a0 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
 8007d1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
 8007d22:	f7fb badd 	b.w	80032e0 <z_arm_exc_exit>

08007d26 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8007d26:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
 8007d28:	2100      	movs	r1, #0
 8007d2a:	a801      	add	r0, sp, #4
 8007d2c:	f7fb fda0 	bl	8003870 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
 8007d30:	b003      	add	sp, #12
 8007d32:	f85d fb04 	ldr.w	pc, [sp], #4

08007d36 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
 8007d36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d3a:	4684      	mov	ip, r0
 8007d3c:	460f      	mov	r7, r1
	register const char *s = nptr;
 8007d3e:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
 8007d40:	462c      	mov	r4, r5
 8007d42:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	d036      	beq.n	8007db8 <strtol+0x82>
 8007d4a:	f1a3 0109 	sub.w	r1, r3, #9
 8007d4e:	2904      	cmp	r1, #4
 8007d50:	d932      	bls.n	8007db8 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
 8007d52:	2b2d      	cmp	r3, #45	; 0x2d
 8007d54:	d132      	bne.n	8007dbc <strtol+0x86>
		neg = 1;
		c = *s++;
 8007d56:	786b      	ldrb	r3, [r5, #1]
 8007d58:	1cac      	adds	r4, r5, #2
		neg = 1;
 8007d5a:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
 8007d5c:	2a00      	cmp	r2, #0
 8007d5e:	d05c      	beq.n	8007e1a <strtol+0xe4>
 8007d60:	2a10      	cmp	r2, #16
 8007d62:	d109      	bne.n	8007d78 <strtol+0x42>
 8007d64:	2b30      	cmp	r3, #48	; 0x30
 8007d66:	d107      	bne.n	8007d78 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
 8007d68:	7823      	ldrb	r3, [r4, #0]
 8007d6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d6e:	2b58      	cmp	r3, #88	; 0x58
 8007d70:	d14e      	bne.n	8007e10 <strtol+0xda>
		c = s[1];
 8007d72:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
 8007d74:	2210      	movs	r2, #16
		s += 2;
 8007d76:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
 8007d78:	2900      	cmp	r1, #0
 8007d7a:	bf14      	ite	ne
 8007d7c:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 8007d80:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
 8007d84:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
 8007d86:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
 8007d8a:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
 8007d8c:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8007d90:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
 8007d94:	2d09      	cmp	r5, #9
 8007d96:	d817      	bhi.n	8007dc8 <strtol+0x92>
			c -= '0';
 8007d98:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	dd24      	ble.n	8007de8 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
 8007d9e:	1c75      	adds	r5, r6, #1
 8007da0:	d007      	beq.n	8007db2 <strtol+0x7c>
 8007da2:	4570      	cmp	r0, lr
 8007da4:	d81d      	bhi.n	8007de2 <strtol+0xac>
 8007da6:	d101      	bne.n	8007dac <strtol+0x76>
 8007da8:	454b      	cmp	r3, r9
 8007daa:	dc1a      	bgt.n	8007de2 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
 8007dac:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
 8007db0:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
 8007db2:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
 8007db6:	e7eb      	b.n	8007d90 <strtol+0x5a>
{
 8007db8:	4625      	mov	r5, r4
 8007dba:	e7c1      	b.n	8007d40 <strtol+0xa>
	} else if (c == '+') {
 8007dbc:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
 8007dbe:	bf04      	itt	eq
 8007dc0:	1cac      	addeq	r4, r5, #2
 8007dc2:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	e7c9      	b.n	8007d5c <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 8007dc8:	f043 0520 	orr.w	r5, r3, #32
 8007dcc:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
 8007dce:	2d19      	cmp	r5, #25
 8007dd0:	d80a      	bhi.n	8007de8 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8007dd2:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
 8007dd6:	2d1a      	cmp	r5, #26
 8007dd8:	bf34      	ite	cc
 8007dda:	2537      	movcc	r5, #55	; 0x37
 8007ddc:	2557      	movcs	r5, #87	; 0x57
 8007dde:	1b5b      	subs	r3, r3, r5
 8007de0:	e7db      	b.n	8007d9a <strtol+0x64>
			any = -1;
 8007de2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007de6:	e7e4      	b.n	8007db2 <strtol+0x7c>
		}
	}

	if (any < 0) {
 8007de8:	1c73      	adds	r3, r6, #1
 8007dea:	d107      	bne.n	8007dfc <strtol+0xc6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 8007dec:	f7fc ff10 	bl	8004c10 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
 8007df0:	2326      	movs	r3, #38	; 0x26
 8007df2:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
 8007df4:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
 8007df6:	b937      	cbnz	r7, 8007e06 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
 8007df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
 8007dfc:	b101      	cbz	r1, 8007e00 <strtol+0xca>
		acc = -acc;
 8007dfe:	4240      	negs	r0, r0
	if (endptr != NULL) {
 8007e00:	2f00      	cmp	r7, #0
 8007e02:	d0f9      	beq.n	8007df8 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
 8007e04:	b10e      	cbz	r6, 8007e0a <strtol+0xd4>
 8007e06:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8007e0a:	f8c7 c000 	str.w	ip, [r7]
	return acc;
 8007e0e:	e7f3      	b.n	8007df8 <strtol+0xc2>
	if (base == 0) {
 8007e10:	2330      	movs	r3, #48	; 0x30
 8007e12:	2a00      	cmp	r2, #0
 8007e14:	d1b0      	bne.n	8007d78 <strtol+0x42>
		base = c == '0' ? 8 : 10;
 8007e16:	2208      	movs	r2, #8
 8007e18:	e7ae      	b.n	8007d78 <strtol+0x42>
	if ((base == 0 || base == 16) &&
 8007e1a:	2b30      	cmp	r3, #48	; 0x30
 8007e1c:	d0a4      	beq.n	8007d68 <strtol+0x32>
		base = c == '0' ? 8 : 10;
 8007e1e:	220a      	movs	r2, #10
 8007e20:	e7aa      	b.n	8007d78 <strtol+0x42>

08007e22 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
 8007e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
 8007e26:	780f      	ldrb	r7, [r1, #0]
{
 8007e28:	4605      	mov	r5, r0
	if (c != 0) {
 8007e2a:	b187      	cbz	r7, 8007e4e <strstr+0x2c>
	c = *find++;
 8007e2c:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 f83f 	bl	8007eb2 <strlen>
 8007e34:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
 8007e36:	462e      	mov	r6, r5
 8007e38:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
 8007e3c:	b163      	cbz	r3, 8007e58 <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
 8007e3e:	429f      	cmp	r7, r3
 8007e40:	d108      	bne.n	8007e54 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
 8007e42:	4642      	mov	r2, r8
 8007e44:	4621      	mov	r1, r4
 8007e46:	4630      	mov	r0, r6
 8007e48:	f000 f846 	bl	8007ed8 <strncmp>
 8007e4c:	b910      	cbnz	r0, 8007e54 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
 8007e4e:	4628      	mov	r0, r5
 8007e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
 8007e54:	4635      	mov	r5, r6
 8007e56:	e7ee      	b.n	8007e36 <strstr+0x14>
					return NULL;
 8007e58:	461d      	mov	r5, r3
 8007e5a:	e7f8      	b.n	8007e4e <strstr+0x2c>

08007e5c <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
 8007e5c:	3901      	subs	r1, #1
 8007e5e:	4603      	mov	r3, r0
 8007e60:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007e64:	b90a      	cbnz	r2, 8007e6a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
 8007e66:	701a      	strb	r2, [r3, #0]

	return dest;
}
 8007e68:	4770      	bx	lr
		*d = *s;
 8007e6a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
 8007e6e:	e7f7      	b.n	8007e60 <strcpy+0x4>

08007e70 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	3901      	subs	r1, #1
 8007e74:	4605      	mov	r5, r0
 8007e76:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
 8007e78:	b142      	cbz	r2, 8007e8c <strncpy+0x1c>
 8007e7a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007e7e:	1e56      	subs	r6, r2, #1
 8007e80:	b92b      	cbnz	r3, 8007e8e <strncpy+0x1e>
 8007e82:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
 8007e84:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
 8007e88:	42a2      	cmp	r2, r4
 8007e8a:	d1fb      	bne.n	8007e84 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
 8007e8c:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
 8007e8e:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
 8007e92:	4632      	mov	r2, r6
 8007e94:	e7ef      	b.n	8007e76 <strncpy+0x6>

08007e96 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
 8007e96:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
 8007e98:	7802      	ldrb	r2, [r0, #0]
 8007e9a:	428a      	cmp	r2, r1
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	f100 0001 	add.w	r0, r0, #1
 8007ea2:	d004      	beq.n	8007eae <strchr+0x18>
 8007ea4:	2a00      	cmp	r2, #0
 8007ea6:	d1f7      	bne.n	8007e98 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
 8007ea8:	2900      	cmp	r1, #0
 8007eaa:	bf18      	it	ne
 8007eac:	2300      	movne	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	4770      	bx	lr

08007eb2 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
 8007eb2:	2300      	movs	r3, #0

	while (*s != '\0') {
 8007eb4:	5cc2      	ldrb	r2, [r0, r3]
 8007eb6:	b90a      	cbnz	r2, 8007ebc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	4770      	bx	lr
		n++;
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	e7f9      	b.n	8007eb4 <strlen+0x2>

08007ec0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8007ec0:	3801      	subs	r0, #1
 8007ec2:	3901      	subs	r1, #1
 8007ec4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8007ec8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d101      	bne.n	8007ed4 <strcmp+0x14>
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1f7      	bne.n	8007ec4 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8007ed4:	1a98      	subs	r0, r3, r2
 8007ed6:	4770      	bx	lr

08007ed8 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
 8007ed8:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8007eda:	2400      	movs	r4, #0
 8007edc:	42a2      	cmp	r2, r4
 8007ede:	d008      	beq.n	8007ef2 <strncmp+0x1a>
 8007ee0:	5d03      	ldrb	r3, [r0, r4]
 8007ee2:	5d0d      	ldrb	r5, [r1, r4]
 8007ee4:	42ab      	cmp	r3, r5
 8007ee6:	d102      	bne.n	8007eee <strncmp+0x16>
 8007ee8:	3401      	adds	r4, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1f6      	bne.n	8007edc <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
 8007eee:	1b58      	subs	r0, r3, r5
 8007ef0:	e000      	b.n	8007ef4 <strncmp+0x1c>
 8007ef2:	2000      	movs	r0, #0
}
 8007ef4:	bd30      	pop	{r4, r5, pc}

08007ef6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
 8007ef6:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
 8007ef8:	b15a      	cbz	r2, 8007f12 <memcmp+0x1c>
 8007efa:	3901      	subs	r1, #1
 8007efc:	1884      	adds	r4, r0, r2
 8007efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f02:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
 8007f06:	42a0      	cmp	r0, r4
 8007f08:	d001      	beq.n	8007f0e <memcmp+0x18>
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d0f7      	beq.n	8007efe <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
 8007f0e:	1ad0      	subs	r0, r2, r3
}
 8007f10:	bd10      	pop	{r4, pc}
		return 0;
 8007f12:	4610      	mov	r0, r2
 8007f14:	e7fc      	b.n	8007f10 <memcmp+0x1a>

08007f16 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
 8007f16:	1a43      	subs	r3, r0, r1
 8007f18:	4293      	cmp	r3, r2
{
 8007f1a:	b510      	push	{r4, lr}
 8007f1c:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
 8007f20:	d308      	bcc.n	8007f34 <memmove+0x1e>
 8007f22:	3901      	subs	r1, #1
	char *dest = d;
 8007f24:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d00b      	beq.n	8007f42 <memmove+0x2c>
			*dest = *src;
 8007f2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007f2e:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
 8007f32:	e7f8      	b.n	8007f26 <memmove+0x10>
 8007f34:	440a      	add	r2, r1
			dest[n] = src[n];
 8007f36:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 8007f3a:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
 8007f3e:	428a      	cmp	r2, r1
 8007f40:	d1f9      	bne.n	8007f36 <memmove+0x20>
		}
	}

	return d;
}
 8007f42:	bd10      	pop	{r4, pc}

08007f44 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 8007f44:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 8007f46:	ea81 0400 	eor.w	r4, r1, r0
 8007f4a:	07a5      	lsls	r5, r4, #30
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	d00b      	beq.n	8007f68 <memcpy+0x24>
 8007f50:	3b01      	subs	r3, #1
 8007f52:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 8007f54:	4291      	cmp	r1, r2
 8007f56:	d11a      	bne.n	8007f8e <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8007f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
 8007f5a:	2a00      	cmp	r2, #0
 8007f5c:	d0fc      	beq.n	8007f58 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
 8007f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f62:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
 8007f66:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
 8007f68:	079c      	lsls	r4, r3, #30
 8007f6a:	d1f6      	bne.n	8007f5a <memcpy+0x16>
 8007f6c:	0895      	lsrs	r5, r2, #2
 8007f6e:	00ac      	lsls	r4, r5, #2
 8007f70:	1f1e      	subs	r6, r3, #4
 8007f72:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
 8007f74:	42b9      	cmp	r1, r7
 8007f76:	d105      	bne.n	8007f84 <memcpy+0x40>
 8007f78:	f06f 0603 	mvn.w	r6, #3
 8007f7c:	fb06 2205 	mla	r2, r6, r5, r2
 8007f80:	4423      	add	r3, r4
 8007f82:	e7e5      	b.n	8007f50 <memcpy+0xc>
			*(d_word++) = *(s_word++);
 8007f84:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f88:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
 8007f8c:	e7f2      	b.n	8007f74 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
 8007f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f92:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8007f96:	e7dd      	b.n	8007f54 <memcpy+0x10>

08007f98 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
 8007f98:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8007f9a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 8007f9c:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 8007f9e:	079c      	lsls	r4, r3, #30
 8007fa0:	d110      	bne.n	8007fc4 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
 8007fa2:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 8007fa6:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 8007faa:	0894      	lsrs	r4, r2, #2
 8007fac:	eb03 0684 	add.w	r6, r3, r4, lsl #2
 8007fb0:	42b3      	cmp	r3, r6
 8007fb2:	d10d      	bne.n	8007fd0 <memset+0x38>
 8007fb4:	f06f 0503 	mvn.w	r5, #3
 8007fb8:	fb05 2404 	mla	r4, r5, r4, r2
 8007fbc:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 8007fbe:	42a3      	cmp	r3, r4
 8007fc0:	d109      	bne.n	8007fd6 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 8007fc4:	2a00      	cmp	r2, #0
 8007fc6:	d0fc      	beq.n	8007fc2 <memset+0x2a>
		*(d_byte++) = c_byte;
 8007fc8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8007fcc:	3a01      	subs	r2, #1
 8007fce:	e7e6      	b.n	8007f9e <memset+0x6>
		*(d_word++) = c_word;
 8007fd0:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
 8007fd4:	e7ec      	b.n	8007fb0 <memset+0x18>
		*(d_byte++) = c_byte;
 8007fd6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8007fda:	e7f0      	b.n	8007fbe <memset+0x26>

08007fdc <_to_x>:
{
 8007fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fde:	4603      	mov	r3, r0
		unsigned int d = n % base;
 8007fe0:	fbb1 f7f2 	udiv	r7, r1, r2
 8007fe4:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 8007fe8:	2d09      	cmp	r5, #9
 8007fea:	bf8c      	ite	hi
 8007fec:	2627      	movhi	r6, #39	; 0x27
 8007fee:	2600      	movls	r6, #0
 8007ff0:	461c      	mov	r4, r3
 8007ff2:	3530      	adds	r5, #48	; 0x30
 8007ff4:	4435      	add	r5, r6
	} while (n);
 8007ff6:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 8007ff8:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
 8007ffc:	d206      	bcs.n	800800c <_to_x+0x30>
	*buf = 0;
 8007ffe:	2200      	movs	r2, #0
 8008000:	7022      	strb	r2, [r4, #0]
	len = buf - start;
 8008002:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
 8008004:	4283      	cmp	r3, r0
 8008006:	d804      	bhi.n	8008012 <_to_x+0x36>
}
 8008008:	4620      	mov	r0, r4
 800800a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
 800800c:	4639      	mov	r1, r7
 800800e:	4623      	mov	r3, r4
 8008010:	e7e6      	b.n	8007fe0 <_to_x+0x4>
		char tmp = *buf;
 8008012:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
 8008014:	7801      	ldrb	r1, [r0, #0]
 8008016:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
 800801a:	f800 2b01 	strb.w	r2, [r0], #1
 800801e:	e7f1      	b.n	8008004 <_to_x+0x28>

08008020 <_rlrshift>:
{
 8008020:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
 8008022:	e9d0 6500 	ldrd	r6, r5, [r0]
 8008026:	0872      	lsrs	r2, r6, #1
 8008028:	f006 0301 	and.w	r3, r6, #1
 800802c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8008030:	189b      	adds	r3, r3, r2
 8008032:	f04f 0100 	mov.w	r1, #0
 8008036:	ea4f 0455 	mov.w	r4, r5, lsr #1
 800803a:	eb44 0101 	adc.w	r1, r4, r1
 800803e:	e9c0 3100 	strd	r3, r1, [r0]
}
 8008042:	bd70      	pop	{r4, r5, r6, pc}

08008044 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
 8008044:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8008048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2U;
 800804c:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
 800804e:	f04f 0705 	mov.w	r7, #5
 8008052:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
 8008056:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
 800805a:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
 800805e:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
 8008062:	fb07 f10e 	mul.w	r1, r7, lr
 8008066:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
 800806a:	08f2      	lsrs	r2, r6, #3
 800806c:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
 8008070:	fbb2 f1f7 	udiv	r1, r2, r7
 8008074:	00ca      	lsls	r2, r1, #3
		quot += q;
 8008076:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
 800807a:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
 800807e:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
 8008082:	fba2 2307 	umull	r2, r3, r2, r7
 8008086:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
 8008088:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
 800808c:	eb18 0403 	adds.w	r4, r8, r3
 8008090:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
 8008094:	e9c0 4500 	strd	r4, r5, [r0]
}
 8008098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800809c <_get_digit>:
	if (*digit_count > 0) {
 800809c:	680b      	ldr	r3, [r1, #0]
 800809e:	2b00      	cmp	r3, #0
{
 80080a0:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
 80080a2:	dd10      	ble.n	80080c6 <_get_digit+0x2a>
		*digit_count -= 1;
 80080a4:	3b01      	subs	r3, #1
		*fr = *fr * 10U;
 80080a6:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
 80080a8:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
 80080aa:	6844      	ldr	r4, [r0, #4]
 80080ac:	210a      	movs	r1, #10
 80080ae:	fba2 5601 	umull	r5, r6, r2, r1
 80080b2:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
 80080b6:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
 80080ba:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
 80080be:	0f31      	lsrs	r1, r6, #28
 80080c0:	3130      	adds	r1, #48	; 0x30
}
 80080c2:	4608      	mov	r0, r1
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
 80080c6:	2130      	movs	r1, #48	; 0x30
 80080c8:	e7fb      	b.n	80080c2 <_get_digit+0x26>

080080ca <gpio_stm32_isr>:
	struct gpio_stm32_data *data = dev->driver_data;
 80080ca:	688a      	ldr	r2, [r1, #8]
	if ((BIT(line) & data->cb_pins) != 0) {
 80080cc:	6813      	ldr	r3, [r2, #0]
 80080ce:	40c3      	lsrs	r3, r0
 80080d0:	07db      	lsls	r3, r3, #31
{
 80080d2:	b570      	push	{r4, r5, r6, lr}
 80080d4:	460e      	mov	r6, r1
	if ((BIT(line) & data->cb_pins) != 0) {
 80080d6:	d50f      	bpl.n	80080f8 <gpio_stm32_isr+0x2e>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80080d8:	6851      	ldr	r1, [r2, #4]
 80080da:	b169      	cbz	r1, 80080f8 <gpio_stm32_isr+0x2e>
		gpio_fire_callbacks(&data->cb, dev, BIT(line));
 80080dc:	2501      	movs	r5, #1
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 80080de:	680c      	ldr	r4, [r1, #0]
 80080e0:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 80080e2:	688b      	ldr	r3, [r1, #8]
 80080e4:	421d      	tst	r5, r3
 80080e6:	d003      	beq.n	80080f0 <gpio_stm32_isr+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
 80080e8:	684b      	ldr	r3, [r1, #4]
 80080ea:	462a      	mov	r2, r5
 80080ec:	4630      	mov	r0, r6
 80080ee:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80080f0:	b114      	cbz	r4, 80080f8 <gpio_stm32_isr+0x2e>
 80080f2:	4621      	mov	r1, r4
 80080f4:	6824      	ldr	r4, [r4, #0]
 80080f6:	e7f4      	b.n	80080e2 <gpio_stm32_isr+0x18>
}
 80080f8:	bd70      	pop	{r4, r5, r6, pc}

080080fa <gpio_stm32_write>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 80080fa:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80080fc:	6880      	ldr	r0, [r0, #8]
{
 80080fe:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008100:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8008102:	b941      	cbnz	r1, 8008116 <gpio_stm32_write+0x1c>
	pinval = 1 << pin;
 8008104:	2401      	movs	r4, #1
 8008106:	fa04 f202 	lsl.w	r2, r4, r2
	if (value != 0U) {
 800810a:	b113      	cbz	r3, 8008112 <gpio_stm32_write+0x18>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800810c:	6182      	str	r2, [r0, #24]
}
 800810e:	4608      	mov	r0, r1
 8008110:	bd10      	pop	{r4, pc}
 8008112:	0412      	lsls	r2, r2, #16
 8008114:	e7fa      	b.n	800810c <gpio_stm32_write+0x12>
		return -ENOTSUP;
 8008116:	f06f 0122 	mvn.w	r1, #34	; 0x22
 800811a:	e7f8      	b.n	800810e <gpio_stm32_write+0x14>

0800811c <gpio_stm32_read>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 800811c:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800811e:	6880      	ldr	r0, [r0, #8]
{
 8008120:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008122:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8008124:	b931      	cbnz	r1, 8008134 <gpio_stm32_read+0x18>
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8008126:	6904      	ldr	r4, [r0, #16]
	*value = (LL_GPIO_ReadInputPort(gpio) >> pin) & 0x1;
 8008128:	40d4      	lsrs	r4, r2
 800812a:	f004 0401 	and.w	r4, r4, #1
 800812e:	601c      	str	r4, [r3, #0]
}
 8008130:	4608      	mov	r0, r1
 8008132:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8008134:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8008138:	e7fa      	b.n	8008130 <gpio_stm32_read+0x14>

0800813a <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 800813a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
 800813c:	6858      	ldr	r0, [r3, #4]
{
 800813e:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8008140:	b158      	cbz	r0, 800815a <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008142:	2400      	movs	r4, #0
 8008144:	4281      	cmp	r1, r0
 8008146:	d113      	bne.n	8008170 <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 8008148:	6808      	ldr	r0, [r1, #0]
 800814a:	b95c      	cbnz	r4, 8008164 <gpio_stm32_manage_callback+0x2a>
 800814c:	689c      	ldr	r4, [r3, #8]
	list->head = node;
 800814e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8008150:	42a1      	cmp	r1, r4
 8008152:	d100      	bne.n	8008156 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8008154:	6098      	str	r0, [r3, #8]
	parent->next = child;
 8008156:	2000      	movs	r0, #0
 8008158:	6008      	str	r0, [r1, #0]
	if (set) {
 800815a:	b972      	cbnz	r2, 800817a <gpio_stm32_manage_callback+0x40>
	return 0;
 800815c:	2000      	movs	r0, #0
}
 800815e:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008160:	4628      	mov	r0, r5
 8008162:	e7ef      	b.n	8008144 <gpio_stm32_manage_callback+0xa>
	parent->next = child;
 8008164:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8008166:	6898      	ldr	r0, [r3, #8]
 8008168:	4281      	cmp	r1, r0
	list->tail = node;
 800816a:	bf08      	it	eq
 800816c:	609c      	streq	r4, [r3, #8]
 800816e:	e7f2      	b.n	8008156 <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8008170:	6805      	ldr	r5, [r0, #0]
	return node->next;
 8008172:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008174:	2d00      	cmp	r5, #0
 8008176:	d1f3      	bne.n	8008160 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8008178:	b13a      	cbz	r2, 800818a <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 800817a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 800817c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 800817e:	6898      	ldr	r0, [r3, #8]
	list->head = node;
 8008180:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8008182:	2800      	cmp	r0, #0
 8008184:	d1ea      	bne.n	800815c <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8008186:	6099      	str	r1, [r3, #8]
 8008188:	e7e9      	b.n	800815e <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 800818a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 800818e:	e7e6      	b.n	800815e <gpio_stm32_manage_callback+0x24>

08008190 <gpio_stm32_enable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8008190:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8008192:	b939      	cbnz	r1, 80081a4 <gpio_stm32_enable_callback+0x14>
	data->cb_pins |= BIT(pin);
 8008194:	2301      	movs	r3, #1
 8008196:	fa03 f202 	lsl.w	r2, r3, r2
 800819a:	6803      	ldr	r3, [r0, #0]
 800819c:	4313      	orrs	r3, r2
 800819e:	6003      	str	r3, [r0, #0]
}
 80081a0:	4608      	mov	r0, r1
 80081a2:	4770      	bx	lr
		return -ENOTSUP;
 80081a4:	f06f 0122 	mvn.w	r1, #34	; 0x22
 80081a8:	e7fa      	b.n	80081a0 <gpio_stm32_enable_callback+0x10>

080081aa <gpio_stm32_disable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 80081aa:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 80081ac:	b941      	cbnz	r1, 80081c0 <gpio_stm32_disable_callback+0x16>
	data->cb_pins &= ~BIT(pin);
 80081ae:	2301      	movs	r3, #1
 80081b0:	fa03 f202 	lsl.w	r2, r3, r2
 80081b4:	6803      	ldr	r3, [r0, #0]
 80081b6:	ea23 0302 	bic.w	r3, r3, r2
 80081ba:	6003      	str	r3, [r0, #0]
}
 80081bc:	4608      	mov	r0, r1
 80081be:	4770      	bx	lr
		return -ENOTSUP;
 80081c0:	f06f 0122 	mvn.w	r1, #34	; 0x22
 80081c4:	e7fa      	b.n	80081bc <gpio_stm32_disable_callback+0x12>

080081c6 <gpio_stm32_flags_to_conf>:
	int direction = flags & GPIO_DIR_MASK;
 80081c6:	f000 0301 	and.w	r3, r0, #1
	if (pincfg == NULL) {
 80081ca:	b1b1      	cbz	r1, 80081fa <gpio_stm32_flags_to_conf+0x34>
	if (direction == GPIO_DIR_OUT) {
 80081cc:	b123      	cbz	r3, 80081d8 <gpio_stm32_flags_to_conf+0x12>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80081ce:	2310      	movs	r3, #16
 80081d0:	600b      	str	r3, [r1, #0]
	return 0;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	4770      	bx	lr
	int pud = flags & GPIO_PUD_MASK;
 80081d8:	f400 7040 	and.w	r0, r0, #768	; 0x300
		if (pud == GPIO_PUD_PULL_UP) {
 80081dc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80081e0:	d103      	bne.n	80081ea <gpio_stm32_flags_to_conf+0x24>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80081e2:	f44f 7200 	mov.w	r2, #512	; 0x200
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80081e6:	600a      	str	r2, [r1, #0]
 80081e8:	e7f4      	b.n	80081d4 <gpio_stm32_flags_to_conf+0xe>
		} else if (pud == GPIO_PUD_PULL_DOWN) {
 80081ea:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80081ee:	d001      	beq.n	80081f4 <gpio_stm32_flags_to_conf+0x2e>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 80081f0:	600b      	str	r3, [r1, #0]
 80081f2:	e7ef      	b.n	80081d4 <gpio_stm32_flags_to_conf+0xe>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80081f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081f8:	e7f5      	b.n	80081e6 <gpio_stm32_flags_to_conf+0x20>
		return -EINVAL;
 80081fa:	f06f 0315 	mvn.w	r3, #21
 80081fe:	e7e9      	b.n	80081d4 <gpio_stm32_flags_to_conf+0xe>

08008200 <gpio_stm32_configure>:
{
 8008200:	b5f0      	push	{r4, r5, r6, r7, lr}
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8008202:	f002 0530 	and.w	r5, r2, #48	; 0x30
	pinval = 1 << pin;
 8008206:	2401      	movs	r4, #1
 8008208:	408c      	lsls	r4, r1
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800820a:	092e      	lsrs	r6, r5, #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800820c:	f8d0 c000 	ldr.w	ip, [r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008210:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8008214:	fab7 f787 	clz	r7, r7
 8008218:	f04f 0e03 	mov.w	lr, #3
 800821c:	007f      	lsls	r7, r7, #1
 800821e:	fa0e f707 	lsl.w	r7, lr, r7
 8008222:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008226:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 800822a:	fab7 f787 	clz	r7, r7
 800822e:	007f      	lsls	r7, r7, #1
 8008230:	40be      	lsls	r6, r7
 8008232:	ea46 060c 	orr.w	r6, r6, ip
	if (STM32_MODER_ALT_MODE == mode) {
 8008236:	2d20      	cmp	r5, #32
 8008238:	6006      	str	r6, [r0, #0]
 800823a:	d116      	bne.n	800826a <gpio_stm32_configure+0x6a>
		if (pin < 8) {
 800823c:	2907      	cmp	r1, #7
 800823e:	dc49      	bgt.n	80082d4 <gpio_stm32_configure+0xd4>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008240:	6a07      	ldr	r7, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008242:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8008246:	b10e      	cbz	r6, 800824c <gpio_stm32_configure+0x4c>
  return __builtin_clz(value);
 8008248:	fab6 f586 	clz	r5, r6
 800824c:	260f      	movs	r6, #15
 800824e:	00ad      	lsls	r5, r5, #2
 8008250:	fa06 f505 	lsl.w	r5, r6, r5
 8008254:	ea27 0605 	bic.w	r6, r7, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008258:	fa94 f5a4 	rbit	r5, r4
  return __builtin_clz(value);
 800825c:	fab5 f585 	clz	r5, r5
 8008260:	00ad      	lsls	r5, r5, #2
 8008262:	fa03 f505 	lsl.w	r5, r3, r5
 8008266:	4335      	orrs	r5, r6
 8008268:	6205      	str	r5, [r0, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800826a:	6845      	ldr	r5, [r0, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800826c:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8008270:	ea25 0504 	bic.w	r5, r5, r4
 8008274:	fa03 f101 	lsl.w	r1, r3, r1
 8008278:	4329      	orrs	r1, r5
 800827a:	6041      	str	r1, [r0, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800827c:	f3c2 13c1 	ubfx	r3, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8008280:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008282:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 8008286:	fab1 f181 	clz	r1, r1
 800828a:	2603      	movs	r6, #3
 800828c:	0049      	lsls	r1, r1, #1
 800828e:	fa06 f101 	lsl.w	r1, r6, r1
 8008292:	ea25 0501 	bic.w	r5, r5, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008296:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 800829a:	fab1 f181 	clz	r1, r1
 800829e:	0049      	lsls	r1, r1, #1
 80082a0:	408b      	lsls	r3, r1
 80082a2:	432b      	orrs	r3, r5
 80082a4:	6083      	str	r3, [r0, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 80082a6:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80082aa:	68c1      	ldr	r1, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ac:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 80082b0:	fab3 f383 	clz	r3, r3
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	fa06 f303 	lsl.w	r3, r6, r3
 80082ba:	ea21 0303 	bic.w	r3, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082be:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 80082c2:	fab4 f484 	clz	r4, r4
 80082c6:	0064      	lsls	r4, r4, #1
 80082c8:	fa02 f404 	lsl.w	r4, r2, r4
 80082cc:	431c      	orrs	r4, r3
 80082ce:	60c4      	str	r4, [r0, #12]
}
 80082d0:	2000      	movs	r0, #0
 80082d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80082d4:	6a47      	ldr	r7, [r0, #36]	; 0x24
 80082d6:	0a26      	lsrs	r6, r4, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082d8:	fa96 fca6 	rbit	ip, r6
  if (value == 0U)
 80082dc:	f1bc 0f00 	cmp.w	ip, #0
 80082e0:	d001      	beq.n	80082e6 <gpio_stm32_configure+0xe6>
  return __builtin_clz(value);
 80082e2:	fabc f58c 	clz	r5, ip
 80082e6:	f04f 0c0f 	mov.w	ip, #15
 80082ea:	00ad      	lsls	r5, r5, #2
 80082ec:	fa0c f505 	lsl.w	r5, ip, r5
 80082f0:	ea27 0505 	bic.w	r5, r7, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082f4:	fa96 f6a6 	rbit	r6, r6
  return __builtin_clz(value);
 80082f8:	fab6 f686 	clz	r6, r6
 80082fc:	00b6      	lsls	r6, r6, #2
 80082fe:	40b3      	lsls	r3, r6
 8008300:	432b      	orrs	r3, r5
 8008302:	6243      	str	r3, [r0, #36]	; 0x24
 8008304:	e7b1      	b.n	800826a <gpio_stm32_configure+0x6a>

08008306 <pwm_stm32_get_cycles_per_sec>:
	const struct pwm_stm32_config *cfg = DEV_CFG(dev);
 8008306:	6803      	ldr	r3, [r0, #0]
{
 8008308:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct pwm_stm32_config *cfg = DEV_CFG(dev);
 800830a:	6899      	ldr	r1, [r3, #8]
	struct pwm_stm32_data *data = DEV_DATA(dev);
 800830c:	6885      	ldr	r5, [r0, #8]
	if (cycles == NULL) {
 800830e:	4614      	mov	r4, r2
 8008310:	b192      	cbz	r2, 8008338 <pwm_stm32_get_cycles_per_sec+0x32>
	if (clock_control_get_rate(data->clock,
 8008312:	6c68      	ldr	r0, [r5, #68]	; 0x44
	return api->get_rate(dev, sys, rate);
 8008314:	6843      	ldr	r3, [r0, #4]
 8008316:	aa01      	add	r2, sp, #4
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	3104      	adds	r1, #4
 800831c:	4798      	blx	r3
 800831e:	2800      	cmp	r0, #0
 8008320:	db0d      	blt.n	800833e <pwm_stm32_get_cycles_per_sec+0x38>
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 8008322:	6c2a      	ldr	r2, [r5, #64]	; 0x40
		tim_clk = bus_clk * 2U;
 8008324:	9b01      	ldr	r3, [sp, #4]
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 8008326:	2000      	movs	r0, #0
		tim_clk = bus_clk * 2U;
 8008328:	005b      	lsls	r3, r3, #1
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 800832a:	3201      	adds	r2, #1
 800832c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008330:	e9c4 3000 	strd	r3, r0, [r4]
}
 8008334:	b003      	add	sp, #12
 8008336:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
 8008338:	f06f 0015 	mvn.w	r0, #21
 800833c:	e7fa      	b.n	8008334 <pwm_stm32_get_cycles_per_sec+0x2e>
		return -EIO;
 800833e:	f06f 0004 	mvn.w	r0, #4
 8008342:	e7f7      	b.n	8008334 <pwm_stm32_get_cycles_per_sec+0x2e>

08008344 <LL_USART_ClearFlag_FE>:
{
 8008344:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8008346:	6803      	ldr	r3, [r0, #0]
 8008348:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800834a:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 800834c:	6843      	ldr	r3, [r0, #4]
 800834e:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8008350:	9b01      	ldr	r3, [sp, #4]
}
 8008352:	b002      	add	sp, #8
 8008354:	4770      	bx	lr

08008356 <uart_stm32_poll_in>:
{
 8008356:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008358:	6803      	ldr	r3, [r0, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800835e:	6813      	ldr	r3, [r2, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8008360:	0718      	lsls	r0, r3, #28
 8008362:	d502      	bpl.n	800836a <uart_stm32_poll_in+0x14>
		LL_USART_ClearFlag_ORE(UartInstance);
 8008364:	4610      	mov	r0, r2
 8008366:	f7ff ffed 	bl	8008344 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800836a:	6813      	ldr	r3, [r2, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 800836c:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800836e:	bf43      	ittte	mi
 8008370:	6853      	ldrmi	r3, [r2, #4]
 8008372:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8008374:	2000      	movmi	r0, #0
		return -1;
 8008376:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 800837a:	bd08      	pop	{r3, pc}

0800837c <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800837c:	6803      	ldr	r3, [r0, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8008382:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 8008384:	0612      	lsls	r2, r2, #24
 8008386:	d5fc      	bpl.n	8008382 <uart_stm32_poll_out+0x6>
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8008388:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800838c:	601a      	str	r2, [r3, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800838e:	6059      	str	r1, [r3, #4]
}
 8008390:	4770      	bx	lr

08008392 <uart_stm32_err_check>:
{
 8008392:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008394:	6803      	ldr	r3, [r0, #0]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	6819      	ldr	r1, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800839a:	680a      	ldr	r2, [r1, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 800839c:	680b      	ldr	r3, [r1, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 800839e:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80083a0:	680b      	ldr	r3, [r1, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 80083a2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 80083a6:	bf48      	it	mi
 80083a8:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 80083ac:	0798      	lsls	r0, r3, #30
		err |= UART_ERROR_FRAMING;
 80083ae:	bf48      	it	mi
 80083b0:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 80083b4:	07d3      	lsls	r3, r2, #31
 80083b6:	d502      	bpl.n	80083be <uart_stm32_err_check+0x2c>
		LL_USART_ClearFlag_ORE(UartInstance);
 80083b8:	4608      	mov	r0, r1
 80083ba:	f7ff ffc3 	bl	8008344 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 80083be:	0790      	lsls	r0, r2, #30
 80083c0:	d502      	bpl.n	80083c8 <uart_stm32_err_check+0x36>
		LL_USART_ClearFlag_PE(UartInstance);
 80083c2:	4608      	mov	r0, r1
 80083c4:	f7ff ffbe 	bl	8008344 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 80083c8:	0753      	lsls	r3, r2, #29
 80083ca:	d502      	bpl.n	80083d2 <uart_stm32_err_check+0x40>
		LL_USART_ClearFlag_FE(UartInstance);
 80083cc:	4608      	mov	r0, r1
 80083ce:	f7ff ffb9 	bl	8008344 <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 80083d2:	4608      	mov	r0, r1
 80083d4:	f7ff ffb6 	bl	8008344 <LL_USART_ClearFlag_FE>
}
 80083d8:	4610      	mov	r0, r2
 80083da:	bd08      	pop	{r3, pc}

080083dc <uart_stm32_fifo_fill>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80083dc:	6803      	ldr	r3, [r0, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
{
 80083e0:	b530      	push	{r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80083e2:	681c      	ldr	r4, [r3, #0]
	while ((size - num_tx > 0) &&
 80083e4:	2300      	movs	r3, #0
 80083e6:	b2d8      	uxtb	r0, r3
 80083e8:	1a15      	subs	r5, r2, r0
 80083ea:	2d00      	cmp	r5, #0
 80083ec:	dd04      	ble.n	80083f8 <uart_stm32_fifo_fill+0x1c>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80083ee:	6825      	ldr	r5, [r4, #0]
 80083f0:	062d      	lsls	r5, r5, #24
 80083f2:	f103 0301 	add.w	r3, r3, #1
 80083f6:	d400      	bmi.n	80083fa <uart_stm32_fifo_fill+0x1e>
}
 80083f8:	bd30      	pop	{r4, r5, pc}
  USARTx->DR = Value;
 80083fa:	5c08      	ldrb	r0, [r1, r0]
 80083fc:	6060      	str	r0, [r4, #4]
 80083fe:	e7f2      	b.n	80083e6 <uart_stm32_fifo_fill+0xa>

08008400 <uart_stm32_fifo_read>:
{
 8008400:	b538      	push	{r3, r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008402:	6803      	ldr	r3, [r0, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	681c      	ldr	r4, [r3, #0]
	while ((size - num_rx > 0) &&
 8008408:	2500      	movs	r5, #0
 800840a:	b2e8      	uxtb	r0, r5
 800840c:	1a13      	subs	r3, r2, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	dd02      	ble.n	8008418 <uart_stm32_fifo_read+0x18>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	069b      	lsls	r3, r3, #26
 8008416:	d400      	bmi.n	800841a <uart_stm32_fifo_read+0x1a>
}
 8008418:	bd38      	pop	{r3, r4, r5, pc}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800841a:	6863      	ldr	r3, [r4, #4]
 800841c:	540b      	strb	r3, [r1, r0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800841e:	6823      	ldr	r3, [r4, #0]
		if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8008420:	0718      	lsls	r0, r3, #28
 8008422:	d502      	bpl.n	800842a <uart_stm32_fifo_read+0x2a>
			LL_USART_ClearFlag_ORE(UartInstance);
 8008424:	4620      	mov	r0, r4
 8008426:	f7ff ff8d 	bl	8008344 <LL_USART_ClearFlag_FE>
 800842a:	3501      	adds	r5, #1
 800842c:	e7ed      	b.n	800840a <uart_stm32_fifo_read+0xa>

0800842e <uart_stm32_irq_tx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800842e:	6803      	ldr	r3, [r0, #0]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8008434:	68d3      	ldr	r3, [r2, #12]
 8008436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800843a:	60d3      	str	r3, [r2, #12]
}
 800843c:	4770      	bx	lr

0800843e <uart_stm32_irq_tx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800843e:	6803      	ldr	r3, [r0, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8008444:	68d3      	ldr	r3, [r2, #12]
 8008446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800844a:	60d3      	str	r3, [r2, #12]
}
 800844c:	4770      	bx	lr

0800844e <uart_stm32_irq_tx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800844e:	6803      	ldr	r3, [r0, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8008454:	6818      	ldr	r0, [r3, #0]
}
 8008456:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 800845a:	4770      	bx	lr

0800845c <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800845c:	6803      	ldr	r3, [r0, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8008462:	6818      	ldr	r0, [r3, #0]
}
 8008464:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8008468:	4770      	bx	lr

0800846a <uart_stm32_irq_rx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800846a:	6803      	ldr	r3, [r0, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8008470:	68d3      	ldr	r3, [r2, #12]
 8008472:	f043 0320 	orr.w	r3, r3, #32
 8008476:	60d3      	str	r3, [r2, #12]
}
 8008478:	4770      	bx	lr

0800847a <uart_stm32_irq_rx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800847a:	6803      	ldr	r3, [r0, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8008480:	68d3      	ldr	r3, [r2, #12]
 8008482:	f023 0320 	bic.w	r3, r3, #32
 8008486:	60d3      	str	r3, [r2, #12]
}
 8008488:	4770      	bx	lr

0800848a <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800848a:	6803      	ldr	r3, [r0, #0]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8008490:	6818      	ldr	r0, [r3, #0]
}
 8008492:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8008496:	4770      	bx	lr

08008498 <uart_stm32_irq_is_pending>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008498:	6803      	ldr	r3, [r0, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 80084a0:	0691      	lsls	r1, r2, #26
 80084a2:	d502      	bpl.n	80084aa <uart_stm32_irq_is_pending+0x12>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80084a4:	68da      	ldr	r2, [r3, #12]
	return ((LL_USART_IsActiveFlag_RXNE(UartInstance) &&
 80084a6:	0692      	lsls	r2, r2, #26
 80084a8:	d407      	bmi.n	80084ba <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80084aa:	6818      	ldr	r0, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 80084ac:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80084b0:	d004      	beq.n	80084bc <uart_stm32_irq_is_pending+0x24>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 80084b2:	68d8      	ldr	r0, [r3, #12]
		(LL_USART_IsActiveFlag_TC(UartInstance) &&
 80084b4:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80084b8:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 80084ba:	2001      	movs	r0, #1
}
 80084bc:	4770      	bx	lr

080084be <uart_stm32_irq_update>:
}
 80084be:	2001      	movs	r0, #1
 80084c0:	4770      	bx	lr

080084c2 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 80084c2:	6883      	ldr	r3, [r0, #8]
	data->user_data = cb_data;
 80084c4:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 80084c8:	4770      	bx	lr

080084ca <uart_stm32_isr>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 80084ca:	6882      	ldr	r2, [r0, #8]
	if (data->user_cb) {
 80084cc:	6893      	ldr	r3, [r2, #8]
 80084ce:	b10b      	cbz	r3, 80084d4 <uart_stm32_isr+0xa>
		data->user_cb(data->user_data);
 80084d0:	68d0      	ldr	r0, [r2, #12]
 80084d2:	4718      	bx	r3
}
 80084d4:	4770      	bx	lr

080084d6 <uart_stm32_irq_config_func_USART_2>:
#ifdef CONFIG_UART_1
STM32_UART_INIT(USART_1)
#endif	/* CONFIG_UART_1 */

#ifdef CONFIG_UART_2
STM32_UART_INIT(USART_2)
 80084d6:	b508      	push	{r3, lr}
 80084d8:	2200      	movs	r2, #0
 80084da:	2026      	movs	r0, #38	; 0x26
 80084dc:	4611      	mov	r1, r2
 80084de:	f7fa ff71 	bl	80033c4 <z_arm_irq_priority_set>
 80084e2:	2026      	movs	r0, #38	; 0x26
 80084e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80084e8:	f7fa bf5c 	b.w	80033a4 <arch_irq_enable>

080084ec <uart_stm32_set_baudrate>:
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80084ec:	6803      	ldr	r3, [r0, #0]
{
 80084ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084f0:	460d      	mov	r5, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80084f2:	6899      	ldr	r1, [r3, #8]
	if (clock_control_get_rate(data->clock,
 80084f4:	6883      	ldr	r3, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80084f6:	f851 4b0c 	ldr.w	r4, [r1], #12
	if (clock_control_get_rate(data->clock,
 80084fa:	6858      	ldr	r0, [r3, #4]
 80084fc:	6843      	ldr	r3, [r0, #4]
 80084fe:	aa01      	add	r2, sp, #4
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	4798      	blx	r3
 8008504:	2800      	cmp	r0, #0
 8008506:	db12      	blt.n	800852e <uart_stm32_set_baudrate+0x42>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8008508:	9b01      	ldr	r3, [sp, #4]
 800850a:	2264      	movs	r2, #100	; 0x64
 800850c:	2119      	movs	r1, #25
 800850e:	4359      	muls	r1, r3
 8008510:	00ad      	lsls	r5, r5, #2
 8008512:	fbb1 f1f5 	udiv	r1, r1, r5
 8008516:	fbb1 f0f2 	udiv	r0, r1, r2
 800851a:	fb02 1310 	mls	r3, r2, r0, r1
 800851e:	011b      	lsls	r3, r3, #4
 8008520:	3332      	adds	r3, #50	; 0x32
 8008522:	fbb3 f3f2 	udiv	r3, r3, r2
 8008526:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800852a:	b29b      	uxth	r3, r3
 800852c:	60a3      	str	r3, [r4, #8]
}
 800852e:	b003      	add	sp, #12
 8008530:	bd30      	pop	{r4, r5, pc}

08008532 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8008532:	6883      	ldr	r3, [r0, #8]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008538:	6803      	ldr	r3, [r0, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800853e:	68d3      	ldr	r3, [r2, #12]
 8008540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8008544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008548:	d023      	beq.n	8008592 <uart_stm32_config_get+0x60>
		return UART_CFG_PARITY_NONE;
 800854a:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 800854e:	4243      	negs	r3, r0
 8008550:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8008552:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8008554:	6913      	ldr	r3, [r2, #16]
 8008556:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800855a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800855e:	d01a      	beq.n	8008596 <uart_stm32_config_get+0x64>
 8008560:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008564:	d019      	beq.n	800859a <uart_stm32_config_get+0x68>
 8008566:	2b00      	cmp	r3, #0
		return UART_CFG_STOP_BITS_2;
 8008568:	bf0c      	ite	eq
 800856a:	2301      	moveq	r3, #1
 800856c:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800856e:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8008570:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 8008572:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		return UART_CFG_DATA_BITS_8;
 8008576:	bf14      	ite	ne
 8008578:	2304      	movne	r3, #4
 800857a:	2303      	moveq	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800857c:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800857e:	6953      	ldr	r3, [r2, #20]
 8008580:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8008584:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8008588:	4253      	negs	r3, r2
 800858a:	4153      	adcs	r3, r2
 800858c:	71cb      	strb	r3, [r1, #7]
}
 800858e:	2000      	movs	r0, #0
 8008590:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 8008592:	2302      	movs	r3, #2
 8008594:	e7dd      	b.n	8008552 <uart_stm32_config_get+0x20>
		return UART_CFG_STOP_BITS_0_5;
 8008596:	2300      	movs	r3, #0
 8008598:	e7e9      	b.n	800856e <uart_stm32_config_get+0x3c>
		return UART_CFG_STOP_BITS_1_5;
 800859a:	2302      	movs	r3, #2
 800859c:	e7e7      	b.n	800856e <uart_stm32_config_get+0x3c>

0800859e <HAL_TIM_PWM_MspInit>:
 800859e:	4770      	bx	lr

080085a0 <HAL_TIM_PWM_Init>:
{
 80085a0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80085a2:	4604      	mov	r4, r0
 80085a4:	b1a0      	cbz	r0, 80085d0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80085a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80085aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80085ae:	b91b      	cbnz	r3, 80085b8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80085b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80085b4:	f7ff fff3 	bl	800859e <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80085b8:	2302      	movs	r3, #2
 80085ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085be:	6820      	ldr	r0, [r4, #0]
 80085c0:	1d21      	adds	r1, r4, #4
 80085c2:	f7fc f92f 	bl	8004824 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80085c6:	2301      	movs	r3, #1
 80085c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80085cc:	2000      	movs	r0, #0
}
 80085ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80085d0:	2001      	movs	r0, #1
 80085d2:	e7fc      	b.n	80085ce <HAL_TIM_PWM_Init+0x2e>

080085d4 <HAL_TIM_PWM_ConfigChannel>:
{
 80085d4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80085d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80085da:	2b01      	cmp	r3, #1
{
 80085dc:	4604      	mov	r4, r0
 80085de:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80085e2:	d025      	beq.n	8008630 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80085e4:	2301      	movs	r3, #1
 80085e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80085ea:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80085ee:	2a0c      	cmp	r2, #12
 80085f0:	d818      	bhi.n	8008624 <HAL_TIM_PWM_ConfigChannel+0x50>
 80085f2:	e8df f002 	tbb	[pc, r2]
 80085f6:	1707      	.short	0x1707
 80085f8:	171e1717 	.word	0x171e1717
 80085fc:	172f1717 	.word	0x172f1717
 8008600:	1717      	.short	0x1717
 8008602:	40          	.byte	0x40
 8008603:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008604:	6820      	ldr	r0, [r4, #0]
 8008606:	f7fc f87f 	bl	8004708 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800860a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800860c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800860e:	699a      	ldr	r2, [r3, #24]
 8008610:	f042 0208 	orr.w	r2, r2, #8
 8008614:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008616:	699a      	ldr	r2, [r3, #24]
 8008618:	f022 0204 	bic.w	r2, r2, #4
 800861c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800861e:	699a      	ldr	r2, [r3, #24]
 8008620:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008622:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8008624:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8008626:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008628:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800862c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8008630:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008632:	6820      	ldr	r0, [r4, #0]
 8008634:	f7fc f95c 	bl	80048f0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008638:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800863a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800863c:	699a      	ldr	r2, [r3, #24]
 800863e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008644:	699a      	ldr	r2, [r3, #24]
 8008646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800864a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800864c:	699a      	ldr	r2, [r3, #24]
 800864e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008652:	e7e6      	b.n	8008622 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008654:	6820      	ldr	r0, [r4, #0]
 8008656:	f7fc f889 	bl	800476c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800865a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800865c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800865e:	69da      	ldr	r2, [r3, #28]
 8008660:	f042 0208 	orr.w	r2, r2, #8
 8008664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008666:	69da      	ldr	r2, [r3, #28]
 8008668:	f022 0204 	bic.w	r2, r2, #4
 800866c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800866e:	69da      	ldr	r2, [r3, #28]
 8008670:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008672:	61da      	str	r2, [r3, #28]
      break;
 8008674:	e7d6      	b.n	8008624 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008676:	6820      	ldr	r0, [r4, #0]
 8008678:	f7fc f8ae 	bl	80047d8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800867c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800867e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008680:	69da      	ldr	r2, [r3, #28]
 8008682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008686:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008688:	69da      	ldr	r2, [r3, #28]
 800868a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800868e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008690:	69da      	ldr	r2, [r3, #28]
 8008692:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008696:	e7ec      	b.n	8008672 <HAL_TIM_PWM_ConfigChannel+0x9e>

08008698 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008698:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800869a:	f001 011f 	and.w	r1, r1, #31
{
 800869e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086a0:	2401      	movs	r4, #1
 80086a2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80086a4:	ea23 0304 	bic.w	r3, r3, r4
 80086a8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086aa:	6a03      	ldr	r3, [r0, #32]
 80086ac:	408a      	lsls	r2, r1
 80086ae:	431a      	orrs	r2, r3
 80086b0:	6202      	str	r2, [r0, #32]
}
 80086b2:	bd10      	pop	{r4, pc}

080086b4 <HAL_TIM_PWM_Start>:
 80086b4:	f7fc b952 	b.w	800495c <HAL_TIM_OC_Start>

080086b8 <arch_system_halt>:
	__asm__ volatile(
 80086b8:	f04f 0210 	mov.w	r2, #16
 80086bc:	f3ef 8311 	mrs	r3, BASEPRI
 80086c0:	f382 8811 	msr	BASEPRI, r2
 80086c4:	f3bf 8f6f 	isb	sy
	 */

	(void)arch_irq_lock();
	for (;;) {
		/* Spin endlessly */
	}
 80086c8:	e7fe      	b.n	80086c8 <arch_system_halt+0x10>

080086ca <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 80086ca:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 80086cc:	f7ff fff4 	bl	80086b8 <arch_system_halt>

080086d0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	4605      	mov	r5, r0
 80086d4:	460e      	mov	r6, r1
	return z_impl_k_current_get();
 80086d6:	f7fc ffa1 	bl	800561c <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
 80086da:	4631      	mov	r1, r6
 80086dc:	4604      	mov	r4, r0
 80086de:	4628      	mov	r0, r5
 80086e0:	f7ff fff3 	bl	80086ca <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
 80086e4:	4620      	mov	r0, r4
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
 80086e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80086ea:	f7fa bff1 	b.w	80036d0 <z_impl_k_thread_abort>

080086ee <z_impl_k_mutex_init>:
	mutex->owner = NULL;
 80086ee:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
 80086f0:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80086f4:	e9c0 0000 	strd	r0, r0, [r0]
}
 80086f8:	4770      	bx	lr

080086fa <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
 80086fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086fe:	4604      	mov	r4, r0
 8008700:	460f      	mov	r7, r1
 8008702:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 8008704:	f100 0508 	add.w	r5, r0, #8
 8008708:	f04f 0210 	mov.w	r2, #16
 800870c:	f3ef 8611 	mrs	r6, BASEPRI
 8008710:	f382 8811 	msr	BASEPRI, r2
 8008714:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
 8008718:	b1db      	cbz	r3, 8008752 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
 800871a:	2008      	movs	r0, #8
 800871c:	f7fd fb22 	bl	8005d64 <z_thread_malloc>
		if (anode == NULL) {
 8008720:	b938      	cbnz	r0, 8008732 <queue_insert+0x38>
	__asm__ volatile(
 8008722:	f386 8811 	msr	BASEPRI, r6
 8008726:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
 800872a:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
 800872e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
 8008732:	2301      	movs	r3, #1
		anode->data = data;
 8008734:	f8c0 8004 	str.w	r8, [r0, #4]
 8008738:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
 800873a:	6803      	ldr	r3, [r0, #0]
 800873c:	f003 0203 	and.w	r2, r3, #3
 8008740:	b95f      	cbnz	r7, 800875a <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	4313      	orrs	r3, r2
 8008746:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 8008748:	6863      	ldr	r3, [r4, #4]
	list->head = node;
 800874a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 800874c:	b973      	cbnz	r3, 800876c <queue_insert+0x72>
	list->tail = node;
 800874e:	6060      	str	r0, [r4, #4]
 8008750:	e00c      	b.n	800876c <queue_insert+0x72>
	node->next_and_flags = flags;
 8008752:	f8c8 3000 	str.w	r3, [r8]
 8008756:	4640      	mov	r0, r8
 8008758:	e7ef      	b.n	800873a <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 800875a:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 800875c:	f033 0303 	bics.w	r3, r3, #3
 8008760:	d114      	bne.n	800878c <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
 8008762:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
 8008764:	6862      	ldr	r2, [r4, #4]
 8008766:	b95a      	cbnz	r2, 8008780 <queue_insert+0x86>
	list->head = node;
 8008768:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
 800876c:	2104      	movs	r1, #4
 800876e:	4628      	mov	r0, r5
 8008770:	f000 faf7 	bl	8008d62 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
 8008774:	4628      	mov	r0, r5
 8008776:	4631      	mov	r1, r6
 8008778:	f000 f8b9 	bl	80088ee <z_reschedule>
	return 0;
 800877c:	2000      	movs	r0, #0
 800877e:	e7d6      	b.n	800872e <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8008780:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	4303      	orrs	r3, r0
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	e7e0      	b.n	800874e <queue_insert+0x54>
 800878c:	4313      	orrs	r3, r2
 800878e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8008790:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	4318      	orrs	r0, r3
 8008798:	6038      	str	r0, [r7, #0]
 800879a:	e7e7      	b.n	800876c <queue_insert+0x72>

0800879c <z_queue_node_peek>:
{
 800879c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
 800879e:	4604      	mov	r4, r0
 80087a0:	b130      	cbz	r0, 80087b0 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 80087a2:	6802      	ldr	r2, [r0, #0]
 80087a4:	0793      	lsls	r3, r2, #30
 80087a6:	d003      	beq.n	80087b0 <z_queue_node_peek+0x14>
		ret = anode->data;
 80087a8:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 80087aa:	b109      	cbz	r1, 80087b0 <z_queue_node_peek+0x14>
			k_free(anode);
 80087ac:	f000 fb19 	bl	8008de2 <k_free>
}
 80087b0:	4620      	mov	r0, r4
 80087b2:	bd10      	pop	{r4, pc}

080087b4 <z_impl_k_queue_init>:
	list->head = NULL;
 80087b4:	2300      	movs	r3, #0
	list->tail = NULL;
 80087b6:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
 80087ba:	f100 0308 	add.w	r3, r0, #8
 80087be:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 80087c2:	4770      	bx	lr

080087c4 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
 80087c4:	460a      	mov	r2, r1
 80087c6:	2300      	movs	r3, #0
 80087c8:	6841      	ldr	r1, [r0, #4]
 80087ca:	f7ff bf96 	b.w	80086fa <queue_insert>

080087ce <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
 80087ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d2:	4604      	mov	r4, r0
 80087d4:	b086      	sub	sp, #24
 80087d6:	460d      	mov	r5, r1
	__asm__ volatile(
 80087d8:	f04f 0310 	mov.w	r3, #16
 80087dc:	f3ef 8711 	mrs	r7, BASEPRI
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
 80087e8:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 80087ea:	b188      	cbz	r0, 8008810 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 80087ec:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 80087ee:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 80087f0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 80087f4:	4290      	cmp	r0, r2
	list->head = node;
 80087f6:	6023      	str	r3, [r4, #0]
	list->tail = node;
 80087f8:	bf08      	it	eq
 80087fa:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 80087fc:	2101      	movs	r1, #1
 80087fe:	f7ff ffcd 	bl	800879c <z_queue_node_peek>
	__asm__ volatile(
 8008802:	f387 8811 	msr	BASEPRI, r7
 8008806:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
 800880a:	b006      	add	sp, #24
 800880c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
 8008810:	2900      	cmp	r1, #0
 8008812:	d0f6      	beq.n	8008802 <z_impl_k_queue_get+0x34>
 8008814:	f387 8811 	msr	BASEPRI, r7
 8008818:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
 800881c:	2104      	movs	r1, #4
 800881e:	4602      	mov	r2, r0
 8008820:	4623      	mov	r3, r4
 8008822:	eb0d 0001 	add.w	r0, sp, r1
 8008826:	f7fd f97f 	bl	8005b28 <k_poll_event_init>
	if (timeout != K_FOREVER) {
 800882a:	1c6a      	adds	r2, r5, #1
 800882c:	d002      	beq.n	8008834 <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
 800882e:	f000 f99e 	bl	8008b6e <z_impl_k_uptime_get>
 8008832:	4606      	mov	r6, r0
{
 8008834:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
 8008836:	9b04      	ldr	r3, [sp, #16]
 8008838:	f36f 3310 	bfc	r3, #12, #5
 800883c:	9304      	str	r3, [sp, #16]
	return z_impl_k_poll(events, num_events, timeout);
 800883e:	2101      	movs	r1, #1
 8008840:	1bea      	subs	r2, r5, r7
 8008842:	a801      	add	r0, sp, #4
 8008844:	f7fd f984 	bl	8005b50 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
 8008848:	b118      	cbz	r0, 8008852 <z_impl_k_queue_get+0x84>
 800884a:	300b      	adds	r0, #11
 800884c:	d001      	beq.n	8008852 <z_impl_k_queue_get+0x84>
			return NULL;
 800884e:	2000      	movs	r0, #0
 8008850:	e7db      	b.n	800880a <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
 8008852:	f04f 0310 	mov.w	r3, #16
 8008856:	f3ef 8811 	mrs	r8, BASEPRI
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
 8008862:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
 8008864:	b138      	cbz	r0, 8008876 <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8008866:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8008868:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 800886a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 800886e:	4290      	cmp	r0, r2
	list->head = node;
 8008870:	6023      	str	r3, [r4, #0]
	list->tail = node;
 8008872:	bf08      	it	eq
 8008874:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
 8008876:	2101      	movs	r1, #1
 8008878:	f7ff ff90 	bl	800879c <z_queue_node_peek>
	__asm__ volatile(
 800887c:	f388 8811 	msr	BASEPRI, r8
 8008880:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
 8008884:	2800      	cmp	r0, #0
 8008886:	d1c0      	bne.n	800880a <z_impl_k_queue_get+0x3c>
 8008888:	1c6b      	adds	r3, r5, #1
 800888a:	d0d4      	beq.n	8008836 <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
 800888c:	f000 f96f 	bl	8008b6e <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
 8008890:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
 8008892:	42bd      	cmp	r5, r7
 8008894:	dacf      	bge.n	8008836 <z_impl_k_queue_get+0x68>
 8008896:	e7da      	b.n	800884e <z_impl_k_queue_get+0x80>

08008898 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8008898:	7b43      	ldrb	r3, [r0, #13]
 800889a:	06db      	lsls	r3, r3, #27
 800889c:	bf03      	ittte	eq
 800889e:	6980      	ldreq	r0, [r0, #24]
 80088a0:	fab0 f080 	clzeq	r0, r0
 80088a4:	0940      	lsreq	r0, r0, #5
 80088a6:	2000      	movne	r0, #0
}
 80088a8:	4770      	bx	lr

080088aa <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
 80088aa:	f990 000e 	ldrsb.w	r0, [r0, #14]
 80088ae:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
 80088b2:	4298      	cmp	r0, r3
 80088b4:	bfac      	ite	ge
 80088b6:	2000      	movge	r0, #0
 80088b8:	2001      	movlt	r0, #1
 80088ba:	4770      	bx	lr

080088bc <z_unpend_thread_no_timeout>:
{
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4604      	mov	r4, r0
	__asm__ volatile(
 80088c0:	f04f 0310 	mov.w	r3, #16
 80088c4:	f3ef 8511 	mrs	r5, BASEPRI
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 80088d0:	4601      	mov	r1, r0
 80088d2:	6880      	ldr	r0, [r0, #8]
 80088d4:	f7fc fc26 	bl	8005124 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80088d8:	7b63      	ldrb	r3, [r4, #13]
 80088da:	f023 0302 	bic.w	r3, r3, #2
 80088de:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 80088e0:	f385 8811 	msr	BASEPRI, r5
 80088e4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 80088e8:	2300      	movs	r3, #0
 80088ea:	60a3      	str	r3, [r4, #8]
}
 80088ec:	bd38      	pop	{r3, r4, r5, pc}

080088ee <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80088ee:	b921      	cbnz	r1, 80088fa <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088f0:	f3ef 8005 	mrs	r0, IPSR
 80088f4:	b908      	cbnz	r0, 80088fa <z_reschedule+0xc>
 80088f6:	f7fa bd01 	b.w	80032fc <arch_swap>
 80088fa:	f381 8811 	msr	BASEPRI, r1
 80088fe:	f3bf 8f6f 	isb	sy
}
 8008902:	4770      	bx	lr

08008904 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8008904:	4603      	mov	r3, r0
 8008906:	b920      	cbnz	r0, 8008912 <z_reschedule_irqlock+0xe>
 8008908:	f3ef 8205 	mrs	r2, IPSR
 800890c:	b90a      	cbnz	r2, 8008912 <z_reschedule_irqlock+0xe>
 800890e:	f7fa bcf5 	b.w	80032fc <arch_swap>
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
}
 800891a:	4770      	bx	lr

0800891c <z_reschedule_unlocked>:
	__asm__ volatile(
 800891c:	f04f 0310 	mov.w	r3, #16
 8008920:	f3ef 8011 	mrs	r0, BASEPRI
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800892c:	f7ff bfea 	b.w	8008904 <z_reschedule_irqlock>

08008930 <z_unpend_thread>:
{
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	4604      	mov	r4, r0
 8008934:	f04f 0310 	mov.w	r3, #16
 8008938:	f3ef 8511 	mrs	r5, BASEPRI
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8008944:	4601      	mov	r1, r0
 8008946:	6880      	ldr	r0, [r0, #8]
 8008948:	f7fc fbec 	bl	8005124 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800894c:	7b63      	ldrb	r3, [r4, #13]
 800894e:	f023 0302 	bic.w	r3, r3, #2
 8008952:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 8008954:	f385 8811 	msr	BASEPRI, r5
 8008958:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 800895c:	2300      	movs	r3, #0
 800895e:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
 8008960:	f104 0018 	add.w	r0, r4, #24
}
 8008964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008968:	f000 b8bd 	b.w	8008ae6 <z_abort_timeout>

0800896c <z_priq_dumb_best>:
	return list->head == list;
 800896c:	6803      	ldr	r3, [r0, #0]
}
 800896e:	4298      	cmp	r0, r3
 8008970:	bf14      	ite	ne
 8008972:	4618      	movne	r0, r3
 8008974:	2000      	moveq	r0, #0
 8008976:	4770      	bx	lr

08008978 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
 8008978:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 8008980:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
 8008984:	b1cb      	cbz	r3, 80089ba <z_thread_timeout+0x42>
	__asm__ volatile(
 8008986:	f04f 0310 	mov.w	r3, #16
 800898a:	f3ef 8611 	mrs	r6, BASEPRI
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8008996:	4629      	mov	r1, r5
 8008998:	f850 0c10 	ldr.w	r0, [r0, #-16]
 800899c:	f7fc fbc2 	bl	8005124 <z_priq_dumb_remove>
 80089a0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 80089a4:	f023 0302 	bic.w	r3, r3, #2
 80089a8:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
 80089ac:	f386 8811 	msr	BASEPRI, r6
 80089b0:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 80089b4:	2300      	movs	r3, #0
 80089b6:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80089ba:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 80089be:	f023 0314 	bic.w	r3, r3, #20
 80089c2:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
 80089c6:	4628      	mov	r0, r5
 80089c8:	f7ff ff66 	bl	8008898 <z_is_thread_ready>
 80089cc:	b120      	cbz	r0, 80089d8 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
 80089ce:	4628      	mov	r0, r5
}
 80089d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80089d4:	f7fc bbf6 	b.w	80051c4 <z_add_thread_to_ready_q>
 80089d8:	bd70      	pop	{r4, r5, r6, pc}

080089da <z_unpend_first_thread>:
{
 80089da:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80089dc:	f04f 0310 	mov.w	r3, #16
 80089e0:	f3ef 8211 	mrs	r2, BASEPRI
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
 80089ec:	f7ff ffbe 	bl	800896c <z_priq_dumb_best>
 80089f0:	4604      	mov	r4, r0
	__asm__ volatile(
 80089f2:	f382 8811 	msr	BASEPRI, r2
 80089f6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
 80089fa:	b1c8      	cbz	r0, 8008a30 <z_unpend_first_thread+0x56>
	__asm__ volatile(
 80089fc:	f04f 0310 	mov.w	r3, #16
 8008a00:	f3ef 8511 	mrs	r5, BASEPRI
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8008a0c:	4601      	mov	r1, r0
 8008a0e:	6880      	ldr	r0, [r0, #8]
 8008a10:	f7fc fb88 	bl	8005124 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8008a14:	7b63      	ldrb	r3, [r4, #13]
 8008a16:	f023 0302 	bic.w	r3, r3, #2
 8008a1a:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 8008a1c:	f385 8811 	msr	BASEPRI, r5
 8008a20:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	60a3      	str	r3, [r4, #8]
 8008a28:	f104 0018 	add.w	r0, r4, #24
 8008a2c:	f000 f85b 	bl	8008ae6 <z_abort_timeout>
}
 8008a30:	4620      	mov	r0, r4
 8008a32:	bd38      	pop	{r3, r4, r5, pc}

08008a34 <z_unpend_all>:
{
 8008a34:	b570      	push	{r4, r5, r6, lr}
 8008a36:	4606      	mov	r6, r0
	int need_sched = 0;
 8008a38:	2500      	movs	r5, #0
 8008a3a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008a3c:	42a6      	cmp	r6, r4
 8008a3e:	d000      	beq.n	8008a42 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8008a40:	b90c      	cbnz	r4, 8008a46 <z_unpend_all+0x12>
}
 8008a42:	4628      	mov	r0, r5
 8008a44:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
 8008a46:	4620      	mov	r0, r4
 8008a48:	f7ff ff72 	bl	8008930 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f7ff ff23 	bl	8008898 <z_is_thread_ready>
		need_sched = 1;
 8008a52:	2501      	movs	r5, #1
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d0f0      	beq.n	8008a3a <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f7fc fbb3 	bl	80051c4 <z_add_thread_to_ready_q>
 8008a5e:	e7ec      	b.n	8008a3a <z_unpend_all+0x6>

08008a60 <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
 8008a60:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 8008a64:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 8008a68:	e9c0 0000 	strd	r0, r0, [r0]
 8008a6c:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
 8008a70:	4770      	bx	lr

08008a72 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8008a72:	7b43      	ldrb	r3, [r0, #13]
 8008a74:	06db      	lsls	r3, r3, #27
 8008a76:	bf03      	ittte	eq
 8008a78:	6980      	ldreq	r0, [r0, #24]
 8008a7a:	fab0 f080 	clzeq	r0, r0
 8008a7e:	0940      	lsreq	r0, r0, #5
 8008a80:	2000      	movne	r0, #0
}
 8008a82:	4770      	bx	lr

08008a84 <z_impl_k_thread_name_set>:
}
 8008a84:	f06f 0046 	mvn.w	r0, #70	; 0x46
 8008a88:	4770      	bx	lr

08008a8a <z_new_thread_init>:
{
 8008a8a:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
 8008a8c:	9c02      	ldr	r4, [sp, #8]
 8008a8e:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
 8008a90:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
 8008a92:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
 8008a94:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
 8008a96:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
 8008a98:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
 8008a9a:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
 8008a9e:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
 8008aa2:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
 8008aa6:	bd10      	pop	{r4, pc}

08008aa8 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
 8008aa8:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 8008aaa:	b510      	push	{r4, lr}
 8008aac:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 8008aae:	b103      	cbz	r3, 8008ab2 <z_thread_single_abort+0xa>
		thread->fn_abort();
 8008ab0:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f7ff ffdd 	bl	8008a72 <z_is_thread_ready>
 8008ab8:	b138      	cbz	r0, 8008aca <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
 8008aba:	4620      	mov	r0, r4
 8008abc:	f7fc fc30 	bl	8005320 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
 8008ac0:	7b63      	ldrb	r3, [r4, #13]
 8008ac2:	f043 0308 	orr.w	r3, r3, #8
 8008ac6:	7363      	strb	r3, [r4, #13]
}
 8008ac8:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
 8008aca:	7b63      	ldrb	r3, [r4, #13]
 8008acc:	079b      	lsls	r3, r3, #30
 8008ace:	d502      	bpl.n	8008ad6 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f7ff fef3 	bl	80088bc <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
 8008ad6:	69a3      	ldr	r3, [r4, #24]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d0f1      	beq.n	8008ac0 <z_thread_single_abort+0x18>
 8008adc:	f104 0018 	add.w	r0, r4, #24
 8008ae0:	f000 f801 	bl	8008ae6 <z_abort_timeout>
 8008ae4:	e7ec      	b.n	8008ac0 <z_thread_single_abort+0x18>

08008ae6 <z_abort_timeout>:
{
 8008ae6:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008ae8:	f04f 0210 	mov.w	r2, #16
 8008aec:	f3ef 8411 	mrs	r4, BASEPRI
 8008af0:	f382 8811 	msr	BASEPRI, r2
 8008af4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8008af8:	6803      	ldr	r3, [r0, #0]
 8008afa:	b13b      	cbz	r3, 8008b0c <z_abort_timeout+0x26>
			remove_timeout(to);
 8008afc:	f7fc ff2e 	bl	800595c <remove_timeout>
			ret = 0;
 8008b00:	2000      	movs	r0, #0
	__asm__ volatile(
 8008b02:	f384 8811 	msr	BASEPRI, r4
 8008b06:	f3bf 8f6f 	isb	sy
}
 8008b0a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8008b0c:	f06f 0015 	mvn.w	r0, #21
 8008b10:	e7f7      	b.n	8008b02 <z_abort_timeout+0x1c>

08008b12 <z_get_next_timeout_expiry>:
{
 8008b12:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008b14:	f04f 0310 	mov.w	r3, #16
 8008b18:	f3ef 8411 	mrs	r4, BASEPRI
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 8008b24:	f7fc ff2e 	bl	8005984 <next_timeout>
	__asm__ volatile(
 8008b28:	f384 8811 	msr	BASEPRI, r4
 8008b2c:	f3bf 8f6f 	isb	sy
}
 8008b30:	bd10      	pop	{r4, pc}

08008b32 <z_set_timeout_expiry>:
{
 8008b32:	b570      	push	{r4, r5, r6, lr}
 8008b34:	4604      	mov	r4, r0
 8008b36:	460e      	mov	r6, r1
	__asm__ volatile(
 8008b38:	f04f 0310 	mov.w	r3, #16
 8008b3c:	f3ef 8511 	mrs	r5, BASEPRI
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
 8008b48:	f7fc ff1c 	bl	8005984 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8008b4c:	2801      	cmp	r0, #1
 8008b4e:	dd05      	ble.n	8008b5c <z_set_timeout_expiry+0x2a>
 8008b50:	42a0      	cmp	r0, r4
 8008b52:	dd03      	ble.n	8008b5c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
 8008b54:	4631      	mov	r1, r6
 8008b56:	4620      	mov	r0, r4
 8008b58:	f7fa fb2a 	bl	80031b0 <z_clock_set_timeout>
	__asm__ volatile(
 8008b5c:	f385 8811 	msr	BASEPRI, r5
 8008b60:	f3bf 8f6f 	isb	sy
}
 8008b64:	bd70      	pop	{r4, r5, r6, pc}

08008b66 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
 8008b66:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
 8008b68:	f7fc ffc0 	bl	8005aec <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
 8008b6c:	bd08      	pop	{r3, pc}

08008b6e <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
 8008b6e:	b508      	push	{r3, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
 8008b70:	f7fc ffbc 	bl	8005aec <z_tick_get>
			return t / (from_hz / to_hz);
 8008b74:	220a      	movs	r2, #10
 8008b76:	2300      	movs	r3, #0
 8008b78:	f7f7 fb06 	bl	8000188 <__aeabi_uldivmod>
}
 8008b7c:	bd08      	pop	{r3, pc}

08008b7e <clear_event_registrations>:
	while (num_events--) {
 8008b7e:	2314      	movs	r3, #20
{
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
 8008b86:	2400      	movs	r4, #0
 8008b88:	2601      	movs	r6, #1
	while (num_events--) {
 8008b8a:	4281      	cmp	r1, r0
 8008b8c:	d100      	bne.n	8008b90 <clear_event_registrations+0x12>
}
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
 8008b90:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
 8008b94:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
 8008b98:	f003 030f 	and.w	r3, r3, #15
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	d80d      	bhi.n	8008bbc <clear_event_registrations+0x3e>
 8008ba0:	fa06 f303 	lsl.w	r3, r6, r3
 8008ba4:	f013 0f16 	tst.w	r3, #22
 8008ba8:	d008      	beq.n	8008bbc <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
 8008baa:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8008bae:	b12b      	cbz	r3, 8008bbc <clear_event_registrations+0x3e>
	node->prev->next = node->next;
 8008bb0:	f851 5c10 	ldr.w	r5, [r1, #-16]
 8008bb4:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
 8008bb6:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
 8008bb8:	e941 4405 	strd	r4, r4, [r1, #-20]
 8008bbc:	f382 8811 	msr	BASEPRI, r2
 8008bc0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8008bc4:	f04f 0310 	mov.w	r3, #16
 8008bc8:	f3ef 8211 	mrs	r2, BASEPRI
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	3914      	subs	r1, #20
 8008bd6:	e7d8      	b.n	8008b8a <clear_event_registrations+0xc>

08008bd8 <signal_poll_event>:
{
 8008bd8:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
 8008bda:	6884      	ldr	r4, [r0, #8]
{
 8008bdc:	4605      	mov	r5, r0
 8008bde:	460e      	mov	r6, r1
	if (poller) {
 8008be0:	b19c      	cbz	r4, 8008c0a <signal_poll_event+0x32>
		if (poller->cb != NULL) {
 8008be2:	68a3      	ldr	r3, [r4, #8]
 8008be4:	b95b      	cbnz	r3, 8008bfe <signal_poll_event+0x26>
		poller->is_polling = false;
 8008be6:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
 8008be8:	4618      	mov	r0, r3
	event->poller = NULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	60ab      	str	r3, [r5, #8]
	event->state |= state;
 8008bee:	68eb      	ldr	r3, [r5, #12]
 8008bf0:	f3c3 3204 	ubfx	r2, r3, #12, #5
 8008bf4:	4316      	orrs	r6, r2
 8008bf6:	f366 3310 	bfi	r3, r6, #12, #5
 8008bfa:	60eb      	str	r3, [r5, #12]
	return retcode;
 8008bfc:	e004      	b.n	8008c08 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
 8008bfe:	4798      	blx	r3
		poller->is_polling = false;
 8008c00:	2300      	movs	r3, #0
		if (retcode < 0) {
 8008c02:	2800      	cmp	r0, #0
		poller->is_polling = false;
 8008c04:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
 8008c06:	daf0      	bge.n	8008bea <signal_poll_event+0x12>
}
 8008c08:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	e7ed      	b.n	8008bea <signal_poll_event+0x12>

08008c0e <k_poll_poller_cb>:
{
 8008c0e:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
 8008c10:	6883      	ldr	r3, [r0, #8]
 8008c12:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
 8008c14:	7b63      	ldrb	r3, [r4, #13]
 8008c16:	079a      	lsls	r2, r3, #30
{
 8008c18:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
 8008c1a:	d401      	bmi.n	8008c20 <k_poll_poller_cb+0x12>
		return 0;
 8008c1c:	2000      	movs	r0, #0
}
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
 8008c20:	6a23      	ldr	r3, [r4, #32]
 8008c22:	3302      	adds	r3, #2
 8008c24:	d012      	beq.n	8008c4c <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
 8008c26:	4620      	mov	r0, r4
 8008c28:	f7ff fe82 	bl	8008930 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 8008c2c:	2d08      	cmp	r5, #8
 8008c2e:	bf0c      	ite	eq
 8008c30:	f06f 0303 	mvneq.w	r3, #3
 8008c34:	2300      	movne	r3, #0
 8008c36:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8008c38:	7b63      	ldrb	r3, [r4, #13]
 8008c3a:	06db      	lsls	r3, r3, #27
 8008c3c:	d1ee      	bne.n	8008c1c <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
 8008c3e:	69a5      	ldr	r5, [r4, #24]
 8008c40:	2d00      	cmp	r5, #0
 8008c42:	d1eb      	bne.n	8008c1c <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
 8008c44:	4620      	mov	r0, r4
 8008c46:	f7fc fabd 	bl	80051c4 <z_add_thread_to_ready_q>
	return 0;
 8008c4a:	e7e7      	b.n	8008c1c <k_poll_poller_cb+0xe>
		return -EAGAIN;
 8008c4c:	f06f 000a 	mvn.w	r0, #10
 8008c50:	e7e5      	b.n	8008c1e <k_poll_poller_cb+0x10>

08008c52 <add_event>:
{
 8008c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c54:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8008c56:	e9d0 2300 	ldrd	r2, r3, [r0]
 8008c5a:	4290      	cmp	r0, r2
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	460d      	mov	r5, r1
 8008c60:	d106      	bne.n	8008c70 <add_event+0x1e>
	node->prev = list->tail;
 8008c62:	6863      	ldr	r3, [r4, #4]
 8008c64:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
 8008c66:	6863      	ldr	r3, [r4, #4]
	node->next = list;
 8008c68:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
 8008c6a:	601d      	str	r5, [r3, #0]
	list->tail = node;
 8008c6c:	6065      	str	r5, [r4, #4]
}
 8008c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d0f6      	beq.n	8008c62 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	6879      	ldr	r1, [r7, #4]
 8008c78:	6858      	ldr	r0, [r3, #4]
 8008c7a:	f7ff fe16 	bl	80088aa <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d1ef      	bne.n	8008c62 <add_event+0x10>
	return list->head == list;
 8008c82:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008c84:	42b4      	cmp	r4, r6
 8008c86:	d0ec      	beq.n	8008c62 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8008c88:	2e00      	cmp	r6, #0
 8008c8a:	d0ea      	beq.n	8008c62 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
 8008c8c:	68b3      	ldr	r3, [r6, #8]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	6859      	ldr	r1, [r3, #4]
 8008c92:	f7ff fe0a 	bl	80088aa <z_is_t1_higher_prio_than_t2>
 8008c96:	b128      	cbz	r0, 8008ca4 <add_event+0x52>
	node->prev = successor->prev;
 8008c98:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
 8008c9a:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
 8008c9e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8008ca0:	6075      	str	r5, [r6, #4]
			return;
 8008ca2:	e7e4      	b.n	8008c6e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
 8008ca4:	6863      	ldr	r3, [r4, #4]
 8008ca6:	429e      	cmp	r6, r3
 8008ca8:	d0db      	beq.n	8008c62 <add_event+0x10>
 8008caa:	6836      	ldr	r6, [r6, #0]
 8008cac:	e7ec      	b.n	8008c88 <add_event+0x36>

08008cae <register_events>:
{
 8008cae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
 8008cb2:	f04f 0b00 	mov.w	fp, #0
{
 8008cb6:	4688      	mov	r8, r1
 8008cb8:	4615      	mov	r5, r2
 8008cba:	4699      	mov	r9, r3
 8008cbc:	4604      	mov	r4, r0
	int events_registered = 0;
 8008cbe:	465e      	mov	r6, fp
	event->poller = NULL;
 8008cc0:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
 8008cc2:	45c3      	cmp	fp, r8
 8008cc4:	db02      	blt.n	8008ccc <register_events+0x1e>
}
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ccc:	f04f 0310 	mov.w	r3, #16
 8008cd0:	f3ef 8a11 	mrs	sl, BASEPRI
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
	switch (event->type) {
 8008cdc:	7b63      	ldrb	r3, [r4, #13]
 8008cde:	f003 030f 	and.w	r3, r3, #15
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d005      	beq.n	8008cf2 <register_events+0x44>
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	d006      	beq.n	8008cf8 <register_events+0x4a>
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d118      	bne.n	8008d20 <register_events+0x72>
		if (event->signal->signaled != 0U) {
 8008cee:	6922      	ldr	r2, [r4, #16]
 8008cf0:	e000      	b.n	8008cf4 <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
 8008cf2:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
 8008cf4:	6892      	ldr	r2, [r2, #8]
 8008cf6:	e001      	b.n	8008cfc <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 8008cf8:	6922      	ldr	r2, [r4, #16]
 8008cfa:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
 8008cfc:	b182      	cbz	r2, 8008d20 <register_events+0x72>
	event->state |= state;
 8008cfe:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
 8008d00:	60a7      	str	r7, [r4, #8]
	event->state |= state;
 8008d02:	f3c2 3104 	ubfx	r1, r2, #12, #5
 8008d06:	430b      	orrs	r3, r1
 8008d08:	f363 3210 	bfi	r2, r3, #12, #5
 8008d0c:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
 8008d0e:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
 8008d10:	f38a 8811 	msr	BASEPRI, sl
 8008d14:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 8008d18:	f10b 0b01 	add.w	fp, fp, #1
 8008d1c:	3414      	adds	r4, #20
 8008d1e:	e7d0      	b.n	8008cc2 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
 8008d20:	f1b9 0f00 	cmp.w	r9, #0
 8008d24:	d1f4      	bne.n	8008d10 <register_events+0x62>
 8008d26:	782b      	ldrb	r3, [r5, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d0f1      	beq.n	8008d10 <register_events+0x62>
	switch (event->type) {
 8008d2c:	7b63      	ldrb	r3, [r4, #13]
 8008d2e:	f003 030f 	and.w	r3, r3, #15
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d007      	beq.n	8008d46 <register_events+0x98>
 8008d36:	2b04      	cmp	r3, #4
 8008d38:	d00e      	beq.n	8008d58 <register_events+0xaa>
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d109      	bne.n	8008d52 <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
 8008d3e:	462a      	mov	r2, r5
 8008d40:	4621      	mov	r1, r4
 8008d42:	6920      	ldr	r0, [r4, #16]
 8008d44:	e003      	b.n	8008d4e <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
 8008d46:	6920      	ldr	r0, [r4, #16]
 8008d48:	462a      	mov	r2, r5
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
 8008d4e:	f7ff ff80 	bl	8008c52 <add_event>
	event->poller = poller;
 8008d52:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
 8008d54:	3601      	adds	r6, #1
 8008d56:	e7db      	b.n	8008d10 <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
 8008d58:	6920      	ldr	r0, [r4, #16]
 8008d5a:	462a      	mov	r2, r5
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	3008      	adds	r0, #8
 8008d60:	e7f5      	b.n	8008d4e <register_events+0xa0>

08008d62 <z_handle_obj_poll_events>:
	return list->head == list;
 8008d62:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 8008d64:	4298      	cmp	r0, r3
 8008d66:	d009      	beq.n	8008d7c <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
 8008d68:	e9d3 2000 	ldrd	r2, r0, [r3]
 8008d6c:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
 8008d6e:	6050      	str	r0, [r2, #4]
	node->next = NULL;
 8008d70:	2200      	movs	r2, #0
	node->prev = NULL;
 8008d72:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7ff bf2e 	b.w	8008bd8 <signal_poll_event>
}
 8008d7c:	4770      	bx	lr

08008d7e <z_impl_k_poll_signal_init>:
	signal->signaled = 0U;
 8008d7e:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
 8008d80:	e9c0 0000 	strd	r0, r0, [r0]
 8008d84:	6083      	str	r3, [r0, #8]
}
 8008d86:	4770      	bx	lr

08008d88 <z_impl_k_poll_signal_check>:
	*signaled = signal->signaled;
 8008d88:	6883      	ldr	r3, [r0, #8]
 8008d8a:	600b      	str	r3, [r1, #0]
	*result = signal->result;
 8008d8c:	68c3      	ldr	r3, [r0, #12]
 8008d8e:	6013      	str	r3, [r2, #0]
}
 8008d90:	4770      	bx	lr

08008d92 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8008d92:	b508      	push	{r3, lr}
	__asm__ volatile(
 8008d94:	f04f 0210 	mov.w	r2, #16
 8008d98:	f3ef 8311 	mrs	r3, BASEPRI
 8008d9c:	f382 8811 	msr	BASEPRI, r2
 8008da0:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
 8008da4:	f7ff feb5 	bl	8008b12 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8008da8:	2101      	movs	r1, #1
 8008daa:	2802      	cmp	r0, #2
 8008dac:	bfd8      	it	le
 8008dae:	4608      	movle	r0, r1
 8008db0:	f7ff febf 	bl	8008b32 <z_set_timeout_expiry>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8008db4:	f7fa fb64 	bl	8003480 <arch_cpu_idle>
 8008db8:	e7ec      	b.n	8008d94 <idle+0x2>

08008dba <k_mem_pool_malloc>:
{
 8008dba:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 8008dbc:	2404      	movs	r4, #4
 8008dbe:	190a      	adds	r2, r1, r4
 8008dc0:	d204      	bcs.n	8008dcc <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	4669      	mov	r1, sp
 8008dc6:	f7fc ff55 	bl	8005c74 <k_mem_pool_alloc>
 8008dca:	b110      	cbz	r0, 8008dd2 <k_mem_pool_malloc+0x18>
		return NULL;
 8008dcc:	2000      	movs	r0, #0
}
 8008dce:	b002      	add	sp, #8
 8008dd0:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	a901      	add	r1, sp, #4
 8008dd6:	9800      	ldr	r0, [sp, #0]
 8008dd8:	f7ff f8b4 	bl	8007f44 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
 8008ddc:	9800      	ldr	r0, [sp, #0]
 8008dde:	3004      	adds	r0, #4
 8008de0:	e7f5      	b.n	8008dce <k_mem_pool_malloc+0x14>

08008de2 <k_free>:
	if (ptr != NULL) {
 8008de2:	b110      	cbz	r0, 8008dea <k_free+0x8>
		k_mem_pool_free_id(ptr);
 8008de4:	3804      	subs	r0, #4
 8008de6:	f7fc bf91 	b.w	8005d0c <k_mem_pool_free_id>
}
 8008dea:	4770      	bx	lr

08008dec <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
 8008dec:	4770      	bx	lr
